/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth
 */

@interface CBPeripheral : NSObject <NSCopying> {
    NSNumber * _RSSI;
    struct __CFUUID { } * _UUID;
    NSMutableDictionary * _attributes;
    CBCentralManager * _centralManager;
    <CBPeripheralDelegate> * _delegate;
    NSUUID * _identifier;
    BOOL  _isConnectedToSystem;
    BOOL  _isPaired;
    NSString * _name;
    NSMutableArray * _services;
    long long  _state;
    unsigned long long  mtuLength;
}

@property (atomic, readwrite, retain) NSNumber *RSSI;
@property (nonatomic, readonly) const struct __CFUUID { }*UUID;
@property (nonatomic, readwrite) <CBPeripheralDelegate> *delegate;
@property (nonatomic, readonly) NSUUID *identifier;
@property (atomic, readonly) BOOL isConnected;
@property (nonatomic, readonly) BOOL isConnectedToSystem;
@property (nonatomic, readonly) BOOL isPaired;
@property (atomic, readwrite) unsigned long long mtuLength;
@property (atomic, readwrite, retain) NSString *name;
@property (atomic, readwrite, retain) NSArray *services;
@property (atomic, readwrite) long long state;

- (id)RSSI;
- (const struct __CFUUID { }*)UUID;
- (void)acceptPairing:(BOOL)arg1 ofType:(id)arg2 withPasskey:(id)arg3;
- (id)attributeForHandle:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)discoverCharacteristics:(id)arg1 forService:(id)arg2;
- (void)discoverDescriptorsForCharacteristic:(id)arg1;
- (void)discoverIncludedServices:(id)arg1 forService:(id)arg2;
- (void)discoverServices:(id)arg1;
- (void)handleAttributeEvent:(id)arg1 args:(id)arg2 attributeSelector:(SEL)arg3 delegateSelector:(SEL)arg4;
- (void)handleCharacteristicDescriptorsDiscovered:(id)arg1;
- (void)handleCharacteristicEvent:(id)arg1 characteristicSelector:(SEL)arg2 delegateSelector:(SEL)arg3;
- (void)handleCharacteristicValueNotifying:(id)arg1;
- (void)handleCharacteristicValueUpdated:(id)arg1;
- (void)handleCharacteristicValueWritten:(id)arg1;
- (void)handleConnection:(BOOL)arg1;
- (void)handleConnectionStateUpdated:(BOOL)arg1;
- (void)handleDescriptorEvent:(id)arg1 descriptorSelector:(SEL)arg2 delegateSelector:(SEL)arg3;
- (void)handleDescriptorValueUpdated:(id)arg1;
- (void)handleDescriptorValueWritten:(id)arg1;
- (void)handleDisconnection;
- (void)handleMsg:(int)arg1 args:(id)arg2;
- (void)handleNameUpdated:(id)arg1;
- (void)handlePairingCompleted:(id)arg1;
- (void)handlePairingRequested:(id)arg1;
- (void)handleRSSIUpdated:(id)arg1;
- (void)handleServiceCharacteristicsDiscovered:(id)arg1;
- (void)handleServiceEvent:(id)arg1 serviceSelector:(SEL)arg2 delegateSelector:(SEL)arg3;
- (void)handleServiceIncludedServicesDiscovered:(id)arg1;
- (void)handleServicesChanged:(id)arg1;
- (void)handleServicesDiscovered:(id)arg1;
- (void)handleUnpaired:(id)arg1;
- (void)handleWritesExecuted:(id)arg1;
- (BOOL)hasTag:(id)arg1;
- (id)identifier;
- (id)initWithCentralManager:(id)arg1 dictionary:(id)arg2;
- (void)invalidateAllAttributes;
- (BOOL)isConnected;
- (BOOL)isConnectedToSystem;
- (BOOL)isPaired;
- (unsigned long long)maximumWriteValueLengthForType:(long long)arg1;
- (unsigned long long)mtuLength;
- (id)name;
- (void)pair;
- (void)readRSSI;
- (void)readValueForCharacteristic:(id)arg1;
- (void)readValueForDescriptor:(id)arg1;
- (oneway void)release;
- (void)reliablyWriteValues:(id)arg1 forCharacteristics:(id)arg2;
- (void)removeAttributeForHandle:(id)arg1;
- (void)sendMsg:(int)arg1 args:(id)arg2;
- (void)sendMsg:(int)arg1 requiresConnected:(BOOL)arg2 args:(id)arg3;
- (id)sendSyncMsg:(int)arg1 args:(id)arg2;
- (id)services;
- (void)setAttribute:(id)arg1 forHandle:(id)arg2;
- (void)setBroadcastValue:(BOOL)arg1 forCharacteristic:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setMtuLength:(unsigned long long)arg1;
- (void)setName:(id)arg1;
- (void)setNotifyValue:(BOOL)arg1 forCharacteristic:(id)arg2;
- (void)setOrphan;
- (void)setRSSI:(id)arg1;
- (void)setServices:(id)arg1;
- (void)setState:(long long)arg1;
- (long long)state;
- (void)tag:(id)arg1;
- (void)unpair;
- (void)untag:(id)arg1;
- (void)writeValue:(id)arg1 forCharacteristic:(id)arg2 type:(long long)arg3;
- (void)writeValue:(id)arg1 forDescriptor:(id)arg2;

@end
