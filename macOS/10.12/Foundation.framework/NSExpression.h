/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
 */

@interface NSExpression : NSObject <NSCopying, NSSecureCoding> {
    struct _expressionFlags { 
        unsigned int _evaluationBlocked : 1; 
        unsigned int _reservedExpressionFlags : 31; 
    }  _expressionFlags;
    unsigned long long  _expressionType;
    unsigned int  reserved;
}

@property (atomic, readonly, copy) NSArray *arguments;
@property (atomic, readonly, retain) id collection;
@property (atomic, readonly, retain) id constantValue;
@property (atomic, readonly, copy) id expressionBlock;
@property (atomic, readonly) unsigned long long expressionType;
@property (atomic, readonly, copy) NSExpression *falseExpression;
@property (atomic, readonly, copy) NSString *function;
@property (atomic, readonly, copy) NSString *keyPath;
@property (atomic, readonly, copy) NSExpression *leftExpression;
@property (atomic, readonly, copy) NSExpression *operand;
@property (atomic, readonly, copy) NSPredicate *predicate;
@property (atomic, readonly, copy) NSExpression *rightExpression;
@property (atomic, readonly, copy) NSExpression *trueExpression;
@property (atomic, readonly, copy) NSString *variable;

// Image: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation

+ (id)_newKeyPathExpressionForString:(id)arg1;
+ (id)expressionForAggregate:(id)arg1;
+ (id)expressionForAnyKey;
+ (id)expressionForBlock:(id)arg1 arguments:(id)arg2;
+ (id)expressionForConditional:(id)arg1 trueExpression:(id)arg2 falseExpression:(id)arg3;
+ (id)expressionForConstantValue:(id)arg1;
+ (id)expressionForEvaluatedObject;
+ (id)expressionForFunction:(id)arg1 arguments:(id)arg2;
+ (id)expressionForFunction:(id)arg1 selectorName:(id)arg2 arguments:(id)arg3;
+ (id)expressionForIntersectSet:(id)arg1 with:(id)arg2;
+ (id)expressionForKeyPath:(id)arg1;
+ (id)expressionForMinusSet:(id)arg1 with:(id)arg2;
+ (id)expressionForSubquery:(id)arg1 usingIteratorVariable:(id)arg2 predicate:(id)arg3;
+ (id)expressionForSymbolicString:(id)arg1;
+ (id)expressionForTernaryWithPredicate:(id)arg1 trueExpression:(id)arg2 falseExpression:(id)arg3;
+ (id)expressionForUnionSet:(id)arg1 with:(id)arg2;
+ (id)expressionForVariable:(id)arg1;
+ (id)expressionForVariableNameAssignment:(id)arg1 expression:(id)arg2;
+ (id)expressionWithFormat:(id)arg1;
+ (id)expressionWithFormat:(id)arg1 argumentArray:(id)arg2;
+ (id)expressionWithFormat:(id)arg1 arguments:(struct __va_list_tag { unsigned int x1; unsigned int x2; void *x3; void *x4; })arg2;
+ (BOOL)supportsSecureCoding;

- (BOOL)_allowsEvaluation;
- (id)_expressionWithSubstitutionVariables:(id)arg1;
- (BOOL)_shouldUseParensWithDescription;
- (void)acceptVisitor:(id)arg1 flags:(unsigned long long)arg2;
- (void)allowEvaluation;
- (id)arguments;
- (id)collection;
- (id)constantValue;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)expressionBlock;
- (unsigned long long)expressionType;
- (id)expressionValueWithObject:(id)arg1 context:(id)arg2;
- (id)falseExpression;
- (id)function;
- (id)initWithCoder:(id)arg1;
- (id)initWithExpressionType:(unsigned long long)arg1;
- (id)keyPath;
- (id)leftExpression;
- (id)operand;
- (id)predicate;
- (id)predicateFormat;
- (id)rightExpression;
- (SEL)selector;
- (id)subexpression;
- (id)trueExpression;
- (id)variable;

// Image: /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData

// NSExpression (_NSCoreDataSQLPredicateCategories)

- (id)minimalFormInContext:(id)arg1;

@end
