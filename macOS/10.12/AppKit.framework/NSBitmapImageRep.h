/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSBitmapImageRep : NSImageRep <NSSecureCoding> {
    unsigned int  _bytesPerRow;
    id  _dataObj;
    struct __bitmapRepFlags { 
        unsigned int bitsPerPixel : 8; 
        unsigned int isPlanar : 1; 
        unsigned int explicitPlanes : 1; 
        unsigned int imageSourceIsIndexed : 1; 
        unsigned int dataLoaded : 1; 
        unsigned int colorModel : 4; 
        unsigned int tierTwoInfoIsLoaded : 1; 
        unsigned int respectO : 1; 
        unsigned int compressionFactor : 14; 
        unsigned int imageNumber : 8; 
        unsigned int bitmapFormat : 3; 
        unsigned int cgImageIsPrimary : 1; 
        unsigned int compression : 20; 
    }  _moreRepFlags;
    id  _properties;
    NSData * _tiffData;
}

@property (atomic, readonly) struct CGImage { }*CGImage;
@property (atomic, readonly, copy) NSData *TIFFRepresentation;
@property (setter=_setBacking:, atomic, readwrite, retain) id _backing;
@property (atomic, readonly) char *bitmapData;
@property (atomic, readonly) unsigned long long bitmapFormat;
@property (atomic, readonly) long long bitsPerPixel;
@property (atomic, readonly) long long bytesPerPlane;
@property (atomic, readonly) long long bytesPerRow;
@property (atomic, readonly) NSColorSpace *colorSpace;
@property (atomic, readonly) long long numberOfPlanes;
@property (getter=isPlanar, atomic, readonly) BOOL planar;
@property (atomic, readonly) long long samplesPerPixel;

+ (id)TIFFRepresentationOfImageRepsInArray:(id)arg1;
+ (id)TIFFRepresentationOfImageRepsInArray:(id)arg1 usingCompression:(unsigned long long)arg2 factor:(float)arg3;
+ (id)_imageRepWithData:(id)arg1 hfsFileType:(id)arg2 extension:(id)arg3;
+ (id)_imageRepsWithData:(id)arg1 hfsFileType:(id)arg2 extension:(id)arg3 expandImageContentNow:(BOOL)arg4;
+ (id)_imagesFromIcon:(id)arg1 inApp:(id)arg2 zone:(struct _NSZone { }*)arg3;
+ (id)_imagesFromURL:(id)arg1 forImage:(id)arg2 fileType:(id)arg3 extension:(id)arg4;
+ (id)_imagesWithData:(id)arg1 hfsFileType:(id)arg2 extension:(id)arg3 zone:(struct _NSZone { }*)arg4 expandImageContentNow:(BOOL)arg5;
+ (id)_imagesWithData:(id)arg1 hfsFileType:(id)arg2 extension:(id)arg3 zone:(struct _NSZone { }*)arg4 expandImageContentNow:(BOOL)arg5 includeAllReps:(BOOL)arg6;
+ (BOOL)canInitWithData:(id)arg1;
+ (BOOL)currentThreadRespectOrientation;
+ (BOOL)defaultRespectOrientation;
+ (void)getTIFFCompressionTypes:(const unsigned long long**)arg1 count:(long long*)arg2;
+ (id)imageRepWithData:(id)arg1;
+ (id)imageRepsWithData:(id)arg1;
+ (id)imageUnfilteredFileTypes;
+ (id)imageUnfilteredPasteboardTypes;
+ (id)imageUnfilteredTypes;
+ (void)initialize;
+ (id)localizedNameForTIFFCompressionType:(unsigned long long)arg1;
+ (void)setDefaultRespectOrientation:(BOOL)arg1;
+ (BOOL)supportsSecureCoding;
+ (void)withCurrentThreadRespectingOrientation:(BOOL)arg1 performBlock:(id)arg2;

- (struct CGImage { }*)CGImage;
- (struct CGImage { }*)CGImageForProposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 context:(id)arg2 hints:(id)arg3;
- (id)TIFFRepresentation;
- (id)TIFFRepresentationUsingCompression:(unsigned long long)arg1 factor:(float)arg2;
- (id)_backing;
- (void)_becomeBackedByCGImage:(struct CGImage { }*)arg1;
- (unsigned long long)_bitmapFormat;
- (void)_bitmapImageRep_setColorSpaceName:(id)arg1;
- (id)_bitmapImageReps;
- (void)_captureDrawing:(id)arg1;
- (long long)_colorSpaceModel;
- (void)_freeData;
- (void)_freeImage;
- (void)_fromCGImage:(struct CGImage { }*)arg1 performBlockUsingMutableData:(id)arg2;
- (id)_initWithImageSource:(void*)arg1 imageNumber:(long long)arg2 properties:(struct __CFDictionary { }*)arg3;
- (id)_initWithSharedBitmap:(const void*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (BOOL)_isValid;
- (BOOL)_loadData;
- (BOOL)_loadTierOneInfoWithCGImage:(struct CGImage { }*)arg1;
- (BOOL)_loadTierOneInfoWithImageSource:(void*)arg1 imageNumber:(long long)arg2 properties:(struct __CFDictionary { }*)arg3;
- (BOOL)_loadTierTwoInfoIfNotYetLoaded;
- (void)_loadTierTwoInfoWithCGImage:(struct CGImage { }*)arg1;
- (long long)_numberOfColorComponentsNotIncludingAlpha;
- (void)_performBlockUsingBacking:(id)arg1;
- (void)_performBlockUsingBackingCGImage:(id)arg1;
- (void)_performBlockUsingBackingMutableData:(id)arg1;
- (void)_retagBackingWithColorSpace:(id)arg1;
- (void)_setBacking:(id)arg1;
- (void)_setSharedIdentifier:(long long)arg1;
- (long long)_uncachedSize;
- (BOOL)_wantsToBeCached;
- (void)_withoutChangingBackingPerformBlockUsingBackingCGImage:(id)arg1;
- (void)_withoutChangingBackingPerformBlockUsingBackingMutableData:(id)arg1;
- (char *)bitmapData;
- (unsigned long long)bitmapFormat;
- (id)bitmapImageRepByConvertingToColorSpace:(id)arg1 renderingIntent:(long long)arg2;
- (id)bitmapImageRepByRetaggingWithColorSpace:(id)arg1;
- (long long)bitsPerPixel;
- (long long)bytesPerPlane;
- (long long)bytesPerRow;
- (BOOL)canBeCompressedUsing:(unsigned long long)arg1;
- (id)colorAtX:(long long)arg1 y:(long long)arg2;
- (id)colorSpace;
- (id)colorSpaceName;
- (void)colorizeByMappingGray:(double)arg1 toColor:(id)arg2 blackMapping:(id)arg3 whiteMapping:(id)arg4;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (BOOL)draw;
- (void)encodeWithCoder:(id)arg1;
- (void)getBitmapDataPlanes:(char **)arg1;
- (void)getCompression:(unsigned long long*)arg1 factor:(float*)arg2;
- (void)getPixel:(unsigned long long*)arg1 atX:(long long)arg2 y:(long long)arg3;
- (long long)incrementalLoadFromData:(id)arg1 complete:(BOOL)arg2;
- (id)init;
- (id)initForIncrementalLoad;
- (id)initWithBitmapDataPlanes:(char **)arg1 pixelsWide:(long long)arg2 pixelsHigh:(long long)arg3 bitsPerSample:(long long)arg4 samplesPerPixel:(long long)arg5 hasAlpha:(BOOL)arg6 isPlanar:(BOOL)arg7 colorSpaceName:(id)arg8 bitmapFormat:(unsigned long long)arg9 bytesPerRow:(long long)arg10 bitsPerPixel:(long long)arg11;
- (id)initWithBitmapDataPlanes:(char **)arg1 pixelsWide:(long long)arg2 pixelsHigh:(long long)arg3 bitsPerSample:(long long)arg4 samplesPerPixel:(long long)arg5 hasAlpha:(BOOL)arg6 isPlanar:(BOOL)arg7 colorSpaceName:(id)arg8 bytesPerRow:(long long)arg9 bitsPerPixel:(long long)arg10;
- (id)initWithCGImage:(struct CGImage { }*)arg1;
- (id)initWithCIImage:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)initWithFocusedViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)isPlanar;
- (long long)numberOfPlanes;
- (BOOL)respectOrientation;
- (long long)samplesPerPixel;
- (void)setColor:(id)arg1 atX:(long long)arg2 y:(long long)arg3;
- (void)setColorSpaceName:(id)arg1;
- (void)setCompression:(unsigned long long)arg1 factor:(float)arg2;
- (void)setPixel:(unsigned long long*)arg1 atX:(long long)arg2 y:(long long)arg3;
- (void)setRespectOrientation:(BOOL)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;

// NSBitmapImageRep (NSBitmapImageFileTypeExtensions)

+ (id)representationOfImageRepsInArray:(id)arg1 usingType:(unsigned long long)arg2 properties:(id)arg3;

- (long long)_imageNumber;
- (void)_setImageNumber:(long long)arg1;
- (id)description;
- (id)representationUsingType:(unsigned long long)arg1 properties:(id)arg2;
- (void)setProperty:(id)arg1 withValue:(id)arg2;
- (id)valueForProperty:(id)arg1;

// NSBitmapImageRep (NSCruft)

- (struct CGImage { }*)_CGImageRef;
- (struct CGImage { }*)_acquireRetainedCGImageRef;
- (struct CGImage { }*)_getCGImageRefCreateIfNecessary;
- (void)_setCGImageRef:(struct CGImage { }*)arg1;

// NSBitmapImageRep (NSDragManagerFix)

+ (void)_setEnableFlippedImageFix:(BOOL)arg1;

@end
