/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSPersistentUIManager : NSObject {
    NSObject<OS_dispatch_queue> * IOQueue;
    NSMutableDictionary * additionalBuckets;
    NSString * bundleID;
    unsigned int  contiguousInactiveFlushCount;
    NSPersistentUICrashHandler * crashHandler;
    unsigned long long  currentFileSize;
    unsigned int  disableRestorableStateWritingCounter;
    BOOL  elideAllFileWrites;
    unsigned long long  fileSizeAfterLastRewrite;
    id  flushTimer;
    BOOL  isClosedToChanges;
    NSMapTable * objectToPendingKeyPaths;
    NSMutableArray * pendingRecords;
    NSURL * persistentStateDirectoryURL;
    unsigned int  publicPlistChecksum;
    int  publicPlistFD;
    BOOL  rawHadValidStateDirectoryAtLaunch;
    NSPersistentUIPreservedStateDirectory * rawStateDirectoryAtLaunch;
    double  scheduledFlushDate;
    double  scheduledFlushDeadline;
    NSMutableArray * sortedWindowInfos;
    int  spinlock;
    BOOL  stateDirectoryHasBeenRefreshed;
    int  stateFileFD;
    BOOL  stateFileHasBeenCreated;
    NSPersistentUIRestorer * stateRestorer;
    int  suppressedCGWindowOrderingStatus;
    BOOL  suppressedCGWindowOrderingSuccessfully;
    BOOL  treatEverythingAsDirty;
    NSPersistentUISecureURLHerder * urlHerder;
    NSPersistentUIWindowSnapshotter * windowSnapshotter;
    NSObject<OS_dispatch_queue> * workQueue;
}

@property (atomic, readwrite) BOOL rawHadValidStateDirectoryAtLaunch;
@property (atomic, readwrite, retain) NSPersistentUIPreservedStateDirectory *rawStateDirectoryAtLaunch;

+ (id)_debugUnrestoredWindows;
+ (id)sharedManager;
+ (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;

- (BOOL)_trySystemCallDescribedBy:(const char *)arg1 executor:(id)arg2;
- (void)acquireDirtyState;
- (void)addObjectForKeyedState:(id)arg1 type:(int)arg2 underKey:(id)arg3 forIdentifier:(id)arg4 inWindow:(unsigned int)arg5 inBackground:(BOOL)arg6;
- (void)addPendingKeyPath:(id)arg1 forObject:(id)arg2;
- (void)applicationDidDeactivate:(id)arg1;
- (void)cancelFlushTimer;
- (void)changePersistentKeyPathObservationForPaths:(id)arg1 inObject:(id)arg2 to:(BOOL)arg3;
- (void)changeWindow:(unsigned int)arg1 toStatus:(int)arg2 withConditionalGeneration:(unsigned int)arg3;
- (void)clearCrashCountFileIfNecessary;
- (long long)crashBlameCounter;
- (void)delayCGWindowOrderingIfNecessary;
- (void)disableRestorableStateWriting;
- (void)discardAllPersistentStateAndClose;
- (void)elideAllFileWrites;
- (void)enableRestorableStateWriting;
- (void)flushAllChangesOptionallyWaitingUntilDone:(BOOL)arg1 updatingSnapshots:(BOOL)arg2;
- (void)flushPersistentStateAndClose:(BOOL)arg1 waitingUntilDone:(BOOL)arg2;
- (void)fullyDirtyAndReopenPersistentState;
- (BOOL)hasFinishedRestoringWindows;
- (BOOL)hasPersistentStateToRestore;
- (void)ignoreAnyPreexistingPersistentState;
- (id)init;
- (unsigned int)modifyCrashBlameCounterBy:(int)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (int)openPersistentStateFile;
- (void)performDockCommands:(id)arg1 withOldWindowIDToNewWindowID:(id)arg2;
- (BOOL)performingWindowOrdering;
- (id)persistentStateDirectoryURL;
- (id)persistentStateFileURL;
- (BOOL)promptToIgnorePersistentState;
- (BOOL)rawHadValidStateDirectoryAtLaunch;
- (id)rawStateDirectoryAtLaunch;
- (void)refreshEncryptionKey:(BOOL)arg1;
- (BOOL)refreshStateDirectoryIfNecessary;
- (BOOL)restoreAllPersistentStateWithCompletionHandler:(id)arg1;
- (void)resumeNormalWindowOrderingAndDrawing;
- (void)rewriteFile:(int)arg1 withWindowInfos:(id)arg2 withImpendingRecords:(id)arg3;
- (void)setPublicProperties:(id)arg1 forWindowID:(unsigned int)arg2;
- (void)setRawHadValidStateDirectoryAtLaunch:(BOOL)arg1;
- (void)setRawStateDirectoryAtLaunch:(id)arg1;
- (BOOL)shouldRestoreStateOnLaunch;
- (BOOL)shouldUseOneWindowHeuristic;
- (id)stateDirectoryAtLaunch;
- (void)tryCreatingPersistentStateDirectoryForURL:(id)arg1;
- (id)windowInfoForWindowID:(unsigned int)arg1 createIfNecessary:(BOOL)arg2;
- (void)writePublicPlistData:(id)arg1;
- (void)writePublicPlistWithOpenWindowIDs:(id)arg1 optionallyWaitingUntilDone:(BOOL)arg2;
- (unsigned long long)writeRecords:(id)arg1 toFile:(int)arg2;
- (void)writeRecords:(id)arg1 withWindowInfos:(id)arg2 flushingStaleData:(BOOL)arg3;

// NSPersistentUIManager (NSCarbonMethods)

+ (id)copyDebugDumpStateDirectory:(id)arg1;
+ (id)copyPersistentCarbonWindowDictionariesForBundleID:(id)arg1;

- (id)copyPersistentCarbonWindowDictionariesAtTimeOfAppLaunch;
- (unsigned int)createPersistentWindow;
- (void)deletePersistentWindow:(unsigned int)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2 forPersistentWindowID:(unsigned int)arg3;

// NSPersistentUIManager (NSPersistentUIManagerExtensions)

+ (id)_NSPersistentUIAcquireTalagentWindowsOnConnections:(unsigned int)arg1 :(id)arg2;
+ (void)_NSPersistentUIDestroyTalagentWindows:(unsigned int)arg1 :(id)arg2;

- (void)beginAcquiringExternallyCreatedWindows;
- (id)copyAcquiredExternallyCreatedWindows;
- (void)destroyExternallyCreatedWindows:(id)arg1;

// NSPersistentUIManager (NSWindowOrderingSuppression)

+ (id)_copyCGWindowOrderingReplayer;
+ (void)_permitWindowOrderingUntilStateRestoration;
+ (void)_resuppressWindowOrderingNowThatStateRestorationIsOccurring;
+ (BOOL)_suppressCGWindowOrdering;

@end
