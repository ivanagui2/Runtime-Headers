/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSAppearance : NSObject <NSCoding> {
    id  _auxiliary;
    NSBundle * _bundle;
    NSString * _name;
    void * _private;
    id  _reserved;
}

@property (atomic, readonly) BOOL allowsVibrancy;
@property (atomic, readonly, copy) NSString *name;

+ (id)_contentBackgroundAppearance;
+ (id)_coreUIOptionsSharedKeySet;
+ (id)_defaultAppearance;
+ (void)_initializeCoreUI;
+ (id)_mediumLightAppearance;
+ (void)_performWithCurrentAppearance:(id)arg1 usingBlock:(id)arg2;
+ (id)_syrahAppearance;
+ (id)_vibrantDarkAppearance;
+ (id)_vibrantLightAppearance;
+ (id)appearanceNamed:(id)arg1;
+ (id)currentAppearance;
+ (void)setCurrentAppearance:(id)arg1;

- (BOOL)_allowsVibrancyForColor:(id)arg1;
- (id)_appearanceForSourceListTableView;
- (id)_appearanceForStandardTableView;
- (BOOL)_backstoppedByDefaultAppearance;
- (int)_blendModeForWidget:(id)arg1;
- (id)_bundle;
- (id)_bundleResourceName;
- (int)_callCoreUIWithBlock:(id)arg1 options:(id)arg2;
- (void)_commonInitWithCoreUIRenderer:(struct OpaqueCUIRendererRef { }*)arg1 name:(id)arg2;
- (id)_compositingFilterForWidget:(id)arg1;
- (struct CGColor { }*)_copyCustomCGColor:(id)arg1;
- (id)_copyMeasurements:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct CGContext { }*)arg2 options:(id)arg3 requestedMeasurements:(id)arg4;
- (id)_coreUICatalog;
- (struct OpaqueCUIRendererRef { }*)_coreUIRenderer;
- (struct CGImage { }*)_createLayerContents:(id)arg1 contentsCenter:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (void)_createOrUpdateLayer:(id*)arg1 options:(id)arg2;
- (id)_customColor:(id)arg1;
- (int)_defaultBlendMode;
- (id)_defaultCompositingFilter;
- (void)_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct CGContext { }*)arg2 options:(id)arg3;
- (id)_initForArchivingOnlyWithAppearanceNamed:(id)arg1 bundle:(id)arg2;
- (id)_initWithContentsOfURL:(id)arg1;
- (long long)_internalVisualEffectMaterialForBlendingMode:(long long)arg1;
- (long long)_internalVisualEffectMaterialForMenu;
- (long long)_internalVisualEffectMaterialForSelection:(BOOL)arg1 isDarker:(BOOL)arg2;
- (long long)_internalVisualEffectMaterialForTitlebar;
- (struct CGSize { double x1; double x2; })_intrinsicContentSizeForDrawingInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct CGContext { }*)arg2 options:(id)arg3;
- (BOOL)_isBuiltinAppearance;
- (BOOL)_isDefaultAppearance;
- (BOOL)_isPrimarilyDark;
- (BOOL)_isTintedWithLightColor;
- (BOOL)_prefersButtonTitleNaturalBaseline;
- (BOOL)_prefersMoreHorizontalContentIndicators;
- (BOOL)_prefersSliderAccessoryStepBehavior;
- (BOOL)_setCustomColor:(id)arg1;
- (BOOL)_setCustomColor:(id)arg1 setType:(struct __CFString { }*)arg2;
- (BOOL)_setCustomFillColor:(id)arg1;
- (BOOL)_setCustomStrokeColor:(id)arg1;
- (void)_setTintColor:(id)arg1;
- (void)_setupAuxiliary;
- (BOOL)_shouldBurSidebars;
- (double)_textGlyphBrightnessMultiplier;
- (BOOL)allowsVibrancy;
- (id)appearanceByApplyingTintColor:(id)arg1;
- (int)blendModeForStyleName:(id)arg1 styleConfiguration:(id)arg2;
- (Class)classForCoder;
- (id)compositingFilterForStyleName:(id)arg1 styleConfiguration:(id)arg2;
- (void)dealloc;
- (id)debugDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)imageNamed:(id)arg1;
- (id)init;
- (id)initWithAppearanceNamed:(id)arg1 bundle:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)name;
- (id)resolvedAppearanceForColor:(id)arg1;
- (id)resolvedAppearanceForStyleName:(id)arg1 styleConfiguration:(id)arg2;
- (id)resolvedAppearanceForWidget:(id)arg1;
- (id)resolvedAppearanceForWidget:(id)arg1 styleConfiguration:(id)arg2;
- (void)setShouldBeArchived:(BOOL)arg1;
- (BOOL)shouldBeArchived;
- (id)systemFontForControlSize:(unsigned long long)arg1 weight:(double)arg2;
- (id)tintColor;
- (id)uniqueIdentifier;

@end
