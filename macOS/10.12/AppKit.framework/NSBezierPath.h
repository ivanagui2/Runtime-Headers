/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSBezierPath : NSObject <NSCoding, NSCopying> {
    struct { 
        unsigned int _flags : 8; 
        unsigned int _pathState : 2; 
        unsigned int _unused : 22; 
    }  _bpFlags;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _controlPointBounds;
    unsigned long long  _dashedLineCount;
    double * _dashedLinePattern;
    double  _dashedLinePhase;
    long long  _elementCount;
    long long  _elementMax;
    long long  _extraSegmentCount;
    long long  _extraSegmentMax;
    void * _extraSegments;
    double  _flatness;
    struct PATHSEGMENT { unsigned int x1 : 4; unsigned int x2 : 60; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; } * _head;
    long long  _lastSubpathIndex;
    double  _lineWidth;
    double  _miterLimit;
    void * _path;
}

@property (atomic, readonly, copy) NSBezierPath *bezierPathByFlatteningPath;
@property (atomic, readonly, copy) NSBezierPath *bezierPathByReversingPath;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } controlPointBounds;
@property (atomic, readonly) struct CGPoint { double x1; double x2; } currentPoint;
@property (atomic, readonly) long long elementCount;
@property (getter=isEmpty, atomic, readonly) BOOL empty;
@property (atomic, readwrite) double flatness;
@property (atomic, readwrite) unsigned long long lineCapStyle;
@property (atomic, readwrite) unsigned long long lineJoinStyle;
@property (atomic, readwrite) double lineWidth;
@property (atomic, readwrite) double miterLimit;
@property (atomic, readwrite) unsigned long long windingRule;

+ (id)bezierPath;
+ (id)bezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)bezierPathWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xRadius:(double)arg2 yRadius:(double)arg3;
+ (void)clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (double)defaultFlatness;
+ (unsigned long long)defaultLineCapStyle;
+ (unsigned long long)defaultLineJoinStyle;
+ (double)defaultLineWidth;
+ (double)defaultMiterLimit;
+ (unsigned long long)defaultWindingRule;
+ (void)drawPackedGlyphs:(const char *)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
+ (void)fillRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (void)initialize;
+ (void)setDefaultFlatness:(double)arg1;
+ (void)setDefaultLineCapStyle:(unsigned long long)arg1;
+ (void)setDefaultLineJoinStyle:(unsigned long long)arg1;
+ (void)setDefaultLineWidth:(double)arg1;
+ (void)setDefaultMiterLimit:(double)arg1;
+ (void)setDefaultWindingRule:(unsigned long long)arg1;
+ (void)strokeLineFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
+ (void)strokeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

- (struct CGPath { }*)CGPath;
- (void)_appendArcSegmentWithCenter:(struct CGPoint { double x1; double x2; })arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;
- (void)_appendToPath:(id)arg1;
- (id)_copyFlattenedPath;
- (void)_doPath;
- (void)addClip;
- (void)appendBezierPath:(id)arg1;
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 radius:(double)arg3;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x1; double x2; })arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x1; double x2; })arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(BOOL)arg5;
- (void)appendBezierPathWithGlyph:(unsigned int)arg1 inFont:(id)arg2;
- (void)appendBezierPathWithGlyphs:(unsigned int*)arg1 count:(long long)arg2 inFont:(id)arg3;
- (void)appendBezierPathWithNativeGlyphs:(const unsigned short*)arg1 advances:(struct CGSize { double x1; double x2; }*)arg2 count:(unsigned long long)arg3 inFont:(id)arg4;
- (void)appendBezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)appendBezierPathWithPackedGlyphs:(const char *)arg1;
- (void)appendBezierPathWithPoints:(struct CGPoint { double x1; double x2; }*)arg1 count:(long long)arg2;
- (void)appendBezierPathWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)appendBezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xRadius:(double)arg2 yRadius:(double)arg3;
- (id)bezierPathByFlatteningPath;
- (id)bezierPathByReversingPath;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (void)closePath;
- (BOOL)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })controlPointBounds;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct CGPoint { double x1; double x2; })currentPoint;
- (void)curveToPoint:(struct CGPoint { double x1; double x2; })arg1 controlPoint1:(struct CGPoint { double x1; double x2; })arg2 controlPoint2:(struct CGPoint { double x1; double x2; })arg3;
- (void)dealloc;
- (unsigned long long)elementAtIndex:(long long)arg1;
- (unsigned long long)elementAtIndex:(long long)arg1 associatedPoints:(struct CGPoint { double x1; double x2; }*)arg2;
- (long long)elementCount;
- (void)encodeWithCoder:(id)arg1;
- (void)fill;
- (double)flatness;
- (void)flattenIntoPath:(id)arg1;
- (void)getLineDash:(double*)arg1 count:(long long*)arg2 phase:(double*)arg3;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEmpty;
- (unsigned long long)lineCapStyle;
- (unsigned long long)lineJoinStyle;
- (void)lineToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)lineWidth;
- (double)miterLimit;
- (void)moveToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)relativeCurveToPoint:(struct CGPoint { double x1; double x2; })arg1 controlPoint1:(struct CGPoint { double x1; double x2; })arg2 controlPoint2:(struct CGPoint { double x1; double x2; })arg3;
- (void)relativeLineToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)relativeMoveToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)removeAllPoints;
- (void)setAssociatedPoints:(struct CGPoint { double x1; double x2; }*)arg1 atIndex:(long long)arg2;
- (void)setClip;
- (void)setFlatness:(double)arg1;
- (void)setLineCapStyle:(unsigned long long)arg1;
- (void)setLineDash:(const double*)arg1 count:(long long)arg2 phase:(double)arg3;
- (void)setLineJoinStyle:(unsigned long long)arg1;
- (void)setLineWidth:(double)arg1;
- (void)setMiterLimit:(double)arg1;
- (void)setWindingRule:(unsigned long long)arg1;
- (void)stroke;
- (void)subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint { double x1; double x2; })arg2 controlPoint1:(struct CGPoint { double x1; double x2; })arg3 controlPoint2:(struct CGPoint { double x1; double x2; })arg4 endPoint:(struct CGPoint { double x1; double x2; })arg5;
- (void)transformUsingAffineTransform:(id)arg1;
- (unsigned long long)windingRule;

// NSBezierPath (NSBezierPathCompatibility)

+ (double)flatness;
+ (unsigned long long)lineCapStyle;
+ (unsigned long long)lineJoinStyle;
+ (double)lineWidth;
+ (double)miterLimit;
+ (void)setFlatness:(double)arg1;
+ (void)setLineCapStyle:(unsigned long long)arg1;
+ (void)setLineJoinStyle:(unsigned long long)arg1;
+ (void)setLineWidth:(double)arg1;
+ (void)setMiterLimit:(double)arg1;
+ (void)setWindingRule:(unsigned long long)arg1;
+ (unsigned long long)windingRule;

- (id)description;

// NSBezierPath (NSBezierPathDeprecated)

- (BOOL)cachesBezierPath;
- (void)setCachesBezierPath:(BOOL)arg1;

// NSBezierPath (NSBezierPathDevicePrimitives)

- (void)_addPathSegment:(long long)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (void)_deviceClosePath;
- (void)_deviceCurveToPoint:(struct CGPoint { double x1; double x2; })arg1 controlPoint1:(struct CGPoint { double x1; double x2; })arg2 controlPoint2:(struct CGPoint { double x1; double x2; })arg3;
- (void)_deviceLineToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_deviceMoveToPoint:(struct CGPoint { double x1; double x2; })arg1;

// NSBezierPath (NSBezierPathExtras)

- (void)_appendBezierPathWithBottomRoundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cornerRadius:(double)arg2;
- (void)_appendBezierPathWithRoundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cornerRadius:(double)arg2;
- (void)_appendBezierPathWithTopRoundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cornerRadius:(double)arg2;

// NSBezierPath (RoundedRectExtras)

+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xRadius:(double)arg2 yRadius:(double)arg3 roundedTopLeftCorner:(BOOL)arg4 roundedTopRightCorner:(BOOL)arg5 roundedBottomLeftCorner:(BOOL)arg6 roundedBottomRightCorner:(BOOL)arg7;

- (void)appendBezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 xRadius:(double)arg2 yRadius:(double)arg3 roundedTopLeftCorner:(BOOL)arg4 roundedTopRightCorner:(BOOL)arg5 roundedBottomLeftCorner:(BOOL)arg6 roundedBottomRightCorner:(BOOL)arg7;

@end
