/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSSliderCell : NSActionCell {
    double  _altIncValue;
    double  _knobOffset;
    double  _maxValue;
    double  _minValue;
    int  _numberOfTickMarks;
    double  _previousValue;
    struct __sliderCellFlags { 
        unsigned int weAreVertical : 1; 
        unsigned int weAreVerticalSet : 1; 
        unsigned int weHaveStickyOrientation : 1; 
        unsigned int isPressed : 1; 
        unsigned int allowsTickMarkValuesOnly : 1; 
        unsigned int tickMarkPosition : 1; 
        unsigned int sliderType : 2; 
        unsigned int drawing : 1; 
        unsigned int snappedToTickMark : 1; 
        unsigned int snappedToPreviousValue : 1; 
        unsigned int snappedToDefaultValue : 1; 
        unsigned int snappingAllowed : 1; 
        unsigned int collapseOnResize : 1; 
        unsigned int startedOnAccessory : 1; 
        unsigned int reserved2 : 17; 
    }  _scFlags;
    id  _sliderCellPrivateData;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _trackRect;
    double  _value;
}

@property (atomic, readonly) double _orthogonalTickMarkInset;
@property (atomic, readonly) double _primaryTickMarkInset;
@property (atomic, readwrite) double altIncrementValue;
@property (atomic, readonly) double knobThickness;
@property (atomic, readwrite) double maxValue;
@property (atomic, readwrite) double minValue;
@property (atomic, readwrite) unsigned long long sliderType;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } trackRect;
@property (getter=isVertical, atomic, readwrite) BOOL vertical;

+ (void)initialize;
+ (BOOL)prefersTrackingUntilMouseUp;

- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_alignmentRectInsetsInView:(id)arg1;
- (BOOL)_allowsVibrancyForControlView:(id)arg1;
- (BOOL)_applicableShowsFocus;
- (BOOL)_barIsTintedWithValue;
- (BOOL)_calcTrackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 andAdjustRect:(BOOL)arg2;
- (BOOL)_collapsesOnResize;
- (id)_currentCUICircularSliderDialOptions:(BOOL)arg1;
- (id)_currentCUICircularSliderKnobOptions:(BOOL)arg1;
- (id)_currentCUISliderBarOptions:(BOOL)arg1;
- (id)_currentCUISliderKnobOptions:(BOOL)arg1;
- (id)_currentCUITickMarkOptions:(BOOL)arg1;
- (/* Warning: unhandled struct encoding: '{?=QQcqqdcccq{CGRect={CGPoint=dd}{CGSize=dd}}dc@}' */ struct { unsigned long long x1; unsigned long long x2; BOOL x3; long long x4; long long x5; double x6; BOOL x7; BOOL x8; BOOL x9; long long x10; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_11_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_11_1_2; } x11; double x12; BOOL x13; id x14; })_currentDrawingState;
- (void)_drawCustomTrackWithTrackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawLiveResizeHighlightWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawMaxValueImage;
- (void)_drawMinValueImage;
- (void)_drawTickMarks;
- (void)_drawValueImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (long long)_effectiveControlState;
- (long long)_effectiveTickMarkPosition;
- (long long)_effectiveUserInterfaceLayoutDirection;
- (BOOL)_hasSnappingBehavior;
- (BOOL)_isR2L;
- (BOOL)_isVertical;
- (id)_metricsStrategy;
- (void)_moveInDirection:(unsigned long long)arg1;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (double)_normalizedDoubleValue;
- (BOOL)_noteTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 startEvent:(BOOL)arg4 endEvent:(BOOL)arg5;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectOfMaxValueImageFlipped:(BOOL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectOfMinValueImageFlipped:(BOOL)arg1;
- (void)_repeatTimerFired:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_resetTrackRectWithCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setCollapsesOnResize:(BOOL)arg1;
- (BOOL)_setKnobThickness:(double)arg1 usingInsetRect:(BOOL)arg2;
- (BOOL)_tickMarksAreOnLeftOrTopEdge;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_trackRectForCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_usesCustomTrackImage;
- (BOOL)_vetoMouseDragActionDispatch;
- (int)_vibrancyBlendModeForControlView:(id)arg1;
- (id)_vibrancyFilterForControlView:(id)arg1;
- (BOOL)allowsTickMarkValuesOnly;
- (double)altIncrementValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })barRectFlipped:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)closestTickMarkIndexToValue:(double)arg1;
- (double)closestTickMarkValueToValue:(double)arg1;
- (BOOL)continueTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (double)defaultValue;
- (double)doubleValue;
- (void)drawBarInside:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 flipped:(BOOL)arg2;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawKnob;
- (void)drawKnob:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawTickMarks;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (float)floatValue;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)image;
- (long long)indexOfTickMarkAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (int)intValue;
- (long long)integerValue;
- (void)invalidateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forControlView:(id)arg2;
- (BOOL)isContinuous;
- (BOOL)isOpaque;
- (BOOL)isVertical;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })knobRectFlipped:(BOOL)arg1;
- (double)knobThickness;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })knobValueRangeRect:(BOOL)arg1;
- (double)maxValue;
- (id)maxValueImage;
- (id)maximumValueAccessory;
- (double)minValue;
- (id)minValueImage;
- (id)minimumValueAccessory;
- (long long)numberOfTickMarks;
- (id)objectValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectOfTickMarkAtIndex:(long long)arg1;
- (void)setAllowsTickMarkValuesOnly:(BOOL)arg1;
- (void)setAltIncrementValue:(double)arg1;
- (void)setContinuous:(BOOL)arg1;
- (void)setControlSize:(unsigned long long)arg1;
- (void)setDefaultValue:(double)arg1;
- (void)setDoubleValue:(double)arg1;
- (void)setFloatValue:(float)arg1;
- (void)setImage:(id)arg1;
- (void)setIntValue:(int)arg1;
- (void)setIntegerValue:(long long)arg1;
- (void)setKnobThickness:(double)arg1;
- (void)setMaxValue:(double)arg1;
- (void)setMaxValueImage:(id)arg1;
- (void)setMaximumValueAccessory:(id)arg1;
- (void)setMinValue:(double)arg1;
- (void)setMinValueImage:(id)arg1;
- (void)setMinimumValueAccessory:(id)arg1;
- (void)setNumberOfTickMarks:(long long)arg1;
- (void)setObjectValue:(id)arg1;
- (void)setSliderType:(unsigned long long)arg1;
- (void)setStringValue:(id)arg1;
- (void)setTickMarkIsProminent:(BOOL)arg1 atIndex:(long long)arg2;
- (void)setTickMarkPosition:(unsigned long long)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleCell:(id)arg1;
- (void)setTitleColor:(id)arg1;
- (void)setTitleFont:(id)arg1;
- (void)setVertical:(BOOL)arg1;
- (unsigned long long)sliderType;
- (BOOL)startTrackingAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)stopTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (id)stringValue;
- (BOOL)tickMarkIsProminentAtIndex:(long long)arg1;
- (unsigned long long)tickMarkPosition;
- (double)tickMarkValueAtIndex:(long long)arg1;
- (id)title;
- (id)titleCell;
- (id)titleColor;
- (id)titleFont;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRect;

// NSSliderCell (NSSliderCellAccessibility)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityIndicatorRect;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityActivationPointAttribute;
- (id)accessibilityAllowedValuesAttribute;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsActivationPointAttributeSettable;
- (BOOL)accessibilityIsAllowedValuesAttributeSettable;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsMaxValueAttributeSettable;
- (BOOL)accessibilityIsMinValueAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (BOOL)accessibilityIsValueIndicatorAttributeSettable;
- (id)accessibilityMaxValueAttribute;
- (id)accessibilityMinValueAttribute;
- (id)accessibilityOrientationAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPositionOfChild:(id)arg1;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetFocus:(id)arg1 forChild:(id)arg2;
- (void)accessibilitySetValueAttribute:(id)arg1;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilityValueAttribute;
- (id)accessibilityValueIndicatorAttribute;

// NSSliderCell (NSSliderCellForNSSlider)

- (double)_orthogonalTickMarkInset;
- (double)_primaryTickMarkInset;

@end
