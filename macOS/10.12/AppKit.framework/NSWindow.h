/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSWindow : NSResponder <NSAccessibility, NSAccessibilityElement, NSAnimatablePropertyContainer, NSAppearanceCustomization, NSPopoverPresenting, NSUserInterfaceItemIdentification, NSUserInterfaceValidations> {
    NSWindowAuxiliary * _auxiliaryStorage;
    NSColor * _backgroundColor;
    int  _bamboo;
    id  _borderView;
    id  _contentView;
    void * _cursorRects;
    id  _defaultButtonCell;
    id  _delegate;
    NSMutableSet * _dragTypes;
    id  _fieldEditor;
    NSResponder * _firstResponder;
    unsigned char  _flushDisabled;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    NSString * _frameSaveName;
    unsigned int  _ignoreResignEvent;
    NSView * _initialFirstResponder;
    NSView * _lastLeftHit;
    NSView * _lastRightHit;
    int  _level;
    NSImage * _miniIcon;
    unsigned char  _postingDisabled;
    NSURL * _representedURL;
    unsigned int  _reservedWindow;
    struct CGSize { double x1; double x2; } * _sizeLimits;
    unsigned char  _styleMask;
    NSToolbar * _toolbar;
    void * _trectTable;
    id  _unusedWindow2;
    struct __wFlags { 
        unsigned int backing : 2; 
        unsigned int visible : 1; 
        unsigned int isMainWindow : 1; 
        unsigned int isKeyWindow : 1; 
        unsigned int hidesOnDeactivate : 1; 
        unsigned int dontFreeWhenClosed : 1; 
        unsigned int oneShot : 1; 
        unsigned int deferred : 1; 
        unsigned int cursorRectsDisabled : 1; 
        unsigned int haveFreeCursorRects : 1; 
        unsigned int validCursorRects : 1; 
        unsigned int docEdited : 1; 
        unsigned int staticDepthLimit : 1; 
        unsigned int worksWhenModal : 1; 
        unsigned int limitedBecomeKey : 1; 
        unsigned int needsFlush : 1; 
        unsigned int viewsNeedDisplay : 1; 
        unsigned int ignoredFirstMouse : 1; 
        unsigned int repostedFirstMouse : 1; 
        unsigned int windowDying : 1; 
        unsigned int tempHidden : 1; 
        unsigned int floatingPanel : 1; 
        unsigned int wantsToBeOnMainScreen : 1; 
        unsigned int optimizedDrawingOk : 1; 
        unsigned int optimizeDrawing : 1; 
        unsigned int titleIsRepresentedFilename : 1; 
        unsigned int excludedFromWindowsMenu : 1; 
        unsigned int depthLimit : 4; 
        unsigned int delegateReturnsValidRequestor : 1; 
        unsigned int lmouseupPending : 1; 
        unsigned int rmouseupPending : 1; 
        unsigned int wantsToDestroyRealWindow : 1; 
        unsigned int wantsToRegDragTypes : 1; 
        unsigned int sentInvalidateCursorRectsMsg : 1; 
        unsigned int avoidsActivation : 1; 
        unsigned int frameSavedUsingTitle : 1; 
        unsigned int didRegDragTypes : 1; 
        unsigned int delayedOneShot : 1; 
        unsigned int postedNeedsDisplayNote : 1; 
        unsigned int postedInvalidCursorRectsNote : 1; 
        unsigned int initialFirstResponderTempSet : 1; 
        unsigned int autodisplay : 1; 
        unsigned int tossedFirstEvent : 1; 
        unsigned int isImageCache : 1; 
        unsigned int autolayoutEngagedSomewhere : 1; 
        unsigned int hasRegisteredBackdropViews : 1; 
        unsigned int hasSubLevel : 1; 
        unsigned int keyViewSelectionDirection : 2; 
        unsigned int defaultButtonCellKETemporarilyDisabled : 1; 
        unsigned int defaultButtonCellKEDisabled : 1; 
        unsigned int menuHasBeenSet : 1; 
        unsigned int wantsToBeModal : 1; 
        unsigned int showingModalFrame : 1; 
        unsigned int isTerminating : 1; 
        unsigned int makingFirstResponderForMouseDown : 1; 
        unsigned int needsZoom : 1; 
        unsigned int sentWindowNeedsDisplayMsg : 1; 
        unsigned int wasModalAtSometime : 1; 
        unsigned int windowWillBecomeFS : 1; 
    }  _wFlags;
    int  _winEventMask;
    long long  _windowNum;
}

@property (setter=_setTabBarAccessoryViewController:, atomic, readwrite, retain) NSTitlebarAccessoryViewController *_tabBarAccessoryViewController;
@property (setter=_setWindowStackController:, atomic, readwrite) NSWindowStackController *_windowStackController;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property (atomic, readwrite, copy) NSArray *accessibilityAllowedValues;
@property (getter=isAccessibilityAlternateUIVisible, atomic, readwrite) BOOL accessibilityAlternateUIVisible;
@property (atomic, readwrite, retain) id accessibilityApplicationFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityCancelButton;
@property (atomic, readwrite, copy) NSArray *accessibilityChildren;
@property (atomic, readwrite, retain) id accessibilityClearButton;
@property (atomic, readwrite, retain) id accessibilityCloseButton;
@property (atomic, readwrite) long long accessibilityColumnCount;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityColumnIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnTitles;
@property (atomic, readwrite, copy) NSArray *accessibilityColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityContents;
@property (atomic, readwrite, retain) id accessibilityCriticalValue;
@property (atomic, readwrite, retain) id accessibilityDecrementButton;
@property (atomic, readwrite, retain) id accessibilityDefaultButton;
@property (getter=isAccessibilityDisclosed, atomic, readwrite) BOOL accessibilityDisclosed;
@property (atomic, readwrite) id accessibilityDisclosedByRow;
@property (atomic, readwrite, retain) id accessibilityDisclosedRows;
@property (atomic, readwrite) long long accessibilityDisclosureLevel;
@property (atomic, readwrite, copy) NSString *accessibilityDocument;
@property (getter=isAccessibilityEdited, atomic, readwrite) BOOL accessibilityEdited;
@property (getter=isAccessibilityElement, atomic, readwrite) BOOL accessibilityElement;
@property (getter=isAccessibilityEnabled, atomic, readwrite) BOOL accessibilityEnabled;
@property (getter=isAccessibilityExpanded, atomic, readwrite) BOOL accessibilityExpanded;
@property (atomic, readwrite) id accessibilityExtrasMenuBar;
@property (atomic, readwrite, copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityFocused, atomic, readwrite) BOOL accessibilityFocused;
@property (atomic, readwrite, retain) id accessibilityFocusedWindow;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property (getter=isAccessibilityFrontmost, atomic, readwrite) BOOL accessibilityFrontmost;
@property (atomic, readwrite, retain) id accessibilityFullScreenButton;
@property (atomic, readwrite, retain) id accessibilityGrowArea;
@property (atomic, readwrite, copy) NSArray *accessibilityHandles;
@property (atomic, readwrite, retain) id accessibilityHeader;
@property (atomic, readwrite, copy) NSString *accessibilityHelp;
@property (getter=isAccessibilityHidden, atomic, readwrite) BOOL accessibilityHidden;
@property (atomic, readwrite, retain) id accessibilityHorizontalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityHorizontalUnitDescription;
@property (atomic, readwrite) long long accessibilityHorizontalUnits;
@property (atomic, readwrite, copy) NSString *accessibilityIdentifier;
@property (atomic, readwrite, retain) id accessibilityIncrementButton;
@property (atomic, readwrite) long long accessibilityIndex;
@property (atomic, readwrite) long long accessibilityInsertionPointLineNumber;
@property (atomic, readwrite, copy) NSString *accessibilityLabel;
@property (atomic, readwrite, copy) NSArray *accessibilityLabelUIElements;
@property (atomic, readwrite) float accessibilityLabelValue;
@property (atomic, readwrite, copy) NSArray *accessibilityLinkedUIElements;
@property (getter=isAccessibilityMain, atomic, readwrite) BOOL accessibilityMain;
@property (atomic, readwrite, retain) id accessibilityMainWindow;
@property (atomic, readwrite, retain) id accessibilityMarkerGroupUIElement;
@property (atomic, readwrite, copy) NSString *accessibilityMarkerTypeDescription;
@property (atomic, readwrite, copy) NSArray *accessibilityMarkerUIElements;
@property (atomic, readwrite, retain) id accessibilityMarkerValues;
@property (atomic, readwrite, retain) id accessibilityMaxValue;
@property (atomic, readwrite) id accessibilityMenuBar;
@property (atomic, readwrite, retain) id accessibilityMinValue;
@property (atomic, readwrite, retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized, atomic, readwrite) BOOL accessibilityMinimized;
@property (getter=isAccessibilityModal, atomic, readwrite) BOOL accessibilityModal;
@property (atomic, readwrite, copy) NSArray *accessibilityNextContents;
@property (atomic, readwrite) long long accessibilityNumberOfCharacters;
@property (getter=isAccessibilityOrderedByRow, atomic, readwrite) BOOL accessibilityOrderedByRow;
@property (atomic, readwrite) long long accessibilityOrientation;
@property (atomic, readwrite, retain) id accessibilityOverflowButton;
@property (atomic, readwrite) id accessibilityParent;
@property (atomic, readwrite, copy) NSString *accessibilityPlaceholderValue;
@property (atomic, readwrite, copy) NSArray *accessibilityPreviousContents;
@property (getter=isAccessibilityProtectedContent, atomic, readwrite) BOOL accessibilityProtectedContent;
@property (atomic, readwrite, retain) id accessibilityProxy;
@property (getter=isAccessibilityRequired, atomic, readwrite) BOOL accessibilityRequired;
@property (atomic, readwrite, copy) NSString *accessibilityRole;
@property (atomic, readwrite, copy) NSString *accessibilityRoleDescription;
@property (atomic, readwrite) long long accessibilityRowCount;
@property (atomic, readwrite, copy) NSArray *accessibilityRowHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityRowIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityRows;
@property (atomic, readwrite) long long accessibilityRulerMarkerType;
@property (atomic, readwrite, retain) id accessibilitySearchButton;
@property (atomic, readwrite, retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected, atomic, readwrite) BOOL accessibilitySelected;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedCells;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedChildren;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedColumns;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedRows;
@property (atomic, readwrite, copy) NSString *accessibilitySelectedText;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySelectedTextRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedTextRanges;
@property (atomic, readwrite, copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySharedCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedFocusElements;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedTextUIElements;
@property (atomic, readwrite, retain) id accessibilityShownMenu;
@property (atomic, readwrite) long long accessibilitySortDirection;
@property (atomic, readwrite, copy) NSArray *accessibilitySplitters;
@property (atomic, readwrite, copy) NSString *accessibilitySubrole;
@property (atomic, readwrite, copy) NSArray *accessibilityTabs;
@property (atomic, readwrite, copy) NSString *accessibilityTitle;
@property (atomic, readwrite) id accessibilityTitleUIElement;
@property (atomic, readwrite, retain) id accessibilityToolbarButton;
@property (atomic, readwrite) id accessibilityTopLevelUIElement;
@property (atomic, readwrite, copy) NSURL *accessibilityURL;
@property (atomic, readwrite, copy) NSString *accessibilityUnitDescription;
@property (atomic, readwrite) long long accessibilityUnits;
@property (atomic, readwrite, retain) id accessibilityValue;
@property (atomic, readwrite, copy) NSString *accessibilityValueDescription;
@property (atomic, readwrite, retain) id accessibilityVerticalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityVerticalUnitDescription;
@property (atomic, readwrite) long long accessibilityVerticalUnits;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleCells;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityVisibleCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleRows;
@property (atomic, readwrite, retain) id accessibilityWarningValue;
@property (atomic, readwrite) id accessibilityWindow;
@property (atomic, readwrite, copy) NSArray *accessibilityWindows;
@property (atomic, readwrite, retain) id accessibilityZoomButton;
@property (atomic, readwrite) BOOL allowsConcurrentViewDrawing;
@property (atomic, readwrite) BOOL allowsToolTipsWhenApplicationIsInactive;
@property (atomic, readwrite) double alphaValue;
@property (atomic, readwrite) long long animationBehavior;
@property (atomic, readwrite, copy) NSDictionary *animations;
@property (atomic, readwrite, retain) NSAppearance *appearance;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } aspectRatio;
@property (atomic, readonly) NSWindow *attachedSheet;
@property (getter=isAutodisplay, atomic, readwrite) BOOL autodisplay;
@property (atomic, readwrite) BOOL autorecalculatesKeyViewLoop;
@property (atomic, readwrite, copy) NSColor *backgroundColor;
@property (atomic, readonly) unsigned long long backingLocation;
@property (atomic, readonly) double backingScaleFactor;
@property (atomic, readwrite) unsigned long long backingType;
@property (atomic, readonly) BOOL canBecomeKeyWindow;
@property (atomic, readonly) BOOL canBecomeMainWindow;
@property (atomic, readwrite) BOOL canBecomeVisibleWithoutLogin;
@property (atomic, readwrite) BOOL canHide;
@property (atomic, readonly, copy) NSArray *childWindows;
@property (atomic, readwrite) unsigned long long collectionBehavior;
@property (atomic, readwrite, retain) NSColorSpace *colorSpace;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } contentAspectRatio;
@property (atomic, readonly) id contentLayoutGuide;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentLayoutRect;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } contentMaxSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } contentMinSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } contentResizeIncrements;
@property (atomic, readwrite, retain) NSView *contentView;
@property (atomic, readwrite, retain) NSViewController *contentViewController;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly) NSScreen *deepestScreen;
@property (atomic, readwrite, retain) NSButtonCell *defaultButtonCell;
@property (atomic, readwrite) <NSWindowDelegate> *delegate;
@property (atomic, readwrite) int depthLimit;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly, copy) NSDictionary *deviceDescription;
@property (atomic, readwrite) BOOL displaysWhenScreenProfileChanges;
@property (atomic, readonly) NSDockTile *dockTile;
@property (getter=isDocumentEdited, atomic, readwrite) BOOL documentEdited;
@property (atomic, readonly) NSAppearance *effectiveAppearance;
@property (getter=isExcludedFromWindowsMenu, atomic, readwrite) BOOL excludedFromWindowsMenu;
@property (atomic, readonly) NSResponder *firstResponder;
@property (getter=isFloatingPanel, atomic, readonly) BOOL floatingPanel;
@property (getter=isFlushWindowDisabled, atomic, readonly) BOOL flushWindowDisabled;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (atomic, readonly, copy) NSString *frameAutosaveName;
@property (atomic, readonly) NSGraphicsContext *graphicsContext;
@property (atomic, readonly) BOOL hasCloseBox;
@property (atomic, readonly) BOOL hasDynamicDepthLimit;
@property (atomic, readwrite) BOOL hasShadow;
@property (atomic, readonly) BOOL hasTitleBar;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite) BOOL hidesOnDeactivate;
@property (atomic, readwrite, copy) NSString *identifier;
@property (atomic, readonly) BOOL inLiveResize;
@property (atomic, readwrite) NSView *initialFirstResponder;
@property (atomic, readonly) unsigned long long keyViewSelectionDirection;
@property (getter=isKeyWindow, atomic, readonly) BOOL keyWindow;
@property (atomic, readwrite) long long level;
@property (getter=isMainWindow, atomic, readonly) BOOL mainWindow;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } maxFullScreenContentSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } maxSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } minFullScreenContentSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } minSize;
@property (getter=isMiniaturizable, atomic, readonly) BOOL miniaturizable;
@property (getter=isMiniaturized, atomic, readonly) BOOL miniaturized;
@property (atomic, readwrite, retain) NSImage *miniwindowImage;
@property (atomic, readwrite, copy) NSString *miniwindowTitle;
@property (getter=isModalPanel, atomic, readonly) BOOL modalPanel;
@property (getter=isMovable, atomic, readwrite) BOOL movable;
@property (getter=isMovableByWindowBackground, atomic, readwrite) BOOL movableByWindowBackground;
@property (atomic, readonly) unsigned long long occlusionState;
@property (getter=isOnActiveSpace, atomic, readonly) BOOL onActiveSpace;
@property (getter=isOneShot, atomic, readwrite) BOOL oneShot;
@property (getter=isOpaque, atomic, readwrite) BOOL opaque;
@property (atomic, readwrite) long long orderedIndex;
@property (atomic, readwrite) NSWindow *parentWindow;
@property (atomic, readwrite) unsigned long long preferredBackingLocation;
@property (atomic, readwrite) BOOL preservesContentDuringLiveResize;
@property (atomic, readwrite) BOOL preventsApplicationTerminationWhenModal;
@property (getter=isReleasedWhenClosed, atomic, readwrite) BOOL releasedWhenClosed;
@property (atomic, readwrite, copy) NSString *representedFilename;
@property (atomic, readwrite, copy) NSURL *representedURL;
@property (getter=isResizable, atomic, readonly) BOOL resizable;
@property (atomic, readonly) long long resizeFlags;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } resizeIncrements;
@property (atomic, readonly) NSScreen *screen;
@property (atomic, readwrite) unsigned long long sharingType;
@property (getter=isSheet, atomic, readonly) BOOL sheet;
@property (atomic, readonly) NSWindow *sheetParent;
@property (atomic, readonly, copy) NSArray *sheets;
@property (atomic, readwrite) BOOL showsResizeIndicator;
@property (atomic, readwrite) BOOL showsToolbarButton;
@property (atomic, readonly, copy) NSString *stringWithSavedFrame;
@property (atomic, readwrite) unsigned long long styleMask;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite, retain) NSWindowTabViewItem *tabViewItem;
@property (atomic, readonly, copy) NSArray *tabbedWindows;
@property (atomic, readwrite, copy) NSString *tabbingIdentifier;
@property (atomic, readwrite) long long tabbingMode;
@property (atomic, readwrite) id timeMachineDelegate;
@property (atomic, readwrite, copy) NSString *title;
@property (atomic, readwrite) long long titleVisibility;
@property (atomic, readwrite, copy) NSArray *titlebarAccessoryViewControllers;
@property (atomic, readwrite) BOOL titlebarAppearsTransparent;
@property (atomic, readwrite, retain) NSToolbar *toolbar;
@property (atomic, readwrite) BOOL viewsNeedDisplay;
@property (getter=isVisible, atomic, readonly) BOOL visible;
@property (atomic, readwrite) NSWindowController *windowController;
@property (atomic, readonly) long long windowNumber;
@property (atomic, readonly) void*windowRef;
@property (atomic, readonly) long long windowTitlebarLayoutDirection;
@property (atomic, readonly) BOOL worksWhenModal;
@property (getter=isZoomable, atomic, readonly) BOOL zoomable;
@property (getter=isZoomed, atomic, readonly) BOOL zoomed;

+ (BOOL)_allowsNontitledResizableWindows;
+ (BOOL)_autoreleaseDuringLiveResize;
+ (BOOL)_batchMinimizeWindowsWithBlock:(id)arg1;
+ (BOOL)_batchOrderWindows:(unsigned long long)arg1 withBlock:(id)arg2;
+ (void)_calcKeyAndMain;
+ (BOOL)_currentWorkspaceIsUserSpace;
+ (void)_disableKeyStateChangeNotifications;
+ (void)_enableKeyStateChangeNotifications;
+ (BOOL)_hidesChromeWhenFullScreen;
+ (BOOL)_isStyleMaskEffectivelyTitled:(unsigned long long)arg1;
+ (void)_minimizeAll;
+ (struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)_modalSessionForShownService:(id)arg1;
+ (void)_removeFrameUsingName:(id)arg1 domain:(id)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_savedFrameFromString:(id)arg1;
+ (void)_setAutoreleaseDuringLiveResize:(BOOL)arg1;
+ (BOOL)_shouldMiniaturizeOnDoubleClick;
+ (BOOL)_shouldZoomOnDoubleClick;
+ (BOOL)_tracksDirtyRegions;
+ (BOOL)_useReducedMotionFullScreenTransition;
+ (unsigned long long)_validateStyleMask:(unsigned long long)arg1;
+ (id)_windowNumbersWithOptions:(unsigned long long)arg1 onSpace:(unsigned long long)arg2;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2;
+ (id)defaultAnimationForKey:(id)arg1;
+ (id)defaultAnimationForKeyPath:(id)arg1;
+ (int)defaultDepthLimit;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2;
+ (Class)frameViewClassForStyleMask:(unsigned long long)arg1;
+ (void)initialize;
+ (id)keyPathsForValuesAffectingContentLayoutRect;
+ (struct CGSize { double x1; double x2; })minContentSizeForMinFrameSize:(struct CGSize { double x1; double x2; })arg1 styleMask:(unsigned long long)arg2;
+ (struct CGSize { double x1; double x2; })minFrameSizeForMinContentSize:(struct CGSize { double x1; double x2; })arg1 styleMask:(unsigned long long)arg2;
+ (double)minFrameWidthWithTitle:(id)arg1 styleMask:(unsigned long long)arg2;
+ (void)removeFrameUsingName:(id)arg1;
+ (double)standardContentBorderThicknessForEdge:(unsigned long long)arg1 borderSize:(unsigned long long)arg2;
+ (double)standardContentBorderThicknessForEdge:(unsigned long long)arg1 borderSize:(unsigned long long)arg2 styleMask:(unsigned long long)arg3;
+ (id)standardWindowButton:(unsigned long long)arg1 forStyleMask:(unsigned long long)arg2;
+ (long long)windowNumberAtPoint:(struct CGPoint { double x1; double x2; })arg1 belowWindowWithWindowNumber:(long long)arg2;
+ (id)windowNumbersWithOptions:(unsigned long long)arg1;
+ (id)windowWithContentViewController:(id)arg1;

- (void)__close;
- (void)_absorbDeferredNeedsDisplayRegion;
- (BOOL)_acceptsSecondaryKey;
- (struct CGSize { double x1; double x2; })_actualMinFullScreenContentSize;
- (void)_addGlobalWindowToAnimationsWithWindowNumber:(unsigned int)arg1;
- (void)_addKnownSubview:(id)arg1;
- (void)_addTitlebarRenamingFloatingWindow;
- (void)_addToGroups:(id)arg1 ordered:(long long)arg2;
- (void)_addToWindowsMenuIfNecessary;
- (void)_addWindowDockingEventMonitorIfNeeded;
- (void)_adjustColorSpace:(BOOL)arg1;
- (void)_adjustDynamicDepthLimit;
- (void)_adjustMinAndMaxSizeForSheet:(BOOL)arg1;
- (void)_adjustNeedsDisplayRegionForNewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_adjustWindowResolution;
- (void)_adjustWindowToScreen;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustedFrameForSaving:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustedFrameFromDefaults:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_allowedInDashboardSpaceWithCollectionBehavior:(unsigned long long)arg1;
- (BOOL)_allowedInOtherAppsFullScreenSpaceWithCollectionBehavior:(unsigned long long)arg1;
- (BOOL)_allowsActiveInputContext;
- (BOOL)_allowsActiveInputContextDuringMenuTracking;
- (BOOL)_allowsAnyValidResponder;
- (BOOL)_allowsCompositing;
- (BOOL)_allowsFullScreen;
- (BOOL)_allowsImplicitRemovalFromMovementGroup;
- (BOOL)_allowsLinearMaskOverlayForLayer:(id)arg1 fromView:(id)arg2;
- (BOOL)_allowsMoving;
- (BOOL)_allowsOrdering;
- (BOOL)_allowsSnapping;
- (BOOL)_allowsTiling;
- (BOOL)_alwaysOnTop;
- (BOOL)_animationShouldCallFlushWindow;
- (BOOL)_anyViewCanDrawConcurrently;
- (void)_applyWindowLevelWithTagUpdateNeeded:(BOOL)arg1;
- (BOOL)_attachToParentBeforeOrderingWindow;
- (BOOL)_attachesToolbarToMenuBarInFullScreen;
- (void)_attemptSnapFrameWithMoveData:(id)arg1 event:(id)arg2;
- (void)_attemptToDockWindow;
- (void)_attemptToDockWindowOnRectEdges:(unsigned long long)arg1;
- (BOOL)_attemptToModifyAlwaysOnTopWithEvent:(id)arg1;
- (void)_attemptToShowDockWindowFeedbackWithEvent:(id)arg1;
- (void)_attemptToUndockWindowWithEvent:(id)arg1;
- (unsigned long long)_autoPositionMask;
- (id)_aux;
- (BOOL)_avoidsActivation;
- (float)_backdropBleedAmount;
- (double)_backingStoreResolution;
- (unsigned long long)_backingType;
- (id)_batchClose;
- (id)_batchZoom;
- (void)_beginATUWindowDragForGreenButtonPressAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_beginSheet:(id)arg1 completionHandler:(id)arg2 isCritical:(BOOL)arg3;
- (void)_beginWindowBlockingModalSessionForSheet:(id)arg1 service:(id)arg2 completionHandler:(id)arg3 isCritical:(BOOL)arg4;
- (void)_beginWindowBlockingModalSessionForShownService:(id)arg1;
- (void)_beginWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2;
- (void)_beginWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bestFrameForScreenBasedOnFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_bestScreenByGeometry;
- (id)_bestScreenByGeometryOfFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 avoidingFullScreen:(BOOL)arg2;
- (id)_bestScreenByGeometryOfFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 respectingSpaceAssignment:(BOOL)arg2;
- (id)_bestScreenBySpaceAssignment;
- (id)_bestScreenBySpaceAssignmentOrGeometry;
- (void)_bindTitleToContentViewController;
- (id)_bindingAdaptor;
- (void)_blockHeartBeat:(BOOL)arg1;
- (BOOL)_blocksActionWhenModal:(SEL)arg1;
- (id)_borderView;
- (BOOL)_borderViewCanAddWindowTabs;
- (void)_borderViewChanged;
- (double)_bottomBarHeight;
- (void)_cacheAndSetPropertiesForCollectionBehavior:(unsigned long long)arg1;
- (void)_cacheTileRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_cachedGlobalWindowNum;
- (id)_calcAndSetFilenameTitle;
- (BOOL)_canAddUnderTitlebarViews;
- (BOOL)_canAdjustSizeForScreensHaveSeparateSpacesIfFillingSecondaryScreen;
- (BOOL)_canBeSnappingTarget;
- (id)_canBecomeFullScreen;
- (BOOL)_canBecomeMainWindowRegardlessOfVisibility;
- (BOOL)_canBecomeSecondaryKeyWindow;
- (BOOL)_canEditTitle;
- (BOOL)_canEnterFullScreenOrTileMode;
- (BOOL)_canEnterTileMode;
- (BOOL)_canEnterTileModeForBehavior:(unsigned long long)arg1;
- (BOOL)_canJoinActiveFullScreenSpace;
- (BOOL)_canMiniaturize;
- (BOOL)_canOptimizeDrawing;
- (void)_cancelPerformSelectors;
- (void)_cancelShowingDockWindowFeedback;
- (BOOL)_cancelTitleEditing;
- (void)_cgsMoveWindow:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_cgsWindowSaysSupportsTiling;
- (void)_changeJustMain;
- (void)_changeKeyAndMainLimitedOK:(BOOL)arg1;
- (void)_checkForImplicitRemovalFromMovementGroupWhenMovingToFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_childLevel:(long long)arg1;
- (long long)_childWindowOrderingPriority;
- (id)_childWindows;
- (void)_cleanupAndRemoveFullScreenManagerIfNeeded;
- (void)_cleanupToolbarFromFullScreen;
- (void)_clearAnyValidResponderOverride;
- (void)_clearBackingStoreForBackdropViews;
- (id)_clearModalWindowLevel;
- (void)_close;
- (void)_close:(id)arg1;
- (void)_closeForTermination;
- (BOOL)_colorSpaceIsInherited;
- (void)_commonAwake;
- (void)_commonInitFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (void)_commonMinMaxSizeChanged;
- (BOOL)_commonPerformKeyEquivalent:(id)arg1 conditionally:(BOOL)arg2;
- (id)_compositedBackground;
- (BOOL)_confirmSize:(struct CGSize { double x1; double x2; }*)arg1 force:(BOOL)arg2;
- (void)_contentViewControllerChanged;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertAdjustedFrameFromDefaults:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromIntegralizationSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectToIntegralizationSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_copyAcquiredViewHierarchyLock;
- (id)_copyMinimizeDictionary;
- (id)_copyNeedsDisplayRegionInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 validateSubtractedRegion:(BOOL)arg2;
- (id)_copyPublicPersistentUIInfo;
- (id)_copyTileSpaceName;
- (id)_copyWorkspaceIdentifier;
- (id)_cornerMask;
- (void)_cornerMaskChanged;
- (id)_cornerMaskOrNil;
- (void)_createFullScreenManager;
- (void)_createSiblingTileForWindow:(id)arg1 preferredPositions:(unsigned long long)arg2 responseHandler:(id)arg3;
- (id)_creationCallStackSymbols;
- (id)_currentDividerResizeDirections;
- (id)_customTitleCell;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_customTitleFrame;
- (void)_cycleDrawers:(id)arg1;
- (void)_cycleDrawersBackwards:(id)arg1;
- (void)_cycleWindows:(id)arg1;
- (void)_cycleWindowsBackwards:(id)arg1;
- (unsigned long long)_defaultCollectionBehavior;
- (BOOL)_defeatsOverrideOfFullScreenAvoidance;
- (BOOL)_deferQuickLookIfPossible;
- (void)_deferTileFullScreenWindowXPCMessage:(id)arg1;
- (void)_delayedWindowDisplay:(id)arg1;
- (BOOL)_delayedWindowDisplayEnabled;
- (id)_destroyRealWindow:(BOOL)arg1;
- (id)_destroyRealWindowIfNeeded;
- (id)_destroyRealWindowIfNotVisible:(id)arg1;
- (void)_didAddChildWindow:(id)arg1;
- (void)_didEndViewScrolling;
- (void)_didEnterFullScreen;
- (void)_didExitFullScreen:(BOOL)arg1;
- (void)_didFailToEnterFullScreen;
- (void)_didFailToExitFullScreen;
- (void)_didRemoveChildWindow:(id)arg1;
- (id)_dirtyRegion;
- (void)_disableDelayedWindowDisplay;
- (void)_disableEnablingKeyEquivalentForDefaultButtonCell;
- (void)_disableFullScreenMenubarAutohiding;
- (void)_disablePosting;
- (void)_disableToolTipCreationAndDisplay;
- (void)_dismissModalForTerminate;
- (id)_displayChanged;
- (void)_displayChangedDepth;
- (id)_displayChangedSoAdjustWindows:(BOOL)arg1;
- (id)_displayChangedWithoutAdjusting;
- (id)_displayName;
- (void)_displayProfileChanged;
- (void)_displayResolutionChanged;
- (void)_doClientSideDraggingWithEvent:(id)arg1;
- (void)_doDockingForWindowMovementWithEvent:(id)arg1;
- (void)_doFullScreenCleanupForOrderOut;
- (void)_doOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3;
- (void)_doOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5;
- (void)_doOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_doOrderWindowWithoutAnimation:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_doWindowOrderOutWithWithKeyCalc:(BOOL)arg1 forCounter:(BOOL)arg2 orderingDone:(BOOL)arg3 docWindow:(id)arg4;
- (void)_doWindowWillBeVisibleAsSheet:(BOOL)arg1;
- (void)_doWindowWillBecomeHidden;
- (BOOL)_doesOwnRealWindow;
- (void)_dosetTitle:(id)arg1 andDefeatWrap:(BOOL)arg2;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint { double x1; double x2; })arg1;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint { double x1; double x2; })arg1 options:(unsigned long long)arg2;
- (void)_drawBackgroundForCellWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawKeyboardUIIndicationForView:(id)arg1 debuggingIndex:(id)arg2;
- (void)_drawKeyboardUILoopIfNeededForEvent:(id)arg1;
- (void)_drawKeyboardUILoopStartingAtResponder:(id)arg1 validOnly:(BOOL)arg2;
- (unsigned long long)_editingModeForTitle:(id)arg1 editingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (double)_effectiveAlphaValue;
- (long long)_effectiveAnimationBehaviorIfModal:(BOOL)arg1;
- (unsigned long long)_effectiveCollectionBehavior;
- (long long)_effectiveLevel;
- (long long)_effectiveOrderFrontAnimationTypeIfModal:(BOOL)arg1;
- (long long)_effectiveOrderOutAnimationTypeIfModal:(BOOL)arg1;
- (long long)_effectiveSubLevel;
- (void)_enableDelayedWindowDisplay;
- (void)_enableEnablingKeyEquivalentForDefaultButtonCell;
- (void)_enableFullScreenMenubarAutohiding;
- (void)_enablePosting;
- (void)_enableScreenUpdatesIfNeeded;
- (void)_enableToolTipCreationAndDisplay;
- (void)_endLiveResize;
- (void)_endTitlebarRenamingPrecleanup;
- (void)_endWindowBlockingModalSession:(struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)arg1 returnCode:(long long)arg2;
- (void)_endWindowBlockingModalSessionForShownService:(id)arg1;
- (void)_endWindowMoveWithEvent:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_enforceFullScreenRestrictionForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_enforceMenuBarAvoidanceForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onScreen:(id)arg2;
- (void)_enterFullScreenMode:(id)arg1 options:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; })arg2;
- (void)_enterFullScreenMode:(id)arg1 options:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; })arg2 implicitlyTile:(BOOL)arg3;
- (void)_enterFullScreenModeIfAppropriate;
- (BOOL)_enterFullScreenModeOnTileSpaceWithName:(id)arg1;
- (BOOL)_enterFullScreenModeOnTileSpaceWithName:(id)arg1 takeOwnership:(BOOL)arg2;
- (void)_enumerateAnimatedGlobalWindowsUsingBlock:(id)arg1;
- (id)_eventMonitorForRenaming;
- (BOOL)_excludedFromVisibleWindowList;
- (id)_exitFullScreenMode;
- (BOOL)_explicitlyAllowsFullScreenAuxiliary;
- (BOOL)_explicitlyAllowsFullScreenPrimary;
- (id)_findFirstKeyViewInDirection:(unsigned long long)arg1 forKeyLoopGroupingView:(id)arg2;
- (id)_findKeyLoopGroupingViewFollowingKeyLoopGroupingView:(id)arg1 direction:(unsigned long long)arg2;
- (void)_findNewGrowBoxOwner;
- (void)_finishedMakingConnections;
- (void)_flushAndUpdateShadowIfNeeded;
- (void)_flushBackdropViews;
- (id)_fontSmoothingBackgroundColor;
- (void)_forceFlushWindowToScreen;
- (BOOL)_forwardActionToParent:(SEL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForFullScreenMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForFullScreenModeInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameFromMoveData:(id)arg1;
- (BOOL)_frameIsCurrentlyAnimating;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameOnExitFromFullScreen;
- (void)_fromScreenCommonCode:(id)arg1;
- (unsigned long long)_fullScreenPresentationOptions;
- (long long)_fullScreenState;
- (void)_fullScreenStatusChanged;
- (BOOL)_fullScreenTileFillsScreen;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_fullScreenTileFrame;
- (double)_fullScreenTitlebarMaxHeight;
- (double)_fullScreenTitlebarMinHeight;
- (id)_fullScreenTransition;
- (void)_fullScreenUpdateUserSpaceSavedFrameIfNeeded;
- (id)_fullScreenWindowManager;
- (id)_generateCompositedBackground;
- (id)_generateMetalBackground;
- (id)_generateScaledBackground;
- (id)_getActiveUndoManager;
- (id)_getPositionFromServer;
- (void)_getRetainedLastFocusRingView:(id*)arg1 bleedRegion:(id*)arg2;
- (id)_getUndoManager:(BOOL)arg1;
- (long long)_globalWindowNum;
- (id)_gradientImage;
- (void)_handleMouseDraggedEvent:(id)arg1;
- (void)_handleResignKeyAppearanceEvent;
- (void)_handleWindowShouldCloseEvent:(id)arg1;
- (BOOL)_hasAtLeastOneDirtyBackdropView;
- (BOOL)_hasBackgroundColor;
- (BOOL)_hasCornerMask;
- (BOOL)_hasCustomAppearanceInASubview;
- (BOOL)_hasDarkShadow;
- (BOOL)_hasGradientBackground;
- (BOOL)_hasIncompatibleAppearanceOverride;
- (BOOL)_hasMetalSheetEffect;
- (BOOL)_hasOrderedInViewBackingSurfaces;
- (BOOL)_hasScaledBackground;
- (BOOL)_hasToolbar;
- (void)_hideAttachedWindows:(BOOL)arg1 findKey:(BOOL)arg2;
- (void)_hideChildren;
- (void)_hideDockFeedbackWindow;
- (id)_hideHODWindow;
- (void)_hideMenu:(id)arg1;
- (void)_hideSnappingTargets;
- (void)_hideTitlebarFloatingWindow;
- (void)_hideToolbar:(id)arg1 animate:(BOOL)arg2;
- (BOOL)_hidingToolbarForFullScreen;
- (void)_hierarchyDidChangeInView:(id)arg1;
- (BOOL)_ignoreForFullScreenTransition;
- (BOOL)_ignoreForFullScreenTransitionSnapshot;
- (BOOL)_ignoreLayerUpdates;
- (BOOL)_implicitlyAllowsFullScreenAuxiliary;
- (BOOL)_implicitlyAllowsFullScreenPrimary;
- (BOOL)_implicitlyDisallowTiling;
- (BOOL)_implicitlyTileable;
- (BOOL)_inFullScreen;
- (BOOL)_inLiveResize;
- (id)_initContent:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4 contentView:(id)arg5;
- (id)_initContent:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4 screen:(id)arg5 contentView:(id)arg6;
- (id)_initFromGlobalWindow:(long long)arg1 inRect:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (id)_initFromGlobalWindow:(long long)arg1 inRect:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 styleMask:(unsigned long long)arg3;
- (void)_internalEditTitleWithCompletionHandler:(id)arg1;
- (BOOL)_internalHandleAppKitDefinedEvent:(id)arg1;
- (void)_internalHandleWindowMovedWithEvent:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_intersectBottomCornersWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_invalidateAllRevealoversForView:(id)arg1;
- (void)_invalidateCompositedBackground;
- (void)_invalidateDocumentIcon;
- (void)_invalidateScaledBackground;
- (BOOL)_isActiveAndOnScreen:(id)arg1;
- (BOOL)_isChildOfWindow:(id)arg1;
- (BOOL)_isChildOfWindowWithWindowNumber:(long long)arg1;
- (BOOL)_isDarkWindow;
- (BOOL)_isDeallocating;
- (BOOL)_isDocWindow;
- (BOOL)_isDraggable;
- (BOOL)_isEffectivelyTitled;
- (BOOL)_isEffectivelyVisible;
- (BOOL)_isHidden;
- (BOOL)_isImageCache;
- (BOOL)_isInFullScreenSpace;
- (BOOL)_isInSomeVisibleSpace;
- (BOOL)_isKeyWindow;
- (BOOL)_isKeyWindowIgnoringFocus;
- (BOOL)_isNonactivatingPanel;
- (BOOL)_isOnActiveScreen;
- (BOOL)_isOpaqueConsideringBackdropViews;
- (BOOL)_isRunningADocModalAttachedSheet;
- (BOOL)_isTerminating;
- (BOOL)_isTiledInFullScreen;
- (BOOL)_isTitleHidden;
- (BOOL)_isTitledWindow;
- (BOOL)_isToolTipCreationAndDisplayEnabled;
- (BOOL)_isUtilityWindow;
- (BOOL)_isViewScrolling;
- (BOOL)_joinActiveFullScreenSpaceUsingPosition:(unsigned long long)arg1;
- (void)_justOrderOut;
- (BOOL)_keepChildrenAttached;
- (BOOL)_keyViewLoopsMayCrossWindows;
- (BOOL)_keyViewRedirectionDisabled;
- (id)_kitAppearance;
- (void)_lighterViewDetaching:(id)arg1;
- (BOOL)_liveResizeImageCacheingEnabled;
- (BOOL)_liveResizeLOptimizationEnabled;
- (BOOL)_locationTemporary;
- (void)_lockFirstResponder;
- (void)_lockViewHierarchyForDrawing;
- (void)_lockViewHierarchyForDrawingWithExceptionHandler:(BOOL)arg1;
- (void)_lockViewHierarchyForModification;
- (void)_lockViewHierarchyForModificationWithExceptionHandler:(BOOL)arg1;
- (void)_makeCatchupAnimationWithMoveData:(id)arg1 catchupSize:(struct CGSize { double x1; double x2; })arg2;
- (id)_makeFullScreenStorageIfNecessary;
- (void)_makeFullScreenWindow;
- (id)_makeGhostContentViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_makeGhostFeedbackWindowWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_makeKeyRegardlessOfVisibility;
- (void)_makeLayerBacked;
- (void)_makeLayerBackedForTesting;
- (BOOL)_makeParentWindowHaveFirstResponder:(id)arg1;
- (void)_makeSnappingInfo;
- (id)_makeTitlebarRenamingFloatingWindow;
- (BOOL)_makingFirstResponderForMouseDown;
- (void)_markAppropriateForAutomaticFullScreenMode:(BOOL)arg1;
- (void)_markDefaultButtonCellDirty;
- (void)_maskRoundedBottomCorners:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_maxXTitlebarButtonsWidth;
- (BOOL)_measuringMinFullScreenContentSize;
- (unsigned long long)_metalStyle;
- (struct CGSize { double x1; double x2; })_minFullScreenContentSizeForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_minXTitlebarButtonsWidth;
- (BOOL)_miniaturizedOrCanBecomeMain;
- (BOOL)_movableByBottomBar;
- (void)_moveByOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)_moveChildrenByOffset:(struct CGSize { double x1; double x2; })arg1;
- (id)_moveOffscreen;
- (void)_moveOnscreen;
- (BOOL)_needsBehindWindowBlendingForFullScreenTitlebar;
- (BOOL)_needsDisplayForEntireRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_needsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_needsFullScreenManager;
- (id)_newFirstResponderAfterResigning;
- (void)_noteTileFrameChanged;
- (void)_nsib_setUsesPointIntegralizationForLayout:(BOOL)arg1;
- (BOOL)_nsib_usesPointIntegralizationForLayout;
- (id)_oldFirstResponderBeforeBecoming;
- (void)_oldPlaceWindow:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_orderForwardWithEvent:(id)arg1;
- (long long)_orderFrontAnimationType;
- (void)_orderOutAndCalcKeyWithCounter:(BOOL)arg1;
- (void)_orderOutAndCalcKeyWithCounter:(BOOL)arg1 stillVisible:(BOOL)arg2 docWindow:(id)arg3;
- (long long)_orderOutAnimationType;
- (BOOL)_orderOutInProgress;
- (void)_orderOutWhenAppHiddenRelativeToWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_overrideDefeatingConstrainFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toScreen:(id)arg2;
- (BOOL)_ownerOnly;
- (unsigned long long)_parentSpaceID;
- (id)_parentWindowForAddingToMovementGroupWithProposedParent:(id)arg1;
- (BOOL)_performDividerDragWithEvent:(id)arg1 forResizeDirection:(long long)arg2;
- (BOOL)_performKeyEquivalentConditionally:(id)arg1;
- (void)_performToggleToolbarShown:(id)arg1;
- (void)_persistFrame;
- (unsigned int)_persistentUIWindowID;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pixelRectInPoints:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pointRectInPixels:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_positionWindowOnBestScreen;
- (BOOL)_positionsToolbarInExternalWindow;
- (void)_postWillOrderOffScreenNotification;
- (void)_postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor:(double)arg1 previousColorSpace:(id)arg2;
- (void)_postWindowNeedsDisplayOrLayoutOrUpdateConstraintsUnlessPostingDisabled;
- (void)_postWindowNeedsDisplayUnlessPostingDisabled;
- (void)_postWindowNeedsLayoutUnlessPostingDisabled;
- (void)_postWindowNeedsUpdateConstraintsUnlessPostingDisabled;
- (void)_postWindowWillOrderOnScreenNotification;
- (BOOL)_postingDisabled;
- (id)_preferredNextWindowToSelect;
- (unsigned long long)_preferredPositionForTileJoin;
- (BOOL)_presenterOnly;
- (BOOL)_preventsActivation;
- (void)_queryCanAddSiblingTileForWindow:(id)arg1 responseHandler:(id)arg2;
- (void)_reacquireToolbarViewFromFullScreenWindow;
- (BOOL)_realMakeFirstResponder:(id)arg1;
- (long long)_realWindowNumber;
- (void)_reallyDoOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_reallyDoOrderWindowAboveOrBelow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_reallyDoOrderWindowOutRelativeTo:(long long)arg1 findKey:(BOOL)arg2 forCounter:(BOOL)arg3 force:(BOOL)arg4 isModal:(BOOL)arg5;
- (BOOL)_reallyIsVisible;
- (BOOL)_reallyNeedsWindowRef;
- (void)_recalculateKeyViewLoopIfNeeded;
- (unsigned long long)_rectEdgesForDocking;
- (void)_registerBackdropView:(id)arg1;
- (id)_registeredBackdropViews;
- (id)_remoteRenameSession;
- (void)_removeAsSavedFirstResponder:(id)arg1;
- (void)_removeFromGroups:(id)arg1;
- (void)_removeFromGroupsEvenIfOffscreen:(id)arg1;
- (void)_removeFromParentIfPossible;
- (void)_removeFullScreenManager;
- (void)_removeGlobalWindowFromAnimationsWithWindowNumber:(unsigned int)arg1;
- (void)_removeTitlebarRenamingFloatingWindow;
- (void)_removeWindowDockingEventMonitor;
- (void)_renamingDidEndNormally:(BOOL)arg1;
- (void)_reorderChildren;
- (void)_resetDisableCounts;
- (void)_resetFirstResponder;
- (void)_resetPostingCounts;
- (void)_resignFullScreenWindowAndExitFullScreen:(BOOL)arg1;
- (void)_resignKeyFocus;
- (void)_resizeMetalBackground;
- (long long)_resizeWeighting;
- (BOOL)_resizesFromEdges;
- (void)_resolveAnySpaceMisassignmentByUpdatingManagedDisplay;
- (void)_resolveAutomaticEnterFullScreenFlags;
- (id)_restorableStateRepresentedURL;
- (void)_restoreLevelAfterRunningModal;
- (id)_restoreModalWindowLevel;
- (id)_runningWindowTransformAnimation;
- (void)_saveFirstResponder;
- (void)_saveFrameBeforeFullScreen;
- (void)_saveFrameUsingName:(id)arg1 domain:(id)arg2;
- (void)_saveTilePreferredSize;
- (void)_saveUserFrame;
- (id)_savedFirstResponderForRenaming;
- (id)_savedScreen;
- (id)_scaledBackground;
- (BOOL)_scalesBackgroundHorizontally;
- (BOOL)_scalesBackgroundVertically;
- (void)_scheduleShowingDockWindowFeedback;
- (void)_scheduleWindowForBatchOrdering:(long long)arg1 relativeTo:(long long)arg2;
- (void)_screenChanged:(id)arg1;
- (BOOL)_secondaryKeyMakeFirstResponder:(id)arg1;
- (BOOL)_selectAnyValidResponderOverride;
- (void)_selectFirstKeyView;
- (int)_semanticContext;
- (void)_sendDidEnterFullScreenToManager;
- (void)_sendForcedWindowChangedKeyState;
- (void)_sendWindowChangedKeyStateIfNeeded;
- (void)_sendWindowDidEndDragging;
- (void)_sendWindowWillMoveNoteWithEvent:(id)arg1;
- (void)_sendWindowWillStartDragging;
- (void)_setAlwaysOnTop:(BOOL)arg1;
- (void)_setAnyViewCanDrawConcurrently:(BOOL)arg1;
- (void)_setAutoPositionMask:(unsigned long long)arg1;
- (void)_setAvoidsActivation:(BOOL)arg1;
- (int)_setBackingStoreResolution:(double)arg1;
- (void)_setBindingAdaptor:(id)arg1;
- (int)_setCGColorSpace:(struct CGColorSpace { }*)arg1;
- (void)_setCanCycle:(BOOL)arg1;
- (BOOL)_setColorSpace:(id)arg1 sendNotification:(BOOL)arg2 displayIfChanged:(BOOL)arg3;
- (void)_setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setDefaultButtonCell:(id)arg1;
- (void)_setDisableInteraction:(BOOL)arg1;
- (void)_setDocumentEdited:(BOOL)arg1;
- (void)_setEventMonitorForRenaming:(id)arg1;
- (void)_setExcludedFromVisibleWindowList:(BOOL)arg1;
- (void)_setFallBackInitialFirstResponder:(id)arg1;
- (void)_setFirstResponder:(id)arg1;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 display:(BOOL)arg2 allowImplicitAnimation:(BOOL)arg3 stashSize:(BOOL)arg4;
- (void)_setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 updateBorderViewSize:(BOOL)arg2;
- (void)_setFrameAfterMove:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_setFrameAutosaveName:(id)arg1 changeFrame:(BOOL)arg2;
- (void)_setFrameCommon:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 display:(BOOL)arg2 stashSize:(BOOL)arg3;
- (BOOL)_setFrameFromString:(id)arg1 overrideTopLeft:(const struct CGPoint { double x1; double x2; }*)arg2 preferActiveDisplay:(BOOL)arg3 constrainFullFrame:(BOOL)arg4 force:(BOOL)arg5;
- (void)_setFrameNeedsDisplay:(BOOL)arg1;
- (void)_setFrameOriginForDockMove:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setFrameSavedUsingTitle:(BOOL)arg1;
- (BOOL)_setFrameUsingName:(id)arg1 domain:(id)arg2;
- (BOOL)_setFrameUsingName:(id)arg1 domain:(id)arg2 force:(BOOL)arg3;
- (void)_setFullScreenPresentationOptions:(unsigned long long)arg1;
- (void)_setFullScreenSavedFrameFromWindow:(id)arg1;
- (void)_setFullScreenWindowManager:(id)arg1;
- (void)_setHasCustomAppearanceInASubview:(BOOL)arg1;
- (void)_setIgnoreLayerUpdates:(BOOL)arg1;
- (void)_setIsRemovingFromParentWindow:(BOOL)arg1;
- (void)_setKeepChildrenAttached:(BOOL)arg1;
- (void)_setKeyViewGroupBoundaryNeedsRecalc:(BOOL)arg1;
- (void)_setKeyViewLoopNeedsRecalc:(BOOL)arg1;
- (void)_setKeyViewRedirectionDisabled:(BOOL)arg1;
- (void)_setKeyViewSelectionDirection:(unsigned long long)arg1;
- (void)_setLastFocusRingView:(id)arg1 bleedRegion:(id)arg2;
- (void)_setLiveResizeImageCacheingEnabled:(BOOL)arg1;
- (void)_setLocationTemporary:(BOOL)arg1;
- (void)_setMiniImageInDock;
- (void)_setMiniaturized:(BOOL)arg1;
- (void)_setModal:(BOOL)arg1;
- (void)_setModalWindowLevel;
- (void)_setMovableByBottomBar:(BOOL)arg1;
- (void)_setNeedsDisplay:(id)arg1;
- (void)_setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setNeedsDisplayInRegion:(id)arg1;
- (void)_setNeedsZoom:(id)arg1;
- (void)_setNextToolbarDisplayMode:(id)arg1;
- (void)_setNextToolbarSizeAndDisplayMode:(id)arg1;
- (void)_setNextToolbarSizeMode:(id)arg1;
- (void)_setNonactivatingPanel:(BOOL)arg1;
- (void)_setOcclusionStateIsVisible:(BOOL)arg1;
- (id)_setOneShotIsDelayed:(BOOL)arg1;
- (void)_setOrderFrontAnimationType:(long long)arg1;
- (void)_setOrderOutAnimationType:(long long)arg1;
- (void)_setOrderOutInProgress:(BOOL)arg1;
- (void)_setOwnsRealWindow:(BOOL)arg1;
- (void)_setPreferredNextWindowToSelect:(id)arg1;
- (void)_setPreventsActivation:(BOOL)arg1;
- (void)_setPreviousToolbarSizeAndDisplayMode:(id)arg1;
- (void)_setRectEdgesForDocking:(unsigned long long)arg1;
- (void)_setRegisteredBackdropViews:(id)arg1;
- (void)_setRelativeOrdering:(long long)arg1;
- (void)_setRemoteRenameSession:(id)arg1;
- (void)_setRepresentedURL:(id)arg1;
- (void)_setResizeWeighting:(long long)arg1;
- (void)_setRunningWindowTransformAnimation:(id)arg1;
- (void)_setSavedFirstResponderForRenaming:(id)arg1;
- (void)_setShadowAnimationProgress:(double)arg1;
- (void)_setShadowParameters;
- (void)_setShowingModalFrame:(BOOL)arg1;
- (void)_setSubLevel:(long long)arg1;
- (void)_setTempHidden:(BOOL)arg1;
- (void)_setTexturedBackground:(BOOL)arg1;
- (void)_setTileMinSize:(struct CGSize { double x1; double x2; })arg1 tileMaxSize:(struct CGSize { double x1; double x2; })arg2 tilePreferredSize:(struct CGSize { double x1; double x2; })arg3;
- (void)_setTitleNeedsDisplay;
- (void)_setTitlebarFloatingWindow:(id)arg1;
- (void)_setTransformDidCompleteHandler:(id)arg1;
- (void)_setTransformForAnimation:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 anchorPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)_setUnsnapCatchupAnimation:(id)arg1;
- (void)_setUpFirstResponder;
- (void)_setUpFirstResponderBeforeBecomingVisible;
- (void)_setUtilityWindow:(BOOL)arg1;
- (void)_setViewBackingSurfaceNeedsDisplay:(id)arg1;
- (void)_setVisible:(BOOL)arg1;
- (void)_setWantsHideOnDeactivate:(BOOL)arg1;
- (void)_setWantsToBeOnMainScreen:(BOOL)arg1;
- (void)_setWantsToDestroyRealWindow:(BOOL)arg1;
- (void)_setWasCGOrderingEnabled:(BOOL)arg1;
- (void)_setWasReshapingEnabled:(BOOL)arg1;
- (void)_setWindowDepth:(int)arg1;
- (void)_setWindowDidExistAtLaunch:(BOOL)arg1;
- (void)_setWindowDockFeedbackWindow:(id)arg1;
- (void)_setWindowDockingEventMonitor:(id)arg1;
- (void)_setWindowMoveDisabled:(BOOL)arg1;
- (void)_setWindowNumber:(long long)arg1;
- (void)_setWindowResolution:(double)arg1 displayIfChanged:(BOOL)arg2;
- (void)_setWindowTag;
- (BOOL)_shadowNeedsUpdate;
- (unsigned long long)_shadowOptionsForActiveAppearance:(BOOL)arg1;
- (id)_shadowParametersForActiveAppearance:(BOOL)arg1 usePreLoadKeys:(BOOL)arg2;
- (id)_shadowRimInfo;
- (long long)_shadowType;
- (long long)_shadowTypeForActiveAppearance:(BOOL)arg1;
- (void)_shake;
- (BOOL)_sharesParentKeyState;
- (BOOL)_shouldAutoDecSubLevel;
- (BOOL)_shouldAutoIncSubLevel;
- (BOOL)_shouldCloseForTermination;
- (BOOL)_shouldDoClientSideDragging;
- (BOOL)_shouldDoLayerPerformanceUpdates;
- (BOOL)_shouldDockWindow;
- (BOOL)_shouldEnterFullScreenModeOnOrderIn;
- (BOOL)_shouldGetCornerMaskFromVisualEffectView;
- (BOOL)_shouldIgnoreSetFrameOrigin;
- (BOOL)_shouldIncChildWindowSubLevel;
- (BOOL)_shouldIncludeTitlebarAccessoryViewsInKeyViewLoop;
- (BOOL)_shouldJoinActiveSpaceOnOrderIn;
- (BOOL)_shouldOpenInFullScreen;
- (BOOL)_shouldParticipateInBatchOrdering:(long long)arg1;
- (BOOL)_shouldPropagateFrameChangesToWindowServer;
- (BOOL)_shouldRemoveFromParentIfPossible;
- (BOOL)_shouldRenderContextWithCoreAnimation;
- (BOOL)_shouldRoundCornersForSurface;
- (BOOL)_shouldShowResizeCursor;
- (BOOL)_shouldSnapForEvent:(id)arg1;
- (BOOL)_shouldSnapWindowsClientSide;
- (BOOL)_shouldStartWindowDragForEvent:(id)arg1;
- (BOOL)_shouldSyncSurfaceToView;
- (void)_showDockFeedbackWindowAtRectEdges:(unsigned long long)arg1;
- (void)_showDragBeginFeedback;
- (void)_showDynamicDragFeedbackForValue:(double)arg1;
- (void)_showSnappingTargets;
- (BOOL)_showToolTip;
- (void)_showToolbar:(id)arg1 animate:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_standardFrame;
- (void)_startClientSideMove;
- (void)_startLiveResize;
- (void)_startShowingWindowDockingFeedback;
- (void)_startWindowDragWithEvent:(id)arg1 animate:(BOOL)arg2;
- (void)_startWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2 animate:(BOOL)arg3;
- (void)_startWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2 animate:(BOOL)arg3 completionHandler:(id)arg4;
- (void)_startWindowMoveWithEvent:(id)arg1;
- (void)_stopClientSideMove;
- (id)_stringWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onScreen:(id)arg2 adjustingForToolbar:(BOOL)arg3;
- (id)_stringWithSavedFrame;
- (id)_stringWithSavedFrameAdjustingForToolbar:(BOOL)arg1;
- (long long)_subLevel;
- (void)_subtractFromNeedsDisplayRegion:(id)arg1;
- (BOOL)_supportsTitlebarAccessoryViewControllers;
- (void)_surfaceAddedToWindow:(id)arg1;
- (void)_surfaceMovedInWindow:(id)arg1;
- (void)_surfaceOrderedInWindow:(id)arg1;
- (void)_surfaceRemovedFromWindow:(id)arg1;
- (void)_surrenderToolbarViewForFullScreenWindow;
- (void)_synchronizeOverrideForActiveGestureRecognizers;
- (void)_takeApplicationMenuIfNeeded:(id)arg1;
- (id)_tempHide:(BOOL)arg1 relWin:(long long)arg2;
- (id)_tempHideHODWindow;
- (id)_tempUnhideHODWindow;
- (void)_termOneShotWindow;
- (void)_termWindowIfOwner;
- (id)_textureImage;
- (id)_texturePattern;
- (id)_themeFrame;
- (id)_threadContext;
- (void)_tileAndUpdateFullScreenManager;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tileFrameForFullScreen;
- (struct CGSize { double x1; double x2; })_tilePreferredSize;
- (unsigned long long)_tileSpaceID;
- (void)_titleBarRenamingApplicationDidResignActive:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleFrameForEditingWithProposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_titleIsRepresentedFilename;
- (id)_titlebarContainerView;
- (void)_titlebarEditingDidEndNormally:(BOOL)arg1 title:(id)arg2 editingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 grantHandler:(id)arg4;
- (id)_titlebarFloatingWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titlebarFloatingWindowFrame;
- (BOOL)_titlebarRenamingShouldBeInWindow;
- (id)_toggleFrameAutosaveEnabled:(id)arg1;
- (void)_toggleOrderedFrontMost:(id)arg1;
- (BOOL)_toggleOrderedFrontMostWillOrderOut;
- (void)_toggleSelectAnyValidResponderOverride;
- (void)_toggleToolbarConfigPanel:(id)arg1;
- (BOOL)_toolbarButtonIsClickable;
- (void)_toolbarFrameSizeChanged:(id)arg1 oldSize:(struct CGSize { double x1; double x2; })arg2;
- (BOOL)_toolbarIsShown;
- (double)_toolbarLeadingSpace;
- (void)_toolbarPillButtonClicked:(id)arg1;
- (double)_toolbarTrailingSpace;
- (id)_toolbarView;
- (double)_topBarHeight;
- (id)_topmostChild;
- (BOOL)_tryLockViewHierarchyForModification;
- (BOOL)_tryLockViewHierarchyForModificationWithHandler:(BOOL)arg1;
- (BOOL)_tryRetain;
- (BOOL)_tryWindowDragWithEvent:(id)arg1;
- (id)_ultimateParentWindow;
- (void)_unbindTitleIfNecessary;
- (void)_unhideChildren;
- (id)_unhideHODWindow;
- (void)_unlockFirstResponder;
- (void)_unlockViewHierarchyForDrawing;
- (void)_unlockViewHierarchyForModification;
- (void)_unregisterBackdropView:(id)arg1;
- (void)_unscheduleWindowForBatchOrdering;
- (id)_unsnapCatchupAnimation;
- (void)_updateBackdropViewsIfNeeded;
- (void)_updateButtonsForFullScreen;
- (void)_updateCGWindowSizesForTiling;
- (void)_updateCGWindowSizesForTilingImmediatelyUsingActualValues:(BOOL)arg1;
- (void)_updateCollectionBehavior;
- (void)_updateContentLayoutGuideFrame;
- (void)_updateFirstResponderForIgnoredChildWindow:(id)arg1;
- (void)_updateFrameToScreenConstraints;
- (void)_updateGrowBoxOwner;
- (void)_updateGrowBoxViewForSurface:(id)arg1;
- (BOOL)_updateInheritedBackingScaleFactorAndDisplayIfChanged:(BOOL)arg1;
- (BOOL)_updateInheritedColorSpaceAndDisplayIfChanged:(BOOL)arg1;
- (void)_updateManagedDisplay;
- (void)_updateMetalBackgroundStyle;
- (void)_updateMovementGroup;
- (void)_updateSavedFrameForFullScreen;
- (void)_updateSavedScreen;
- (void)_updateSettingsSendingScreenChangeNotificationIfNeeded:(BOOL)arg1;
- (BOOL)_updateStructuralRegionsOnNextDisplayCycle;
- (void)_updateSubLevel;
- (void)_updateTitleTextField;
- (void)_updateWindowDockFeedbackAtRectEdges:(unsigned long long)arg1;
- (void)_updateWindowIsFullScreenCapable;
- (BOOL)_useMetalPattern;
- (BOOL)_userInterfaceItemIsTemporarilyDisabled:(id)arg1;
- (BOOL)_usesCustomDrawing;
- (void)_validSize:(struct CGSize { double x1; double x2; }*)arg1 forFullScreen:(BOOL)arg2 force:(BOOL)arg3;
- (void)_validSize:(struct CGSize { double x1; double x2; }*)arg1 force:(BOOL)arg2;
- (void)_validateCollectionBehavior:(unsigned long long)arg1;
- (id)_validateFirstResponder:(id)arg1;
- (void)_verifyDefaultButtonCell:(BOOL)arg1;
- (void)_verifyDefaultButtonCellIfDirty;
- (id)_verticalSlice;
- (id)_viewDetaching:(id)arg1;
- (id)_viewFreeing:(id)arg1;
- (BOOL)_viewIsInContentBorder:(id)arg1;
- (BOOL)_visibleAndCanBecomeKey;
- (BOOL)_visibleAndCanBecomeKeyLimitedOK:(BOOL)arg1;
- (BOOL)_wantToBeModal;
- (BOOL)_wantsHideOnDeactivate;
- (BOOL)_wantsMenuBarFullScreenButton;
- (BOOL)_wantsSnapshotProxyWindowForOrderOutAnimation;
- (BOOL)_wantsToDestroyRealWindow;
- (BOOL)_wantsUserAttention;
- (BOOL)_wasCGOrderingEnabled;
- (BOOL)_wasModalAtSometime;
- (BOOL)_wasReshapingEnabled;
- (BOOL)_willBeInFullScreenSpace;
- (void)_willBeginViewScrolling;
- (void)_willEnterFullScreen;
- (void)_willRemoveChildWindow:(id)arg1;
- (BOOL)_windowCanBeRestored;
- (int)_windowDepth;
- (void)_windowDeviceRound;
- (void)_windowDeviceRoundWithContext:(id)arg1;
- (BOOL)_windowDidExistAtLaunch;
- (id)_windowDockFeedbackWindow;
- (unsigned long long)_windowDockRectEdgesFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_windowDockingEventMonitor;
- (BOOL)_windowDying;
- (void)_windowExposed:(id)arg1;
- (id)_windowForInlineTitleEditing;
- (id)_windowForToolbar;
- (BOOL)_windowIsBeingMoved;
- (BOOL)_windowMoveDisabled;
- (void)_windowMoved:(id)arg1;
- (void)_windowMovedToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_windowResolution;
- (void)_windowTransformAnimationDidEnd:(id)arg1;
- (id)_windowTransformAnimationForOrdering:(long long)arg1 animationType:(long long)arg2 interruptingAnimation:(id)arg3;
- (void)_windowTransformAnimationWillBegin:(id)arg1;
- (BOOL)_windowWillBecomeFullScreen;
- (BOOL)_worksWhenModalOrChildOfModalWindow;
- (BOOL)_wouldBeSufficientlyUnclippedOnSpace:(unsigned long long)arg1;
- (BOOL)_zoomButtonIsFullScreenButton;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityParent;
- (void)addChildWindow:(id)arg1 ordered:(long long)arg2;
- (void)addChildWindow:(id)arg1 ordered:(long long)arg2 shareKey:(BOOL)arg3;
- (void)addDocumentIconButton;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4;
- (void)addTabbedWindow:(id)arg1 ordered:(long long)arg2;
- (void)addTitlebarAccessoryViewController:(id)arg1;
- (void)addUnderTitlebarView:(id)arg1 withAssociatedWithView:(id)arg2;
- (BOOL)allowsConcurrentViewDrawing;
- (BOOL)allowsFontSmoothing;
- (BOOL)allowsToolTipsWhenApplicationIsInactive;
- (double)alphaValue;
- (long long)animationBehavior;
- (id)animationForKey:(id)arg1;
- (id)animationForKeyPath:(id)arg1;
- (double)animationResizeTime:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)animations;
- (id)animator;
- (id)appearance;
- (struct CGSize { double x1; double x2; })aspectRatio;
- (id)attachedSheet;
- (BOOL)autofill;
- (id)autofillColor;
- (BOOL)autorecalculatesContentBorderThicknessForEdge:(unsigned long long)arg1;
- (BOOL)autorecalculatesKeyViewLoop;
- (id)backgroundColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })backingAlignedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2;
- (unsigned long long)backingLocation;
- (double)backingScaleFactor;
- (unsigned long long)backingType;
- (void)becomeKeyWindow;
- (void)becomeMainWindow;
- (BOOL)becomesKeyOnlyIfNeeded;
- (void)beginCriticalSheet:(id)arg1 completionHandler:(id)arg2;
- (void)beginSheet:(id)arg1 completionHandler:(id)arg2;
- (void)beginWindowDragWithEvent:(id)arg1;
- (BOOL)bottomCornerRounded;
- (void)cacheImageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)canBeVisibleOnAllSpaces;
- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeVisibleWithoutLogin;
- (BOOL)canCycle;
- (BOOL)canEnterFullScreenMode;
- (BOOL)canHide;
- (BOOL)canMoveToCurrentSpaceOnScreen:(id)arg1;
- (BOOL)canRepresentDisplayGamut:(long long)arg1;
- (BOOL)canStoreColor;
- (struct CGPoint { double x1; double x2; })cascadeTopLeftFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)center;
- (void)changeToolbarDisplayMode:(id)arg1;
- (id)childWindows;
- (void)close;
- (unsigned long long)collectionBehavior;
- (id)colorSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })constrainFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toScreen:(id)arg2;
- (struct CGSize { double x1; double x2; })contentAspectRatio;
- (double)contentBorderThicknessForEdge:(unsigned long long)arg1;
- (id)contentInsetColor;
- (id)contentLayoutGuide;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentLayoutRect;
- (struct CGSize { double x1; double x2; })contentMaxSize;
- (struct CGSize { double x1; double x2; })contentMinSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })contentResizeIncrements;
- (id)contentSeparatorColor;
- (id)contentView;
- (id)contentViewController;
- (struct CGPoint { double x1; double x2; })convertBaseToScreen:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointFromScreen:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToScreen:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromBacking:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromScreen:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToBacking:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToScreen:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertScreenToBase:(struct CGPoint { double x1; double x2; })arg1;
- (id)dataWithEPSInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)dataWithPDFInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (id)deepestScreen;
- (id)defaultButtonCell;
- (id)delegate;
- (void)deminiaturize:(id)arg1;
- (int)depthLimit;
- (id)deviceDescription;
- (void)disableFlushWindow;
- (void)disableKeyEquivalentForDefaultButtonCell;
- (void)disableScreenUpdatesUntilFlush;
- (void)discardCachedImage;
- (void)display;
- (void)displayIfNeeded;
- (BOOL)displaysWhenScreenProfileChanges;
- (void)doCommandBySelector:(SEL)arg1;
- (id)dockTile;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })dragRectForFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)editTitle:(id)arg1;
- (void)editTitleWithCompletionHandler:(id)arg1;
- (id)effectiveAppearance;
- (void)enableFlushWindow;
- (void)enableKeyEquivalentForDefaultButtonCell;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)endEditingFor:(id)arg1;
- (void)endSheet:(id)arg1;
- (void)endSheet:(id)arg1 returnCode:(long long)arg2;
- (void)enterFullScreenMode:(id)arg1;
- (void)exitFullScreenMode:(id)arg1;
- (id)fieldEditor:(BOOL)arg1 forObject:(id)arg2;
- (id)firstResponder;
- (void)flushWindow;
- (void)flushWindowIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)frameAutosaveName;
- (struct CGPoint { double x1; double x2; })frameOrigin;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2;
- (struct CGPoint { double x1; double x2; })frameTopLeftPoint;
- (id)fullScreenAnimator;
- (long long)gState;
- (id)graphicsContext;
- (void*)graphicsPort;
- (BOOL)hasDynamicDepthLimit;
- (BOOL)hasShadow;
- (void)helpRequested:(id)arg1;
- (void)hideToolbar:(id)arg1;
- (BOOL)hidesOnDeactivate;
- (id)identifier;
- (BOOL)inLiveResize;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (id)initWithContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4 screen:(id)arg5;
- (id)initialFirstResponder;
- (void)insertTitlebarAccessoryViewController:(id)arg1 atIndex:(long long)arg2;
- (void)invalidateShadow;
- (BOOL)isAutodisplay;
- (BOOL)isDocumentEdited;
- (BOOL)isExcludedFromWindowsMenu;
- (BOOL)isFlushWindowDisabled;
- (BOOL)isKeyWindow;
- (BOOL)isMainWindow;
- (BOOL)isMiniaturized;
- (BOOL)isMovable;
- (BOOL)isMovableByWindowBackground;
- (BOOL)isOnActiveSpace;
- (BOOL)isOneShot;
- (BOOL)isOpaque;
- (BOOL)isReleasedWhenClosed;
- (BOOL)isRestorable;
- (BOOL)isSheet;
- (BOOL)isVisible;
- (BOOL)isZoomed;
- (void)keyDown:(id)arg1;
- (unsigned long long)keyViewSelectionDirection;
- (long long)level;
- (void)lockButtonClicked:(id)arg1;
- (BOOL)makeFirstResponder:(id)arg1;
- (void)makeKeyAndOrderFront:(id)arg1;
- (void)makeKeyWindow;
- (void)makeMainWindow;
- (struct CGSize { double x1; double x2; })maxFullScreenContentSize;
- (struct CGSize { double x1; double x2; })maxSize;
- (id)menu;
- (void)mergeAllWindows:(id)arg1;
- (struct CGSize { double x1; double x2; })minFrameSizeForMinContentSize:(struct CGSize { double x1; double x2; })arg1 styleMask:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })minFullScreenContentSize;
- (struct CGSize { double x1; double x2; })minSize;
- (void)miniaturize:(id)arg1;
- (id)miniwindowImage;
- (id)miniwindowTitle;
- (void)mouseDown:(id)arg1;
- (void)moveTabToNewWindow:(id)arg1;
- (unsigned long long)occlusionState;
- (void)orderBack:(id)arg1;
- (void)orderFront:(id)arg1;
- (void)orderFrontRegardless;
- (void)orderOut:(id)arg1;
- (void)orderWindow:(long long)arg1 relativeTo:(long long)arg2;
- (id)parentWindow;
- (void)performClose:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)performMiniaturize:(id)arg1;
- (BOOL)performMnemonic:(id)arg1;
- (void)performWindowDragWithEvent:(id)arg1;
- (void)performZoom:(id)arg1;
- (unsigned long long)preferredBackingLocation;
- (BOOL)preservesContentDuringLiveResize;
- (BOOL)preventsApplicationTerminationWhenModal;
- (void)print:(id)arg1;
- (void)quickLookPreviewItems:(id)arg1;
- (void)quickLookPreviewItemsAtWindowLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)quickLookWithEvent:(id)arg1;
- (void)recalculateKeyViewLoop;
- (void)redo:(id)arg1;
- (oneway void)release;
- (void)removeChildWindow:(id)arg1;
- (void)removeTitlebarAccessoryViewControllerAtIndex:(long long)arg1;
- (void)removeUnderTitlebarView:(id)arg1 withAssociatedWithView:(id)arg2;
- (id)representedFilename;
- (id)representedURL;
- (void)resignKeyWindow;
- (void)resignMainWindow;
- (long long)resizeFlags;
- (struct CGSize { double x1; double x2; })resizeIncrements;
- (void)restoreCachedImage;
- (void)restoreStateWithCoder:(id)arg1;
- (id)retain;
- (unsigned long long)retainCount;
- (void)rightMouseDown:(id)arg1;
- (void)runToolbarConfigurationPalette:(id)arg1;
- (void)runToolbarCustomizationPalette:(id)arg1;
- (void)saveFrameUsingName:(id)arg1;
- (id)screen;
- (void)selectKeyViewFollowingView:(id)arg1;
- (void)selectKeyViewPrecedingView:(id)arg1;
- (void)selectNextKeyView:(id)arg1;
- (void)selectNextTab:(id)arg1;
- (void)selectPreviousKeyView:(id)arg1;
- (void)selectPreviousTab:(id)arg1;
- (void)setAllowsConcurrentViewDrawing:(BOOL)arg1;
- (void)setAllowsToolTipsWhenApplicationIsInactive:(BOOL)arg1;
- (void)setAlphaValue:(double)arg1;
- (void)setAnimationBehavior:(long long)arg1;
- (void)setAnimations:(id)arg1;
- (void)setAppearance:(id)arg1;
- (void)setAspectRatio:(struct CGSize { double x1; double x2; })arg1;
- (void)setAutodisplay:(BOOL)arg1;
- (void)setAutofill:(BOOL)arg1;
- (void)setAutofillColor:(id)arg1;
- (void)setAutorecalculatesContentBorderThickness:(BOOL)arg1 forEdge:(unsigned long long)arg2;
- (void)setAutorecalculatesKeyViewLoop:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackingType:(unsigned long long)arg1;
- (void)setBottomCornerRounded:(BOOL)arg1;
- (void)setCanBeVisibleOnAllSpaces:(BOOL)arg1;
- (void)setCanBecomeVisibleWithoutLogin:(BOOL)arg1;
- (void)setCanCycle:(BOOL)arg1;
- (void)setCanEnterFullScreenMode:(BOOL)arg1;
- (void)setCanHide:(BOOL)arg1;
- (void)setCollectionBehavior:(unsigned long long)arg1;
- (void)setColorSpace:(id)arg1;
- (void)setContentAspectRatio:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentBorderThickness:(double)arg1 forEdge:(unsigned long long)arg2;
- (void)setContentMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentMinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentResizeIncrements:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentView:(id)arg1;
- (void)setContentViewController:(id)arg1;
- (void)setDefaultButtonCell:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDepthLimit:(int)arg1;
- (void)setDisplaysWhenScreenProfileChanges:(BOOL)arg1;
- (void)setDocumentEdited:(BOOL)arg1;
- (void)setDynamicDepthLimit:(BOOL)arg1;
- (void)setExcludedFromWindowsMenu:(BOOL)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 display:(BOOL)arg2;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 display:(BOOL)arg2 animate:(BOOL)arg3;
- (BOOL)setFrameAutosaveName:(id)arg1;
- (void)setFrameFromString:(id)arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameTopLeftPoint:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)setFrameUsingName:(id)arg1;
- (BOOL)setFrameUsingName:(id)arg1 force:(BOOL)arg2;
- (void)setFullScreenAnimator:(id)arg1;
- (void)setHasShadow:(BOOL)arg1;
- (void)setHidesOnDeactivate:(BOOL)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setInitialFirstResponder:(id)arg1;
- (void)setKeyView:(id)arg1;
- (void)setLevel:(long long)arg1;
- (void)setMaxFullScreenContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMenu:(id)arg1;
- (void)setMinFullScreenContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMiniwindowImage:(id)arg1;
- (void)setMiniwindowTitle:(id)arg1;
- (void)setMovable:(BOOL)arg1;
- (void)setMovableByWindowBackground:(BOOL)arg1;
- (void)setOneShot:(BOOL)arg1;
- (void)setOpaque:(BOOL)arg1;
- (void)setParentWindow:(id)arg1;
- (void)setPreferredBackingLocation:(unsigned long long)arg1;
- (void)setPreservesContentDuringLiveResize:(BOOL)arg1;
- (void)setPreventsApplicationTerminationWhenModal:(BOOL)arg1;
- (void)setReleasedWhenClosed:(BOOL)arg1;
- (void)setRepresentedFilename:(id)arg1;
- (void)setRepresentedURL:(id)arg1;
- (void)setResizeIncrements:(struct CGSize { double x1; double x2; })arg1;
- (void)setRestorable:(BOOL)arg1;
- (void)setSharingType:(unsigned long long)arg1;
- (void)setShouldBeVisibleOnlyOnCurrentSpace:(BOOL)arg1;
- (void)setShowsContentSeparator:(BOOL)arg1 forEdge:(unsigned long long)arg2;
- (void)setShowsLockButton:(BOOL)arg1;
- (void)setShowsResizeIndicator:(BOOL)arg1;
- (void)setShowsToolbarButton:(BOOL)arg1;
- (void)setStyleMask:(unsigned long long)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleHidden:(BOOL)arg1;
- (void)setTitleMode:(long long)arg1;
- (void)setTitleVisibility:(long long)arg1;
- (void)setTitleWithRepresentedFilename:(id)arg1;
- (void)setTitlebarAppearsTransparent:(BOOL)arg1;
- (void)setTitlebarBlurFiltersDisabled:(BOOL)arg1;
- (void)setToolbar:(id)arg1;
- (void)setUserInterfaceItemIdentifier:(id)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setViewsNeedDisplay:(BOOL)arg1;
- (void)setWindowController:(id)arg1;
- (unsigned long long)shadowOptions;
- (unsigned long long)shadowOptionsForActiveAppearance:(BOOL)arg1;
- (id)shadowParameters;
- (id)shadowParametersAllowingPreloadKeys:(BOOL)arg1;
- (unsigned long long)sharingType;
- (unsigned long long)sheetBehavior;
- (id)sheetParent;
- (id)sheets;
- (BOOL)shouldBeVisibleOnlyOnCurrentSpace;
- (void)showToolbar:(id)arg1;
- (BOOL)showsContentSeparatorForEdge:(unsigned long long)arg1;
- (BOOL)showsFullScreenButton;
- (BOOL)showsLockButton;
- (BOOL)showsResizeIndicator;
- (BOOL)showsToolbarButton;
- (id)standardWindowButton:(unsigned long long)arg1;
- (id)stringWithSavedFrame;
- (unsigned long long)styleMask;
- (id)tabbedWindows;
- (id)title;
- (BOOL)titleHidden;
- (long long)titleMode;
- (long long)titleVisibility;
- (id)titlebarAccessoryViewControllers;
- (BOOL)titlebarAppearsTransparent;
- (BOOL)titlebarBlurFiltersDisabled;
- (id)titlebarViewController;
- (void)toggleFullScreen:(id)arg1;
- (void)toggleTabBar:(id)arg1;
- (void)toggleToolbarShown:(id)arg1;
- (void)toggleUsingSmallToolbarIcons:(id)arg1;
- (id)toolbar;
- (struct CGPoint { double x1; double x2; })topLeftPoint;
- (BOOL)tryToPerform:(SEL)arg1 with:(id)arg2;
- (void)undo:(id)arg1;
- (id)undoManager;
- (void)update;
- (void)useOptimizedDrawing:(BOOL)arg1;
- (id)userInterfaceItemIdentifier;
- (long long)userInterfaceLayoutDirection;
- (double)userSpaceScaleFactor;
- (id)validRequestorForSendType:(id)arg1 returnType:(id)arg2;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)viewsNeedDisplay;
- (id)windowController;
- (long long)windowNumber;
- (long long)windowTitlebarLayoutDirection;
- (BOOL)worksWhenModal;
- (void)zoom:(id)arg1;

// NSWindow (MotionCompatibility)

- (void)_pauseUIHeartBeatingInView:(id)arg1;
- (void)_resumeUIHeartBeatingInView:(id)arg1;

// NSWindow (NSAppearanceHierarchy)

- (id)_appearanceBearingParent;

// NSWindow (NSCarbonExtensions)

- (void)_hiliteWindow:(struct OpaqueWindowPtr { }*)arg1 fromWindow:(id)arg2;
- (void)_setWindowRef:(struct OpaqueWindowPtr { }*)arg1;
- (id)initWithWindowRef:(void*)arg1;
- (void*)windowRef;

// NSWindow (NSConstraintBasedLayout)

- (void)_autolayoutEngagedSomewhereInWindow;
- (void)_changeWindowFrameFromConstraintsIfNecessary;
- (void)_discardWindowResizeConstraintsAndMarkAsNeedingUpdate;
- (void)_fromConstraintsGetWindowMinSize:(struct CGSize { double x1; double x2; }*)arg1 maxSize:(struct CGSize { double x1; double x2; }*)arg2 allowDynamicLayout:(BOOL)arg3 changingOnlySlightly:(BOOL)arg4;
- (void)_fromConstraintsSetWindowFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_getConstrainedWindowMinSize:(struct CGSize { double x1; double x2; }*)arg1 maxSize:(struct CGSize { double x1; double x2; }*)arg2;
- (void)_getConstrainedWindowMinSize:(struct CGSize { double x1; double x2; }*)arg1 maxSize:(struct CGSize { double x1; double x2; }*)arg2 changingOnlySlightly:(BOOL)arg3;
- (void)_invalidateWindowConstraintsMinMaxSizeCache;
- (id)_layoutEngine;
- (id)_layoutEngineEngaging;
- (id)_layoutEngineIfAvailable;
- (void)_layoutViewTree;
- (id)_layout_anchorInfo;
- (struct CGPoint { double x1; double x2; })_layout_anchorPoint;
- (struct CGPoint { double x1; double x2; })_layout_anchorPointInEngine;
- (id)_layout_defaultAnchorInfo;
- (id)_layout_primitiveAnchorInfo;
- (void)_layout_setPrimitiveAnchorInfo:(id)arg1;
- (id)_nsib_candidateRedundantConstraints;
- (id)_redundantConstraints;
- (void)_refreshWindowResizeConstraintsWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setViewsNeedLayout:(BOOL)arg1;
- (void)_setViewsNeedUpdateConstraints:(BOOL)arg1;
- (void)_setViewsNeedUpdateLayoutDependentMetrics:(BOOL)arg1;
- (void)_setWindowResizeConstraintSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setWindowResizeConstraints:(id)arg1;
- (void)_updateLayoutDependentMetricsIfNeeded;
- (void)_validateSizeUsingConstraints:(struct CGSize { double x1; double x2; }*)arg1;
- (BOOL)_viewsNeedLayout;
- (BOOL)_viewsNeedUpdateConstraints;
- (id)_windowResizeConstraints;
- (void)_windowResizeConstraints_borderViewChanged;
- (long long)anchorAttributeForOrientation:(long long)arg1;
- (id)anchorItemForOrientation:(long long)arg1;
- (void)exerciseAmbiguityInLayout;
- (BOOL)hasAmbiguousLayout;
- (void)layoutIfNeeded;
- (void)rebuildLayoutFromScratch;
- (void)setAnchorAttribute:(long long)arg1 forOrientation:(long long)arg2;
- (void)setAnchorItem:(id)arg1 forOrientation:(long long)arg2;
- (void)updateConstraintsIfNeeded;

// NSWindow (NSCursorRects)

- (void)GDBDumpCursorRects;
- (BOOL)_addCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cursor:(id)arg2 forView:(id)arg3;
- (void)_deallocCursorRects;
- (void)_discardCursorRect:(long long)arg1;
- (id)_discardCursorRectsForView:(id)arg1;
- (id)_findCursorForView:(id)arg1;
- (BOOL)_hasCursorRects;
- (BOOL)_hasCursorRectsForView:(id)arg1;
- (void)_installCursorObserver;
- (void)_invalidateCursorObserver;
- (void)_invalidateCursorRectsForView:(id)arg1 force:(BOOL)arg2;
- (void)_invalidateCursorRectsForViewsWithNoTrackingAreas;
- (void)_markCursorRectsForRemovedView:(id)arg1;
- (void)_postInvalidCursorRects;
- (BOOL)_removeCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cursor:(id)arg2 forView:(id)arg3;
- (id)_runLoopModesForInvalidCursorRectsObserver;
- (void)_setCursorForMouseLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 index:(long long)arg2;
- (BOOL)_shouldResetCursorRects;
- (BOOL)_shouldShowCursorRects;
- (void)_updateCursorRectsDueToBecomingKey;
- (void)_updateCursorRectsDueToBecomingVisible;
- (void)_updateCursorRectsDueToResigningKey;
- (void)_viewDidChangeGeometryInWindow:(id)arg1;
- (BOOL)allowsCursorRectsWhenInactive;
- (BOOL)areCursorRectsEnabled;
- (void)cursorUpdate:(id)arg1;
- (void)disableCursorRects;
- (void)discardCursorRects;
- (void)enableCursorRects;
- (void)invalidateCursorRectsForView:(id)arg1;
- (void)resetCursorRects;
- (void)setAllowsCursorRectsWhenInactive:(BOOL)arg1;

// NSWindow (NSDrag)

- (id)_beginDraggingSessionWithItems:(id)arg1 event:(id)arg2 source:(id)arg3;
- (id)_dragTypes;
- (id)_findDragTargetFrom:(id)arg1;
- (BOOL)_hasRegisteredForDragTypes;
- (void)_registerDragTypes:(id)arg1;
- (id)_registerDragTypesIfNeeded;
- (void)_registerDragTypesLater;
- (void)_switchDragRegistrationToRemoteContext:(unsigned int)arg1;
- (void)_unregisterDragTypes;
- (void)concludeDragOperation:(id)arg1;
- (void)dragImage:(id)arg1 at:(struct CGPoint { double x1; double x2; })arg2 offset:(struct CGSize { double x1; double x2; })arg3 event:(id)arg4 pasteboard:(id)arg5 source:(id)arg6 slideBack:(BOOL)arg7;
- (void)draggingEnded:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)registerForDraggedTypes:(id)arg1;
- (void)unregisterDraggedTypes;
- (void)updateDraggingItemsForDrag:(id)arg1;
- (BOOL)wantsPeriodicDraggingUpdates;

// NSWindow (NSDrawerSupportPrivate)

- (void)_changeAllDrawersFirstResponder;
- (void)_changeAllDrawersKeyState;
- (void)_changeAllDrawersMainState;
- (void)_cycleDrawersReversed:(BOOL)arg1;
- (void)_destroyRealWindowForAllDrawers;
- (void)_displayAllDrawersIfNeeded;
- (void)_endLiveResizeForAllDrawers;
- (void)_hideAllDrawers;
- (struct CGSize { double x1; double x2; })_minContentSizeForDrawers;
- (struct CGSize { double x1; double x2; })_minSizeForDrawers;
- (void)_moveAllDrawersByOffset:(struct CGSize { double x1; double x2; })arg1;
- (id)_openDrawers;
- (id)_orderedDrawerAndWindowKeyLoopGroupingViews;
- (void)_positionAllDrawers;
- (void)_registerAllDrawersForDraggedTypesIfNeeded;
- (void)_removeAllDrawersImmediately:(BOOL)arg1;
- (void)_resetAllDrawersDisableCounts;
- (void)_resetAllDrawersPostingCounts;
- (void)_setLevelForAllDrawers;
- (void)_setVisibleWithoutLoginForAllDrawers;
- (void)_sizeAllDrawers;
- (void)_sizeAllDrawersWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_standardFrameForDrawersInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_startLiveResizeForAllDrawers;
- (void)_unhideAllDrawers;

// NSWindow (NSDrawers)

- (id)drawers;
- (id)openDrawers;

// NSWindow (NSEventRouting)

- (void)_addMouseMovedListener:(id)arg1;
- (void)_addTouchListener:(id)arg1;
- (SEL)_cancelActionIfCmdDot:(id)arg1;
- (void)_cancelKey:(id)arg1;
- (void)_handleFocusToolbarHotKey:(id)arg1;
- (void)_handleMouseDownEvent:(id)arg1 isDelayedEvent:(BOOL)arg2;
- (BOOL)_hasMouseMovedListeners;
- (SEL)_keyboardUIActionForEvent:(id)arg1;
- (id)_lastLeftHit;
- (id)_lastRightHit;
- (void)_latchViewForScrollEvent:(id)arg1;
- (BOOL)_lmouseUpPending;
- (BOOL)_processKeyboardUIKey:(id)arg1;
- (void)_reallySendEvent:(id)arg1 isDelayedEvent:(BOOL)arg2;
- (void)_removeMouseMovedListener:(id)arg1;
- (void)_removeTouchListener:(id)arg1;
- (void)_setEventMask:(long long)arg1;
- (void)_setMouseMovedEventsEnabled:(BOOL)arg1;
- (void)_setWantsMouseMoveEventsInBackground:(BOOL)arg1;
- (void)_updateEventMaskDueToBecomingKey;
- (void)_updateEventMaskDueToCommonAwake;
- (void)_updateEventMaskDueToDisableCursorRects;
- (void)_updateEventMaskDueToEnableCursorRects;
- (void)_updateEventMaskDueToInit;
- (void)_updateEventMaskDueToOrderedOut;
- (void)_updateEventMaskDueToResigningKey;
- (void)_updateMouseMovedState;
- (BOOL)_wantsMouseMoveEventsInBackground;
- (BOOL)acceptsMouseMovedEvents;
- (void)cancelOperation:(id)arg1;
- (id)currentEvent;
- (void)discardEventsMatchingMask:(unsigned long long)arg1 beforeEvent:(id)arg2;
- (unsigned long long)gestureEventMask;
- (BOOL)ignoresMouseEvents;
- (struct CGPoint { double x1; double x2; })mouseLocationOutsideOfEventStream;
- (id)nextEventMatchingMask:(unsigned long long)arg1;
- (id)nextEventMatchingMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (void)postEvent:(id)arg1 atStart:(BOOL)arg2;
- (void)sendEvent:(id)arg1;
- (void)setAcceptsMouseMovedEvents:(BOOL)arg1;
- (void)setGestureEventMask:(unsigned long long)arg1;
- (void)setIgnoresMouseEvents:(BOOL)arg1;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;
- (id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2;
- (void)trackEventsMatchingMask:(unsigned long long)arg1 timeout:(double)arg2 mode:(id)arg3 handler:(id)arg4;
- (BOOL)view:(id)arg1 acceptsFirstMouseEvent:(id)arg2 initialKeyWindow:(id)arg3;

// NSWindow (NSEventRouting_Deprecated)

- (void)_eventWasFiltered:(id)arg1;
- (void)_setIgnoresCurrentEvent:(BOOL)arg1;
- (BOOL)_wasActiveBeforeCurrentEvent;

// NSWindow (NSGestureRecognizer_Routing)

- (id)_activeGestureRecognizers;
- (BOOL)_gatheringActiveGestureRecognizers;
- (BOOL)_gestureRecognizersHaveDelayedEvents;
- (id)_gestureRecognizersStartingWithView:(id)arg1 onEvent:(id)arg2 requireAcceptsFirstMouse:(BOOL)arg3;
- (void)_removeActiveGestureRecognizer:(id)arg1 withEvent:(id)arg2;
- (id)_sendEventToGestureRecognizers:(id)arg1 requireAcceptsFirstMouse:(BOOL)arg2;

// NSWindow (NSInspectorBarSupport)

- (id)inspectorBar;
- (void)setInspectorBar:(id)arg1;

// NSWindow (NSLayoutConstraintVisualization)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForVisualizedConstraintsWindow:(id)arg1;
- (void)_teardownVisualizedConstraintsView;
- (void)_updateConstraintVisualization;
- (id)_visualizedConstraintsView;
- (void)visualizeConstraints:(id)arg1;

// NSWindow (NSPersistentUISupport)

+ (id)_windowWithPersistentUIWindowID:(unsigned int)arg1;

- (void)_acquireNextMinimizationSeed;
- (BOOL)_contentsHaveInvalidRestorableState;
- (id)_copyPersistentUIChildren;
- (BOOL)_hasEverHadInvalidRestorableState;
- (BOOL)_hasInvalidRestorableState;
- (void)_invalidateRestorableStateOfContents;
- (BOOL)_isConsideredOpenForPersistentState;
- (BOOL)_isSnapshotRestorationEnabled;
- (void)_markAsEverHavingInvalidRestorableState;
- (unsigned int)_minimizationSeed;
- (unsigned int)_persistentStateTerminationGeneration;
- (id)_persistentUIIdentifier;
- (id)_persistentUIWindow;
- (void)_setContentsHaveInvalidRestorableState:(BOOL)arg1;
- (void)_setHasInvalidRestorableState:(BOOL)arg1;
- (void)_setLastDragRegion:(void*)arg1;
- (BOOL)_shouldRecordPersistentState;
- (void)disableSnapshotRestoration;
- (void)enableSnapshotRestoration;
- (Class)restorationClass;
- (void)setRestorationClass:(Class)arg1;

// NSWindow (NSPopoverPresenting)

- (void)showPopover:(id)arg1;

// NSWindow (NSQuietSafeQuit)

- (BOOL)_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;
- (BOOL)_canQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;

// NSWindow (NSRemoteWindowAccessibility)

- (void)accessibilityAddDeferredNotification:(id)arg1;
- (void)accessibilitySendDeferredNotifications;
- (id)remoteUIElement;
- (void)setRemoteUIElement:(id)arg1;

// NSWindow (NSSavelessDocumentSupport)

- (id)_documentAutosavingError;
- (long long)_documentEditingState;
- (BOOL)_documentShowsPanelOnClose;
- (BOOL)_isInactiveRevisionWindow;
- (id)_nonModalDocumentError;
- (void)_setDocumentAutosavingError:(id)arg1;
- (void)_setDocumentButtonEnabled:(BOOL)arg1;
- (void)_setDocumentEditingState:(long long)arg1 animate:(BOOL)arg2;
- (void)_setDocumentShowsPanelOnClose:(BOOL)arg1;
- (void)_setInactiveRevisionWindow:(BOOL)arg1;
- (void)_setNonModalDocumentError:(id)arg1;
- (void)setShowsAutosaveButton:(BOOL)arg1;
- (BOOL)showsAutosaveButton;

// NSWindow (NSScreenLayout)

- (void)_adjustWindowFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 fromScreen:(id)arg2 toScreen:(id)arg3;
- (BOOL)_applyWindowLayoutForScreen:(id)arg1;
- (void)_encodeWindowLayoutsByScreenLayoutWithCoder:(id)arg1;
- (BOOL)_isScreenLayoutAware;
- (id)_matchingWindowLayoutForScreen:(id)arg1;
- (void)_restoreWindowLayoutsByScreenLayoutWithCoder:(id)arg1;
- (void)_saveWindowLayoutForScreen:(id)arg1;
- (void)_saveWindowLayoutForScreenLayout;
- (id)_screenForWindowLayoutAdjustment;
- (void)_withWindowLayoutsByScreenLayout:(id)arg1;
- (void)_withWindowLayoutsForScreen:(id)arg1 performBlock:(id)arg2;

// NSWindow (NSScripting)

- (id)boundsAsQDRect;
- (id)document;
- (id)handleCloseScriptCommand:(id)arg1;
- (id)handlePrintScriptCommand:(id)arg1;
- (id)handleSaveScriptCommand:(id)arg1;
- (BOOL)hasCloseBox;
- (BOOL)hasTitleBar;
- (BOOL)isFloatingPanel;
- (BOOL)isMiniaturizable;
- (BOOL)isModalPanel;
- (BOOL)isResizable;
- (BOOL)isZoomable;
- (id)objectSpecifier;
- (long long)orderedIndex;
- (void)setBoundsAsQDRect:(id)arg1;
- (void)setIsMiniaturized:(BOOL)arg1;
- (void)setIsVisible:(BOOL)arg1;
- (void)setIsZoomed:(BOOL)arg1;
- (void)setOrderedIndex:(long long)arg1;
- (long long)uniqueID;

// NSWindow (NSSheets)

- (void)_adjustEffectForSheet:(id)arg1;
- (void)_adjustSheetEffect;
- (void)_attachSheetWindow:(id)arg1;
- (id)_attachedSheet;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_centerSheetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inParentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGPoint { double x1; double x2; })_collapsedOrigin;
- (void)_detachSheetWindow;
- (void)_detachSheetWindow:(id)arg1;
- (id)_documentWindow;
- (void)_hideSheet:(BOOL)arg1;
- (BOOL)_isDocModal;
- (BOOL)_isSheet;
- (BOOL)_isSheetOnModalWindow;
- (BOOL)_isSheetOnWindowWithWindowNumber:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_keepOnScreenSheetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_moveSheetByItself:(id)arg1 delta:(struct CGPoint { double x1; double x2; })arg2;
- (void)_orderFrontRelativeToWindow:(id)arg1;
- (void)_orderOutRelativeToWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_positionSheet:(id)arg1 constrained:(BOOL)arg2 andDisplay:(BOOL)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_positionSheetConstrained:(BOOL)arg1 andDisplay:(BOOL)arg2;
- (void)_positionSheetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 andDisplay:(BOOL)arg3;
- (void)_positionSheetsConstrained:(BOOL)arg1 andDisplay:(BOOL)arg2;
- (void)_reparentSheetsToSelfOnFullScreenExit;
- (BOOL)_runningDocModal;
- (void)_setDocModal:(BOOL)arg1;
- (void)_setDocumentWindow:(id)arg1;
- (void)_setSheet:(BOOL)arg1;
- (void)_setSheetParent:(id)arg1;
- (void*)_sheetEffect;
- (double)_sheetEffectInset;
- (void)_stashCollapsedOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)_stashOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_stashedOrigin;
- (BOOL)_topmostDocWrapsCarbonWindow;
- (void)_unhideSheet;
- (id)_windowForSheetMovementAndOrderingGroups;
- (double)_xOffsetForSheetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inParentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })startRectForSheet:(id)arg1;

// NSWindow (NSSplitViewPreferredThicknessReset)

- (void)_resetSplitViewUserPreferredThicknessFromSetAlignmentFrames;

// NSWindow (NSTimeMachineSupport)

- (void)setTimeMachineDelegate:(id)arg1;
- (id)timeMachineDelegate;

// NSWindow (NSTitleRenamingSupport)

- (BOOL)_titleMightBeEditable;

// NSWindow (NSTrackingAreas)

- (void)_activateTrackingRectsForApplicationActivation;
- (void)_clearTrackingRects;
- (BOOL)_containsTrackingRect:(long long)arg1;
- (void)_deactivateTrackingRectsForApplicationDeactivation;
- (BOOL)_didInstallTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 assumeInside:(BOOL)arg2 userData:(void*)arg3 trackingNum:(long long)arg4;
- (void)_disableTrackingArea:(id)arg1;
- (void)_disableTrackingRect:(long long)arg1;
- (void)_discardTrackingRect:(long long)arg1;
- (void)_discardTrackingRects:(long long*)arg1 count:(long long)arg2;
- (void)_enableTrackingArea:(id)arg1;
- (void)_enableTrackingRect:(long long)arg1;
- (BOOL)_handleTrackingRectEnterExitEvent:(id)arg1;
- (void)_moveTrackingArea:(id)arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (long long)_nextTrackingNum;
- (void)_recursiveResetTrackingAreasToPending;
- (void)_removeTrackingRect:(long long)arg1;
- (void)_removeTrackingRects:(long long*)arg1 count:(long long)arg2;
- (void)_resetClipForTrackingRect:(long long)arg1;
- (void)_setEventMask:(unsigned long long)arg1 forTrackingRect:(long long)arg2;
- (void)_setTrackingAreasDirty;
- (long long)_setTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inside:(BOOL)arg2 owner:(id)arg3 userData:(void*)arg4;
- (long long)_setTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inside:(BOOL)arg2 owner:(id)arg3 userData:(void*)arg4 useTrackingNum:(long long)arg5;
- (struct { long long x1; id x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; double x4; BOOL x5; BOOL x6; }*)_setTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inside:(BOOL)arg2 owner:(id)arg3 userData:(void*)arg4 useTrackingNum:(long long)arg5 install:(BOOL)arg6;
- (void)_setTrackingRects;
- (void)_setTrackingRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 insideList:(BOOL*)arg2 owner:(id)arg3 userDataList:(void**)arg4 trackingNums:(long long*)arg5 count:(long long)arg6;
- (void)_synchronizeConfigurationForTrackingArea:(id)arg1;
- (long long)_trackingAreaIDForTrackingArea:(id)arg1;
- (void)_updateTrackingAreasDueToEndScrolling;
- (void)_verifyTrackingRects;

// NSWindow (NSUIActivityProvider)

- (void)_didRestoreUserActivity:(id)arg1;

// NSWindow (NSWindowAccessibility)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityGrowBoxRect;
- (BOOL)_accessibilityIsModal;
- (id)_accessibilitySheetParent;
- (id)_accessibilityTitleCell;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityTitleRect;
- (id)_accessibilityViewCorrectedForFieldEditor:(id)arg1;
- (id)_closestElementToPosition:(struct CGPoint { double x1; double x2; })arg1 inElements:(id)arg2;
- (void)_filterDownPotentialSectionResult:(id)arg1 keys:(id)arg2;
- (void)_finalUpdateSectionResult:(id)arg1 withCandidates:(id)arg2 element:(id)arg3 keys:(id)arg4 allowMultiple:(BOOL)arg5;
- (BOOL)_isSearchField:(id)arg1;
- (id)_largestElementInElements:(id)arg1;
- (id)_localizedDescriptionForSectionIdentifier:(id)arg1;
- (id)_newAutoGeneratedSectionsWithSearchKeys:(id)arg1 searchDepth:(long long)arg2 existingElements:(id)arg3;
- (id)_newSectionCandidatesForSearchElements:(id)arg1 depth:(long long)arg2;
- (id)_potentialCandidateKeyForSectionKey:(id)arg1;
- (void)_preliminaryUpdateSectionResult:(id)arg1 element:(id)arg2 keys:(id)arg3;
- (id)_sectionsForElement:(id)arg1 keys:(id)arg2 depth:(long long)arg3 allowMultiple:(BOOL)arg4;
- (void)_updateSectionSearchElements:(id)arg1 keys:(id)arg2 element:(id)arg3;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityCancelButtonAttribute;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityCloseButtonAttribute;
- (id)accessibilityDefaultButtonAttribute;
- (id)accessibilityDocumentAttribute;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFocusRingBounds;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityFullScreenAttribute;
- (id)accessibilityFullScreenButtonAttribute;
- (id)accessibilityGrowAreaAttribute;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsCancelButtonAttributeSettable;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsChildOfApp;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsCloseButtonAttributeSettable;
- (BOOL)accessibilityIsDefaultButtonAttributeSettable;
- (BOOL)accessibilityIsDocumentAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsFullScreenAttributeSettable;
- (BOOL)accessibilityIsFullScreenButtonAttributeSettable;
- (BOOL)accessibilityIsGrowAreaAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsMainAttributeSettable;
- (BOOL)accessibilityIsMinimizeButtonAttributeSettable;
- (BOOL)accessibilityIsMinimizedAttributeSettable;
- (BOOL)accessibilityIsModalAttributeSettable;
- (BOOL)accessibilityIsParentAttributeSettable;
- (BOOL)accessibilityIsPositionAttributeSettable;
- (BOOL)accessibilityIsProxyAttributeSettable;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (BOOL)accessibilityIsSectionsAttributeSettable;
- (BOOL)accessibilityIsSizeAttributeSettable;
- (BOOL)accessibilityIsSubroleAttributeSettable;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsTitleUIElementAttributeSettable;
- (BOOL)accessibilityIsToolbarButtonAttributeSettable;
- (BOOL)accessibilityIsWindowAttributeSettable;
- (BOOL)accessibilityIsZoomButtonAttributeSettable;
- (id)accessibilityMainAttribute;
- (id)accessibilityMinimizeButtonAttribute;
- (id)accessibilityMinimizedAttribute;
- (id)accessibilityModalAttribute;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPositionAttribute;
- (id)accessibilityPositionOfChild:(id)arg1;
- (void)accessibilityPostNotification:(id)arg1;
- (id)accessibilityProxyAttribute;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetFullScreenAttribute:(id)arg1;
- (void)accessibilitySetMainAttribute:(id)arg1;
- (void)accessibilitySetMinimizedAttribute:(id)arg1;
- (void)accessibilitySetPositionAttribute:(id)arg1;
- (void)accessibilitySetSizeAttribute:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilitySizeAttribute;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilitySubroleAttribute;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTitleAttribute;
- (id)accessibilityTitleUIElementAttribute;
- (id)accessibilityToolbarButtonAttribute;
- (id)accessibilityTopLevelUIElementAttributeValueHelper;
- (double)accessibilityVisibleArea;
- (id)accessibilityWindowAttribute;
- (id)accessibilityWindowAttributeValueHelper;
- (long long)accessibilityWindowNumber;
- (id)accessibilityZoomButtonAttribute;
- (void)setAccessibilitySections:(id)arg1;

// NSWindow (NSWindowContentsHostedInLayerSurface)

- (BOOL)_hostsLayersInWindowServer;
- (void)_resumeWindowServerLayerHosting;
- (void)_setShouldAutoFlattenLayerTree:(BOOL)arg1;
- (BOOL)_shouldAutoFlattenLayerTree;
- (void)_suspendWindowServerLayerHosting;
- (BOOL)canHostLayersInWindowServer;
- (BOOL)hostsLayersInWindowServer;
- (void)setCanHostLayersInWindowServer:(BOOL)arg1;

// NSWindow (NSWindowResizing)

+ (void)_getExteriorResizeEdgeThicknesses:(double)arg1 forStyleMask:(unsigned long long)arg2;
+ (void)_getResizeEdgeAndCornerThicknesses:(double)arg1 forStyleMask:(unsigned long long)arg2;
+ (long long)_mouseHysteresisCheck:(id)arg1 withExpiration:(id)arg2 andDistance:(struct CGSize { double x1; double x2; })arg3 finalMouseLocation:(struct CGPoint { double x1; double x2; }*)arg4;
+ (double)_tileDividerInteriorResizeEdgeThickness;
+ (BOOL)canBeResizedFromInterior;

- (BOOL)_allowsExteriorResizing;
- (BOOL)_allowsSizeSnapping;
- (BOOL)_attemptToSnapWindowSizeWithEvent:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_commonValidFrameForResizeFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromResizeEdge:(unsigned long long)arg2;
- (struct CGSnappingInfo { }*)_createSnappingInfo;
- (id)_cursorForResizeDirection:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_doScreenSizeSnappingFromResizedEdge:(unsigned long long)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 state:(struct { BOOL x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; unsigned long long x6; BOOL x7; unsigned long long x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9[64]; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10[64]; double x11; double x12; double x13; double x14; struct CGRect {} *x15; unsigned long long x16; struct CGSnappingInfo {} *x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; }*)arg3;
- (void)_doSnapToFrame;
- (BOOL)_edgeResizingCursorUpdate:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 resizedFromEdge:(unsigned long long)arg2 withDelta:(struct CGSize { double x1; double x2; })arg3 withEvent:(id)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 resizedFromEdge:(unsigned long long)arg2 withDelta:(struct CGSize { double x1; double x2; })arg3 withEvent:(id)arg4 withState:(struct { BOOL x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; unsigned long long x6; BOOL x7; unsigned long long x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9[64]; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10[64]; double x11; double x12; double x13; double x14; struct CGRect {} *x15; unsigned long long x16; struct CGSnappingInfo {} *x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; }*)arg5;
- (void)_getEdgeResizingRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (void)_getExteriorResizeEdgeThicknesses:(double)arg1;
- (void)_getResizeEdgeAndCornerThicknesses:(double)arg1;
- (BOOL)_hitTestInResizeRegionShouldReturnNil;
- (id)_hitTestWithHysteresisCheck:(struct CGPoint { double x1; double x2; })arg1 forEvent:(id)arg2 allowWindowDragging:(BOOL*)arg3;
- (BOOL)_isConsideredSheetForResizing;
- (void)_noteAllowedResizeDirectionsMayHaveChanged;
- (void)_noteExteriorResizeMarginsMayHaveChanged;
- (double)_opaqueAspectDimensionForDimension:(double)arg1 isHorizontal:(BOOL)arg2;
- (void)_provideActuationFeedbackWithEvent:(id)arg1;
- (unsigned long long)_resizableEdgesForGrowing:(unsigned long long*)arg1 shrinking:(unsigned long long*)arg2;
- (long long)_resizeDirectionForMouseLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_resizeSetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withEvent:(id)arg2;
- (void)_resizeWithEvent:(id)arg1;
- (BOOL)_resizingShouldSnapToWindows;
- (BOOL)_scrollViewIntersectsSoutheastGrowCorner:(id)arg1;
- (void)_setFrameHeightDelta:(double)arg1 resizingFromTop:(BOOL)arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (void)_setFrameWidthDelta:(double)arg1 resizingFromRight:(BOOL)arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (void)_setLiveResizedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (BOOL)_shouldDoScreenSizeSnappingFromResizedEdge:(unsigned long long)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 state:(struct { BOOL x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; unsigned long long x6; BOOL x7; unsigned long long x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9[64]; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10[64]; double x11; double x12; double x13; double x14; struct CGRect {} *x15; unsigned long long x16; struct CGSnappingInfo {} *x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; }*)arg3;
- (BOOL)_shouldSnapSizeOnDoubleClick;
- (BOOL)_shouldSnapSizeWhenResizing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sizeSnappedFrameForOppositeEdge:(unsigned long long)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 state:(struct { BOOL x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; unsigned long long x6; BOOL x7; unsigned long long x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9[64]; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10[64]; double x11; double x12; double x13; double x14; struct CGRect {} *x15; unsigned long long x16; struct CGSnappingInfo {} *x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; }*)arg3;
- (void)_snapSizeToFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withEvent:(id)arg2;
- (BOOL)_snapWindowSizeInDirection:(long long)arg1 withEvent:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_snapWindowSizeWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 resizeDirection:(long long)arg2 state:(struct { BOOL x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; unsigned long long x6; BOOL x7; unsigned long long x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9[64]; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10[64]; double x11; double x12; double x13; double x14; struct CGRect {} *x15; unsigned long long x16; struct CGSnappingInfo {} *x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; }*)arg3;
- (void)_startSnappingToFrameTimerAfterDelay:(double)arg1;
- (void)_stopSnappingToFrameTimer;
- (void)_unsnapFrameWithEvent:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_unsnapSizeFromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromEdge:(unsigned long long)arg2 state:(struct { BOOL x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGPoint { double x_5_1_1; double x_5_1_2; } x5; unsigned long long x6; BOOL x7; unsigned long long x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9[64]; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_10_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_10_1_2; } x10[64]; double x11; double x12; double x13; double x14; struct CGRect {} *x15; unsigned long long x16; struct CGSnappingInfo {} *x17; BOOL x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; }*)arg3;
- (BOOL)_updateEdgeResizingTrackingAreas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_validFrameForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 resizedFromEdge:(unsigned long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_windowResizeEventHandlingRectForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_windowResizeMouseLocationIsInVisibleScrollerThumb:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)liveResizeEdges;
- (void)setUnsnappedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unsnappedFrame;

// NSWindow (NSWindowSharedFirstResponder)

- (void)_accessibilitySetTitleCellRemoved:(BOOL)arg1;
- (BOOL)_accessibilityTitleCellRemoved;
- (void)_changeAllAttachmentsFirstResponder;
- (void)_changeAllAttachmentsKeyState;
- (void)_changeAllAttachmentsMainState;
- (void)_changeAllAttachmentsVisibleWithoutLogin;
- (void)_changeFirstResponderToParentsFirstResponder;
- (void)_changeKeyState;
- (void)_changeMainState;
- (void)_changeVisibleWithoutLogin;
- (void)_dropSharedFirstResponder;
- (id)_dumpLayer;
- (void)_setSharesParentFirstResponder:(BOOL)arg1;
- (BOOL)_sharesParentFirstResponder;

// NSWindow (NSWindowTabbing)

+ (void)_addWindowTabsMenuItemsIfNeeded;
+ (long long)_readWindowTabbingModeFromPrefs;
+ (void)_setShouldInvertImplicitBehavior:(BOOL)arg1;
+ (void)_setShouldInvertImplicitBehaviorToYesForCurrentRunLoop;
+ (void)_setTabPlusButtonWasClicked:(BOOL)arg1;
+ (BOOL)_shouldInvertImplicitBehavior;
+ (void)_tabbedWindowsFinishedRestoration;
+ (void)_updateTabbingModePreference;
+ (BOOL)allowsAutomaticWindowTabbing;
+ (void)setAllowsAutomaticWindowTabbing:(BOOL)arg1;
+ (void)setUserTabbingPreference:(long long)arg1;
+ (BOOL)shouldPreferWindowTabbingForEvent:(id)arg1;
+ (BOOL)shouldPreferWindowTabbingForEvent:(id)arg1 withIdentifier:(id)arg2;
+ (long long)userTabbingPreference;

- (void)_addTabbedWindow:(id)arg1 ordered:(long long)arg2;
- (id)_allWindowsTabbedTogether;
- (BOOL)_attemptToCloseAllTabs:(id)arg1;
- (BOOL)_canAutoParticipateInWindowTabs;
- (BOOL)_canMergeWindows;
- (BOOL)_canMoveTabToNewWindow;
- (BOOL)_canProbablyFitInSize:(struct CGSize { double x1; double x2; })arg1;
- (BOOL)_canSelectNextOrPreviousTab;
- (BOOL)_canTabMergeWithIdentifier:(id)arg1;
- (BOOL)_canTabWithIdentifier:(id)arg1;
- (id)_currentlySelectedTabbedWindow;
- (void)_doNonVisibleTabDeminimize;
- (void)_doNonVisibleTabMinimize;
- (void)_doTabbedWindowCleanupForOrderOut;
- (void)_doTabbedWindowDidChangeToolbar;
- (void)_doTabbedWindowMadeKey;
- (void)_doTabbedWindowOrderFront;
- (BOOL)_doTabbedWindowOrderInWithWasVisible:(BOOL)arg1 mode:(long long)arg2;
- (void)_doTabbedWindowSyncToolbar;
- (void)_doTabbedWindowWillEnterVersionsEditor;
- (void)_doTabbedWindowWillExitVersionsEditor;
- (void)_doWindowTabCleanupForStyleMaskChange;
- (void)_doWindowTabOrderAbove:(id)arg1;
- (void)_doWindowTabOrderOut;
- (void)_doWindowTabSetupAttemptingToJoinExistingStack:(BOOL)arg1 makeIfNeeded:(BOOL)arg2;
- (void)_encodeTabbedWindowRestorableStateWithCoder:(id)arg1;
- (void)_ensureTabViewItem;
- (BOOL)_eventIsOldSelectNextPreviousTabKeyEquivalent:(id)arg1 direction:(BOOL*)arg2;
- (BOOL)_ignoreWindowStackController;
- (BOOL)_implicitlyAllowsWindowTabbing;
- (BOOL)_isInHiddenWindowTab;
- (BOOL)_isPerformingRestoration;
- (BOOL)_isTabbedWithOtherWindows;
- (void)_makeNewWindowInTab;
- (void)_makeTabStackActive;
- (void)_mergeAllWindows:(id)arg1;
- (void)_moveTabToNewWindow:(id)arg1;
- (void)_moveWindowToSpace:(unsigned long long)arg1;
- (BOOL)_nextResponderChainValidateUIItem:(id)arg1 withResult:(BOOL)arg2;
- (id)_nextTabbedWindowToSelect;
- (BOOL)_prepareTabbedWindowDeminimize;
- (BOOL)_prepareTabbedWindowMinimize;
- (void)_restoreTabbedWindowStateWithCoder:(id)arg1;
- (void)_selectNextTab:(id)arg1;
- (void)_selectPreviousTab:(id)arg1;
- (void)_setIgnoreWindowStackController:(BOOL)arg1;
- (void)_setIsInHiddenWindowTab:(BOOL)arg1;
- (void)_setIsPerformingRestoration:(BOOL)arg1;
- (void)_setTabBarAccessoryViewController:(id)arg1;
- (void)_setTemporarilyIgnoresMoves:(BOOL)arg1;
- (void)_setWindowStackController:(id)arg1;
- (BOOL)_shouldJoinTabbingStackOnOrderIn;
- (id)_storedTabbingIdentifier;
- (BOOL)_supportsNewTabButton;
- (BOOL)_supportsTabbing;
- (void)_syncTabItemPropertiesIfNeeded;
- (id)_tabBarAccessoryViewController;
- (BOOL)_tabBarIsVisible;
- (id)_tabbedWindows;
- (void)_tabbedWindowsDidEnterFullScreen;
- (void)_tabbedWindowsDidExitFullScreen;
- (BOOL)_tabbedWindowsHandleEnterFullScreenWithOptions:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; })arg1;
- (void)_tabbedWindowsWillEnterFullScreen;
- (BOOL)_tabbingPerformKeyEquivalent:(id)arg1;
- (void)_tabsFinishDeminiaturizeFromDock;
- (BOOL)_temporarilyIgnoreMoves;
- (id)_titlebarDisplayIdentifier;
- (void)_toggleTabBar:(id)arg1;
- (void)_updatePropertiesForTabViewItem:(id)arg1;
- (BOOL)_validateTabUserInterfaceItem:(id)arg1 withResult:(BOOL)arg2;
- (BOOL)_willBecomeTabbedWithOtherWindows;
- (id)_windowForLayoutEncoding;
- (id)_windowStackController;
- (BOOL)isTabbed;
- (void)orderOutTabbedWindowGroup:(id)arg1;
- (void)performCloseOtherTabs:(id)arg1;
- (void)performCloseTabbedWindowGroup:(id)arg1;
- (void)setTabViewItem:(id)arg1;
- (void)setTabbingIdentifier:(id)arg1;
- (void)setTabbingMode:(long long)arg1;
- (id)tabViewItem;
- (id)tabbingIdentifier;
- (long long)tabbingMode;
- (void)windowDidBecomeTabbed;

// NSWindow (NSWindow_Carbon)

- (unsigned int)_carbonWindowClass;
- (BOOL)_hasWindowRef;
- (BOOL)_hasWindowRefCreatedForCarbonControl;
- (BOOL)_managesWindowRef;
- (void)_removeWindowRef;
- (struct OpaqueWindowPtr { }*)_windowRef;
- (struct OpaqueWindowPtr { }*)_windowRefCreatedForCarbonApp;
- (struct OpaqueWindowPtr { }*)_windowRefCreatedForCarbonControl;
- (BOOL)_wrapsCarbonWindow;
- (void*)windowRefWithCompositedAttribute:(BOOL)arg1 andFrameworkScaledAttribute:(BOOL)arg2;

// NSWindow (NSWindow_CarbonEventHandlers)

- (void)_installCarbonAppDockHandlers;
- (void)_installCarbonWindowEventHandlers;
- (void)_installCocoaWindowEventHandlers;
- (void)_installCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent;
- (void)_installRootMetricsHandler;
- (void)_removeCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent;
- (void)_removeEventHandlers;
- (void)_setWindowDepth;
- (void)_syncFrameMetrics;

// NSWindow (NSWindow_Performance)

- (void)_automateLiveResize;
- (id)_liveResizeOperation;
- (void)_markEndOfLiveResizeForPerformanceMeasurement;
- (void)_markEndOfLiveResizeInterval;
- (void)_markStartOfLiveResizeForPerformanceMeasurement;
- (void)_markStartOfLiveResizeInterval;
- (void)_setStartingSizeAndPosition;
- (void)_synthesizeEventsForLiveResize;

// NSWindow (NSWindow_Scale)

+ (struct OpaqueCUIRendererRef { }*)coreUIRenderer;

- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_baseTransform;
- (double)_frameworkScaleFactor;
- (double)_scaleFactor;
- (void)_setBackingScaleFactor:(double)arg1;
- (void)_setFrameworkScaleFactor:(double)arg1;
- (void)_setScaleFactor:(double)arg1;
- (id)_transformsDescription;

// NSWindow (NSWindow_Theme)

+ (BOOL)_sendDockMenuCommand:(unsigned int)arg1 withTag:(unsigned long long)arg2 modifierFlags:(unsigned long long)arg3;

- (void)_addHeartBeatClientView:(id)arg1;
- (int)_carbonMinimizeToDock;
- (struct CGImage { }*)_cgImageScreenShot;
- (struct CGImage { }*)_cgImageScreenShotIncludingShadow:(BOOL)arg1 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 visualEffectViewWithDesktopBleedOnly:(BOOL)arg3 spaceID:(unsigned long long)arg4;
- (struct CGImage { }*)_cgImageScreenShotIncludingSpaceID:(unsigned long long)arg1;
- (void)_clearOverrideIsOnActiveSpace;
- (BOOL)_containedMenusAreEligibleForKeyEquivalents;
- (BOOL)_contentHasShadow;
- (BOOL)_controlAppearanceChangesOnKeyStateChange;
- (struct __CFDictionary { }*)_createWindowsMenuEntryWithTitle:(id)arg1 enabled:(BOOL)arg2;
- (id)_customImageForStandardWindowButton:(unsigned long long)arg1 state:(unsigned long long)arg2 dirty:(BOOL)arg3 controlTint:(unsigned long long)arg4;
- (BOOL)_defaultButtonPaused;
- (int)_doRestoreComingFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (unsigned long long)_dockAllowedResizeEdges;
- (void*)_dockItem;
- (BOOL)_doingCacheDisplayInRect;
- (id)_dumpImage;
- (void)_exitFullScreenToSpid:(unsigned long long)arg1 animating:(BOOL)arg2 duration:(double)arg3;
- (void)_finishDeminiaturizeFromDock:(BOOL)arg1;
- (void)_finishMinimizeToDock;
- (BOOL)_forceInactiveShadow;
- (BOOL)_forceMainAppearance;
- (id)_growBoxOwner;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_growBoxRect;
- (id)_growBoxView;
- (BOOL)_handlingResizeInitiatedByDock;
- (BOOL)_hasActiveAppearance;
- (BOOL)_hasActiveAppearanceForStandardWindowButton:(unsigned long long)arg1;
- (BOOL)_hasActiveAppearanceIgnoringKeyFocus;
- (BOOL)_hasActiveControls;
- (BOOL)_hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets:(BOOL)arg1;
- (BOOL)_hasKeyAppearance;
- (BOOL)_hasMainAppearance;
- (void)_minimizeSucceeded:(BOOL)arg1;
- (BOOL)_minimizeToDock;
- (BOOL)_needsToRemoveFieldEditor;
- (BOOL)_needsToResetDragMargins;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_opaqueRect;
- (void)_postWindowNeedsToResetDragMarginsUnlessPostingDisabled;
- (BOOL)_prepareToMinimize;
- (void)_prepareToMinimizeCore;
- (BOOL)_prepareToRestoreFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (void)_prepareToRestoreRegularFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (void)_prepareToUnMinimizeFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (BOOL)_registerWithDockIfNeeded;
- (int)_regularMinimizeToDock;
- (void)_removeHeartBeartClientView:(id)arg1;
- (void)_resetDragMarginsIfNeeded;
- (BOOL)_resizeEdgesManagedByDock;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_scrollerExclusionRect;
- (void)_selectWindow:(id)arg1;
- (void)_sendDockFullScreenTitle:(id)arg1;
- (void)_setContentHasShadow:(BOOL)arg1;
- (void)_setDefaultButtonPaused:(BOOL)arg1;
- (void)_setDockAllowedResizeEdges:(unsigned long long)arg1;
- (void)_setDoingCacheDisplayInRect:(BOOL)arg1;
- (void)_setForceActiveControls:(BOOL)arg1;
- (void)_setForceInactiveShadow:(BOOL)arg1;
- (void)_setForceMainAppearance:(BOOL)arg1;
- (void)_setFullScreenManagedInfoFromDock:(struct { unsigned int x1; unsigned int x2; bool x3; bool x4; bool x5; unsigned int x6; }*)arg1;
- (void)_setFullScreenTiled:(BOOL)arg1 spid:(unsigned long long)arg2 subspid:(unsigned long long)arg3 overrideIsOnActiveSpace:(BOOL)arg4;
- (void)_setFullScreenTiled:(BOOL)arg1 withOptions:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; })arg2 overrideIsOnActiveSpace:(BOOL)arg3;
- (void)_setGrowBoxView:(id)arg1;
- (void)_setHandlingResizeInitiatedByDock:(BOOL)arg1;
- (void)_setHasActiveAppearance:(BOOL)arg1;
- (void)_setIsMinimized:(BOOL)arg1;
- (void)_setNeedsToRemoveFieldEditor:(BOOL)arg1;
- (void)_setNeedsToResetDragMargins:(BOOL)arg1;
- (void)_setResizeEdgesManagedByDock:(BOOL)arg1;
- (void)_setShadowHiddenByDock:(BOOL)arg1;
- (void)_setShouldSendResizeNotificationsToDock:(BOOL)arg1;
- (void)_setShowOpaqueGrowBox:(BOOL)arg1;
- (void)_setShowOpaqueGrowBoxForOwner:(id)arg1;
- (BOOL)_shadowHiddenByDock;
- (struct CGSize { double x1; double x2; })_shadowOffset;
- (struct CGSize { double x1; double x2; })_shadowOffsetForActiveAppearance:(BOOL)arg1;
- (BOOL)_shouldSendResizeNotificationsToDock;
- (BOOL)_showOpaqueGrowBox;
- (BOOL)_supportsDockInitiatedFullScreen;
- (double)_transparency;
- (void)_updateButtonsForModeChanged;
- (id)_updateFrameWidgets;
- (void)_updateFullScreenSpaceDockTitle;
- (void)_updateWindowsMenuItemIfNeeded;
- (BOOL)_wantsHeartBeat;
- (void)acquireKeyAppearance;
- (void)acquireMainAppearance;
- (void)cacheMiniwindowTitle:(id)arg1 guess:(BOOL)arg2;
- (BOOL)dockTitleIsGuess;
- (void)guessDockTitle:(id)arg1;
- (BOOL)hasKeyAppearance;
- (BOOL)hasKeyAppearanceIncludingSheets:(BOOL)arg1;
- (BOOL)hasMainAppearance;
- (void)heartBeat:(struct { double x1; double x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 31; } x4; }*)arg1;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)resignKeyAppearance;
- (void)resignMainAppearance;
- (id)restoreWindowOnDockDeath;
- (id)restoreWindowOnDockReincarnation;
- (void)setShadowStyle:(unsigned long long)arg1;
- (unsigned long long)shadowStyle;
- (id)showDeminiaturizedWindow;
- (void)updateInDock;

// NSWindow (TemporaryMailviewerSupport)

- (void)_addDrawerWithView:(id)arg1;
- (BOOL)_drawerIsOpen;
- (void)_openDrawer;
- (void)_openDrawerOnEdge:(unsigned long long)arg1;
- (void)_shutDrawer;
- (void)addDrawerWithView:(id)arg1;
- (void)openFirstDrawer:(id)arg1;
- (void)removeAllDrawersImmediately;
- (void)shutAllDrawers:(id)arg1;

// NSWindow (_NSEvilHacks)

- (void)_evilHackToClearlastLeftHitInWindow;

// NSWindow (_NSSegmentedCellToolbarAdditions)

- (BOOL)_shouldSuppressRolloversForSegmentedCellInView:(id)arg1;
- (BOOL)_shouldUseTexturedAppearanceForSegmentedCellInView:(id)arg1;

@end
