/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSDrawer : NSResponder <NSAccessibility, NSAccessibilityElement> {
    id  _drawerDelegate;
    unsigned long long  _drawerEdge;
    unsigned int  _drawerFlags;
    double  _drawerLeadingOffset;
    NSLock * _drawerLock;
    struct __CFRunLoop { } * _drawerLoop;
    unsigned long long  _drawerNextEdge;
    NSWindow * _drawerNextParentWindow;
    unsigned long long  _drawerNextState;
    struct __CFRunLoopObserver { } * _drawerObserver;
    NSWindow * _drawerParentWindow;
    float  _drawerPercent;
    float  _drawerPercentSaved;
    unsigned long long  _drawerPreferredEdge;
    NSString * _drawerSaveName;
    double  _drawerStartTime;
    unsigned long long  _drawerState;
    struct __CFRunLoopTimer { } * _drawerTimer;
    double  _drawerTotalTime;
    double  _drawerTrailingOffset;
    NSWindow * _drawerWindow;
}

@property (atomic, readwrite) struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property (atomic, readwrite, copy) NSArray *accessibilityAllowedValues;
@property (getter=isAccessibilityAlternateUIVisible, atomic, readwrite) BOOL accessibilityAlternateUIVisible;
@property (atomic, readwrite, retain) id accessibilityApplicationFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityCancelButton;
@property (atomic, readwrite, copy) NSArray *accessibilityChildren;
@property (atomic, readwrite, retain) id accessibilityClearButton;
@property (atomic, readwrite, retain) id accessibilityCloseButton;
@property (atomic, readwrite) long long accessibilityColumnCount;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityColumnIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnTitles;
@property (atomic, readwrite, copy) NSArray *accessibilityColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityContents;
@property (atomic, readwrite, retain) id accessibilityCriticalValue;
@property (atomic, readwrite, retain) id accessibilityDecrementButton;
@property (atomic, readwrite, retain) id accessibilityDefaultButton;
@property (getter=isAccessibilityDisclosed, atomic, readwrite) BOOL accessibilityDisclosed;
@property (atomic, readwrite) id accessibilityDisclosedByRow;
@property (atomic, readwrite, retain) id accessibilityDisclosedRows;
@property (atomic, readwrite) long long accessibilityDisclosureLevel;
@property (atomic, readwrite, copy) NSString *accessibilityDocument;
@property (getter=isAccessibilityEdited, atomic, readwrite) BOOL accessibilityEdited;
@property (getter=isAccessibilityElement, atomic, readwrite) BOOL accessibilityElement;
@property (getter=isAccessibilityEnabled, atomic, readwrite) BOOL accessibilityEnabled;
@property (getter=isAccessibilityExpanded, atomic, readwrite) BOOL accessibilityExpanded;
@property (atomic, readwrite) id accessibilityExtrasMenuBar;
@property (atomic, readwrite, copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityFocused, atomic, readwrite) BOOL accessibilityFocused;
@property (atomic, readwrite, retain) id accessibilityFocusedWindow;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property (getter=isAccessibilityFrontmost, atomic, readwrite) BOOL accessibilityFrontmost;
@property (atomic, readwrite, retain) id accessibilityFullScreenButton;
@property (atomic, readwrite, retain) id accessibilityGrowArea;
@property (atomic, readwrite, copy) NSArray *accessibilityHandles;
@property (atomic, readwrite, retain) id accessibilityHeader;
@property (atomic, readwrite, copy) NSString *accessibilityHelp;
@property (getter=isAccessibilityHidden, atomic, readwrite) BOOL accessibilityHidden;
@property (atomic, readwrite, retain) id accessibilityHorizontalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityHorizontalUnitDescription;
@property (atomic, readwrite) long long accessibilityHorizontalUnits;
@property (atomic, readwrite, copy) NSString *accessibilityIdentifier;
@property (atomic, readwrite, retain) id accessibilityIncrementButton;
@property (atomic, readwrite) long long accessibilityIndex;
@property (atomic, readwrite) long long accessibilityInsertionPointLineNumber;
@property (atomic, readwrite, copy) NSString *accessibilityLabel;
@property (atomic, readwrite, copy) NSArray *accessibilityLabelUIElements;
@property (atomic, readwrite) float accessibilityLabelValue;
@property (atomic, readwrite, copy) NSArray *accessibilityLinkedUIElements;
@property (getter=isAccessibilityMain, atomic, readwrite) BOOL accessibilityMain;
@property (atomic, readwrite, retain) id accessibilityMainWindow;
@property (atomic, readwrite, retain) id accessibilityMarkerGroupUIElement;
@property (atomic, readwrite, copy) NSString *accessibilityMarkerTypeDescription;
@property (atomic, readwrite, copy) NSArray *accessibilityMarkerUIElements;
@property (atomic, readwrite, retain) id accessibilityMarkerValues;
@property (atomic, readwrite, retain) id accessibilityMaxValue;
@property (atomic, readwrite) id accessibilityMenuBar;
@property (atomic, readwrite, retain) id accessibilityMinValue;
@property (atomic, readwrite, retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized, atomic, readwrite) BOOL accessibilityMinimized;
@property (getter=isAccessibilityModal, atomic, readwrite) BOOL accessibilityModal;
@property (atomic, readwrite, copy) NSArray *accessibilityNextContents;
@property (atomic, readwrite) long long accessibilityNumberOfCharacters;
@property (getter=isAccessibilityOrderedByRow, atomic, readwrite) BOOL accessibilityOrderedByRow;
@property (atomic, readwrite) long long accessibilityOrientation;
@property (atomic, readwrite, retain) id accessibilityOverflowButton;
@property (atomic, readwrite) id accessibilityParent;
@property (atomic, readwrite, copy) NSString *accessibilityPlaceholderValue;
@property (atomic, readwrite, copy) NSArray *accessibilityPreviousContents;
@property (getter=isAccessibilityProtectedContent, atomic, readwrite) BOOL accessibilityProtectedContent;
@property (atomic, readwrite, retain) id accessibilityProxy;
@property (getter=isAccessibilityRequired, atomic, readwrite) BOOL accessibilityRequired;
@property (atomic, readwrite, copy) NSString *accessibilityRole;
@property (atomic, readwrite, copy) NSString *accessibilityRoleDescription;
@property (atomic, readwrite) long long accessibilityRowCount;
@property (atomic, readwrite, copy) NSArray *accessibilityRowHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityRowIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityRows;
@property (atomic, readwrite) long long accessibilityRulerMarkerType;
@property (atomic, readwrite, retain) id accessibilitySearchButton;
@property (atomic, readwrite, retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected, atomic, readwrite) BOOL accessibilitySelected;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedCells;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedChildren;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedColumns;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedRows;
@property (atomic, readwrite, copy) NSString *accessibilitySelectedText;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySelectedTextRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedTextRanges;
@property (atomic, readwrite, copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySharedCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedFocusElements;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedTextUIElements;
@property (atomic, readwrite, retain) id accessibilityShownMenu;
@property (atomic, readwrite) long long accessibilitySortDirection;
@property (atomic, readwrite, copy) NSArray *accessibilitySplitters;
@property (atomic, readwrite, copy) NSString *accessibilitySubrole;
@property (atomic, readwrite, copy) NSArray *accessibilityTabs;
@property (atomic, readwrite, copy) NSString *accessibilityTitle;
@property (atomic, readwrite) id accessibilityTitleUIElement;
@property (atomic, readwrite, retain) id accessibilityToolbarButton;
@property (atomic, readwrite) id accessibilityTopLevelUIElement;
@property (atomic, readwrite, copy) NSURL *accessibilityURL;
@property (atomic, readwrite, copy) NSString *accessibilityUnitDescription;
@property (atomic, readwrite) long long accessibilityUnits;
@property (atomic, readwrite, retain) id accessibilityValue;
@property (atomic, readwrite, copy) NSString *accessibilityValueDescription;
@property (atomic, readwrite, retain) id accessibilityVerticalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityVerticalUnitDescription;
@property (atomic, readwrite) long long accessibilityVerticalUnits;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleCells;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityVisibleCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleRows;
@property (atomic, readwrite, retain) id accessibilityWarningValue;
@property (atomic, readwrite) id accessibilityWindow;
@property (atomic, readwrite, copy) NSArray *accessibilityWindows;
@property (atomic, readwrite, retain) id accessibilityZoomButton;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } contentSize;
@property (atomic, readwrite, retain) NSView *contentView;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <NSDrawerDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long edge;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite) double leadingOffset;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } maxContentSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } minContentSize;
@property (atomic, readwrite) NSWindow *parentWindow;
@property (atomic, readwrite) unsigned long long preferredEdge;
@property (atomic, readonly) long long state;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) double trailingOffset;

+ (BOOL)_usesCorrectContentSize;
+ (void)initialize;

- (BOOL)_allowsImplicitRemovalFromMovementGroup;
- (void)_moveByOffset:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityParent;
- (id)autosaveName;
- (void)close;
- (void)close:(id)arg1;
- (struct CGSize { double x1; double x2; })contentSize;
- (id)contentView;
- (void)dealloc;
- (id)delegate;
- (unsigned long long)edge;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentSize:(struct CGSize { double x1; double x2; })arg1 preferredEdge:(unsigned long long)arg2;
- (BOOL)isOpen;
- (double)leadingOffset;
- (struct CGSize { double x1; double x2; })maxContentSize;
- (struct CGSize { double x1; double x2; })minContentSize;
- (void)open;
- (void)open:(id)arg1;
- (void)openOnEdge:(unsigned long long)arg1;
- (id)parentWindow;
- (unsigned long long)preferredEdge;
- (void)removeImmediately:(BOOL)arg1;
- (void)setAutosaveName:(id)arg1;
- (void)setContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLeadingOffset:(double)arg1;
- (void)setMaxContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMinContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setParentWindow:(id)arg1;
- (void)setPreferredEdge:(unsigned long long)arg1;
- (void)setTrailingOffset:(double)arg1;
- (long long)state;
- (void)toggle:(id)arg1;
- (double)trailingOffset;

// NSDrawer (DrawerInternals)

- (void)_doAttachDrawer;
- (void)_doAttachDrawerIgnoreHidden:(BOOL)arg1;
- (void)_doAutoselectEdge;
- (void)_doCloseDrawer;
- (void)_doDetachDrawer;
- (void)_doOpenDrawer;
- (void)_doPositionDrawer;
- (void)_doPositionDrawerAndSize:(struct CGSize { double x1; double x2; })arg1 parentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_doPositionDrawerAndSize:(struct CGSize { double x1; double x2; })arg1 parentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 stashSize:(BOOL)arg3;
- (void)_doRemoveDrawer;
- (void)_doResizeDrawerWithDelta:(struct CGPoint { double x1; double x2; })arg1 fromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_doSetParentWindow:(id)arg1;
- (void)_doSlideDrawerWithDelta:(struct CGPoint { double x1; double x2; })arg1;
- (void)_doStartDrawer;
- (void)_doStopDrawer;
- (id)_drawerWindow;

// NSDrawer (NSDrawerAccessibility)

- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsParentAttributeSettable;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;

// NSDrawer (NSDrawerPrivate)

+ (unsigned long long)_drawerTransform;
+ (double)_drawerVelocity;
+ (void)_setDrawerTransform:(unsigned long long)arg1;
+ (void)_setDrawerVelocity:(double)arg1;

- (void)_changeFirstResponderToParentsFirstResponder;
- (void)_changeKeyState;
- (void)_changeMainState;
- (void)_destroyRealWindow;
- (void)_displayIfNeeded;
- (unsigned long long)_edge;
- (void)_endLiveResize;
- (void)_hide;
- (id)_initWithContentSize:(struct CGSize { double x1; double x2; })arg1 preferredEdge:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })_minParentWindowContentSize;
- (void)_position;
- (id)_registerDragTypesIfNeeded;
- (void)_resetDisableCounts;
- (void)_resetPostingCounts;
- (void)_resizeWithDelta:(struct CGPoint { double x1; double x2; })arg1 fromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 beginOperation:(BOOL)arg3 endOperation:(BOOL)arg4;
- (void)_setDrawerEdge:(unsigned long long)arg1;
- (void)_setLevel;
- (void)_setVisibleWithoutLogin;
- (void)_size;
- (void)_sizeWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_slideWithDelta:(struct CGPoint { double x1; double x2; })arg1 beginOperation:(BOOL)arg2 endOperation:(BOOL)arg3;
- (void)_startLiveResize;
- (void)_takeFocus;
- (void)_unhide;

// NSDrawer (NSResponder)

- (void)doCommandBySelector:(SEL)arg1;
- (void)flushBufferedKeyEvents;
- (void)helpRequested:(id)arg1;
- (void)interpretKeyEvents:(id)arg1;
- (id)menu;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)setMenu:(id)arg1;
- (BOOL)tryToPerform:(SEL)arg1 with:(id)arg2;
- (id)undoManager;
- (id)validRequestorForSendType:(id)arg1 returnType:(id)arg2;

@end
