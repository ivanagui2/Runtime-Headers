/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSCell : NSObject <NSAccessibility, NSAccessibilityElement, NSCoding, NSCopying, NSUserInterfaceItemIdentification> {
    struct __CFlags { 
        unsigned int state : 1; 
        unsigned int highlighted : 1; 
        unsigned int disabled : 1; 
        unsigned int editable : 1; 
        unsigned int type : 2; 
        unsigned int vCentered : 1; 
        unsigned int hCentered : 1; 
        unsigned int bordered : 1; 
        unsigned int bezeled : 1; 
        unsigned int selectable : 1; 
        unsigned int scrollable : 1; 
        unsigned int continuous : 1; 
        unsigned int actOnMouseDown : 1; 
        unsigned int isLeaf : 1; 
        unsigned int invalidObjectValue : 1; 
        unsigned int invalidFont : 1; 
        unsigned int lineBreakMode : 3; 
        unsigned int weakTargetHelperFlag : 1; 
        unsigned int allowsAppearanceEffects : 1; 
        unsigned int singleLineMode : 1; 
        unsigned int actOnMouseDragged : 1; 
        unsigned int isLoaded : 1; 
        unsigned int truncateLastLine : 1; 
        unsigned int dontActOnMouseUp : 1; 
        unsigned int isWhite : 1; 
        unsigned int useUserKeyEquivalent : 1; 
        unsigned int showsFirstResponder : 1; 
        unsigned int focusRingType : 2; 
        unsigned int wasSelectable : 1; 
        unsigned int hasInvalidObject : 1; 
        unsigned int allowsEditingTextAttributes : 1; 
        unsigned int importsGraphics : 1; 
        unsigned int alignment : 3; 
        unsigned int layoutDirectionRTL : 1; 
        unsigned int backgroundStyle : 3; 
        unsigned int cellReserved2 : 4; 
        unsigned int refusesFirstResponder : 1; 
        unsigned int needsHighlightedText : 1; 
        unsigned int dontAllowsUndo : 1; 
        unsigned int currentlyEditing : 1; 
        unsigned int allowsMixedState : 1; 
        unsigned int inMixedState : 1; 
        unsigned int sendsActionOnEndEditing : 1; 
        unsigned int inSendAction : 1; 
        unsigned int menuWasSet : 1; 
        unsigned int controlTint : 3; 
        unsigned int controlSize : 2; 
        unsigned int branchImageDisabled : 1; 
        unsigned int drawingInRevealover : 1; 
        unsigned int needsHighlightedTextHint : 1; 
    }  _cFlags;
    id  _contents;
    id  _support;
}

@property (atomic, readwrite) struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property (atomic, readwrite, copy) NSArray *accessibilityAllowedValues;
@property (getter=isAccessibilityAlternateUIVisible, atomic, readwrite) BOOL accessibilityAlternateUIVisible;
@property (atomic, readwrite, retain) id accessibilityApplicationFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityCancelButton;
@property (atomic, readwrite, copy) NSArray *accessibilityChildren;
@property (atomic, readwrite, retain) id accessibilityClearButton;
@property (atomic, readwrite, retain) id accessibilityCloseButton;
@property (atomic, readwrite) long long accessibilityColumnCount;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityColumnIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnTitles;
@property (atomic, readwrite, copy) NSArray *accessibilityColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityContents;
@property (atomic, readwrite, retain) id accessibilityCriticalValue;
@property (atomic, readwrite, retain) id accessibilityDecrementButton;
@property (atomic, readwrite, retain) id accessibilityDefaultButton;
@property (getter=isAccessibilityDisclosed, atomic, readwrite) BOOL accessibilityDisclosed;
@property (atomic, readwrite) id accessibilityDisclosedByRow;
@property (atomic, readwrite, retain) id accessibilityDisclosedRows;
@property (atomic, readwrite) long long accessibilityDisclosureLevel;
@property (atomic, readwrite, copy) NSString *accessibilityDocument;
@property (getter=isAccessibilityEdited, atomic, readwrite) BOOL accessibilityEdited;
@property (getter=isAccessibilityElement, atomic, readwrite) BOOL accessibilityElement;
@property (getter=isAccessibilityEnabled, atomic, readwrite) BOOL accessibilityEnabled;
@property (getter=isAccessibilityExpanded, atomic, readwrite) BOOL accessibilityExpanded;
@property (atomic, readwrite) id accessibilityExtrasMenuBar;
@property (atomic, readwrite, copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityFocused, atomic, readwrite) BOOL accessibilityFocused;
@property (atomic, readwrite, retain) id accessibilityFocusedWindow;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property (getter=isAccessibilityFrontmost, atomic, readwrite) BOOL accessibilityFrontmost;
@property (atomic, readwrite, retain) id accessibilityFullScreenButton;
@property (atomic, readwrite, retain) id accessibilityGrowArea;
@property (atomic, readwrite, copy) NSArray *accessibilityHandles;
@property (atomic, readwrite, retain) id accessibilityHeader;
@property (atomic, readwrite, copy) NSString *accessibilityHelp;
@property (getter=isAccessibilityHidden, atomic, readwrite) BOOL accessibilityHidden;
@property (atomic, readwrite, retain) id accessibilityHorizontalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityHorizontalUnitDescription;
@property (atomic, readwrite) long long accessibilityHorizontalUnits;
@property (atomic, readwrite, copy) NSString *accessibilityIdentifier;
@property (atomic, readwrite, retain) id accessibilityIncrementButton;
@property (atomic, readwrite) long long accessibilityIndex;
@property (atomic, readwrite) long long accessibilityInsertionPointLineNumber;
@property (atomic, readwrite, copy) NSString *accessibilityLabel;
@property (atomic, readwrite, copy) NSArray *accessibilityLabelUIElements;
@property (atomic, readwrite) float accessibilityLabelValue;
@property (atomic, readwrite, copy) NSArray *accessibilityLinkedUIElements;
@property (getter=isAccessibilityMain, atomic, readwrite) BOOL accessibilityMain;
@property (atomic, readwrite, retain) id accessibilityMainWindow;
@property (atomic, readwrite, retain) id accessibilityMarkerGroupUIElement;
@property (atomic, readwrite, copy) NSString *accessibilityMarkerTypeDescription;
@property (atomic, readwrite, copy) NSArray *accessibilityMarkerUIElements;
@property (atomic, readwrite, retain) id accessibilityMarkerValues;
@property (atomic, readwrite, retain) id accessibilityMaxValue;
@property (atomic, readwrite) id accessibilityMenuBar;
@property (atomic, readwrite, retain) id accessibilityMinValue;
@property (atomic, readwrite, retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized, atomic, readwrite) BOOL accessibilityMinimized;
@property (getter=isAccessibilityModal, atomic, readwrite) BOOL accessibilityModal;
@property (atomic, readwrite, copy) NSArray *accessibilityNextContents;
@property (atomic, readwrite) long long accessibilityNumberOfCharacters;
@property (getter=isAccessibilityOrderedByRow, atomic, readwrite) BOOL accessibilityOrderedByRow;
@property (atomic, readwrite) long long accessibilityOrientation;
@property (atomic, readwrite, retain) id accessibilityOverflowButton;
@property (atomic, readwrite) id accessibilityParent;
@property (atomic, readwrite, copy) NSString *accessibilityPlaceholderValue;
@property (atomic, readwrite, copy) NSArray *accessibilityPreviousContents;
@property (getter=isAccessibilityProtectedContent, atomic, readwrite) BOOL accessibilityProtectedContent;
@property (atomic, readwrite, retain) id accessibilityProxy;
@property (getter=isAccessibilityRequired, atomic, readwrite) BOOL accessibilityRequired;
@property (atomic, readwrite, copy) NSString *accessibilityRole;
@property (atomic, readwrite, copy) NSString *accessibilityRoleDescription;
@property (atomic, readwrite) long long accessibilityRowCount;
@property (atomic, readwrite, copy) NSArray *accessibilityRowHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityRowIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityRows;
@property (atomic, readwrite) long long accessibilityRulerMarkerType;
@property (atomic, readwrite, retain) id accessibilitySearchButton;
@property (atomic, readwrite, retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected, atomic, readwrite) BOOL accessibilitySelected;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedCells;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedChildren;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedColumns;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedRows;
@property (atomic, readwrite, copy) NSString *accessibilitySelectedText;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySelectedTextRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedTextRanges;
@property (atomic, readwrite, copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySharedCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedFocusElements;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedTextUIElements;
@property (atomic, readwrite, retain) id accessibilityShownMenu;
@property (atomic, readwrite) long long accessibilitySortDirection;
@property (atomic, readwrite, copy) NSArray *accessibilitySplitters;
@property (atomic, readwrite, copy) NSString *accessibilitySubrole;
@property (atomic, readwrite, copy) NSArray *accessibilityTabs;
@property (atomic, readwrite, copy) NSString *accessibilityTitle;
@property (atomic, readwrite) id accessibilityTitleUIElement;
@property (atomic, readwrite, retain) id accessibilityToolbarButton;
@property (atomic, readwrite) id accessibilityTopLevelUIElement;
@property (atomic, readwrite, copy) NSURL *accessibilityURL;
@property (atomic, readwrite, copy) NSString *accessibilityUnitDescription;
@property (atomic, readwrite) long long accessibilityUnits;
@property (atomic, readwrite, retain) id accessibilityValue;
@property (atomic, readwrite, copy) NSString *accessibilityValueDescription;
@property (atomic, readwrite, retain) id accessibilityVerticalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityVerticalUnitDescription;
@property (atomic, readwrite) long long accessibilityVerticalUnits;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleCells;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityVisibleCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleRows;
@property (atomic, readwrite, retain) id accessibilityWarningValue;
@property (atomic, readwrite) id accessibilityWindow;
@property (atomic, readwrite, copy) NSArray *accessibilityWindows;
@property (atomic, readwrite, retain) id accessibilityZoomButton;
@property (atomic, readwrite) SEL action;
@property (atomic, readwrite) unsigned long long alignment;
@property (atomic, readwrite) BOOL allowsMixedState;
@property (atomic, readwrite) BOOL allowsUndo;
@property (atomic, readwrite) long long backgroundStyle;
@property (atomic, readwrite) long long baseWritingDirection;
@property (getter=isBezeled, atomic, readwrite) BOOL bezeled;
@property (getter=isBordered, atomic, readwrite) BOOL bordered;
@property (atomic, readonly) struct CGSize { double x1; double x2; } cellSize;
@property (getter=isContinuous, atomic, readwrite) BOOL continuous;
@property (atomic, readwrite) unsigned long long controlSize;
@property (atomic, readwrite) unsigned long long controlTint;
@property (atomic, readwrite) NSView *controlView;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite) double doubleValue;
@property (getter=isEditable, atomic, readwrite) BOOL editable;
@property (getter=isEnabled, atomic, readwrite) BOOL enabled;
@property (atomic, readwrite) float floatValue;
@property (atomic, readwrite, retain) NSFont *font;
@property (atomic, readwrite, retain) NSFormatter *formatter;
@property (atomic, readonly) BOOL hasValidObjectValue;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isHighlighted, atomic, readwrite) BOOL highlighted;
@property (atomic, readwrite, copy) NSString *identifier;
@property (atomic, readwrite, retain) NSImage *image;
@property (atomic, readwrite) int intValue;
@property (atomic, readwrite) long long integerValue;
@property (atomic, readonly) long long interiorBackgroundStyle;
@property (atomic, readonly, copy) NSString *keyEquivalent;
@property (atomic, readwrite) unsigned long long lineBreakMode;
@property (atomic, readwrite, retain) NSMenu *menu;
@property (atomic, readonly) long long mouseDownFlags;
@property (atomic, readonly) long long nextState;
@property (atomic, readwrite, copy) id objectValue;
@property (getter=isOpaque, atomic, readonly) BOOL opaque;
@property (atomic, readwrite, retain) id representedObject;
@property (getter=isScrollable, atomic, readwrite) BOOL scrollable;
@property (getter=isSelectable, atomic, readwrite) BOOL selectable;
@property (atomic, readwrite) BOOL sendsActionOnEndEditing;
@property (atomic, readwrite) long long state;
@property (atomic, readwrite, copy) NSString *stringValue;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) long long tag;
@property (atomic, readwrite) id target;
@property (atomic, readwrite, copy) NSString *title;
@property (atomic, readwrite) BOOL truncatesLastVisibleLine;
@property (atomic, readwrite) unsigned long long type;
@property (atomic, readwrite) long long userInterfaceLayoutDirection;
@property (atomic, readwrite) BOOL usesSingleLineMode;
@property (atomic, readwrite) BOOL wraps;

+ (BOOL)_compatibleListShouldUseAlternateSelectedControlColor;
+ (id)_cuiCatalogKey;
+ (id)_cuiStyleEffectsKey;
+ (BOOL)_useAutoreleasePoolInTrackMouse;
+ (unsigned long long)defaultFocusRingType;
+ (id)defaultMenu;
+ (void)initialize;
+ (BOOL)prefersTrackingUntilMouseUp;

- (BOOL)_MSMessengerTrackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (id)_accessibilityLabel;
- (BOOL)_addTypeSelectAttributesForString:(id)arg1;
- (BOOL)_allowsContextMenus;
- (BOOL)_allowsVibrancyForControlView:(id)arg1;
- (id)_attributedStringForEditing;
- (id)_attributedStringValue:(id)arg1 invalid:(BOOL)arg2;
- (id)_backgroundColorForFontSmoothing;
- (BOOL)_beginVibrantBlendGroupIfNeccessaryForControlView:(id)arg1;
- (id)_cachedAttributedStringValue;
- (id)_cachedLineRef;
- (BOOL)_canCacheAttributedStringValue;
- (BOOL)_cell_isEditable;
- (void)_cell_setRefusesFirstResponder:(BOOL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_centerInnerBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_characterRangeForPoint:(struct CGPoint { double x1; double x2; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (void)_clearAttributedStringCache;
- (void)_clearEditingTextView:(id)arg1;
- (void)_commonInit;
- (id)_contents;
- (void)_convertToText:(id)arg1;
- (struct __CFString { }*)_coreUIWidgetName;
- (long long)_currentEventStage;
- (BOOL)_customForegroundColorInTitle:(id)arg1;
- (id)_defaultFont;
- (id)_defaultImageHints;
- (BOOL)_delegateValidation:(id)arg1 object:(id)arg2 uiHandled:(BOOL*)arg3;
- (void)_displaySomeWindowsIfNeeded:(id)arg1;
- (void)_drawCellForDragWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawFocusRingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawHighlightWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawLiveResizeHighlightWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_drawingInRevealover;
- (int)_effectiveBackgroundStyleInView:(id)arg1;
- (int)_effectiveBackgroundStyleInView:(id)arg1 forSpecifiedStyle:(long long)arg2;
- (unsigned long long)_effectiveFocusRingType;
- (id)_effectiveFont;
- (void)_endVibrantBlendGroup;
- (void)_failsafeAllocAuxiliaryStorage;
- (BOOL)_finalizeStyleTextOptions:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusRingFrameForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_formatObjectValue:(id)arg1 invalid:(BOOL)arg2;
- (BOOL)_funkyOptOutLogicThatShouldGoAwayForView:(id)arg1 semanticContext:(int)arg2;
- (BOOL)_hasAppearanceTextEffectsWithAttributedString:(id)arg1;
- (BOOL)_hasAttributedStringValue;
- (BOOL)_hasTrackingGestureOverride;
- (BOOL)_hitTestForTrackMouseEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)_imageComponentIfNonEmptyImagePortion:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 key:(id)arg3;
- (long long)_integerValue;
- (unsigned long long)_interiorContentAppearanceInView:(id)arg1;
- (unsigned long long)_interiorContentValueStateInView:(id)arg1;
- (void)_invalidateFont;
- (void)_invalidateObjectValue;
- (BOOL)_isButtonTitleCell;
- (BOOL)_isEditingTextView:(id)arg1;
- (BOOL)_isWhite;
- (BOOL)_layerDrawingSupportsLinearMaskOverlayForLayerBackedView:(id)arg1;
- (unsigned long long)_lineBreakMode;
- (id)_maybeSwapSystemFontForFont:(id)arg1;
- (BOOL)_needsHighlightedTextHint;
- (BOOL)_objectValue:(id*)arg1 forString:(id)arg2;
- (BOOL)_objectValue:(id*)arg1 forString:(id)arg2 errorDescription:(id*)arg3;
- (BOOL)_performKeyEquivalent:(id)arg1 conditionally:(BOOL)arg2;
- (BOOL)_preferInactiveBezelArtInView:(id)arg1;
- (BOOL)_prefersTrackingWhenDisabled;
- (void)_restartEditingWithTextView:(id)arg1;
- (id)_selectOrEdit:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 inView:(id)arg2 target:(id)arg3 editor:(id)arg4 event:(id)arg5 start:(long long)arg6 end:(long long)arg7;
- (BOOL)_sendActionFrom:(id)arg1;
- (void)_setAcceptsFirstResponder:(BOOL)arg1;
- (void)_setAnimationsAllowed:(BOOL)arg1;
- (void)_setCachedLineRef:(id)arg1;
- (void)_setContents:(id)arg1;
- (void)_setControlView:(id)arg1;
- (void)_setCurrentlyEditing:(BOOL)arg1;
- (void)_setDrawingInRevealover:(BOOL)arg1;
- (void)_setEditingTextView:(id)arg1;
- (void)_setHorizontallyCentered:(BOOL)arg1;
- (void)_setIntegerValue:(long long)arg1;
- (void)_setIsWhite:(BOOL)arg1;
- (void)_setLineBreakMode:(unsigned long long)arg1;
- (void)_setMouseDownFlags:(long long)arg1;
- (void)_setNeedsHighlightedTextHint:(BOOL)arg1;
- (void)_setNeedsStateUpdate:(id)arg1;
- (void)_setTextAttributeParaStyleNeedsRecalc;
- (void)_setVerticallyCentered:(BOOL)arg1;
- (BOOL)_shouldRedrawOnIdenticalObjectValueChanges;
- (BOOL)_shouldSetHighlightToFlag:(BOOL)arg1;
- (BOOL)_shouldUseStyledTextInView:(id)arg1;
- (BOOL)_skipsSynchronizationForEditingTextView:(id)arg1;
- (id)_stringDrawingContext;
- (id)_stringForEditing;
- (BOOL)_suppressMouseUpAction;
- (void)_synchronizeTextView:(id)arg1;
- (id)_textAttributes;
- (BOOL)_textDimsWhenDisabled;
- (id)_typeSelectAttributes;
- (long long)_typesetterBehavior;
- (id)_unformattedAttributedStringValue:(id)arg1;
- (void)_updateCoreUIOptions:(id)arg1 withContentAppearanceInView:(id)arg2;
- (id)_updateInvalidatedObjectValue:(id)arg1;
- (BOOL)_updateStyledTextOptions:(id)arg1 withContentAppearanceInView:(id)arg2;
- (BOOL)_useHitTestInTrackMouse;
- (id)_useUserKeyEquivalent;
- (BOOL)_usesDefaultContinuousBehavior;
- (BOOL)_usesUserKeyEquivalent;
- (BOOL)_usingAlternateHighlightColorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_validateEditing:(id)arg1;
- (BOOL)_validateEntryString:(id)arg1 uiHandled:(BOOL*)arg2;
- (BOOL)_vetoMouseDragActionDispatch;
- (int)_vibrancyBlendModeForControlView:(id)arg1;
- (id)_vibrancyFilterForControlView:(id)arg1;
- (BOOL)_wantsDefaultLineFragmentPaddingInView:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (struct CGPoint { double x1; double x2; })accessibilityActivationPoint;
- (id)accessibilityAllowedValues;
- (id)accessibilityApplicationFocusedUIElement;
- (id)accessibilityAttributedStringForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)accessibilityAuditIssues;
- (id)accessibilityCancelButton;
- (id)accessibilityCellForColumn:(long long)arg1 row:(long long)arg2;
- (id)accessibilityChildren;
- (id)accessibilityChildrenInNavigationOrder;
- (id)accessibilityClearButton;
- (id)accessibilityCloseButton;
- (long long)accessibilityColumnCount;
- (id)accessibilityColumnHeaderUIElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityColumnIndexRange;
- (id)accessibilityColumnTitles;
- (id)accessibilityColumns;
- (id)accessibilityContentSiblingAbove;
- (id)accessibilityContentSiblingBelow;
- (id)accessibilityContents;
- (id)accessibilityCriticalValue;
- (id)accessibilityCustomChoosers;
- (id)accessibilityDecrementButton;
- (id)accessibilityDefaultButton;
- (id)accessibilityDisclosedByRow;
- (id)accessibilityDisclosedRows;
- (long long)accessibilityDisclosureLevel;
- (id)accessibilityDocument;
- (id)accessibilityExtrasMenuBar;
- (id)accessibilityFilename;
- (id)accessibilityFocusedWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrameForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrameInParentSpace;
- (id)accessibilityFullScreenButton;
- (id)accessibilityGrowArea;
- (id)accessibilityHandles;
- (id)accessibilityHeader;
- (id)accessibilityHeaderGroup;
- (id)accessibilityHelp;
- (id)accessibilityHorizontalScrollBar;
- (id)accessibilityHorizontalUnitDescription;
- (long long)accessibilityHorizontalUnits;
- (id)accessibilityIdentifier;
- (id)accessibilityIncrementButton;
- (long long)accessibilityIndex;
- (long long)accessibilityInsertionPointLineNumber;
- (id)accessibilityLabel;
- (id)accessibilityLabelUIElements;
- (float)accessibilityLabelValue;
- (struct CGPoint { double x1; double x2; })accessibilityLayoutPointForScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })accessibilityLayoutSizeForScreenSize:(struct CGSize { double x1; double x2; })arg1;
- (long long)accessibilityLineForIndex:(long long)arg1;
- (id)accessibilityLinkedUIElements;
- (id)accessibilityMainWindow;
- (id)accessibilityMarkerGroupUIElement;
- (id)accessibilityMarkerTypeDescription;
- (id)accessibilityMarkerUIElements;
- (id)accessibilityMarkerValues;
- (id)accessibilityMaxValue;
- (id)accessibilityMenuBar;
- (id)accessibilityMinValue;
- (id)accessibilityMinimizeButton;
- (id)accessibilityNextContentSibling;
- (id)accessibilityNextContents;
- (long long)accessibilityNumberOfCharacters;
- (long long)accessibilityOrientation;
- (id)accessibilityOverflowButton;
- (id)accessibilityParent;
- (BOOL)accessibilityPerformCancel;
- (BOOL)accessibilityPerformConfirm;
- (BOOL)accessibilityPerformDecrement;
- (BOOL)accessibilityPerformDelete;
- (BOOL)accessibilityPerformIncrement;
- (BOOL)accessibilityPerformPick;
- (BOOL)accessibilityPerformPress;
- (BOOL)accessibilityPerformRaise;
- (BOOL)accessibilityPerformShowAlternateUI;
- (BOOL)accessibilityPerformShowDefaultUI;
- (BOOL)accessibilityPerformShowMenu;
- (id)accessibilityPlaceholderValue;
- (id)accessibilityPreviousContentSibling;
- (id)accessibilityPreviousContents;
- (id)accessibilityProxy;
- (id)accessibilityRTFForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRangeForIndex:(long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRangeForLine:(long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRangeForPosition:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityResultsForSearchPredicate:(id)arg1;
- (id)accessibilityRole;
- (id)accessibilityRoleDescription;
- (long long)accessibilityRowCount;
- (id)accessibilityRowHeaderUIElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRowIndexRange;
- (id)accessibilityRows;
- (long long)accessibilityRulerMarkerType;
- (struct CGPoint { double x1; double x2; })accessibilityScreenPointForLayoutPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })accessibilityScreenSizeForLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (id)accessibilitySearchButton;
- (id)accessibilitySearchMenu;
- (id)accessibilitySections;
- (id)accessibilitySelectedCells;
- (id)accessibilitySelectedChildren;
- (id)accessibilitySelectedColumns;
- (id)accessibilitySelectedRows;
- (id)accessibilitySelectedText;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilitySelectedTextRange;
- (id)accessibilitySelectedTextRanges;
- (id)accessibilityServesAsTitleForUIElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilitySharedCharacterRange;
- (id)accessibilitySharedFocusElements;
- (id)accessibilitySharedTextUIElements;
- (id)accessibilityShownMenu;
- (long long)accessibilitySortDirection;
- (id)accessibilitySplitters;
- (id)accessibilityStringForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityStyleRangeForIndex:(long long)arg1;
- (id)accessibilitySubrole;
- (id)accessibilityTabs;
- (id)accessibilityTitle;
- (id)accessibilityTitleUIElement;
- (id)accessibilityToolbarButton;
- (id)accessibilityTopLevelUIElement;
- (id)accessibilityURL;
- (id)accessibilityUnitDescription;
- (long long)accessibilityUnits;
- (id)accessibilityValue;
- (id)accessibilityValueDescription;
- (id)accessibilityVerticalScrollBar;
- (id)accessibilityVerticalUnitDescription;
- (long long)accessibilityVerticalUnits;
- (id)accessibilityVisibleCells;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityVisibleCharacterRange;
- (id)accessibilityVisibleChildren;
- (id)accessibilityVisibleColumns;
- (id)accessibilityVisibleRows;
- (id)accessibilityWarningValue;
- (id)accessibilityWindow;
- (id)accessibilityWindows;
- (id)accessibilityZoomButton;
- (SEL)action;
- (unsigned long long)alignment;
- (BOOL)allowsAppearanceTextEffects;
- (BOOL)allowsDefaultTighteningForTruncation;
- (BOOL)allowsEditingTextAttributes;
- (BOOL)allowsEditingTokens;
- (BOOL)allowsUndo;
- (id)attributedStringValue;
- (long long)baseWritingDirection;
- (BOOL)cachesLineRef;
- (void)calcDrawInfo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)canSmoothFontsInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forLayerBackedView:(id)arg2;
- (void)cancelTrackingAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (long long)cellAttribute:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })cellSize;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)compare:(id)arg1;
- (BOOL)continueTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (BOOL)continueTrackingGesture:(id)arg1 inView:(id)arg2;
- (void)continueTrackingPeriodicEvent:(id)arg1 inView:(id)arg2;
- (unsigned long long)controlSize;
- (unsigned long long)controlTint;
- (id)controlView;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct __CFString { }*)customizedBackgroundTypeForControlView:(id)arg1;
- (void)dealloc;
- (double)doubleValue;
- (id)draggingImageComponentsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)editWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)encodeWithCoder:(id)arg1;
- (void)endEditing:(id)arg1;
- (long long)entryType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })expansionFrameWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (id)fieldEditorForView:(id)arg1;
- (id)fieldEditorTextContainer;
- (float)floatValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (unsigned long long)focusRingType;
- (id)font;
- (unsigned long long)fontDilationStyle;
- (id)formatter;
- (void)getPeriodicDelay:(float*)arg1 interval:(float*)arg2;
- (BOOL)hasValidObjectValue;
- (void)highlight:(BOOL)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (id)highlightColorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (id)identifier;
- (id)image;
- (unsigned long long)imageInterpolation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)importsGraphics;
- (id)init;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (int)intValue;
- (long long)integerValue;
- (BOOL)isAccessibilityAlternateUIVisible;
- (BOOL)isAccessibilityDisclosed;
- (BOOL)isAccessibilityEdited;
- (BOOL)isAccessibilityElement;
- (BOOL)isAccessibilityEnabled;
- (BOOL)isAccessibilityEnhancedUserInterface;
- (BOOL)isAccessibilityExpanded;
- (BOOL)isAccessibilityFocused;
- (BOOL)isAccessibilityFrontmost;
- (BOOL)isAccessibilityHidden;
- (BOOL)isAccessibilityMain;
- (BOOL)isAccessibilityMimicNativeView;
- (BOOL)isAccessibilityMinimized;
- (BOOL)isAccessibilityModal;
- (BOOL)isAccessibilityOrderedByRow;
- (BOOL)isAccessibilityProtectedContent;
- (BOOL)isAccessibilityRequired;
- (BOOL)isAccessibilitySelected;
- (BOOL)isAccessibilitySelectorAllowed:(SEL)arg1;
- (BOOL)isBezeled;
- (BOOL)isBordered;
- (BOOL)isContinuous;
- (BOOL)isEditable;
- (BOOL)isEnabled;
- (BOOL)isEntryAcceptable:(id)arg1;
- (BOOL)isHighlighted;
- (BOOL)isOpaque;
- (BOOL)isScrollable;
- (BOOL)isSelectable;
- (BOOL)keyDown:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)keyEquivalent;
- (BOOL)keyUp:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (void)layoutLayerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (unsigned long long)lineBreakMode;
- (id)menu;
- (id)menuForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)mnemonic;
- (unsigned long long)mnemonicLocation;
- (long long)mouseDownFlags;
- (id)objectValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })opaqueRectForTitleBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)performClick:(id)arg1;
- (BOOL)refusesFirstResponder;
- (id)representedObject;
- (void)resetCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)selectWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (long long)sendActionOn:(unsigned long long)arg1;
- (BOOL)sendsActionOnEndEditing;
- (void)setAccessibilityActivationPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAccessibilityAllowedValues:(id)arg1;
- (void)setAccessibilityAlternateUIVisible:(BOOL)arg1;
- (void)setAccessibilityApplicationFocusedUIElement:(id)arg1;
- (void)setAccessibilityAuditIssues:(id)arg1;
- (void)setAccessibilityCancelButton:(id)arg1;
- (void)setAccessibilityChildren:(id)arg1;
- (void)setAccessibilityChildrenInNavigationOrder:(id)arg1;
- (void)setAccessibilityClearButton:(id)arg1;
- (void)setAccessibilityCloseButton:(id)arg1;
- (void)setAccessibilityColumnCount:(long long)arg1;
- (void)setAccessibilityColumnHeaderUIElements:(id)arg1;
- (void)setAccessibilityColumnIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilityColumnTitles:(id)arg1;
- (void)setAccessibilityColumns:(id)arg1;
- (void)setAccessibilityContentSiblingAbove:(id)arg1;
- (void)setAccessibilityContentSiblingBelow:(id)arg1;
- (void)setAccessibilityContents:(id)arg1;
- (void)setAccessibilityCriticalValue:(id)arg1;
- (void)setAccessibilityCustomChoosers:(id)arg1;
- (void)setAccessibilityDecrementButton:(id)arg1;
- (void)setAccessibilityDefaultButton:(id)arg1;
- (void)setAccessibilityDisclosed:(BOOL)arg1;
- (void)setAccessibilityDisclosedByRow:(id)arg1;
- (void)setAccessibilityDisclosedRows:(id)arg1;
- (void)setAccessibilityDisclosureLevel:(long long)arg1;
- (void)setAccessibilityDocument:(id)arg1;
- (void)setAccessibilityEdited:(BOOL)arg1;
- (void)setAccessibilityElement:(BOOL)arg1;
- (void)setAccessibilityEnabled:(BOOL)arg1;
- (void)setAccessibilityEnhancedUserInterface:(BOOL)arg1;
- (void)setAccessibilityExpanded:(BOOL)arg1;
- (void)setAccessibilityExtrasMenuBar:(id)arg1;
- (void)setAccessibilityFilename:(id)arg1;
- (void)setAccessibilityFocused:(BOOL)arg1;
- (void)setAccessibilityFocusedWindow:(id)arg1;
- (void)setAccessibilityFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAccessibilityFrameInParentSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAccessibilityFrontmost:(BOOL)arg1;
- (void)setAccessibilityFullScreenButton:(id)arg1;
- (void)setAccessibilityGrowArea:(id)arg1;
- (void)setAccessibilityHandles:(id)arg1;
- (void)setAccessibilityHeader:(id)arg1;
- (void)setAccessibilityHeaderGroup:(id)arg1;
- (void)setAccessibilityHelp:(id)arg1;
- (void)setAccessibilityHidden:(BOOL)arg1;
- (void)setAccessibilityHorizontalScrollBar:(id)arg1;
- (void)setAccessibilityHorizontalUnitDescription:(id)arg1;
- (void)setAccessibilityHorizontalUnits:(long long)arg1;
- (void)setAccessibilityIdentifier:(id)arg1;
- (void)setAccessibilityIncrementButton:(id)arg1;
- (void)setAccessibilityIndex:(long long)arg1;
- (void)setAccessibilityInsertionPointLineNumber:(long long)arg1;
- (void)setAccessibilityLabel:(id)arg1;
- (void)setAccessibilityLabelUIElements:(id)arg1;
- (void)setAccessibilityLabelValue:(float)arg1;
- (void)setAccessibilityLinkedUIElements:(id)arg1;
- (void)setAccessibilityMain:(BOOL)arg1;
- (void)setAccessibilityMainWindow:(id)arg1;
- (void)setAccessibilityMarkerGroupUIElement:(id)arg1;
- (void)setAccessibilityMarkerTypeDescription:(id)arg1;
- (void)setAccessibilityMarkerUIElements:(id)arg1;
- (void)setAccessibilityMarkerValues:(id)arg1;
- (void)setAccessibilityMaxValue:(id)arg1;
- (void)setAccessibilityMenuBar:(id)arg1;
- (void)setAccessibilityMimicNativeView:(BOOL)arg1;
- (void)setAccessibilityMinValue:(id)arg1;
- (void)setAccessibilityMinimizeButton:(id)arg1;
- (void)setAccessibilityMinimized:(BOOL)arg1;
- (void)setAccessibilityModal:(BOOL)arg1;
- (void)setAccessibilityNextContents:(id)arg1;
- (void)setAccessibilityNumberOfCharacters:(long long)arg1;
- (void)setAccessibilityOrderedByRow:(BOOL)arg1;
- (void)setAccessibilityOrientation:(long long)arg1;
- (void)setAccessibilityOverflowButton:(id)arg1;
- (void)setAccessibilityParent:(id)arg1;
- (void)setAccessibilityPlaceholderValue:(id)arg1;
- (void)setAccessibilityPreviousContents:(id)arg1;
- (void)setAccessibilityProtectedContent:(BOOL)arg1;
- (void)setAccessibilityProxy:(id)arg1;
- (void)setAccessibilityRequired:(BOOL)arg1;
- (void)setAccessibilityRole:(id)arg1;
- (void)setAccessibilityRoleDescription:(id)arg1;
- (void)setAccessibilityRowCount:(long long)arg1;
- (void)setAccessibilityRowHeaderUIElements:(id)arg1;
- (void)setAccessibilityRowIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilityRows:(id)arg1;
- (void)setAccessibilityRulerMarkerType:(long long)arg1;
- (void)setAccessibilitySearchButton:(id)arg1;
- (void)setAccessibilitySearchMenu:(id)arg1;
- (void)setAccessibilitySections:(id)arg1;
- (void)setAccessibilitySelected:(BOOL)arg1;
- (void)setAccessibilitySelectedCells:(id)arg1;
- (void)setAccessibilitySelectedChildren:(id)arg1;
- (void)setAccessibilitySelectedColumns:(id)arg1;
- (void)setAccessibilitySelectedRows:(id)arg1;
- (void)setAccessibilitySelectedText:(id)arg1;
- (void)setAccessibilitySelectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilitySelectedTextRanges:(id)arg1;
- (void)setAccessibilityServesAsTitleForUIElements:(id)arg1;
- (void)setAccessibilitySharedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilitySharedFocusElements:(id)arg1;
- (void)setAccessibilitySharedTextUIElements:(id)arg1;
- (void)setAccessibilityShownMenu:(id)arg1;
- (void)setAccessibilitySortDirection:(long long)arg1;
- (void)setAccessibilitySplitters:(id)arg1;
- (void)setAccessibilitySubrole:(id)arg1;
- (void)setAccessibilityTabs:(id)arg1;
- (void)setAccessibilityTitle:(id)arg1;
- (void)setAccessibilityTitleUIElement:(id)arg1;
- (void)setAccessibilityToolbarButton:(id)arg1;
- (void)setAccessibilityTopLevelUIElement:(id)arg1;
- (void)setAccessibilityURL:(id)arg1;
- (void)setAccessibilityUnitDescription:(id)arg1;
- (void)setAccessibilityUnits:(long long)arg1;
- (void)setAccessibilityValue:(id)arg1;
- (void)setAccessibilityValueDescription:(id)arg1;
- (void)setAccessibilityVerticalScrollBar:(id)arg1;
- (void)setAccessibilityVerticalUnitDescription:(id)arg1;
- (void)setAccessibilityVerticalUnits:(long long)arg1;
- (void)setAccessibilityVisibleCells:(id)arg1;
- (void)setAccessibilityVisibleCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilityVisibleChildren:(id)arg1;
- (void)setAccessibilityVisibleColumns:(id)arg1;
- (void)setAccessibilityVisibleRows:(id)arg1;
- (void)setAccessibilityWarningValue:(id)arg1;
- (void)setAccessibilityWindow:(id)arg1;
- (void)setAccessibilityWindows:(id)arg1;
- (void)setAccessibilityZoomButton:(id)arg1;
- (void)setAction:(SEL)arg1;
- (void)setAlignment:(unsigned long long)arg1;
- (void)setAllowsAppearanceTextEffects:(BOOL)arg1;
- (void)setAllowsDefaultTighteningForTruncation:(BOOL)arg1;
- (void)setAllowsEditingTextAttributes:(BOOL)arg1;
- (void)setAllowsUndo:(BOOL)arg1;
- (void)setAttributedStringValue:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1;
- (void)setBezeled:(BOOL)arg1;
- (void)setBordered:(BOOL)arg1;
- (void)setCellAttribute:(unsigned long long)arg1 to:(long long)arg2;
- (void)setContinuous:(BOOL)arg1;
- (void)setControlSize:(unsigned long long)arg1;
- (void)setControlTint:(unsigned long long)arg1;
- (void)setControlView:(id)arg1;
- (void)setDoubleValue:(double)arg1;
- (void)setEditable:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setEntryType:(long long)arg1;
- (void)setFieldEditorTextContainer:(id)arg1;
- (void)setFloatValue:(float)arg1;
- (void)setFloatingPointFormat:(BOOL)arg1 left:(unsigned long long)arg2 right:(unsigned long long)arg3;
- (void)setFocusRingType:(unsigned long long)arg1;
- (void)setFont:(id)arg1;
- (void)setFormatter:(id)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setImageInterpolation:(unsigned long long)arg1;
- (void)setImportsGraphics:(BOOL)arg1;
- (void)setIntValue:(int)arg1;
- (void)setIntegerValue:(long long)arg1;
- (void)setLineBreakMode:(unsigned long long)arg1;
- (void)setMenu:(id)arg1;
- (void)setMnemonicLocation:(unsigned long long)arg1;
- (void)setNextContentSibling:(id)arg1;
- (void)setObjectValue:(id)arg1;
- (void)setPreviousContentSibling:(id)arg1;
- (void)setRefusesFirstResponder:(BOOL)arg1;
- (void)setRepresentedObject:(id)arg1;
- (void)setScrollable:(BOOL)arg1;
- (void)setSelectable:(BOOL)arg1;
- (void)setSendsActionOnEndEditing:(BOOL)arg1;
- (void)setShowsFirstResponder:(BOOL)arg1;
- (void)setState:(long long)arg1;
- (void)setStringValue:(id)arg1;
- (void)setStyleEffectConfiguration:(id)arg1;
- (void)setTag:(long long)arg1;
- (void)setTarget:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleTextContainer:(id)arg1;
- (void)setTitleWithMnemonic:(id)arg1;
- (void)setTruncatesLastVisibleLine:(BOOL)arg1;
- (void)setType:(unsigned long long)arg1;
- (id)setUpFieldEditorAttributes:(id)arg1;
- (void)setUserInterfaceItemIdentifier:(id)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (void)setUsesSingleLineMode:(BOOL)arg1;
- (void)setWraps:(BOOL)arg1;
- (BOOL)showsFirstResponder;
- (BOOL)startTrackingAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (long long)state;
- (void)stopTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (id)stringValue;
- (id)styleEffectConfiguration;
- (long long)tag;
- (void)takeDoubleValueFrom:(id)arg1;
- (void)takeFloatValueFrom:(id)arg1;
- (void)takeIntValueFrom:(id)arg1;
- (void)takeIntegerValueFrom:(id)arg1;
- (void)takeObjectValueFrom:(id)arg1;
- (void)takeStringValueFrom:(id)arg1;
- (id)target;
- (unsigned long long)textAlignmentPolicy;
- (void)textDidChange:(id)arg1;
- (BOOL)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementString:(id)arg3;
- (id)title;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)titleTextContainer;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (BOOL)truncatesLastVisibleLine;
- (unsigned long long)type;
- (void)updateLayerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (id)userInterfaceItemIdentifier;
- (long long)userInterfaceLayoutDirection;
- (BOOL)usesSingleLineMode;
- (BOOL)wantsNotificationForMarkedText;
- (BOOL)wantsUpdateLayerInView:(id)arg1;
- (BOOL)wraps;

// NSCell (NSCellAccessibility)

- (BOOL)_accessibilityIsTableViewDescendant;
- (void)_accessibilityShowMenu:(id)arg1;
- (void)_accessibilityShowMenu:(id)arg1 withProxy:(id)arg2;
- (struct CGPoint { double x1; double x2; })_accessibilityWindowPointForShowMenuWithProxy:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAuditHierarchy;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityAuditLabel;
- (id)accessibilityAuditParent;
- (id)accessibilityElementWithParent:(id)arg1;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHelpAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityHorizontalUnitDescriptionAttribute;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsEnabledAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsHelpAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsParentAttributeSettable;
- (BOOL)accessibilityIsPositionAttributeSettable;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (BOOL)accessibilityIsSizeAttributeSettable;
- (BOOL)accessibilityIsTopLevelUIElementAttributeSettable;
- (BOOL)accessibilityIsWindowAttributeSettable;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPositionAttribute;
- (void)accessibilityPostNotification:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetFocusedAttribute:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityShouldSendNotification:(id)arg1;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilitySizeAttribute;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTopLevelUIElementAttribute;
- (id)accessibilityVerticalUnitDescriptionAttribute;
- (id)accessibilityWindowAttribute;
- (struct CGPoint { double x1; double x2; })accessibilityWindowPointForShowMenu;

// NSCell (NSCellBackgroundStyle)

- (long long)backgroundStyle;
- (long long)interiorBackgroundStyle;
- (void)setBackgroundStyle:(long long)arg1;

// NSCell (NSCellBackgroundStyleCompatibility)

- (BOOL)_externalContextSeemsLikelyToBeRaised;
- (long long)_initialBackgroundStyleCompatibilityGuess;
- (long long)_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext;

// NSCell (NSCellControlTint)

- (BOOL)_isAnimatingDefaultCell;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (unsigned long long)_realControlTint;
- (BOOL)_wantsHeartBeat;
- (void)_windowChangedKeyStateInView:(id)arg1;
- (void)heartBeat:(struct { double x1; double x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 31; } x4; }*)arg1;

// NSCell (NSCellHitTesting)

- (unsigned long long)_textHitTest:(struct CGPoint { double x1; double x2; })arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;

// NSCell (NSCellMixedState)

- (BOOL)allowsMixedState;
- (long long)nextState;
- (void)setAllowsMixedState:(BOOL)arg1;
- (void)setNextState;

// NSCell (NSCellTextAttributesAccessibility)

- (id)accessibilityAttributedStringForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityBoundsForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityCurrentEditor;
- (id)accessibilityInsertionPointLineNumberAttribute;
- (BOOL)accessibilityIsInsertionPointLineNumberAttributeSettable;
- (BOOL)accessibilityIsNumberOfCharactersAttributeSettable;
- (BOOL)accessibilityIsSelectedTextAttributeSettable;
- (BOOL)accessibilityIsSelectedTextRangeAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (BOOL)accessibilityIsVisibleCharacterRangeAttributeSettable;
- (id)accessibilityLineForIndexAttributeForParameter:(id)arg1;
- (id)accessibilityNumberOfCharactersAttribute;
- (id)accessibilityRTFForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityRangeForIndexAttributeForParameter:(id)arg1;
- (id)accessibilityRangeForLineAttributeForParameter:(id)arg1;
- (id)accessibilityRangeForPositionAttributeForParameter:(id)arg1;
- (id)accessibilitySelectedTextAttribute;
- (id)accessibilitySelectedTextRangeAttribute;
- (void)accessibilitySetSelectedTextAttribute:(id)arg1;
- (void)accessibilitySetSelectedTextRangeAttribute:(id)arg1;
- (void)accessibilitySetValueAttribute:(id)arg1;
- (void)accessibilitySetVisibleCharacterRangeAttribute:(id)arg1;
- (id)accessibilityStringForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityStyleRangeForIndexAttributeForParameter:(id)arg1;
- (id)accessibilityValueAttribute;
- (id)accessibilityVisibleCharacterRangeAttribute;

// NSCell (NSCell_Placeholder)

- (id)_defaultPlaceholderString;
- (id)_placeholderAttributedString;
- (id)_placeholderString;
- (void)_setPlaceholderAttributedString:(id)arg1;
- (void)_setPlaceholderString:(id)arg1;

// NSCell (NSPrivate_CellMouseTracking)

- (void)_clearMouseTracking;
- (id)_mouseTrackingInfo;
- (id)_pressureConfigurationIfNeeded;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ofView:(id)arg2;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ofView:(id)arg2 withConfiguration:(id)arg3;
- (void)_setMouseTrackingInfo:(id)arg1;
- (void)_viewDidChangeGeometryInWindow:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)updateTrackingAreaWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;

// NSCell (_NSTableViewPrivate)

- (BOOL)_shouldHighlightCellWhenSelected;
- (BOOL)drawsBackground;
- (void)setDrawsBackground:(BOOL)arg1;

@end
