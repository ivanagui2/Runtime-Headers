/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSMatrix : NSControl <NSUserInterfaceValidations> {
    NSColor * _backgroundColor;
    id  _cellClass;
    struct CGSize { 
        double width; 
        double height; 
    }  _cellSize;
    NSMutableArray * _cells;
    id  _delegate;
    SEL  _doubleAction;
    SEL  _errorAction;
    id  _font;
    struct CGSize { 
        double width; 
        double height; 
    }  _intercell;
    struct __MFlags { 
        unsigned int reservedMatrix : 2; 
        unsigned int cellSizeNeedsAutorecalc : 1; 
        unsigned int autorecalculatesCellSize : 1; 
        unsigned int drawingContextMenuHighlightOnAllSelectedRows : 1; 
        unsigned int drawingContextMenuHighlight : 1; 
        unsigned int browserOptimizationsEnabled : 1; 
        unsigned int needsRedrawBeforeFirstLiveResizeCache : 1; 
        unsigned int tmpAllowNonVisibleCellsToBecomeFirstResponder : 1; 
        unsigned int subclassIsSafeForLiveResize : 1; 
        unsigned int hasCachedSubclassIsSafeForLiveResize : 1; 
        unsigned int liveResizeImageCacheingEnabled : 1; 
        unsigned int checkForSimpleTrackingMode : 1; 
        unsigned int useSimpleTrackingMode : 1; 
        unsigned int refusesFirstResponder : 1; 
        unsigned int dontScroll : 1; 
        unsigned int changingSelectionWithKeyboard : 1; 
        unsigned int onlySetKeyCell : 1; 
        unsigned int currentlySelectingCell : 1; 
        unsigned int allowsIncrementalSearching : 1; 
        unsigned int tabKeyTraversesCellsExplicitlySet : 1; 
        unsigned int tabKeyTraversesCells : 1; 
        unsigned int drawingAncestor : 1; 
        unsigned int autosizeCells : 1; 
        unsigned int drawsBackground : 1; 
        unsigned int drawsCellBackground : 1; 
        unsigned int selectionByRect : 1; 
        unsigned int autoscroll : 1; 
        unsigned int allowEmptySel : 1; 
        unsigned int listMode : 1; 
        unsigned int radioMode : 1; 
        unsigned int highlightMode : 1; 
    }  _mFlags;
    long long  _numCols;
    long long  _numRows;
    id  _private;
    id  _protoCell;
    id  _reserved2;
    SEL  _reserved3;
    id  _selectedCell;
    long long  _selectedCol;
    long long  _selectedRow;
}

@property (atomic, readwrite) BOOL allowsEmptySelection;
@property (atomic, readwrite) BOOL autorecalculatesCellSize;
@property (getter=isAutoscroll, atomic, readwrite) BOOL autoscroll;
@property (atomic, readwrite) BOOL autosizesCells;
@property (atomic, readwrite, copy) NSColor *backgroundColor;
@property (atomic, readwrite, copy) NSColor *cellBackgroundColor;
@property (atomic, readwrite) Class cellClass;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } cellSize;
@property (atomic, readonly, copy) NSArray *cells;
@property (atomic, readwrite) <NSMatrixDelegate> *delegate;
@property (atomic, readwrite) SEL doubleAction;
@property (atomic, readwrite) BOOL drawsBackground;
@property (atomic, readwrite) BOOL drawsCellBackground;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } intercellSpacing;
@property (atomic, readwrite) unsigned long long mode;
@property (atomic, readonly) long long mouseDownFlags;
@property (atomic, readonly) long long numberOfColumns;
@property (atomic, readonly) long long numberOfRows;
@property (atomic, readwrite, copy) NSCell *prototype;
@property (atomic, readonly) NSCell *selectedCell;
@property (atomic, readonly, copy) NSArray *selectedCells;
@property (atomic, readonly) long long selectedColumn;
@property (atomic, readonly) long long selectedRow;
@property (getter=isSelectionByRect, atomic, readwrite) BOOL selectionByRect;

+ (id)_dropHighlightColor;
+ (void)initialize;
+ (BOOL)isCompatibleWithResponsiveScrolling;
+ (BOOL)requiresConstraintBasedLayout;

- (long long)__keyCol;
- (long long)__keyRow;
- (long long)_acceptableRowAboveKeyInVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_acceptableRowAboveRow:(long long)arg1 minRow:(long long)arg2;
- (long long)_acceptableRowAboveRow:(long long)arg1 tryBelowPoint:(struct CGPoint { double x1; double x2; })arg2;
- (long long)_acceptableRowBelowKeyInVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_acceptableRowBelowRow:(long long)arg1 maxRow:(long long)arg2;
- (long long)_acceptableRowBelowRow:(long long)arg1 tryAbovePoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)_allocAndInitPrivateIvars;
- (void)_allowAnimationInCells:(BOOL)arg1;
- (id)_alternateDown:(id)arg1 :(id)arg2 :(long long)arg3 :(long long)arg4;
- (void)_autorecalculateCellSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsRectOccupiedByCells;
- (id)_browserColumnController;
- (BOOL)_browserOptimizationsEnabled;
- (id)_cellForRow:(long long)arg1 browser:(id)arg2 browserColumn:(long long)arg3;
- (long long)_cellFurthestFrom:(long long)arg1 andCol:(long long)arg2;
- (void)_changeSelectionWithEvent:(id)arg1;
- (BOOL)_changingSelectionWithKeyboard;
- (void)_checkForSimpleTrackingMode;
- (void)_clearKeyCell;
- (void)_clearMouseTrackingForCell:(id)arg1;
- (BOOL)_clearSelectedCell;
- (void)_computeAllRevealovers;
- (BOOL)_containedInSingleColumnClipView;
- (void)_deselectAllExcept:(long long)arg1 :(long long)arg2 andDraw:(BOOL)arg3;
- (void)_doResetOfCursorRects:(BOOL)arg1 revealovers:(BOOL)arg2;
- (void)_drawCellAt:(long long)arg1 col:(long long)arg2 insideOnly:(BOOL)arg3;
- (void)_drawCellAtRow:(long long)arg1 column:(long long)arg2 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 liveResizeFill:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 cacheCoveredArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6;
- (id)_findFirstOne:(long long*)arg1 :(long long*)arg2;
- (id)_firstHighlightedCell;
- (long long)_firstSelectableRow;
- (void)_getBrowser:(id*)arg1 browserColumn:(long long*)arg2;
- (id)_getDrawingRow:(long long*)arg1 andCol:(long long*)arg2;
- (BOOL)_getRow:(long long*)arg1 andCol:(long long*)arg2 ofCell:(id)arg3 atRect:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (void)_getRow:(long long*)arg1 column:(long long*)arg2 nearPoint:(struct CGPoint { double x1; double x2; })arg3;
- (void)_getRowRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1 andColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 intersectingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_getVisibleRowRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (BOOL)_hasEditableCell;
- (void)_highlightCell:(BOOL)arg1 atRow:(long long)arg2 column:(long long)arg3 andDraw:(BOOL)arg4;
- (id)_initialize:(long long)arg1 :(long long)arg2 :(long long)arg3;
- (BOOL)_keyEquivalentModifierMask:(unsigned long long)arg1 matchesModifierFlags:(unsigned long long)arg2;
- (void)_keyboardModifyRow:(long long)arg1 column:(long long)arg2 withEvent:(id)arg3;
- (void)_liveResizeHighlightSelectionInClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_liveResizeImageCacheingEnabled;
- (BOOL)_loopHit:(struct CGPoint { double x1; double x2; })arg1 row:(long long*)arg2 col:(long long*)arg3;
- (void)_maintainCell;
- (void)_makeDownCellKey;
- (id)_makeEditable:(id)arg1 :(long long)arg2 :(long long)arg3 :(id)arg4;
- (void)_makeLeftCellKey;
- (BOOL)_makeNextCellKey;
- (void)_makeNextCellOrViewKey;
- (BOOL)_makePreviousCellKey;
- (void)_makePreviousCellOrViewKey;
- (void)_makeRightCellKey;
- (void)_makeUpCellKey;
- (void)_menuDidEndTracking:(id)arg1;
- (void)_mouseDownListmode:(id)arg1;
- (id)_mouseDownNonListmode:(id)arg1;
- (id)_mouseDownSimpleTrackingMode:(id)arg1;
- (BOOL)_mouseHit:(struct CGPoint { double x1; double x2; })arg1 row:(long long*)arg2 col:(long long*)arg3;
- (void)_mouseLoop:(id)arg1 :(id)arg2 :(long long)arg3 :(long long)arg4 :(struct _SelectionAnchor { long long x1; long long x2; long long x3; }*)arg5 :(BOOL)arg6;
- (void)_moveDownWithEvent:(id)arg1;
- (void)_moveLeftWithEvent:(id)arg1;
- (void)_moveRightWithEvent:(id)arg1;
- (void)_moveUpWithEvent:(id)arg1;
- (void)_needsDisplayfromColumn:(long long)arg1;
- (void)_needsDisplayfromRow:(long long)arg1;
- (BOOL)_needsRedrawBeforeFirstLiveResizeCache;
- (BOOL)_needsRedrawForMovement;
- (id)_normalListmodeDown:(id)arg1 :(id)arg2 :(long long)arg3 :(long long)arg4;
- (void)_pageDownWithEvent:(id)arg1;
- (void)_pageUpWithEvent:(id)arg1;
- (BOOL)_performDragFromMouseDown:(id)arg1;
- (BOOL)_performKeyEquivalent:(id)arg1 conditionally:(BOOL)arg2;
- (void)_propagateDownNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_radioHit:(struct CGPoint { double x1; double x2; })arg1 row:(long long*)arg2 col:(long long*)arg3;
- (id)_recursiveFindDefaultButtonCell;
- (void)_recursiveWindowDidEnableToolTipCreationAndDisplay;
- (void)_removeAllCellMouseTracking;
- (void)_resetBrowserClickedRowAndColumn;
- (void)_rightMouseUpOrDown:(id)arg1;
- (id)_scrollRowToCenter:(long long)arg1;
- (void)_selectAllNoRecurse:(id)arg1;
- (void)_selectCellIfRequired;
- (BOOL)_selectFirstEnabledCell;
- (void)_selectKeyCellAtRow:(long long)arg1 column:(long long)arg2;
- (BOOL)_selectNextCellKeyStartingAtRow:(long long)arg1 column:(long long)arg2;
- (id)_selectRange:(struct _SelectionAnchor { long long x1; long long x2; long long x3; }*)arg1 oldArea:(struct _SelectionAnchor { long long x1; long long x2; long long x3; }*)arg2 lit:(BOOL)arg3 includeX:(BOOL)arg4;
- (id)_selectRectRange:(struct _SelectionAnchor { long long x1; long long x2; long long x3; }*)arg1 :(BOOL)arg2;
- (id)_selectRowRange:(struct _SelectionAnchor { long long x1; long long x2; long long x3; }*)arg1 :(BOOL)arg2;
- (id)_selectTextOfCell:(id)arg1;
- (void)_sendDoubleActionToCellAt:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setAllowsNonVisibleCellsToBecomeFirstResponder:(BOOL)arg1;
- (void)_setBrowserOptimizationsEnabled:(BOOL)arg1;
- (void)_setFont:(id)arg1 forCell:(id)arg2;
- (void)_setKeyCellAtRow:(long long)arg1 column:(long long)arg2;
- (void)_setKeyCellFromBottom;
- (void)_setKeyCellFromTop;
- (void)_setKeyCellNeedsDisplay;
- (void)_setLiveResizeImageCacheingEnabled:(BOOL)arg1;
- (void)_setMouseTrackingForCell:(id)arg1;
- (void)_setNeedsDisplayForSelectedCells;
- (void)_setNeedsDisplayInRow:(long long)arg1 column:(long long)arg2;
- (void)_setNeedsRedrawBeforeFirstLiveResizeCache:(BOOL)arg1;
- (void)_setSelectedCell:(id)arg1;
- (void)_setSelectedCell:(id)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (id)_setSelectionRange:(struct _SelectionAnchor { long long x1; long long x2; long long x3; }*)arg1 :(BOOL)arg2;
- (void)_setUseSimpleTrackingMode:(BOOL)arg1;
- (void)_setWindow:(id)arg1;
- (id)_shiftDown:(id)arg1 :(id)arg2 :(long long)arg3 :(long long)arg4;
- (BOOL)_shouldAttemptIdleTimeDisposeOfLiveResizeCacheWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_shouldDelegateTargetActionForSelector:(SEL)arg1;
- (BOOL)_shouldDrawContextMenuHighlightForRow:(long long)arg1 column:(long long)arg2;
- (BOOL)_shouldShowFirstResponderAtRow:(long long)arg1 column:(long long)arg2 ignoringWindowKeyState:(BOOL)arg3;
- (BOOL)_shouldShowFirstResponderForCell:(id)arg1;
- (void)_toolTipManagerWillRecomputeToolTipsByRemoving:(BOOL)arg1 adding:(BOOL)arg2;
- (void)_updateCellImage:(id)arg1;
- (BOOL)_useSimpleTrackingMode;
- (BOOL)_wantsHeartBeat;
- (BOOL)_wantsLiveResizeToUseCachedImage;
- (void)_windowChangedKeyState;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (void)addColumn;
- (void)addColumnWithCells:(id)arg1;
- (void)addRow;
- (void)addRowWithCells:(id)arg1;
- (id)allowEmptySel:(BOOL)arg1;
- (BOOL)allowsEmptySelection;
- (void)altModifySelection:(id)arg1;
- (BOOL)autorecalculatesCellSize;
- (BOOL)autosizesCells;
- (id)backgroundColor;
- (BOOL)becomeFirstResponder;
- (void)becomeKeyWindow;
- (void)calcSize;
- (id)cellAtRow:(long long)arg1 column:(long long)arg2;
- (id)cellBackgroundColor;
- (Class)cellClass;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cellFrameAtRow:(long long)arg1 column:(long long)arg2;
- (struct CGSize { double x1; double x2; })cellSize;
- (id)cellWithTag:(long long)arg1;
- (id)cells;
- (void)dealloc;
- (id)delegate;
- (void)deselectAllCells;
- (void)deselectSelectedCell;
- (SEL)doubleAction;
- (void)drawCell:(id)arg1;
- (void)drawCellAtRow:(long long)arg1 column:(long long)arg2;
- (void)drawCellInside:(id)arg1;
- (void)drawContextMenuHighlightForCellIndexes:(id)arg1;
- (void)drawFocusRingMask;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)drawsBackground;
- (BOOL)drawsCellBackground;
- (void)encodeWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBounds;
- (id)font;
- (void)getNumberOfRows:(long long*)arg1 columns:(long long*)arg2;
- (BOOL)getRow:(long long*)arg1 column:(long long*)arg2 forPoint:(struct CGPoint { double x1; double x2; })arg3;
- (BOOL)getRow:(long long*)arg1 column:(long long*)arg2 ofCell:(id)arg3;
- (void)heartBeat:(struct { double x1; double x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 31; } x4; }*)arg1;
- (void)helpRequested:(id)arg1;
- (void)highlightCell:(BOOL)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 mode:(unsigned long long)arg2 cellClass:(Class)arg3 numberOfRows:(long long)arg4 numberOfColumns:(long long)arg5;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 mode:(unsigned long long)arg2 prototype:(id)arg3 numberOfRows:(long long)arg4 numberOfColumns:(long long)arg5;
- (void)insertColumn:(long long)arg1;
- (void)insertColumn:(long long)arg1 withCells:(id)arg2;
- (void)insertRow:(long long)arg1;
- (void)insertRow:(long long)arg1 withCells:(id)arg2;
- (struct CGSize { double x1; double x2; })intercellSpacing;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)invalidateIntrinsicContentSizeForCell:(id)arg1;
- (BOOL)isAutoscroll;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (BOOL)isR2L;
- (BOOL)isSelectionByRect;
- (id)keyCell;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (id)makeCellAtRow:(long long)arg1 column:(long long)arg2;
- (id)menuForEvent:(id)arg1;
- (unsigned long long)mode;
- (void)mouseDown:(id)arg1;
- (long long)mouseDownFlags;
- (void)moveDown:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveUp:(id)arg1;
- (BOOL)needsPanelToBecomeKey;
- (long long)numberOfColumns;
- (long long)numberOfRows;
- (void)performClick:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (id)prototype;
- (void)putCell:(id)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (BOOL)refusesFirstResponder;
- (void)removeColumn:(long long)arg1;
- (void)removeRow:(long long)arg1;
- (void)renewRows:(long long)arg1 columns:(long long)arg2;
- (void)resetCursorRects;
- (BOOL)resignFirstResponder;
- (void)resignKeyWindow;
- (void)resizeWithOldSuperviewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)scrollCellToVisibleAtRow:(long long)arg1 column:(long long)arg2;
- (void)selectAll:(id)arg1;
- (void)selectCell:(id)arg1;
- (void)selectCellAtRow:(long long)arg1 column:(long long)arg2;
- (BOOL)selectCellWithTag:(long long)arg1;
- (void)selectNextKeyView:(id)arg1;
- (void)selectPreviousKeyView:(id)arg1;
- (void)selectText:(id)arg1;
- (id)selectTextAtRow:(long long)arg1 column:(long long)arg2;
- (id)selectedCell;
- (id)selectedCells;
- (long long)selectedColumn;
- (long long)selectedRow;
- (BOOL)sendAction;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2;
- (void)sendAction:(SEL)arg1 to:(id)arg2 forAllCells:(BOOL)arg3;
- (void)sendDoubleAction;
- (void)setAction:(SEL)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (void)setAllowsEmptySelection:(BOOL)arg1;
- (void)setAutorecalculatesCellSize:(BOOL)arg1;
- (void)setAutoscroll:(BOOL)arg1;
- (void)setAutosizesCells:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setCellBackgroundColor:(id)arg1;
- (void)setCellClass:(Class)arg1;
- (void)setCellSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleAction:(SEL)arg1;
- (void)setDrawsBackground:(BOOL)arg1;
- (void)setDrawsCellBackground:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setIntercellSpacing:(struct CGSize { double x1; double x2; })arg1;
- (void)setKeyCell:(id)arg1;
- (void)setMode:(unsigned long long)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPrototype:(id)arg1;
- (void)setRefusesFirstResponder:(BOOL)arg1;
- (void)setScrollable:(BOOL)arg1;
- (void)setSelectionByRect:(BOOL)arg1;
- (void)setSelectionFrom:(long long)arg1 to:(long long)arg2 anchor:(long long)arg3 highlight:(BOOL)arg4;
- (void)setState:(long long)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (void)setTabKeyTraversesCells:(BOOL)arg1;
- (void)setTag:(long long)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (void)setTag:(long long)arg1 target:(id)arg2 action:(SEL)arg3 atRow:(long long)arg4 column:(long long)arg5;
- (void)setTarget:(id)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (void)setToolTip:(id)arg1 forCell:(id)arg2;
- (void)setValidateSize:(BOOL)arg1;
- (void)shiftModifySelection:(id)arg1;
- (void)sizeToCells;
- (void)sizeToFit;
- (void)sortUsingFunction:(int (*)arg1 context:(void*)arg2;
- (void)sortUsingSelector:(SEL)arg1;
- (void)startSpeaking:(id)arg1;
- (void)stopSpeaking:(id)arg1;
- (BOOL)tabKeyTraversesCells;
- (void)textDidBeginEditing:(id)arg1;
- (void)textDidChange:(id)arg1;
- (void)textDidEndEditing:(id)arg1;
- (BOOL)textShouldBeginEditing:(id)arg1;
- (BOOL)textShouldEndEditing:(id)arg1;
- (id)textView:(id)arg1 completions:(id)arg2 forPartialWordRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 indexOfSelectedItem:(long long*)arg4;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (BOOL)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementString:(id)arg3;
- (id)toolTipForCell:(id)arg1;
- (void)updateCell:(id)arg1;
- (void)updateCellInside:(id)arg1;
- (void)updateConstraints;
- (void)updateTrackingAreas;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint { double x1; double x2; })arg3 userData:(void*)arg4;
- (void)viewDidEndLiveResize;

// NSMatrix (NSMatrixAccessibility)

+ (BOOL)accessibilityIsSingleCelled;

- (id)_accessibilityCorrectlyParentedCells:(id)arg1;
- (BOOL)_accessibilityIsRadioGroup;
- (void)_accessibilityLoadBrowserCellsAtRow:(long long)arg1 count:(long long)arg2;
- (BOOL)_isAccessibilityContentNavigatorSectionCandidate;
- (BOOL)_isAccessibilityTopLevelNavigatorSectionCandidate;
- (unsigned long long)accessibilityArrayAttributeCount:(id)arg1;
- (id)accessibilityArrayAttributeValues:(id)arg1 index:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityCurrentEditorForCell:(id)arg1;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)accessibilityIndexOfChild:(id)arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsSelectedChildrenAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (BOOL)accessibilityIsVisibleChildrenAttributeSettable;
- (id)accessibilityOrientationAttribute;
- (id)accessibilityPositionOfChild:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySelectedChildrenAttribute;
- (void)accessibilitySetFocus:(id)arg1 forChild:(id)arg2;
- (void)accessibilitySetSelectedChildrenAttribute:(id)arg1;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilityValueAttribute;
- (id)accessibilityVisibleChildrenAttribute;
- (id)accessiblityChildCells;

// NSMatrix (NSMatrixObsolete)

- (SEL)errorAction;
- (void)setErrorAction:(SEL)arg1;

@end
