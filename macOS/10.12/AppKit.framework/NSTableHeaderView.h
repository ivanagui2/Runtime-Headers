/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTableHeaderView : NSView {
    unsigned int  _addedBlurToClipView;
    unsigned int  _alignTitleWithDataCell;
    long long  _draggedColumn;
    double  _draggedDistance;
    NSImage * _headerDragImage;
    unsigned int  _isColumnResizing;
    unsigned int  _nextColumnAfterDrawnOneIsSelected;
    long long  _pressedColumn;
    unsigned int  _reserved;
    long long  _resizedColumn;
    unsigned int  _showHandCursorFired;
    BOOL  _skipDrawingSeparator;
    NSTableView * _tableView;
    unsigned int  _toolTipRectsDirty;
    unsigned int  _usedNewHeight;
    id  _viewDataX;
    unsigned int  _wantsTranslucency;
}

@property (atomic, readonly) long long draggedColumn;
@property (atomic, readonly) double draggedDistance;
@property (atomic, readonly) long long resizedColumn;
@property (atomic, readwrite) NSTableView *tableView;

- (void)_addBlurViewIfNecessary;
- (void)_addToolTipRects;
- (BOOL)_alignTitleWithDataCell;
- (id)_backgroundView;
- (void)_beginDraggingColumn:(long long)arg1;
- (BOOL)_canAddBlurView;
- (BOOL)_canSupportTallerHeight;
- (BOOL)_canUseReorderResizeImageCache;
- (void)_cancelDelayedShowOpenHandCursor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_cursorRectForColumn:(long long)arg1;
- (double)_defaultHeight;
- (void)_didMoveFromColumn:(long long)arg1 toColumn:(long long)arg2 animated:(BOOL)arg3;
- (void)_doModifySelectionWithEvent:(id)arg1 onColumn:(long long)arg2;
- (void)_drawColumnHeaderWithIndexes:(id)arg1;
- (void)_drawHeaderCell:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withStateFromColumn:(long long)arg3;
- (void)_drawHeaderDragImageForColumn:(long long)arg1;
- (void)_drawHeaderFillerInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 matchLastState:(BOOL)arg2;
- (void)_drawHeaderOfColumn:(long long)arg1;
- (void)_drawOverflowHeaderInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 liveResizeCacheCoveredArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 liveResizeFill:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 cacheCoveredArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6;
- (BOOL)_drawingEndSeparator;
- (void)_dropTableViewOverdrawIfNecessary;
- (void)_endDraggingColumn:(long long)arg1;
- (void)_endDraggingColumn:(long long)arg1 animated:(BOOL)arg2;
- (void)_finishedMakingConnections;
- (BOOL)_hasRowHeaderColumn;
- (BOOL)_hasTranslucency;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_headerRectForInvalidation:(long long)arg1;
- (void)_invalidateLiveResizeCachedImage;
- (void)_invalidateOrComputeNewCursorRectsIfNecessary;
- (void)_invalidateRightMostLineIfNeeded;
- (BOOL)_isColumnReordering;
- (BOOL)_isColumnResizing;
- (id)_lastDraggedEventFollowing:(id)arg1;
- (id)_lastDraggedOrUpEventFollowing:(id)arg1 canceled:(BOOL*)arg2;
- (BOOL)_layoutIsSameAsCachedLayoutWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_ltrCursorRectForColumn:(long long)arg1;
- (id)_makeBlurBackgroundViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_nextColumnAfterOneBeingDrawnIsSelected;
- (BOOL)_nextColumnDrawsLeftSeparatorFromColumn:(long long)arg1;
- (void)_old_encodeWithCoder_NSTableHeaderView:(id)arg1;
- (id)_overflowHeaderCellPrototype;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_overflowRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_preferredAppearance;
- (id)_preparedHeaderCellAtColumn:(long long)arg1;
- (id)_preparedHeaderFillerCell;
- (long long)_previousNonHiddenColumnStartingAtColumn:(long long)arg1;
- (id)_rectsForMultiClippedContentDrawing;
- (void)_removeBackgroundView;
- (void)_reorderColumn:(long long)arg1 withEvent:(id)arg2;
- (void)_resizeColumn:(long long)arg1 withEvent:(id)arg2;
- (id)_resizeCursorForTableColumn:(id)arg1;
- (long long)_resizeableColumnAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rowHeaderFixedContentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rowHeaderScrollableContentVisibleRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rtlCursorRectForColumn:(long long)arg1;
- (void)_scheduleDelayedShowOpenHandCursorIfNecessary;
- (void)_setAlignTitleWithDataCell:(BOOL)arg1;
- (void)_setBackgroundView:(id)arg1;
- (void)_setNeedsDisplayForDraggedDelta:(double)arg1;
- (void)_setOverflowHeaderCellPrototype:(id)arg1;
- (void)_setToolTipRectsDirty:(BOOL)arg1;
- (void)_setWantsTranslucency:(BOOL)arg1;
- (BOOL)_shouldAttemptIdleTimeDisposeOfLiveResizeCacheWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_showOpenHandCursor:(id)arg1;
- (void)_startObservingKeyWindow:(id)arg1;
- (void)_stopObservingKeyWindow;
- (BOOL)_supportsViewsForAnimations;
- (void)_switchToNonViewBasedIfNeeded;
- (void)_switchToViewBasedIfNeeded;
- (void)_tableView:(id)arg1 didAddTableColumn:(id)arg2;
- (void)_tableView:(id)arg1 didRemoveTableColumnAtIndex:(long long)arg2;
- (void)_tableView:(id)arg1 willAddTableColumn:(id)arg2;
- (void)_tableView:(id)arg1 willRemoveTableColumn:(id)arg2;
- (BOOL)_trackAndModifySelectionWithEvent:(id)arg1 onColumn:(long long)arg2 stopOnReorderGesture:(BOOL*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_unobstructedVisibleHeaderRectOfColumn:(long long)arg1;
- (void)_unshowOpenHandCursor:(id)arg1;
- (void)_updateBackgroundViewFrame;
- (void)_updateClipViewBackgroundColors;
- (void)_updateColumnViewWidthsAnimated:(BOOL)arg1;
- (id)_vibrancyFilter;
- (void)_viewBasedRawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_wantsClipViewToDoOverhangViews;
- (BOOL)_wantsLiveResizeToUseCachedImage;
- (BOOL)_wantsTranslucency;
- (void)_windowChangedKeyState;
- (void)_windowKeyChanged:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (BOOL)allowsVibrancy;
- (long long)columnAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)dealloc;
- (long long)draggedColumn;
- (double)draggedDistance;
- (void)drawBackgroundOverhangInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })headerRectOfColumn:(long long)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)preservesContentDuringLiveResize;
- (void)resetCursorRects;
- (long long)resizedColumn;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLayer:(id)arg1;
- (void)setTableView:(id)arg1;
- (id)tableView;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint { double x1; double x2; })arg3 userData:(void*)arg4;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;

// NSTableHeaderView (NSTableHeaderViewAccessibility)

- (id)accessibilityChildForColumn:(id)arg1;
- (id)accessibilityChildrenAttribute;
- (unsigned long long)accessibilityColumnForChild:(id)arg1;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityParentAttribute;
- (id)accessibilityPositionOfChild:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySizeOfChild:(id)arg1;

@end
