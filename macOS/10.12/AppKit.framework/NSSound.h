/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSSound : NSObject <NSCoding, NSCopying, NSPasteboardReading, NSPasteboardWriting> {
    id  _delegate;
    id  _info;
    /* Warning: unhandled array encoding: '[6@]' */ id  _reserved;
    unsigned int  _sFlags;
}

@property (atomic, readwrite) double currentTime;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <NSSoundDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) double duration;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite) BOOL loops;
@property (atomic, readonly, copy) NSString *name;
@property (atomic, readwrite, copy) NSString *playbackDeviceIdentifier;
@property (getter=isPlaying, atomic, readonly) BOOL playing;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) float volume;

+ (unsigned long long)_alertType;
+ (BOOL)_areUISoundEffectsEnabled;
+ (void)_forceSoundEngine:(long long)arg1;
+ (id)_searchForSoundNamed:(id)arg1;
+ (void)_setAlertType:(unsigned long long)arg1;
+ (BOOL)canInitWithPasteboard:(id)arg1;
+ (void)initialize;
+ (BOOL)playSound:(id)arg1 flags:(unsigned long long)arg2 completionHandler:(id)arg3;
+ (id)readableTypesForPasteboard:(id)arg1;
+ (unsigned long long)readingOptionsForType:(id)arg1 pasteboard:(id)arg2;
+ (id)soundNamed:(id)arg1;
+ (id)soundUnfilteredFileTypes;
+ (id)soundUnfilteredPasteboardTypes;
+ (id)soundUnfilteredTypes;

- (BOOL)_allocateExtraFields;
- (void)_postInitialization;
- (void)_qtMovieDidEnd:(id)arg1;
- (BOOL)_registersName;
- (BOOL)_setAudioDeviceUID:(id)arg1 channels:(id)arg2 error:(id*)arg3;
- (BOOL)_setChannelMapping:(id)arg1 error:(id*)arg2;
- (void)_setPlayingAndRetainIfUnset;
- (void)_setRegistersName:(BOOL)arg1;
- (unsigned int)_systemSoundIDCreateIfNecessary:(BOOL)arg1;
- (BOOL)_unsetPlayingReturningIfWasSet;
- (void)_updateSoundShouldLoopByStoredLoopFlag;
- (void)_updateVolumeByStoredVolume;
- (id)_url;
- (id)channelMapping;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)currentTime;
- (void)dealloc;
- (id)delegate;
- (double)duration;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1 byReference:(BOOL)arg2;
- (id)initWithContentsOfURL:(id)arg1 byReference:(BOOL)arg2;
- (id)initWithData:(id)arg1;
- (id)initWithPasteboard:(id)arg1;
- (id)initWithPasteboardPropertyList:(id)arg1 ofType:(id)arg2;
- (BOOL)isPlaying;
- (BOOL)loops;
- (id)name;
- (id)pasteboardPropertyListForType:(id)arg1;
- (BOOL)pause;
- (BOOL)play;
- (id)playbackDeviceIdentifier;
- (BOOL)resume;
- (void)setChannelMapping:(id)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLoops:(BOOL)arg1;
- (BOOL)setName:(id)arg1;
- (void)setPlaybackDeviceIdentifier:(id)arg1;
- (void)setVolume:(float)arg1;
- (BOOL)stop;
- (id)url;
- (float)volume;
- (id)writableTypesForPasteboard:(id)arg1;
- (void)writeToPasteboard:(id)arg1;

@end
