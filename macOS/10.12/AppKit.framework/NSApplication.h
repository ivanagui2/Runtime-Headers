/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSApplication : NSResponder <NSAccessibility, NSAccessibilityElement, NSUserInterfaceValidations> {
    struct __appFlags { 
        unsigned int _hidden : 1; 
        unsigned int _appleEventActivationInProgress : 1; 
        unsigned int _active : 1; 
        unsigned int _hasBeenRun : 1; 
        unsigned int _doingUnhide : 1; 
        unsigned int _delegateReturnsValidRequestor : 1; 
        unsigned int _deactPending : 1; 
        unsigned int _invalidState : 1; 
        unsigned int _invalidEvent : 1; 
        unsigned int _postedWindowsNeedUpdateNote : 1; 
        unsigned int _wantsToActivate : 1; 
        unsigned int _doingHide : 1; 
        unsigned int _dontSendShouldTerminate : 1; 
        unsigned int _ignoresFullScreen : 1; 
        unsigned int _finishedLaunching : 1; 
        unsigned int _hasEventDelegate : 1; 
        unsigned int _appDying : 1; 
        unsigned int _didNSOpenOrPrint : 1; 
        unsigned int _inDealloc : 1; 
        unsigned int _pendingDidFinish : 1; 
        unsigned int _hasKeyFocus : 1; 
        unsigned int _panelsNonactivating : 1; 
        unsigned int _hiddenOnLaunch : 1; 
        unsigned int _openStatus : 2; 
        unsigned int _batchOrdering : 1; 
        unsigned int _waitingForTerminationReply : 1; 
        unsigned int _windowMoveDisabled : 1; 
        unsigned int _enumeratingMemoryPressureHandlers : 1; 
        unsigned int _didTryRestoringPersistentState : 1; 
        unsigned int _reservedN : 1; 
        unsigned int _mightBeSwitching : 1; 
    }  _appFlags;
    void * _appleEventSuspensionID;
    long long  _context;
    NSEvent * _currentEvent;
    id  _delegate;
    id  _eventDelegate;
    int  _hiddenCount;
    id  _hiddenList;
    id  _keyWindow;
    id  _mainMenu;
    id  _mainWindow;
    NSWindow * _previousKeyWindowX;
    short  _running;
    struct NSThreadPrivate { unsigned int x1; struct __CFRunLoopObserver {} *x2; struct __CFRunLoop {} *x3; id x4; unsigned long long x5; void *x6; long long x7; long long x8; long long x9; long long x10; id x11; id x12; unsigned long long x13; long long x14; id x15; struct auxFlags { unsigned int x_16_1_1 : 1; unsigned int x_16_1_2 : 31; } x16; } * _threadingSupport;
    /* Warning: unhandled array encoding: '[2@]' */ id  _unused;
    short  _unusedApp;
    id  _windowList;
}

@property (atomic, readwrite) struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property (atomic, readwrite, copy) NSArray *accessibilityAllowedValues;
@property (getter=isAccessibilityAlternateUIVisible, atomic, readwrite) BOOL accessibilityAlternateUIVisible;
@property (atomic, readwrite, retain) id accessibilityApplicationFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityCancelButton;
@property (atomic, readwrite, copy) NSArray *accessibilityChildren;
@property (atomic, readwrite, retain) id accessibilityClearButton;
@property (atomic, readwrite, retain) id accessibilityCloseButton;
@property (atomic, readwrite) long long accessibilityColumnCount;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityColumnIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnTitles;
@property (atomic, readwrite, copy) NSArray *accessibilityColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityContents;
@property (atomic, readwrite, retain) id accessibilityCriticalValue;
@property (atomic, readwrite, retain) id accessibilityDecrementButton;
@property (atomic, readwrite, retain) id accessibilityDefaultButton;
@property (getter=isAccessibilityDisclosed, atomic, readwrite) BOOL accessibilityDisclosed;
@property (atomic, readwrite) id accessibilityDisclosedByRow;
@property (atomic, readwrite, retain) id accessibilityDisclosedRows;
@property (atomic, readwrite) long long accessibilityDisclosureLevel;
@property (atomic, readwrite, copy) NSString *accessibilityDocument;
@property (getter=isAccessibilityEdited, atomic, readwrite) BOOL accessibilityEdited;
@property (getter=isAccessibilityElement, atomic, readwrite) BOOL accessibilityElement;
@property (getter=isAccessibilityEnabled, atomic, readwrite) BOOL accessibilityEnabled;
@property (getter=isAccessibilityExpanded, atomic, readwrite) BOOL accessibilityExpanded;
@property (atomic, readwrite) id accessibilityExtrasMenuBar;
@property (atomic, readwrite, copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityFocused, atomic, readwrite) BOOL accessibilityFocused;
@property (atomic, readwrite, retain) id accessibilityFocusedWindow;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property (getter=isAccessibilityFrontmost, atomic, readwrite) BOOL accessibilityFrontmost;
@property (atomic, readwrite, retain) id accessibilityFullScreenButton;
@property (atomic, readwrite, retain) id accessibilityGrowArea;
@property (atomic, readwrite, copy) NSArray *accessibilityHandles;
@property (atomic, readwrite, retain) id accessibilityHeader;
@property (atomic, readwrite, copy) NSString *accessibilityHelp;
@property (getter=isAccessibilityHidden, atomic, readwrite) BOOL accessibilityHidden;
@property (atomic, readwrite, retain) id accessibilityHorizontalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityHorizontalUnitDescription;
@property (atomic, readwrite) long long accessibilityHorizontalUnits;
@property (atomic, readwrite, copy) NSString *accessibilityIdentifier;
@property (atomic, readwrite, retain) id accessibilityIncrementButton;
@property (atomic, readwrite) long long accessibilityIndex;
@property (atomic, readwrite) long long accessibilityInsertionPointLineNumber;
@property (atomic, readwrite, copy) NSString *accessibilityLabel;
@property (atomic, readwrite, copy) NSArray *accessibilityLabelUIElements;
@property (atomic, readwrite) float accessibilityLabelValue;
@property (atomic, readwrite, copy) NSArray *accessibilityLinkedUIElements;
@property (getter=isAccessibilityMain, atomic, readwrite) BOOL accessibilityMain;
@property (atomic, readwrite, retain) id accessibilityMainWindow;
@property (atomic, readwrite, retain) id accessibilityMarkerGroupUIElement;
@property (atomic, readwrite, copy) NSString *accessibilityMarkerTypeDescription;
@property (atomic, readwrite, copy) NSArray *accessibilityMarkerUIElements;
@property (atomic, readwrite, retain) id accessibilityMarkerValues;
@property (atomic, readwrite, retain) id accessibilityMaxValue;
@property (atomic, readwrite) id accessibilityMenuBar;
@property (atomic, readwrite, retain) id accessibilityMinValue;
@property (atomic, readwrite, retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized, atomic, readwrite) BOOL accessibilityMinimized;
@property (getter=isAccessibilityModal, atomic, readwrite) BOOL accessibilityModal;
@property (atomic, readwrite, copy) NSArray *accessibilityNextContents;
@property (atomic, readwrite) long long accessibilityNumberOfCharacters;
@property (getter=isAccessibilityOrderedByRow, atomic, readwrite) BOOL accessibilityOrderedByRow;
@property (atomic, readwrite) long long accessibilityOrientation;
@property (atomic, readwrite, retain) id accessibilityOverflowButton;
@property (atomic, readwrite) id accessibilityParent;
@property (atomic, readwrite, copy) NSString *accessibilityPlaceholderValue;
@property (atomic, readwrite, copy) NSArray *accessibilityPreviousContents;
@property (getter=isAccessibilityProtectedContent, atomic, readwrite) BOOL accessibilityProtectedContent;
@property (atomic, readwrite, retain) id accessibilityProxy;
@property (getter=isAccessibilityRequired, atomic, readwrite) BOOL accessibilityRequired;
@property (atomic, readwrite, copy) NSString *accessibilityRole;
@property (atomic, readwrite, copy) NSString *accessibilityRoleDescription;
@property (atomic, readwrite) long long accessibilityRowCount;
@property (atomic, readwrite, copy) NSArray *accessibilityRowHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityRowIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityRows;
@property (atomic, readwrite) long long accessibilityRulerMarkerType;
@property (atomic, readwrite, retain) id accessibilitySearchButton;
@property (atomic, readwrite, retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected, atomic, readwrite) BOOL accessibilitySelected;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedCells;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedChildren;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedColumns;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedRows;
@property (atomic, readwrite, copy) NSString *accessibilitySelectedText;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySelectedTextRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedTextRanges;
@property (atomic, readwrite, copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySharedCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedFocusElements;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedTextUIElements;
@property (atomic, readwrite, retain) id accessibilityShownMenu;
@property (atomic, readwrite) long long accessibilitySortDirection;
@property (atomic, readwrite, copy) NSArray *accessibilitySplitters;
@property (atomic, readwrite, copy) NSString *accessibilitySubrole;
@property (atomic, readwrite, copy) NSArray *accessibilityTabs;
@property (atomic, readwrite, copy) NSString *accessibilityTitle;
@property (atomic, readwrite) id accessibilityTitleUIElement;
@property (atomic, readwrite, retain) id accessibilityToolbarButton;
@property (atomic, readwrite) id accessibilityTopLevelUIElement;
@property (atomic, readwrite, copy) NSURL *accessibilityURL;
@property (atomic, readwrite, copy) NSString *accessibilityUnitDescription;
@property (atomic, readwrite) long long accessibilityUnits;
@property (atomic, readwrite, retain) id accessibilityValue;
@property (atomic, readwrite, copy) NSString *accessibilityValueDescription;
@property (atomic, readwrite, retain) id accessibilityVerticalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityVerticalUnitDescription;
@property (atomic, readwrite) long long accessibilityVerticalUnits;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleCells;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityVisibleCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleRows;
@property (atomic, readwrite, retain) id accessibilityWarningValue;
@property (atomic, readwrite) id accessibilityWindow;
@property (atomic, readwrite, copy) NSArray *accessibilityWindows;
@property (atomic, readwrite, retain) id accessibilityZoomButton;
@property (getter=isActive, atomic, readonly) BOOL active;
@property (atomic, readwrite, retain) NSImage *applicationIconImage;
@property (atomic, readonly) NSEvent *currentEvent;
@property (atomic, readonly) unsigned long long currentSystemPresentationOptions;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <NSApplicationDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) NSDockTile *dockTile;
@property (atomic, readonly) unsigned long long enabledRemoteNotificationTypes;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite, retain) NSMenu *helpMenu;
@property (getter=isHidden, atomic, readonly) BOOL hidden;
@property (atomic, readonly) NSWindow *keyWindow;
@property (atomic, readwrite, retain) NSMenu *mainMenu;
@property (atomic, readonly) NSWindow *mainWindow;
@property (atomic, readonly) NSWindow *modalWindow;
@property (atomic, readonly) unsigned long long occlusionState;
@property (atomic, readonly, copy) NSArray *orderedDocuments;
@property (atomic, readonly, copy) NSArray *orderedWindows;
@property (atomic, readwrite) unsigned long long presentationOptions;
@property (getter=isRunning, atomic, readonly) BOOL running;
@property (atomic, readwrite, retain) id servicesProvider;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly, copy) NSArray *windows;
@property (atomic, readwrite, retain) NSMenu *windowsMenu;

+ (void)_initializeArchiverMappings;
+ (void)_initializeRegisteredDefaults;
+ (void)_initializeSharedApplicationForCarbonAppIfNecessary;
+ (BOOL)_isCurrentActivationDeferred;
+ (void)_resetCurrentDeferredActivation;
+ (void)_startDrawingThread:(id)arg1;
+ (void)_userLoggedOut;
+ (void)detachDrawingThread:(SEL)arg1 toTarget:(id)arg2 withObject:(id)arg3;
+ (void)initialize;
+ (void)load;
+ (id)sharedApplication;

- (void)_activateWindows;
- (void)_activeDisplayChanged:(id)arg1;
- (void)_addFullScreenInstance:(id)arg1;
- (void)_addFullScreenMenuItemIfNeeded;
- (void)_addHiddenWindow:(id)arg1;
- (void)_addUpdaterForDocumentMenuItem:(id)arg1;
- (id)_addWindow:(id)arg1;
- (void)_adjustKeyWindowFromOriginatingDisplayHint:(int)arg1;
- (void)_afterBatchOrderingFinishesDo:(id)arg1;
- (BOOL)_allowAutomaticTerminationInsteadOfTermination;
- (int)_ambientOriginatingDisplayHint;
- (BOOL)_anyOfMyFullScreenSpacesAreVisible;
- (BOOL)_anyOfMyWindowsAreOnAVisibleNonFullScreenSpace;
- (id)_appCentricOpenPanel;
- (id)_appIcon;
- (BOOL)_appleEventActivationInProgress;
- (BOOL)_applicationLaunchIsPastSplashScreens;
- (void)_aquaColorVariantChanged;
- (BOOL)_areAllPanelsNonactivating;
- (void)_awakenIfSleepingInAutoQuitAndContinueTermination:(BOOL)arg1;
- (void)_axContrastChanged:(id)arg1;
- (BOOL)_batchOrdering;
- (id)_bestKeyWindowCandidateOnScreen:(id)arg1;
- (id)_bestMainWindowCandidateOnScreen:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_cachedTileRectForSpace:(unsigned long long)arg1;
- (void)_callMemoryPressureHandlers;
- (BOOL)_canShowExceptions;
- (void)_cancelAllUserAttentionRequests;
- (void)_cancelRequest:(id)arg1;
- (void)_cleanUpForCarbonAppTermination;
- (void)_clearModalWindowLevels;
- (struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)_commonBeginModalSessionForWindow:(id)arg1 relativeToWindow:(id)arg2 modalDelegate:(id)arg3 didEndSelector:(SEL)arg4 contextInfo:(void*)arg5;
- (void)_continueReopening;
- (id)_copyBatchWindowOrderingPerformerForToken:(int)arg1 release:(BOOL)arg2;
- (id)_copyFullScreenInstances;
- (id)_copyPublicPersistentUIInfo;
- (id)_copyVisibleFullScreenInstances;
- (id)_copyWindows;
- (void)_crashOnException:(id)arg1;
- (struct __CFArray { }*)_createDockMenu:(BOOL)arg1;
- (long long)_currentActivation;
- (void)_cycleUtilityWindowsReversed:(BOOL)arg1;
- (void)_cycleWindowsReversed:(BOOL)arg1;
- (void)_deactivateWindows;
- (void)_deallocHardCore:(BOOL)arg1;
- (void)_declineSpaceChangedNotification;
- (void)_delayReopening;
- (BOOL)_didNSOpenOrPrint;
- (BOOL)_disableSuddenTermination;
- (void)_doCopyMemoryPressureArrayOnWriteIfNecessary;
- (void)_doFakeUnhide;
- (void)_doHide;
- (void)_doHideMaybeFakingIt:(BOOL)arg1;
- (void)_doModalLoop:(struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)arg1 peek:(BOOL)arg2;
- (void)_doOpenFile:(id)arg1 ok:(long long*)arg2 tryTemp:(BOOL)arg3;
- (BOOL)_doOpenUntitled;
- (void)_doUnhideWithoutActivation;
- (void)_doUnhideWithoutActivationMaybeFakingIt:(BOOL)arg1;
- (void)_docController:(id)arg1 shouldTerminate:(BOOL)arg2;
- (void)_dockBehaviorChanged:(id)arg1;
- (void)_dockDied;
- (void)_dockRestarted;
- (void)_enableAutomaticTerminationIfWhitelisted;
- (void)_enableSuddenTermination;
- (void)_endRunMethod;
- (void)_enumerateOnScreenWindowsUsingBlock:(id)arg1;
- (void)_eventBlockingTransitionDidEnd;
- (void)_eventBlockingTransitionWillBegin;
- (id)_eventDelegate;
- (void)_exitFullScreenModeOnSpace:(unsigned long long)arg1;
- (BOOL)_expectingAppDeath;
- (void)_fakeMemoryPressureHandler:(id)arg1;
- (BOOL)_findKeyWindowConsideringSpacesWithOriginatingDisplayHint:(int)arg1 isAppleEventPending:(BOOL)arg2 makeKey:(BOOL)arg3;
- (id)_findWindowWithOptions:(long long)arg1 passingTest:(id)arg2;
- (BOOL)_finishHandlingDisplayReconfig;
- (struct __CFArray { }*)_flattenMenu:(id)arg1;
- (struct __CFArray { }*)_flattenMenu:(id)arg1 flatList:(id)arg2;
- (struct __CFDictionary { }*)_flattenMenuItem:(id)arg1;
- (struct __CFDictionary { }*)_flattenMenuItem:(id)arg1 flatList:(id)arg2;
- (void)_flushPersistentState;
- (void)_forceAutoQuit:(id)arg1;
- (void)_freezeAutomaticTerminationState;
- (id)_fullScreenInstanceEnteringFullScreen;
- (BOOL)_fullScreenSpaces;
- (void)_handleActivateDeferredEvent:(id)arg1;
- (void)_handleActivatedEvent:(id)arg1;
- (void)_handleAppKitDefinedEvent:(id)arg1;
- (void)_handleDeactivateEvent:(id)arg1;
- (BOOL)_handleHotKeyPressed:(id)arg1;
- (BOOL)_handleHotKeyRelease:(id)arg1;
- (BOOL)_handleKeyFocusNotification:(long long)arg1 withEvent:(id)arg2;
- (void)_handleReactivateEvent:(id)arg1;
- (BOOL)_handlingAmbientDisplayHintDockMenuCommand;
- (BOOL)_hasActiveRequest;
- (BOOL)_hasKeyFocus;
- (BOOL)_hasOpenMenuItem;
- (BOOL)_hiddenOnLaunch;
- (id)_hiddenWindows;
- (id)_iconImage;
- (BOOL)_inSafariInstallEnvironment;
- (long long)_indexOfWindow:(id)arg1;
- (void)_initializeAutomaticTermination;
- (void)_installAutoreleasePoolsOnCurrentThreadIfNecessary;
- (void)_installMemoryPressureDispatchSources;
- (void)_installMemoryStatusDispatchSources;
- (BOOL)_isActiveApp;
- (BOOL)_isAlternateQuitMenuItem:(id)arg1;
- (BOOL)_isDeactPending;
- (BOOL)_isDoingHide;
- (BOOL)_isDoingOpenFile;
- (BOOL)_isDoingUnhide;
- (BOOL)_isDying;
- (BOOL)_isFakeHidden;
- (BOOL)_isFinishLaunchingFromEventHandlersSuppressed;
- (BOOL)_isHandlingDisplayReconfigThatWillRepositionWindows;
- (BOOL)_isNSDocumentBased;
- (BOOL)_isRunningAppModal;
- (BOOL)_isRunningDocModal;
- (BOOL)_isRunningModal;
- (id)_keyWindow;
- (id)_keyWindowForHeartBeat;
- (id)_kitBundle;
- (unsigned long long)_launchTaskMask;
- (long long)_lowestWindowOfAtLeastNormalWindowLevelAfterScheduledBatchOrdering;
- (id)_mainWindow;
- (void)_makeSureAutomaticTerminationIsNotInterferingWithLanguagePrefs:(id)arg1;
- (void)_makeWindowsPerform:(SEL)arg1 forEvent:(id)arg2 inWindow:(id)arg3 standardWindowButton:(unsigned long long)arg4;
- (BOOL)_mouseActivationInProgress;
- (void)_obtainKeyFocus;
- (BOOL)_openFileWithoutUI:(id)arg1;
- (id)_orderFrontModalWindow:(id)arg1 relativeToWindow:(id)arg2;
- (void)_orderWindowsAndSwitchToSpaceIfNeeded;
- (long long)_pendingActCount;
- (int)_pendingActivationOriginatingDisplayHint;
- (void)_performBatchWindowOrdering:(int)arg1 release:(BOOL)arg2;
- (id)_persistenceOrderedWindowNumbers;
- (unsigned int)_persistentStateTerminationGeneration;
- (void)_popPersistentStateTerminationGeneration;
- (void)_postDidFinishNotification;
- (void)_postEventHandling;
- (void)_preEventHandling;
- (void)_prepareForPossibleScreenInvalidation:(BOOL)arg1;
- (id)_previousKeyWindow;
- (BOOL)_processSwitchesEnabled;
- (void)_pushPersistentStateTerminationGeneration;
- (BOOL)_quitMenuItemShouldKeepWindows:(id)arg1;
- (void)_reactToAcceleratorChangedNotification;
- (void)_reactToChangeInQuitAlwaysKeepsWindows:(id)arg1;
- (void)_reactToDisplayChangedEvent;
- (void)_reactToDisplayChangedNotification;
- (void)_reactToDockChanged;
- (void)_reactToExtendedDynamicRangeChangeNotification;
- (void)_reactToPresentationChanged;
- (void)_reactToScreenInvalidation:(BOOL)arg1;
- (void)_reactToScreenInvalidationImmediately:(BOOL)arg1;
- (void)_registerForDisplayChangedNotification;
- (void)_registerWithDock;
- (int)_releaseKeyFocus;
- (void)_removeFullScreenInstance:(id)arg1;
- (void)_removeHiddenWindow:(id)arg1;
- (void)_removeSystemUIModeHandler;
- (id)_removeWindow:(id)arg1;
- (void)_reopenPersistentState;
- (void)_reopenWindowsAsNecessaryIncludingRestorableState:(BOOL)arg1 completionHandler:(id)arg2;
- (BOOL)_replyToLaunch;
- (id)_replyToOpen:(long long)arg1;
- (void)_requestSpaceChangedNotification;
- (void)_resignKeyFocus;
- (void)_scheduleWindow:(long long)arg1 forBatchOrdering:(long long)arg2 relativeTo:(long long)arg3;
- (int)_sendDockMenuCommand:(unsigned int)arg1 withTag:(unsigned long long)arg2 modifierFlags:(unsigned long long)arg3;
- (int)_sendDockMenuCommand:(unsigned int)arg1 withTag:(unsigned long long)arg2 modifierFlags:(unsigned long long)arg3 originatingDisplay:(int)arg4;
- (void)_sendFinishLaunchingNotification;
- (BOOL)_sendScreenNotificationWhenDockSizeChanges;
- (void)_setAllPanelsNonactivating:(BOOL)arg1;
- (void)_setAllowAutomaticTerminationInsteadOfTermination:(BOOL)arg1;
- (void)_setAmbientOriginatingDisplayHint:(int)arg1;
- (void)_setAppCentricOpenPanel:(id)arg1;
- (void)_setAppleEventActivationInProgress:(BOOL)arg1;
- (void)_setApplicationIconImage:(id)arg1 setDockImage:(BOOL)arg2;
- (id)_setCurrentActivation:(long long)arg1;
- (void)_setDockMenuForPersistentState:(id)arg1;
- (void)_setDoubleClickBehavior;
- (void)_setEventDelegate:(id)arg1;
- (void)_setFakeHidden:(BOOL)arg1;
- (void)_setHasKeyFocus:(BOOL)arg1;
- (void)_setIsHidden:(BOOL)arg1;
- (id)_setKeyWindow:(id)arg1;
- (void)_setLaunchTaskMaskBits:(unsigned long long)arg1;
- (void)_setMainMenu:(id)arg1;
- (id)_setMainWindow:(id)arg1;
- (void)_setMouseActivationInProgress:(BOOL)arg1;
- (void)_setPendingActivationOriginatingDisplayHint:(int)arg1;
- (void)_setPresentationOptions:(unsigned long long)arg1 flags:(unsigned long long)arg2;
- (void)_setPresentationOptions:(unsigned long long)arg1 instance:(struct OpaqueHIPresentationInstanceRef { }*)arg2 flags:(unsigned long long)arg3;
- (void)_setPreviousKeyWindow:(id)arg1;
- (void)_setShouldRestoreStateOnNextLaunch:(BOOL)arg1;
- (void)_setSpacesSwitchOnActivation;
- (void)_setWaitingForTerminationReply:(BOOL)arg1;
- (void)_setWantsToActivate:(BOOL)arg1;
- (void)_setWindowMoveDisabled:(BOOL)arg1;
- (BOOL)_shouldClearModalWindowLevelWhenInactive;
- (BOOL)_shouldDelayDocumentReopeningUntilAfterFinishLaunching;
- (BOOL)_shouldLoadMainNibNamed:(id)arg1;
- (BOOL)_shouldTerminate;
- (void)_showException:(id)arg1;
- (BOOL)_sleepInAutomaticTermination;
- (BOOL)_someFullScreenInstanceHasSuppressedImplicitFullScreen;
- (BOOL)_spacesSwitchOnActivation;
- (void)_spacesSwitchOnActivationChanged:(id)arg1;
- (int)_startBatchWindowAccumulation:(long long)arg1;
- (BOOL)_startHandlingDisplayReconfig:(BOOL)arg1;
- (void)_startRunMethod;
- (int)_stealKeyFocusWithOptions:(unsigned int)arg1;
- (void)_suppressFinishLaunchingFromEventHandlersWhilePerformingBlock:(id)arg1;
- (void)_switchToSpaceIfNeeded;
- (void)_terminateFromSender:(id)arg1 askIfShouldTerminate:(BOOL)arg2 saveWindows:(BOOL)arg3;
- (void)_terminateOnMemoryPressure:(id)arg1;
- (void)_unfreezeAutomaticTerminationState;
- (void)_unscheduleWindowForBatchOrdering:(long long)arg1;
- (void)_unsetShouldRestoreStateOnNextLaunch;
- (void)_updateActiveWindowForSpaceChange;
- (void)_updateButtonsForSystemUIModeChanged;
- (void)_updateDisplaysIfNeeded;
- (void)_updateFullScreenPresentationOptions;
- (void)_updateFullScreenPresentationOptionsForInstance:(struct OpaqueHIPresentationInstanceRef { }*)arg1;
- (id)_visibleFullScreenInstanceOnScreen:(id)arg1;
- (id)_visibleFullScreenInstanceOnSpace:(unsigned long long)arg1;
- (BOOL)_waitingForTerminationReply;
- (BOOL)_wantsDeviceDependentEventModifierFlags;
- (BOOL)_wantsToActivate;
- (void)_whenReopeningIsAllowedDo:(id)arg1;
- (BOOL)_windowMoveDisabled;
- (void)_windowNumber:(long long)arg1 changedTo:(long long)arg2;
- (id)_windowWithContextID:(long long)arg1;
- (id)_windowWithRealWindowNumber:(long long)arg1;
- (void)_withAmbientOriginatingDisplayHint:(int)arg1 perform:(id)arg2;
- (void)abortAllToolTips;
- (void)abortModal;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityParent;
- (void)activateIgnoringOtherApps:(BOOL)arg1;
- (long long)activationPolicy;
- (void)activeSpaceChanged:(id)arg1;
- (id)addIdleMonitorUsingHandler:(id)arg1;
- (id)addMemoryPressureMonitorUsingHandler:(id)arg1;
- (id)applicationIconImage;
- (struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)beginModalSessionForWindow:(id)arg1;
- (struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)beginModalSessionForWindow:(id)arg1 relativeToWindow:(id)arg2;
- (void)beginSheet:(id)arg1 modalForWindow:(id)arg2 modalDelegate:(id)arg3 didEndSelector:(SEL)arg4 contextInfo:(void*)arg5;
- (BOOL)canEnterFullScreenMode;
- (void)cancelUserAttentionRequest:(long long)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (id)context;
- (unsigned int)contextID;
- (unsigned long long)currentSystemPresentationOptions;
- (void)deactivate;
- (void)dealloc;
- (id)delayWindowOrdering;
- (id)delegate;
- (void)doCommandBySelector:(SEL)arg1;
- (id)dockTile;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)endModalSession:(struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)arg1;
- (void)endSheet:(id)arg1;
- (void)endSheet:(id)arg1 returnCode:(long long)arg2;
- (void)enterFullScreenMode:(id)arg1;
- (void)enumerateWindowsWithOptions:(long long)arg1 usingBlock:(id)arg2;
- (void)event:(id)arg1 wouldActivateWindow:(id)arg2;
- (void)exitFullScreenMode:(id)arg1;
- (void)finishLaunching;
- (id)frontWindow;
- (id)helpMenu;
- (void)hide:(id)arg1;
- (void)hideOtherApplications:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (BOOL)isActive;
- (BOOL)isFullKeyboardAccessEnabled;
- (BOOL)isHidden;
- (BOOL)isRunning;
- (BOOL)isSpeaking;
- (id)keyWindow;
- (id)mainMenu;
- (id)mainStoryboard;
- (id)mainWindow;
- (id)makeWindowsPerform:(SEL)arg1 inOrder:(BOOL)arg2;
- (long long)memoryStatus;
- (id)menu;
- (id)modalWindow;
- (unsigned long long)occlusionState;
- (void)onFirstEvent;
- (long long)openFile:(id)arg1 ok:(long long*)arg2;
- (long long)openTempFile:(id)arg1 ok:(long long*)arg2;
- (void)orderFrontCharacterPalette:(id)arg1;
- (unsigned long long)presentationOptions;
- (void)preventWindowOrdering;
- (void)quickLookPreviewItems:(id)arg1;
- (void)quickLookPreviewItemsAtWindowLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)removeIdleMonitor:(id)arg1;
- (void)removeMemoryPressureMonitor:(id)arg1;
- (void)replyToApplicationShouldTerminate:(BOOL)arg1;
- (void)replyToOpenOrPrint:(unsigned long long)arg1;
- (void)reportException:(id)arg1;
- (long long)requestUserAttention:(unsigned long long)arg1;
- (void)restoreStateWithCoder:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)run;
- (long long)runModalForWindow:(id)arg1;
- (long long)runModalForWindow:(id)arg1 relativeToWindow:(id)arg2;
- (long long)runModalSession:(struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)arg1;
- (BOOL)setActivationPolicy:(long long)arg1;
- (void)setApplicationIconImage:(id)arg1;
- (void)setCanEnterFullScreenMode:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDockMenu:(id)arg1;
- (void)setHelpMenu:(id)arg1;
- (void)setIsActive:(BOOL)arg1;
- (void)setMainMenu:(id)arg1;
- (void)setMenu:(id)arg1;
- (void)setPresentationOptions:(unsigned long long)arg1;
- (void)setWindowsNeedUpdate:(BOOL)arg1;
- (BOOL)shouldRestoreStateOnNextLaunch;
- (void)showGuessPanel:(id)arg1;
- (void)speakString:(id)arg1;
- (void)speechSynthesizer:(id)arg1 didFinishSpeaking:(BOOL)arg2;
- (void)startDictation:(id)arg1;
- (void)stop:(id)arg1;
- (void)stopDictation:(id)arg1;
- (void)stopModal;
- (void)stopModalWithCode:(long long)arg1;
- (void)stopSpeaking:(id)arg1;
- (void)terminate:(id)arg1;
- (long long)unhide;
- (void)unhide:(id)arg1;
- (void)unhideAllApplications:(id)arg1;
- (void)unhideWithoutActivation;
- (void)updateWindows;
- (long long)userInterfaceLayoutDirection;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (id)windowWithWindowNumber:(long long)arg1;
- (id)windows;

// NSApplication (NSAccessibilityUIElementSpecifier)

- (id)_accessibilityUIElementSpecifier;
- (id)_accessibilityUIElementSpecifierRegisterIfNeeded:(BOOL)arg1;

// NSApplication (NSAppleEventHandling)

+ (id)_urlsWithEvent:(id)arg1;

- (int)_extractOriginatingDisplayHintFromAppleEvent:(id)arg1;
- (void)_forAEOpenDocumentsEvent:(id)arg1 populateReplyEvent:(id)arg2 withURLs:(id)arg3 documents:(id)arg4;
- (short)_handleAECloudKitShareInvitationEvent:(id)arg1;
- (short)_handleAEContinueUserActivityEvent:(id)arg1;
- (short)_handleAEOpenContentsEvent:(id)arg1 withReplyEvent:(id)arg2;
- (short)_handleAEOpenDocumentsForURLs:(id)arg1;
- (void)_handleAEOpenEvent:(id)arg1;
- (short)_handleAEPrintDocumentsForURLs:(id)arg1 withSettings:(id)arg2 showPrintPanels:(BOOL)arg3;
- (short)_handleAEQuit;
- (void)_handleAEReopen:(id)arg1;
- (void)_handleCoreEvent:(id)arg1 withReplyEvent:(id)arg2;
- (int)_handleSelfTestEvent:(id)arg1;
- (void)_handleTestEvent:(id)arg1 withReplyEvent:(id)arg2;
- (void)_openDocumentURLs:(id)arg1 withCompletionHandler:(id)arg2;
- (void)_registerRequiredAEHandlers;
- (void)_reopenWindowsIfNecessaryWithAppleEvent:(id)arg1 completionHandler:(id)arg2;
- (BOOL)_requiresOpeningUntitledWindowAtLaunch;
- (void)_resumeAppleEventWithSuspensionIDValue:(id)arg1;
- (BOOL)_shouldRestoreWithFullFidelity;

// NSApplication (NSAppleMenu)

- (void)setAppleMenu:(id)arg1;

// NSApplication (NSApplicationAccessibility)

- (id)_accessibilityPopovers;
- (id)_accessibilityValueForAttribute:(id)arg1 clientError:(int*)arg2;
- (id)_accessibilityViewBridgeHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1 forParameter:(id)arg2;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityEnhancedUserInterfaceAttribute;
- (id)accessibilityExtrasMenuBarAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityFocusedUIElementAttribute;
- (id)accessibilityFocusedWindowAttribute;
- (id)accessibilityFrontmostAttribute;
- (id)accessibilityHiddenAttribute;
- (id)accessibilityHitTest;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsEnhancedUserInterfaceAttributeSettable;
- (BOOL)accessibilityIsFocusedUIElementAttributeSettable;
- (BOOL)accessibilityIsFocusedWindowAttributeSettable;
- (BOOL)accessibilityIsFrontmostAttributeSettable;
- (BOOL)accessibilityIsHiddenAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsMainWindowAttributeSettable;
- (BOOL)accessibilityIsMenuBarAttributeSettable;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsWindowsAttributeSettable;
- (id)accessibilityMainWindowAttribute;
- (id)accessibilityMenuBarAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (void)accessibilitySetEnhancedUserInterfaceAttribute:(id)arg1;
- (void)accessibilitySetFrontmostAttribute:(id)arg1;
- (void)accessibilitySetHiddenAttribute:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilityTitleAttribute;
- (id)accessibilityWindowsAttribute;
- (void)accessibilityWorkaroundAddExtraWindow:(id)arg1;
- (void)accessibilityWorkaroundRemoveExtraWindow:(id)arg1;

// NSApplication (NSApplicationAccessibilityInternal)

- (void)_accessibilityEventProcessed:(id)arg1;
- (void)_accessibilityEventReceived:(id)arg1;
- (BOOL)isAccessibilityEventProcessedNotificationEnabled;
- (BOOL)isAccessibilityEventProcessedNotificationSupported;
- (BOOL)isAccessibilityMainThreadIdleNotificationEnabled;
- (BOOL)isAccessibilityMainThreadIdleNotificationSupported;
- (void)setAccessibilityEventProcessedNotificationEnabled:(BOOL)arg1;
- (void)setAccessibilityMainThreadIdleNotificationEnabled:(BOOL)arg1;

// NSApplication (NSApplicationAccessibilityPrivate)

- (id)_accessibilityCompatibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityMayContainProtectedContent;
- (void)accessibilitySetMayContainProtectedContent:(BOOL)arg1;

// NSApplication (NSApplicationDebugMenu)

- (void)_addDebugMenuIfNeeded;
- (id)_debugMenu;

// NSApplication (NSApplicationHelpExtension)

- (void)activateContextHelpMode:(id)arg1;
- (void)showHelp:(id)arg1;

// NSApplication (NSAppssassination)

- (BOOL)_checkForAutomaticTerminationSupportPossiblyEnablingIt;
- (void)_setNeedsUpdateToReflectAutomaticTerminationState;
- (BOOL)_tryTransformingToBackgroundTypeForAutoQuit;
- (void)disableAutomaticTermination;
- (void)enableAutomaticTermination;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;

// NSApplication (NSCarbonWindowHandling)

- (void)_doModalLoopForCarbonWindow:(struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)arg1 peek:(BOOL)arg2;
- (long long)runModalForCarbonWindow:(id)arg1;

// NSApplication (NSColorPanel)

- (void)orderFrontColorPanel:(id)arg1;

// NSApplication (NSCursorRects)

- (id)_cursorRectCursor;
- (BOOL)_handleCursorRectEvent:(id)arg1;
- (void)_resetCursorStack;
- (id)_restoreCursor;
- (void)_setCursorForCurrentMouseLocation;
- (BOOL)areCursorRectsEnabled;
- (void)disableCursorRects;
- (void)enableCursorRects;

// NSApplication (NSDockTileNotifications)

- (void)_displayProgressNotification:(float)arg1 isIndeterminate:(BOOL)arg2;
- (void)_displayStatusNotification:(id)arg1 title:(id)arg2 options:(id)arg3;

// NSApplication (NSErrorPresentation)

- (void)_something:(id)arg1 wasPresentedWithResult:(long long)arg2 soContinue:(id)arg3;
- (id)_validateError:(id)arg1 forPresentationMethod:(SEL)arg2;
- (BOOL)presentError:(id)arg1;
- (void)presentError:(id)arg1 modalForWindow:(id)arg2 delegate:(id)arg3 didPresentSelector:(SEL)arg4 contextInfo:(void*)arg5;
- (id)willPresentError:(id)arg1;

// NSApplication (NSEvent)

- (unsigned long long)_gestureEventMask;
- (BOOL)_handleKeyEquivalent:(id)arg1;
- (BOOL)_handleSymbolicHotKey:(id)arg1;
- (BOOL)_isSuppressGestureSubMaskChangesEnabled;
- (unsigned long long)_lastEventRecordTime;
- (void)_modalSession:(struct _NSModalSession { id x1; struct _NSModalSession {} *x2; int x3; BOOL x4; long long x5; unsigned long long x6; BOOL x7; BOOL x8; short x9; long long x10; id x11; SEL x12; void *x13; long long x14; id x15; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x16; id x17; }*)arg1 sendEvent:(id)arg2;
- (id)_nextEventMatchingEventMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (void)_setCurrentEvent:(id)arg1;
- (void)_setGestureEventMask:(unsigned long long)arg1;
- (void)_setSupressGestureSubMaskChangesEnabled:(BOOL)arg1;
- (id)currentEvent;
- (void)discardEventsMatchingMask:(unsigned long long)arg1 beforeEvent:(id)arg2;
- (unsigned long long)gestureEventMask;
- (id)nextEventMatchingMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (void)postEvent:(id)arg1 atStart:(BOOL)arg2;
- (void)sendEvent:(id)arg1;
- (void)setGestureEventMask:(unsigned long long)arg1;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;

// NSApplication (NSFeedbackMenu)

- (void)_addFeedbackMenuItemIfNeeded;
- (id)_feedbackMenuAppName;
- (id)_feedbackMenuTitle;
- (id)_feedbackURL;
- (void)_openFeedbackAssistant:(id)arg1;
- (BOOL)_shouldShowFeedbackMenuItem;

// NSApplication (NSFontPanel)

- (void)orderFrontFontPanel:(id)arg1;

// NSApplication (NSGestureRecognizer)

- (void)_cancelGestureRecognizers:(id)arg1;

// NSApplication (NSKeyValueObservingCustomization)

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;

// NSApplication (NSKeyWindowOverride)

- (void)_addKeyOverrideWindow:(id)arg1;
- (void)_removeKeyOverrideWindow:(id)arg1;

// NSApplication (NSPageLayoutPanel)

- (void)runPageLayout:(id)arg1;

// NSApplication (NSPersistentUIRestorationSupport)

- (void)_restoreGlobalStateWithRestoration:(id)arg1;
- (void)_restoreWindowWithRestoration:(id)arg1 completionHandler:(id)arg2;
- (id)_tryRestorationHeuristicsForWindowWithIdentifier:(id)arg1 state:(id)arg2;
- (BOOL)restoreWindowWithIdentifier:(id)arg1 state:(id)arg2 completionHandler:(id)arg3;

// NSApplication (NSPersistentUISupport)

+ (BOOL)willRestoreState;

- (BOOL)_contentsHaveInvalidRestorableState;
- (void)_disableRelaunchOnLoginIfNotLaunchedByLaunchServicesOrBlacklisted;
- (void)_disableRestorableStateWriting;
- (void)_enableRestorableStateWriting;
- (BOOL)_hasInvalidRestorableState;
- (void)_invalidateRestorableStateOfContents;
- (id)_persistentUIIdentifier;
- (id)_persistentUIWindow;
- (unsigned int)_persistentUIWindowID;
- (void)_setContentsHaveInvalidRestorableState:(BOOL)arg1;
- (void)_setHasInvalidRestorableState:(BOOL)arg1;
- (BOOL)_shouldRecordPersistentState;
- (long long)_stateRestorationExtensionCounter;
- (void)completeStateRestoration;
- (void)disableRelaunchOnLogin;
- (void)enableRelaunchOnLogin;
- (void)extendStateRestoration;

// NSApplication (NSQuietSafeQuit)

- (BOOL)_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;
- (BOOL)_canQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;
- (id)_debugCanQuietSafeQuit;
- (BOOL)_globalCanQuietAndSafeQuit;
- (void)_updateCanQuitQuietlyAndSafely;

// NSApplication (NSRemoteNotifications)

- (void)_userNotificationCenter:(id)arg1 didActivateWithToken:(id)arg2;
- (id)_userNotificationCenter:(id)arg1 willActivateForNotification:(id)arg2 additionalUserInfo:(id)arg3;
- (unsigned long long)enabledRemoteNotificationTypes;
- (void)registerForRemoteNotificationTypes:(unsigned long long)arg1;
- (void)unregisterForRemoteNotifications;
- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didFailToRegisterForRemoteNotificationsWithError:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didRegisterForRemoteNotificationsWithDeviceToken:(id)arg2;

// NSApplication (NSResponder)

- (BOOL)sendAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2;
- (id)targetForAction:(SEL)arg1;
- (id)targetForAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (BOOL)tryToPerform:(SEL)arg1 with:(id)arg2;
- (id)validRequestorForSendType:(id)arg1 returnType:(id)arg2;

// NSApplication (NSResponsibleDelegate)

- (id)_responsibleDelegateForSelector:(SEL)arg1;

// NSApplication (NSScripting)

+ (id)_urlsWithWithPathOrPaths:(id)arg1 itWasPaths:(BOOL*)arg2;

- (BOOL)_delegate:(id)arg1 handlesKey:(id)arg2;
- (id)_orderedWindowsWithPanels:(BOOL)arg1;
- (unsigned long long)_scriptingCount;
- (long long)_supportsGetValueWithNameForKey:(id)arg1 perhapsByOverridingClass:(Class)arg2;
- (long long)_supportsGetValueWithUniqueIDForKey:(id)arg1 perhapsByOverridingClass:(Class)arg2;
- (id)copyScriptingValue:(id)arg1 forKey:(id)arg2 withProperties:(id)arg3;
- (id)handleOpenScriptCommand:(id)arg1;
- (void)handlePrintScriptCommand:(id)arg1;
- (void)handleQuitScriptCommand:(id)arg1;
- (void)insertValue:(id)arg1 atIndex:(unsigned long long)arg2 inPropertyWithKey:(id)arg3;
- (void)insertValue:(id)arg1 inPropertyWithKey:(id)arg2;
- (id)newScriptingObjectOfClass:(Class)arg1 forValueForKey:(id)arg2 withContentsValue:(id)arg3 properties:(id)arg4;
- (id)orderedDocuments;
- (id)orderedWindows;
- (void)removeValueAtIndex:(unsigned long long)arg1 fromPropertyWithKey:(id)arg2;
- (void)replaceValueAtIndex:(unsigned long long)arg1 inPropertyWithKey:(id)arg2 withValue:(id)arg3;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueAtIndex:(unsigned long long)arg1 inPropertyWithKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (id)valueInOrderedWindowsWithUniqueID:(long long)arg1;
- (id)valueWithName:(id)arg1 inPropertyWithKey:(id)arg2;
- (id)valueWithUniqueID:(id)arg1 inPropertyWithKey:(id)arg2;

// NSApplication (NSServicesHandling)

- (void)registerServiceProvider:(id)arg1 withName:(id)arg2;
- (id)servicesProvider;
- (void)setServicesProvider:(id)arg1;
- (void)unregisterServiceProviderNamed:(id)arg1;

// NSApplication (NSServicesMenuPrivate)

- (BOOL)_fillSpellCheckerPopupButton:(id)arg1;
- (BOOL)_launchSpellChecker:(long long)arg1;
- (BOOL)_launchSpellChecker:(long long)arg1 error:(id*)arg2;
- (void)_rebuildOrUpdateServicesMenu:(BOOL)arg1;
- (void)registerServicesMenuSendTypes:(id)arg1 returnTypes:(id)arg2;
- (id)servicesMenu;
- (void)setServicesMenu:(id)arg1;

// NSApplication (NSStandardAboutPanel)

- (void)orderFrontStandardAboutPanel:(id)arg1;
- (void)orderFrontStandardAboutPanelWithOptions:(id)arg1;

// NSApplication (NSUbiquity)

- (void)_asynchronouslyPrefetchUbiqityContainerURL;
- (void)_startPrefetchingUbiquityContainerURL;
- (void)_ubiquityIdentityDidChange:(id)arg1;

// NSApplication (NSUserInterfaceItemSearching)

- (BOOL)isDefaultHelpBookSearchEnabled;
- (void)registerUserInterfaceItemSearchHandler:(id)arg1;
- (BOOL)searchString:(id)arg1 inUserInterfaceItemString:(id)arg2 searchRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 foundRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4;
- (void)setDefaultHelpBookSearchEnabled:(BOOL)arg1;
- (void)unregisterUserInterfaceItemSearchHandler:(id)arg1;

// NSApplication (NSWindowCache)

- (BOOL)_appHasNonMiniaturizedWindow;
- (BOOL)_appHasOpenNSWindow;
- (BOOL)_appHasOpenNSWindowOrPanel;
- (BOOL)_appHasVisibleWindowOrPanel;
- (void)_checkForTerminateAfterLastWindowClosed:(id)arg1 saveWindows:(BOOL)arg2;
- (id)_findWindowUsingCache:(long long)arg1;
- (id)_findWindowUsingContextID:(long long)arg1;
- (id)_findWindowUsingRealWindowNumber:(long long)arg1;
- (id)_getLockedWindowListForCycle;
- (id)_getWindowData:(id)arg1 add:(BOOL)arg2;
- (void)_invalidateWindowListForCycleIfNeededForWindow:(id)arg1;
- (BOOL)_isModalUsingCache:(id)arg1;
- (BOOL)_isVisibleUsingCache:(id)arg1;
- (BOOL)_lockOrUnlockWindowCycleList:(BOOL)arg1;
- (void)_makeHODWindowsPerform:(SEL)arg1;
- (void)_makeModalWindowsPerform:(SEL)arg1;
- (void)_removeWindowFromCache:(id)arg1;
- (void)_restoreMiniaturizedWindow;
- (void)_scheduleCheckForTerminateAfterLastWindowClosed;
- (void)_setCacheWindowNum:(long long)arg1 forWindow:(id)arg2;
- (void)_setHidesOnDeactivateInCache:(BOOL)arg1 forWindow:(id)arg2;
- (void)_setModalInCache:(BOOL)arg1 forWindow:(id)arg2;
- (void)_setVisibleInCache:(BOOL)arg1 forWindow:(id)arg2;
- (void)_unlockWindowListForCycle;
- (void)_updateWindowsUsingCache;

// NSApplication (NSWindowsMenu)

- (void)addWindowsItem:(id)arg1 title:(id)arg2 filename:(BOOL)arg3;
- (void)alternateArrangeInFront:(id)arg1;
- (void)arrangeInFront:(id)arg1;
- (void)changeWindowsItem:(id)arg1 title:(id)arg2 filename:(BOOL)arg3;
- (void)closeAll:(id)arg1;
- (void)miniaturizeAll:(id)arg1;
- (void)removeWindowsItem:(id)arg1;
- (void)setWindowsMenu:(id)arg1;
- (void)updateWindowsItem:(id)arg1;
- (id)windowsMenu;
- (void)zoomAll:(id)arg1;

// NSApplication (NSWindowsMenu_Private)

- (void)_addWindowsMenu:(struct __CFArray { }*)arg1 enabled:(BOOL)arg2;

@end
