/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface _NSFullScreenTransition : NSObject {
    NSMutableArray * _backgroundWindows;
    NSSet * _dockAppointedAllSpaceWindowNumbers;
    unsigned int  _exitReplacementWindowID;
    long long  _fullScreenState;
    BOOL  _hasCustomBackgroundColor;
    NSHIPresentationInstance * _nsPresentationInstance;
    _NSFullScreenTransitionOverlayWindow * _overlayWindow;
    unsigned long long  _parentSpaceID;
    NSSet * _participatingWindowNums;
    NSArray * _participatingWindowNumsForEntering;
    NSArray * _participatingWindowNumsForExiting;
    BOOL  _reducedMotion;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _shadowDeltaRect;
    unsigned long long  _startingSpaceID;
    BOOL  _suppressImplicitFullScreenForOtherWindows;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _tileRect;
    unsigned long long  _tileSpaceID;
    unsigned int  _transitionedWid;
    id  _transitionedWindowAfterContents;
    id  _transitionedWindowBeforeContents;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _transitionedWindowBeforeSnapshotFrame;
    NSStatusItem * exitStatusItem;
    unsigned long long  fullScreenPresentationOptions;
    NSWindow * fullScreenWindow;
    BOOL  needsBackgroundWindowOrdering;
}

@property (atomic, readonly) unsigned long long fullScreenPresentationOptions;
@property (atomic, readwrite, retain) NSWindow *fullScreenWindow;
@property (atomic, readwrite) unsigned long long parentSpaceID;
@property (atomic, readonly) struct OpaqueHIPresentationInstanceRef { }*presentationInstance;
@property (atomic, readwrite) unsigned long long startingSpaceID;
@property (atomic, readonly) BOOL suppressImplicitFullScreenForOtherWindows;
@property (atomic, readwrite) unsigned long long tileSpaceID;
@property (atomic, readwrite) unsigned int transitionedWid;

+ (unsigned long long)defaultFullScreenPresentationOptions;

- (void)_associateWindowWithSpace;
- (void)_cacheTileRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_cleanupBackgroundWindows;
- (id)_createBackgroundWindows;
- (id)_createDockAppointedAllSpaceWindowNumsFromParticipatingWindowNumbers:(id)arg1;
- (id)_customColorForBackgroundWindow;
- (void)_discardWindowSnapshots;
- (void)_doAfterEnterFullScreenWithAnimation:(BOOL)arg1;
- (void)_doBeforeEnterFullScreenWithAnimation:(BOOL)arg1;
- (void)_doCarbonSynchronizationIfNeededWithAnimate:(BOOL)arg1;
- (void)_doFailedToEnterFullScreenWithAnimation:(BOOL)arg1 doKitAnimation:(BOOL)arg2;
- (void)_doSucceededToEnterFullScreenWithAnimation:(BOOL)arg1 doKitAnimation:(BOOL)arg2 customWindows:(id)arg3 duration:(double)arg4 spid:(unsigned long long)arg5 subspid:(unsigned long long)arg6;
- (id)_getPossibleCustomWindowsForEnteringIntoFullScreen;
- (struct CGImage { }*)_getWindowSnapshotImageForWindowIDs:(id)arg1 withShadow:(BOOL)arg2 onSpace:(unsigned long long)arg3 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)_makeAndUpdateOverlayWindowIfNeeded;
- (void)_makePresentationInstanceIfNeeded;
- (BOOL)_maybeAssignWindow:(id)arg1;
- (id)_maybeFilterParticipatingWindowNumbers:(id)arg1 byScreen:(id)arg2;
- (id)_participatingWindowNumbersForTransition:(long long)arg1 animation:(BOOL)arg2 customWindows:(id)arg3;
- (void)_performEnterFullScreenWithOptions:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; })arg1 customWindows:(id)arg2;
- (void)_postDidEnterFullScreenWithSuccess:(BOOL)arg1 animateIt:(BOOL)arg2 doKitAnimation:(BOOL)arg3 customWindows:(id)arg4 duration:(double)arg5 spid:(unsigned long long)arg6 subspid:(unsigned long long)arg7;
- (void)_rebindAndReleaseDockAppointedAllSpaceWindows;
- (void)_resetSpaceState;
- (id)_screen;
- (void)_setFloatingWindowTag:(BOOL)arg1 forWindowNumbers:(id)arg2;
- (void)_setOrClearAllSpaceBindings:(BOOL)arg1;
- (void)_setupToolbarWindowIfNeeded;
- (BOOL)_shouldUseScreenBackgroundViewForFullScreen;
- (void)_startEnterFullScreenTransitionForCGWindow:(unsigned int)arg1 targetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 duration:(double)arg3 completionHandler:(id)arg4;
- (void)_startFullScreenTransitionForCGWindow:(unsigned int)arg1 targetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 duration:(double)arg3 completionHandler:(id)arg4;
- (void)_startWatchingForWindowsNotInCustomWindows:(id)arg1;
- (void)_takeEndingWindowSnapshots:(id)arg1 withShadow:(BOOL)arg2 onSpace:(unsigned long long)arg3 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)_takeStartingWindowSnapshots:(id)arg1 withShadow:(BOOL)arg2 onSpace:(unsigned long long)arg3 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_updateShadowDeltaRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 forFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 basedOnImage:(struct CGImage { }*)arg3;
- (void)_updateUserSpaceSavedFrameIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_windowFrameForFullScreenMode;
- (id)_windowNumbersForBackgroundWindows;
- (void)activateFullScreenPresentationOptions;
- (void)adjustBackgroundWindowOrdering;
- (struct CGColor { }*)backgroundColor;
- (void)captureCurrentAfterScreenShotsIncludingShadow:(BOOL)arg1 destinationSpace:(unsigned long long)arg2;
- (void)captureCurrentBeforeScreenShotsIncludingShadow:(BOOL)arg1 startingSpace:(unsigned long long)arg2;
- (void)captureOverlayPreparingForClose;
- (void*)carbonWindow;
- (id)cocoaWindow;
- (id)copyWindowNumbersForScreenShot;
- (id)createBackgroundWindowOnScreen:(id)arg1;
- (void)dealloc;
- (void)destroyExitFullScreenStatusItemIfNecessary;
- (BOOL)disableMCExit;
- (void)displayChanged;
- (void)displayChangedForMissionControlMoveOfWindow:(long long)arg1;
- (void)enterFullScreenInstantly;
- (void)enterFullScreenTransitionFinished;
- (void)enterFullScreenTransitionWithPresentationOptions:(unsigned long long)arg1 options:(struct { BOOL x1; BOOL x2; unsigned long long x3; unsigned long long x4; })arg2;
- (void)exitFullScreenInstantly;
- (void)exitFullScreenStatusItemClicked:(id)arg1;
- (void)exitFullScreenTransitionFinished;
- (void)failedToEnterFullScreenWithAnimation:(BOOL)arg1 whichIsKitAnimation:(BOOL)arg2;
- (unsigned long long)fullScreenPresentationOptions;
- (long long)fullScreenState;
- (id)fullScreenTitle;
- (id)fullScreenWindow;
- (BOOL)hasSiblingFromThisApp;
- (id)init;
- (BOOL)isLeftTile;
- (void)makeAndSetupOverlayWindow;
- (void)makeExitFullScreenStatusItem;
- (void)noteFullScreenSubspaceUpdated;
- (void)noteTileFrameChanged;
- (void)orderTransitionedWindowFront;
- (unsigned long long)parentSpaceID;
- (id)participatingWindowNumbersForEntering;
- (id)participatingWindowNumbersForExiting;
- (void)prepareToStartExitFullScreenTransitionForCGWindow:(unsigned int)arg1 snapshotStartFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)prepareWindowForExitTransition;
- (struct OpaqueHIPresentationInstanceRef { }*)presentationInstance;
- (void)relocateToParentSpace:(unsigned long long)arg1;
- (void)setAsThePrincipalFullScreenWindowInSpace;
- (void)setCarbonCGOrderingForTransitionedWindowEnabled:(BOOL)arg1;
- (void)setFullScreenState:(long long)arg1;
- (void)setFullScreenWindow:(id)arg1;
- (void)setParentSpaceID:(unsigned long long)arg1;
- (void)setStartingSpaceID:(unsigned long long)arg1;
- (void)setTileSpaceID:(unsigned long long)arg1;
- (void)setTransitionedWid:(unsigned int)arg1;
- (void)setTransitionedWindowFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setWindowToHaveFullScreenSize;
- (long long)shieldWindowNumber;
- (void)startExitFullScreenTransitionForCGWindow:(unsigned int)arg1 targetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 duration:(double)arg3 completionHandler:(id)arg4;
- (unsigned long long)startingSpaceID;
- (BOOL)suppressImplicitFullScreenForOtherWindows;
- (void)swapOriginalWindowWithOverlayWindow;
- (BOOL)tileFillsScreen;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileRect;
- (unsigned long long)tileSpaceID;
- (unsigned int)transitionedWid;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitionedWindowAnimationTargetFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitionedWindowFrame;
- (struct CGSize { double x1; double x2; })transitionedWindowShadowOffset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })wallSpaceRect;

@end
