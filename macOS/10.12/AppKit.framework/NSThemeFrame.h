/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSThemeFrame : NSTitledFrame {
    NSString * _displayName;
    struct CGSize { 
        double width; 
        double height; 
    }  _showToolbarPreWindowSize;
    struct { 
        unsigned int mouseInsideLeftGroup : 1; 
        unsigned int disableMouseInsideLeftGroup : 1; 
        unsigned int mouseInsideRightGroup : 1; 
        unsigned int bottomCornerRounded : 2; 
        unsigned int movableByBottomBar : 1; 
        unsigned int removingToolbarForEnteringFullScreen : 1; 
        unsigned int suppressTitleBackgroundDrawing : 1; 
        unsigned int suppressTitleDrawing : 1; 
        unsigned int supresssBackgroundCellDrawing : 1; 
        unsigned int maskSet : 1; 
        unsigned int alwaysShowTitlebar : 1; 
        unsigned int hasCachedWindowCornerSizes : 1; 
        unsigned int autoFlattenEnabled : 1; 
        unsigned int addingKnownSubview : 1; 
        unsigned int hasUnknownSubview : 1; 
        unsigned int titlebarViewInFullScreen : 1; 
        unsigned int useViewsHeight : 1; 
        unsigned int useViewsMinHeight : 1; 
        unsigned int ignoreFullScreenMask : 1; 
        unsigned int pendingWillChangeCount : 8; 
        unsigned int reserved : 4; 
    }  _tFlags;
    id  _tf_unused;
    int  _toolbarVisibleStatus;
    double  bottomBorderThickness;
    NSButton * fullScreenButton;
    long long  leftGroupTrackingTagNum;
    NSButton * lockButton;
    long long  rightGroupTrackingTagNum;
    NSButton * toolbarButton;
    double  topBorderThickness;
    int  widgetState;
}

@property (atomic, readwrite) double buttonRevealAmount;
@property (atomic, readonly) id contentLayoutGuide;
@property (atomic, readwrite) BOOL disableTitlebarBlurFilters;
@property (atomic, readonly) double titleHeightToHideInFullScreen;
@property (atomic, readonly) NSTitlebarContainerView *titlebarContainerView;

+ (id)_bevelForEdge:(unsigned long long)arg1 isHUD:(BOOL)arg2 isDarkWindow:(BOOL)arg3;
+ (double)_contentToFrameMaxXWidth:(unsigned long long)arg1;
+ (double)_contentToFrameMaxYHeight:(unsigned long long)arg1;
+ (double)_contentToFrameMinXWidth:(unsigned long long)arg1;
+ (double)_contentToFrameMinYHeight:(unsigned long long)arg1;
+ (id)_cuiMaskOnlyOptionsForWindowType:(struct __CFString { }*)arg1 cornerMask:(unsigned long long)arg2 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (double)_fileButtonSpacingWidthForWindowWithStyleMask:(unsigned long long)arg1;
+ (double)_maxXTitlebarWidgetInset:(unsigned long long)arg1;
+ (double)_maxXWindowBorderWidth:(unsigned long long)arg1;
+ (double)_minXTitlebarWidgetInset:(unsigned long long)arg1;
+ (double)_minXWindowBorderWidth:(unsigned long long)arg1;
+ (double)_minYWindowBorderHeight:(unsigned long long)arg1;
+ (void)_prepareRenameField:(id)arg1 forEditingMode:(unsigned long long)arg2;
+ (id)_renameFieldForWindowWithStyleMask:(unsigned long long)arg1;
+ (BOOL)_resizeFromEdge;
+ (double)_resizeHeight:(unsigned long long)arg1;
+ (double)_sideTitlebarWidth:(unsigned long long)arg1;
+ (struct CGSize { double x1; double x2; })_sizeOfTitlebarFileButtonForWindowWithStyleMask:(unsigned long long)arg1;
+ (double)_titlebarHeight:(unsigned long long)arg1;
+ (unsigned long long)_validateStyleMask:(unsigned long long)arg1;
+ (double)_windowBorderThickness:(unsigned long long)arg1;
+ (double)_windowFileButtonSpacingWidth:(unsigned long long)arg1;
+ (double)_windowSideTitlebarTitleMinWidth:(unsigned long long)arg1;
+ (double)_windowTitlebarButtonSpacingWidth:(unsigned long long)arg1;
+ (double)_windowTitlebarTitleMinHeight:(unsigned long long)arg1;
+ (void)clearCornerMaskOnLayer:(id)arg1;
+ (id)containingThemeFrameFromView:(id)arg1;
+ (void)drawBevel:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 topCornerRounded:(BOOL)arg3 bottomCornerRounded:(BOOL)arg4;
+ (void)drawBevel:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 topCornerRounded:(BOOL)arg3 bottomCornerRounded:(BOOL)arg4 isHUD:(BOOL)arg5 isDarkWindow:(BOOL)arg6;
+ (void)maskWindowCornersWithMask:(unsigned long long)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (double)minFrameWidthWithTitle:(id)arg1 styleMask:(unsigned long long)arg2;
+ (struct CGSize { double x1; double x2; })sizeOfTitlebarButtons:(unsigned long long)arg1;

- (id)_activeTexturedWindowColor;
- (void)_addButtonSubview:(id)arg1;
- (void)_addKnownSubview:(id)arg1;
- (void)_addKnownSubview:(id)arg1 positioned:(long long)arg2 relativeTo:(id)arg3;
- (double)_additionalTopHeightForFloatingToolbar;
- (struct CGPoint { double x1; double x2; })_adjustPointToTitlebarView:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustRectToTitlebarView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustToolbarFrameIfNecessary:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_alwaysNeedsTitleBarTextField;
- (void)_animateFromStartingTitleControlState;
- (void)_animateToolbarWithReason:(int)arg1 showToolbarPostWindowFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGPoint { double x1; double x2; })_autosaveButtonOrigin;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_autosaveButtonRevealOverRect;
- (id)_autosaveButtonSeparatorField;
- (struct CGPoint { double x1; double x2; })_autosaveButtonSeparatorFieldOrigin;
- (id)_auxViewControllers;
- (id)_auxiliaryTitlebarViewContainerView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_auxiliaryViewStartingFrame;
- (id)_backdropView;
- (id)_backgroundColorForFontSmoothing;
- (id)_backgroundLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_backgroundLayerFrame;
- (long long)_backgroundStyleForTitleTextField;
- (void)_beginTitleAnimation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_behindWindowVisualEffectLayoutRect;
- (double)_bottomBarHeight;
- (void)_bottomBarHeightChanged;
- (double)_bottomCornerHeight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bottomCornerRect;
- (struct CGSize { double x1; double x2; })_bottomCornerSize;
- (struct CGSize { double x1; double x2; })_bottomCornerSizeForRegularWindows;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bottomLeftCornerRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bottomRightCornerRect;
- (id)_buttonHidingView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calculateToolbarFrameAndUpdateSize:(BOOL)arg1;
- (BOOL)_canAddWindowTabs;
- (BOOL)_canDrawWindowGrowBox;
- (BOOL)_canFloatForTabsOrTitlebar:(BOOL)arg1;
- (BOOL)_canHaveToolbar;
- (void)_clearCornerMaskIfNeeded;
- (struct CGPoint { double x1; double x2; })_closeButtonOrigin;
- (struct CGPoint { double x1; double x2; })_collapseButtonOrigin;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_commandPopupRect;
- (void)_commonBackgroundAlphaDrawHandler:(id)arg1;
- (void)_computeHeightOfTop:(BOOL)arg1 bottom:(BOOL)arg2;
- (id)_containingBackdropView;
- (id)_contentLayoutGuide;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentLayoutRect;
- (id)_contentLayoutView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectExcludingToolbar;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectIncludingToolbarAtHome;
- (double)_contentToFrameMaxXWidth;
- (double)_contentToFrameMaxYHeight;
- (double)_contentToFrameMinXWidth;
- (double)_contentToFrameMinYHeight;
- (struct CGSRegionObject { }*)_copyDragRegion;
- (void)_coreUIDrawResizeBoxInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 active:(BOOL)arg2;
- (id)_cornerMask;
- (id)_createAuxiliaryTitlebarViewContainerViewIfNecessary;
- (struct CGSRegionObject { }*)_createWindowOpaqueShape;
- (BOOL)_createWindowShapeMask:(struct CGImage {}**)arg1 centerRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 scale:(double*)arg3;
- (void)_cuiMakeOrUpdateBackgroundLayer:(id*)arg1;
- (void)_cuiMakeOrUpdateBackgroundLayer:(id*)arg1 topHeight:(double)arg2 drawTopSeparator:(BOOL)arg3 bottomHeight:(double)arg4 forTitlebar:(BOOL)arg5;
- (void)_cuiMakeOrUpdateBackgroundLayerForTitlebarView:(id*)arg1;
- (id)_cuiOptionsForCornerMaskForWindowType:(struct __CFString { }*)arg1;
- (id)_cuiOptionsForHUDIncludeScaleKey:(BOOL)arg1;
- (id)_cuiOptionsForWindowType:(struct __CFString { }*)arg1 topHeight:(double)arg2 drawTopSeparator:(BOOL)arg3 bottomBarHeight:(double)arg4 shouldSetScaleKey:(BOOL)arg5 forTitlebar:(BOOL)arg6;
- (struct __CFString { }*)_cuiWindowType;
- (struct __CFString { }*)_currentHUDPresentationStateValue;
- (int)_currentThemeState;
- (struct __CFString { }*)_currentThemeStateKey;
- (unsigned long long)_currentThemeStyle;
- (id)_currentTitleColor;
- (id)_currentTitleTextFieldAttributedString;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_currentTitlebarContainerViewFrame;
- (double)_currentToolbarHeightWhileAnimating;
- (id)_defaultTitlebarAppearance;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_defaultTitlebarTitleRect;
- (id)_defaultWindowAppearance;
- (void)_didChangeContentLayoutRect;
- (void)_didEnd:(BOOL)arg1 renameWithTitle:(id)arg2 editingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 grantHandler:(id)arg4;
- (void)_didRemoveLayer;
- (void)_displayLayer:(id)arg1;
- (id)_displayName;
- (double)_distanceFromToolbarBaseToTitlebar;
- (BOOL)_doLayerBackedTitleAnimations;
- (id)_documentAutosavingError;
- (long long)_documentEditingState;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_draggableFrame;
- (void)_drawBackgroundForCellWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawCoreUIHUD;
- (void)_drawCoreUIHUDInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawFrameInterior:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 clip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_drawFrameRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawGrowBoxWithClip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawGrowBoxWithClip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 opaque:(BOOL)arg3;
- (id)_drawHandlerDelegate;
- (void)_drawNormalBackgroundRegion:(struct CGSRegionObject { }*)arg1;
- (void)_drawNormalThemeBackgroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawNormalTitleBar;
- (void)_drawRectFrameNeedsDisplay:(BOOL)arg1;
- (void)_drawResizeIndicators:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawSideUtilityTitleBar;
- (void)_drawTexturedBackground;
- (void)_drawTexturedBackgroundRegion:(struct CGSRegionObject { }*)arg1;
- (void)_drawTexturedThemeBackgroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawTexturedWindowWithClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawTexturedWindowWithClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_drawTitleBar:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawTitleBarBackgroundInClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawTitleStringInClip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawToolbarTransitionIfNecessary;
- (void)_drawTransparentTitlebarInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawUnifiedToolbar:(int)arg1;
- (void)_drawUnifiedToolbarBackgroundInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withState:(long long)arg2;
- (void)_drawUnifiedToolbarWithState:(int)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_effectiveAutosaveButtonFrame;
- (struct CGSize { double x1; double x2; })_effectiveAutosaveButtonFrameSize;
- (long long)_effectiveLayoutAttributeForAttribute:(long long)arg1;
- (BOOL)_effectiveMovableByBottomBar;
- (void)_endLiveResizeAsTopLevel;
- (void)_endTitleAnimation;
- (void)_ensureContentLayoutGuide;
- (void)_ensureContentLayoutView;
- (void)_enumerateAuxViewControllersOfType:(long long)arg1 handler:(id)arg2;
- (void)_enumerateAuxViewControllersOfType:(long long)arg1 useEffectiveLayoutAttribute:(BOOL)arg2 handler:(id)arg3;
- (struct CGPoint { double x1; double x2; })_fileButtonOrigin;
- (void)_floatTitlebarAndToolbarFromInit:(BOOL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameConvertedToSelf:(id)arg1;
- (struct CGPoint { double x1; double x2; })_fullScreenButtonOrigin;
- (id)_fullScreenCornerMaskImage;
- (struct { double x1; double x2; double x3; double x4; })_getCachedWindowCornerSizes;
- (void)_getWindowMaskCornerDimensionsLeftCornerWidth:(double*)arg1 rightCornerWidth:(double*)arg2 topCornerHeight:(double*)arg3 bottomCornerHeight:(double*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_growBoxRect;
- (void)_growContentReshapeContentAndToolbarView:(int)arg1 animate:(BOOL)arg2;
- (BOOL)_growWindowReshapeContentAndToolbarView:(int)arg1 withOldToolbarFrameSize:(struct CGSize { double x1; double x2; })arg2 animate:(BOOL)arg3;
- (BOOL)_hasFullSizeContentView;
- (BOOL)_hasRegularDrawWindowBackground;
- (BOOL)_hasToolbar;
- (void)_hideToolbarWithAnimation:(BOOL)arg1;
- (BOOL)_hidingTitlebar;
- (BOOL)_hidingTitlebarOrInAnotherWindow;
- (BOOL)_hidingToolbar;
- (id)_hitTest:(struct CGPoint { double x1; double x2; })arg1 ignoringResizeRegion:(BOOL)arg2;
- (id)_hitTestToBlockWindowResizing:(struct CGPoint { double x1; double x2; })arg1 forResizeDirection:(long long)arg2;
- (BOOL)_inactiveButtonsNeedMask;
- (id)_inactiveTexturedWindowColor;
- (long long)_internalVisualEffectViewMaterial;
- (void)_invalidateAllButtons;
- (void)_invalidateDocumentIcon;
- (void)_invalidateNeedsTitlebarSeparator;
- (void)_invalidateTitleCellSize;
- (BOOL)_isClosable;
- (BOOL)_isDarkWindow;
- (BOOL)_isFullScreen;
- (BOOL)_isHUDWindow;
- (BOOL)_isMiniaturizable;
- (BOOL)_isOnePieceTitleAndToolbar;
- (BOOL)_isOnePieceTitleAndToolbarWithToolbarNotHidden;
- (BOOL)_isResizable;
- (BOOL)_isSheet;
- (BOOL)_isTexturedWindow;
- (BOOL)_isTitlebarSubview:(id)arg1;
- (BOOL)_isUtility;
- (BOOL)_isZoomButtonEnabled;
- (void)_layerBackedAnimateToolbarWithReason:(int)arg1 showToolbarPostWindowFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_leftGroupRect;
- (struct CGPoint { double x1; double x2; })_lockButtonOrigin;
- (id)_makeSeparatorAccessoryViewController;
- (id)_makeTitlebarViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_maskCorners:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_maskCorners:(unsigned long long)arg1 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_maxTitlebarTitleRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_maxXBorderRect;
- (double)_maxXTitlebarButtonsWidth;
- (double)_maxXTitlebarDecorationMinWidth;
- (double)_maxXTitlebarDragWidth;
- (double)_maxXTitlebarWidgetInset;
- (double)_maxXWindowBorderWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_maxXminYResizeRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_maxYBorderRect;
- (double)_maxYTitlebarDragHeight;
- (double)_maxYWindowBorderHeight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_minXBorderRect;
- (double)_minXInsetForAccessoryViews;
- (double)_minXTitlebarButtonsWidth;
- (double)_minXTitlebarDecorationMinWidth;
- (double)_minXTitlebarDragWidth;
- (double)_minXTitlebarWidgetInset;
- (double)_minXWindowBorderWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_minYBorderRect;
- (double)_minYTitlebarButtonsOffset;
- (double)_minYTitlebarTitleOffset;
- (double)_minYWindowBorderHeight;
- (BOOL)_mouseInGroup:(id)arg1;
- (BOOL)_mouseInPopupRect:(id)arg1;
- (BOOL)_mouseInTitleRect:(id)arg1;
- (BOOL)_movableByBottomBar;
- (void)_moveTitlebarViewsToView:(id)arg1;
- (BOOL)_needsBackdropView;
- (BOOL)_needsBehindWindowBlendingForFullScreenTitlebar;
- (BOOL)_needsTitlebarSeparator;
- (id)_nonModalDocumentError;
- (id)_normalTitleBarFillColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_normalTitleBarFrame;
- (void)_noteToolbarLayoutChanged;
- (struct CGSRegionObject { }*)_opaqueFullSizeContentViewRegionWithClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_possiblyAdjustedHitTestResult:(id)arg1;
- (void)_reacquireToolbarFullScreenAuxiliaryView:(id)arg1;
- (void)_reacquireToolbarViewFromFullScreenWindowAndShow:(BOOL)arg1;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3 topView:(BOOL)arg4;
- (struct CGSRegionObject { }*)_regionForOpaqueDescendants:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forMove:(BOOL)arg2 forUnderTitlebar:(BOOL)arg3;
- (void)_relayoutAuxiliaryViews;
- (void)_relayoutAuxiliaryViewsOfType:(unsigned long long)arg1;
- (void)_removeBackgroundLayer;
- (void)_removeTitleTextFieldView;
- (void)_renamingDidEndNormally:(BOOL)arg1;
- (void)_replaceKnownSubview:(id)arg1 with:(id)arg2;
- (void)_resetDragMargins;
- (void)_resetTitleBarButtons;
- (void)_resetTitleFont;
- (void)_reshapeContentAndToolbarView:(int)arg1 withOldToolbarFrameSize:(struct CGSize { double x1; double x2; })arg2 resizeWindow:(BOOL)arg3 animate:(BOOL)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rightGroupRect;
- (id)_separatorAccessoryViewController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_separatorRectForInactiveWindow;
- (void)_setAutosaveButton:(id)arg1;
- (void)_setAutosaveButtonSeparatorField:(id)arg1;
- (void)_setAuxiliaryTitlebarViewContainerView:(id)arg1;
- (void)_setBackdropView:(id)arg1;
- (void)_setBackgroundLayer:(id)arg1;
- (void)_setButton:(id)arg1 frameOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)_setButtonHidingView:(id)arg1;
- (void)_setButtonsShown:(BOOL)arg1;
- (void)_setContentLayoutGuide:(id)arg1;
- (void)_setContentLayoutView:(id)arg1;
- (void)_setContentView:(id)arg1;
- (void)_setCornerMaskIfNeeded;
- (void)_setDisplayName:(id)arg1;
- (void)_setDocumentAutosavingError:(id)arg1;
- (void)_setDocumentButtonEnabled:(BOOL)arg1;
- (void)_setDocumentEditingState:(long long)arg1 animate:(BOOL)arg2;
- (void)_setDrawHandlerDelegate:(id)arg1;
- (void)_setFrameNeedsDisplay:(BOOL)arg1;
- (void)_setLayoutEngine:(id)arg1;
- (void)_setMouseEnteredGroup:(BOOL)arg1 entered:(BOOL)arg2;
- (void)_setMovableByBottomBar:(BOOL)arg1;
- (void)_setNonModalDocumentError:(id)arg1;
- (void)_setRenameField:(id)arg1;
- (void)_setSeparatorAccessoryViewController:(id)arg1;
- (void)_setSheet:(BOOL)arg1;
- (void)_setSuppressTitleControlDrawing:(BOOL)arg1;
- (void)_setTemporaryMouseOutsideLeftGroup:(BOOL)arg1;
- (void)_setTextShadow:(BOOL)arg1;
- (void)_setTitleTextFieldView:(id)arg1;
- (void)_setTitlebarViewController:(id)arg1;
- (void)_setToolbarMockView:(id)arg1;
- (void)_setToolbarShowHideResizeWeightingOptimizationOn:(BOOL)arg1;
- (void)_setToolbarVisibleStatus:(int)arg1;
- (void)_setWindow:(id)arg1;
- (double)_sheetHeightAdjustment;
- (BOOL)_shouldAddTitlebarSeparatorView;
- (BOOL)_shouldAlwaysFloatTitlebar;
- (BOOL)_shouldBeTreatedAsInkEventInInactiveWindow:(id)arg1;
- (BOOL)_shouldCenterTrafficLights;
- (BOOL)_shouldDoClientSideDragWithEvent:(id)arg1;
- (BOOL)_shouldDrawTitlebarTitle;
- (BOOL)_shouldFakeContainingBackdropView;
- (BOOL)_shouldFlipTitleStuffForRTL;
- (BOOL)_shouldFlipTrafficLightsForRTL;
- (BOOL)_shouldHideTitleView;
- (BOOL)_shouldRepresentFilename;
- (BOOL)_shouldRoundCornersForSurface;
- (BOOL)_shouldSendMouseDownToAutosaveButton:(id)arg1;
- (BOOL)_shouldShowDocumentIcon;
- (BOOL)_shouldUseDarkAppearanceInHUDWindows;
- (BOOL)_shouldUseMaterialsInHUDWindows;
- (void)_showHideToolbar:(int)arg1 resizeWindow:(BOOL)arg2 animate:(BOOL)arg3;
- (void)_showToolbarWithAnimation:(BOOL)arg1;
- (BOOL)_showsAutosaveButton;
- (double)_sideTitlebarWidth;
- (void)_size:(struct CGSize { double x1; double x2; }*)arg1 ofCell:(id)arg2 withTitle:(id)arg3;
- (struct CGSize { double x1; double x2; })_sizeOfTitlebarFileButton;
- (id)_snapshotCurrentTitleControlStateInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_snapshotStartingTitleControlState;
- (BOOL)_standardShadowOKIgnoringShapeCustomization;
- (void)_startLiveResizeAsTopLevel;
- (void)_surrenderToolbarViewForFullScreenWindow;
- (void)_syncAuxillaryViewPositions;
- (void)_syncBottomAuxillaryViewPositions;
- (void)_syncSideAuxillaryViewPositions;
- (void)_syncToolbarPosition;
- (double)_textureWidth;
- (void)_texturedComputeHeightOfTop:(BOOL)arg1 bottom:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_texturedMaxXminYResizeRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_texturedTitleBarViewFrame;
- (BOOL)_themeFrameShouldDrawTitlebar;
- (void)_tileTitlebarAndRedisplay:(BOOL)arg1;
- (BOOL)_tilebarViewNeedsTitlebarSeparator;
- (void)_titleBarAssociatedViewFrameChanged:(id)arg1;
- (void)_titleBarViewHeightChanged;
- (struct CGSize { double x1; double x2; })_titleCellSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleControlRect;
- (id)_titleTextField;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleTextFieldFrame;
- (id)_titleTextFieldView;
- (BOOL)_titleVisibilityIsHidden;
- (double)_titlebarHeight;
- (double)_titlebarHeight2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titlebarTitleRect;
- (BOOL)_titlebarViewAppearsTransparent;
- (id)_titlebarViewControllerIfAvailable;
- (BOOL)_titlebarViewShouldRoundCorners;
- (id)_toolbar;
- (struct CGPoint { double x1; double x2; })_toolbarButtonOrigin;
- (void)_toolbarFrameSizeChanged:(id)arg1 oldSize:(struct CGSize { double x1; double x2; })arg2;
- (BOOL)_toolbarIsHidden;
- (BOOL)_toolbarIsInTransition;
- (BOOL)_toolbarIsManagedByExternalWindow;
- (BOOL)_toolbarIsShown;
- (double)_toolbarLeadingSpace;
- (id)_toolbarMockView;
- (double)_toolbarOffsetIfTitleIsHidden;
- (double)_toolbarTrailingSpace;
- (id)_toolbarView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_toolbarViewFrame;
- (double)_topBarHeight;
- (double)_topBarHeightWithoutContentBorderThickness;
- (struct CGSize { double x1; double x2; })_topCornerSize;
- (struct CGSize { double x1; double x2; })_topCornerSizeForRegularWindows;
- (double)_topHeightForTexturedBackground;
- (void)_unfloatTitlebarAndToolbarIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_unifiedToolbarFrame;
- (void)_updateAllUnderTitlebarViews;
- (void)_updateBackdropView;
- (void)_updateBackgroundLayer;
- (void)_updateButtonPositions;
- (void)_updateButtonState;
- (void)_updateButtons;
- (void)_updateButtonsBecauseTitleChanged:(BOOL)arg1 havingATitleChanged:(BOOL)arg2;
- (void)_updateButtonsWithDocumentEdited:(BOOL)arg1;
- (void)_updateContentLayoutGuideFrame;
- (void)_updateContentViewFrame;
- (void)_updateLayerMasksToBoundsFromView;
- (void)_updateMouseTracking;
- (void)_updateRoundCornerMaskWhenLayerBacked;
- (void)_updateTitleBarField;
- (void)_updateTitleSeparatorViewIfNeeded;
- (void)_updateTitleTextField;
- (void)_updateTitleTextFieldView;
- (void)_updateTitlebarContainerViewFrameIfNecessary;
- (void)_updateTitlebarViewMaterialAndAppearance;
- (void)_updateUnderTitlebarViewFrame:(id)arg1 associatedView:(id)arg2 titlebarViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_updateWidgets;
- (void)_updateWindowBackingTypeForLayer:(BOOL)arg1;
- (BOOL)_useRegularTextFieldForTheTitleBar;
- (BOOL)_usingToolbarShowHideWeightingOptimization;
- (long long)_visibleAuxViewControllersCount;
- (BOOL)_wantsFloatingTitlebar;
- (BOOL)_wantsLeftHandButtons;
- (BOOL)_wantsSideUtilityTitleBar;
- (BOOL)_wantsTitleBar;
- (BOOL)_wantsTitleString;
- (BOOL)_wantsUnifiedToolbar;
- (void)_willChangeContentLayoutRect;
- (void)_willStartRenameWithTitle:(id)arg1 editingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (double)_windowBorderThickness;
- (void)_windowChangedKeyState;
- (void)_windowDidChangeSheetParent;
- (double)_windowFileButtonSpacingWidth;
- (double)_windowResizeBorderThickness;
- (double)_windowTitlebarButtonSpacingWidth;
- (double)_windowTitlebarTitleMinHeight;
- (double)_windowTitlebarXResizeBorderThickness;
- (double)_windowTitlebarYResizeBorderThickness;
- (struct CGPoint { double x1; double x2; })_zoomButtonOrigin;
- (void)addFileButton:(id)arg1;
- (void)addSubview:(id)arg1;
- (void)addSubview:(id)arg1 positioned:(long long)arg2 relativeTo:(id)arg3;
- (void)addTitlebarSubview:(id)arg1;
- (void)addUnderTitlebarView:(id)arg1 withAssociatedWithView:(id)arg2;
- (void)allowTitleDrawing;
- (BOOL)alwaysShowTitlebar;
- (void)animationDidEnd:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (id)associatedViewsToUnderTitlebarViews;
- (id)autosaveButton;
- (void)backgroundColorChanged:(id)arg1;
- (BOOL)bottomCornerRounded;
- (double)buttonRevealAmount;
- (BOOL)canAddUnderTitlebarViews;
- (BOOL)canSmoothFontsInLayer;
- (double)contentAlpha;
- (double)contentBorderThicknessForEdge:(unsigned long long)arg1;
- (id)contentFill;
- (id)contentLayoutGuide;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRectForFrameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2;
- (void)cursorUpdate:(id)arg1;
- (struct __CFString { }*)customizedBackgroundTypeForTitleCell:(id)arg1;
- (void)dealloc;
- (BOOL)disableTitlebarBlurFilters;
- (void)drawFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawOverlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawWindowBackgroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawWindowBackgroundRegion:(struct CGSRegionObject { }*)arg1;
- (id)effectiveAppearance;
- (id)fontSmoothingBackgroundColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameRectForContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2;
- (id)fullScreenButton;
- (double)fullScreenTitlebarMaxHeight;
- (double)fullScreenTitlebarMinHeight;
- (BOOL)handleMouseDown:(id)arg1;
- (BOOL)handleRightMouseDown:(id)arg1;
- (void)handleSetFrameCommonRedisplay;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleMask:(unsigned long long)arg2 owner:(id)arg3;
- (BOOL)isOpaque;
- (BOOL)layer:(id)arg1 shouldInheritContentsScale:(double)arg2 fromWindow:(id)arg3;
- (void)layout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })leftButtonGroupFrameInTitlebarView;
- (id)lockButton;
- (id)makeRenameField;
- (id)menu;
- (id)menuForEvent:(id)arg1;
- (struct CGSize { double x1; double x2; })minFrameSize;
- (struct CGSize { double x1; double x2; })minFrameSizeForMinContentSize:(struct CGSize { double x1; double x2; })arg1 styleMask:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })miniaturizedSize;
- (void)mouseDown:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseEnteredLeftButtonGroup;
- (void)mouseExited:(id)arg1;
- (void)mouseExitedLeftButtonGroup;
- (void)mouseUp:(id)arg1;
- (id)newAutosaveButton;
- (id)newCloseButton;
- (id)newFileButton;
- (id)newFullScreenButton;
- (id)newLockButton;
- (id)newMiniaturizeButton;
- (id)newToolbarButton;
- (id)newZoomButton;
- (id)opaqueAncestor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overlayBounds;
- (BOOL)preservesContentDuringLiveResize;
- (void)relayoutAuxiliaryViewsOfType:(unsigned long long)arg1;
- (void)removeUnderTitlebarView:(id)arg1 withAssociatedWithView:(id)arg2;
- (id)renameField;
- (void)rightMouseDown:(id)arg1;
- (float)roundedCornerRadius;
- (void)setAppearance:(id)arg1;
- (void)setAssociatedViewsToUnderTitlebarViews:(id)arg1;
- (void)setBottomCornerRounded:(BOOL)arg1;
- (void)setBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setButtonRevealAmount:(double)arg1;
- (void)setContentBorderThickness:(double)arg1 forEdge:(unsigned long long)arg2;
- (void)setDisableTitlebarBlurFilters:(BOOL)arg1;
- (void)setDocumentEdited:(BOOL)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLayer:(id)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)setRepresentedFilename:(id)arg1;
- (void)setRepresentedURL:(id)arg1;
- (void)setStyleMask:(unsigned long long)arg1;
- (void)setThemeFrameWidgetState:(int)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitlebarContainerView:(id)arg1;
- (void)setTitlebarView:(id)arg1;
- (void)setWantsLayer:(BOOL)arg1;
- (void)shapeWindow;
- (BOOL)shouldAttemptResize;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;
- (BOOL)shouldRoundCornersInFullScreen;
- (BOOL)shouldStartWindowDragForEvent:(id)arg1;
- (BOOL)shouldUseStyledTextInTitleCell:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeOfTitlebarToolbarButton;
- (double)startingYLocationForSheets;
- (unsigned long long)styleMask;
- (id)titleBarViewsForMouseHitTest;
- (double)titleHeightToHideInFullScreen;
- (id)titlebarAccessoryViewControllers;
- (void)titlebarAppearsTransparentChanged;
- (id)titlebarContainerView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titlebarRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titlebarRectAssumingVisible;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titlebarRectIncludingToolbar;
- (id)titlebarView;
- (id)titlebarViewController;
- (id)toolbarButton;
- (BOOL)topCornerRounded;
- (void)updateLayer;
- (void)updateTitleTextField;
- (void)updateTitlebarViewBlendingMode;
- (void)updateWindowCornerMaskOnLayer:(id)arg1 forTitlebar:(BOOL)arg2;
- (BOOL)usesCustomDrawing;
- (void)viewDidEndLiveResize;
- (void)viewWillMoveToWindow:(id)arg1;
- (BOOL)wantsUpdateLayer;
- (void)windowTitleModeChanged;

@end
