/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSCGSWindow : NSObject

@property (atomic, readwrite, copy) struct CGSRegionObject { }*activationShape;
@property (atomic, readwrite) double backdropBleedFraction;
@property (atomic, readwrite) BOOL backdropsAreFrozen;
@property (atomic, readonly, retain) NSCGSWindowBackingStore *backingStore;
@property (atomic, readwrite, copy) struct CGSRegionObject { }*buttonShape;
@property (atomic, readwrite, copy) struct CGSRegionObject { }*commandModifierExclusionShape;
@property (atomic, readwrite, copy) NSCGSWindowCornerMask *cornerMask;
@property (atomic, readwrite, copy) struct CGSRegionObject { }*dragShape;
@property (atomic, readwrite, copy) struct CGSRegionObject { }*eventShape;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (atomic, readwrite) BOOL hasBackingStore;
@property (atomic, readwrite) BOOL hasKeyAppearance;
@property (atomic, readwrite) BOOL hasMainAppearance;
@property (atomic, readwrite) int level;
@property (atomic, readonly, copy) NSArray *movementGroup;
@property (atomic, readwrite) double opacity;
@property (atomic, readwrite, copy) struct CGSRegionObject { }*opaqueShape;
@property (atomic, readwrite, copy) NSDictionary *shadowProperties;
@property (atomic, readwrite, copy) struct CGSRegionObject { }*shape;
@property (atomic, readonly) struct CGSize { double x1; double x2; } size;
@property (atomic, readwrite) int subLevel;
@property (atomic, readwrite) BOOL useActiveShadow;
@property (atomic, readonly) unsigned int windowID;

- (struct CGImage { }*)imageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// NSCGSWindow (NCGSWindowMovement)

- (void)moveByX:(double)arg1 Y:(double)arg2;
- (void)moveGroupByX:(double)arg1 Y:(double)arg2;
- (id)movementGroup;

// NSCGSWindow (NSCGSSpace)

+ (BOOL)isAnyWindowOnAVisibleSpace:(id)arg1;

- (unsigned long long)bestSpaceContainingWindow;
- (unsigned long long)bestUserSpaceContainingWindow;
- (unsigned long long)bestUserSpaceForWindow;
- (unsigned long long)bestVisibleSpaceContainingWindow;
- (void)disassociateFromSpacesIfOrderedOut;
- (BOOL)isExpectedToBeOnSpace:(unsigned long long)arg1;
- (void)reassociateWithSpacesByGeometry;

// NSCGSWindow (NSCGSWindowApplicationOrdering)

+ (void)orderApplicationWindowsFront;

// NSCGSWindow (NSCGSWindowBackdrop)

- (double)backdropBleedFraction;
- (BOOL)backdropsAreFrozen;
- (id)makeBackdrop;
- (void)setBackdropBleedFraction:(double)arg1;
- (void)setBackdropsAreFrozen:(BOOL)arg1;

// NSCGSWindow (NSCGSWindowBackingStore)

- (id)backingStore;
- (BOOL)hasBackingStore;
- (void)setHasBackingStore:(BOOL)arg1;

// NSCGSWindow (NSCGSWindowCreation)

+ (id)window;
+ (id)windowWithConnectionID:(unsigned int)arg1;
+ (id)windowWithWindowID:(unsigned int)arg1;

// NSCGSWindow (NSCGSWindowDisplayCoordinateSystem)

+ (struct CGPoint { double x1; double x2; })convertPointFromCGCoordinates:(struct CGPoint { double x1; double x2; })arg1;
+ (struct CGPoint { double x1; double x2; })convertPointToCGCoordinates:(struct CGPoint { double x1; double x2; })arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromCGCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToCGCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (double)displayFlipOffset;
+ (void)setDisplayFlipOffset:(double)arg1;

// NSCGSWindow (NSCGSWindowFreezing)

- (void)freezeWithOptions:(id)arg1;
- (void)thaw;

// NSCGSWindow (NSCGSWindowGeometry)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })size;

// NSCGSWindow (NSCGSWindowLocallyRenderedLayerSurface)

- (id)makeLocallyRenderedLayerSurface;

// NSCGSWindow (NSCGSWindowOrdering)

+ (unsigned long long)onScreenWindowCount;
+ (unsigned long long)onScreenWindowCountForConnectionID:(unsigned int)arg1;
+ (id)onScreenWindows;
+ (id)onScreenWindowsForConnectionID:(unsigned int)arg1;
+ (id)windowsWithOptions:(unsigned int)arg1 onSpaces:(id)arg2 forConnectionID:(unsigned int)arg3;

- (void)orderAboveWindow:(id)arg1;
- (void)orderBack;
- (void)orderBelowWindow:(id)arg1;
- (void)orderFront;
- (void)orderOut;

// NSCGSWindow (NSCGSWindowOrderingGroup)

- (void)_orderGroupWithOperation:(int)arg1 relativeToWindow:(id)arg2;
- (void)orderGroupAboveWindow:(id)arg1;
- (void)orderGroupBack;
- (void)orderGroupBelowWindow:(id)arg1;
- (void)orderGroupFront;
- (void)orderGroupFrontConditionally:(double)arg1;
- (void)orderGroupOut;
- (id)orderingGroup;

// NSCGSWindow (NSCGSWindowRegions)

- (void)addActivationRegion:(struct CGSRegionObject { }*)arg1;
- (void)addButtonRegion:(struct CGSRegionObject { }*)arg1;
- (void)addDragRegion:(struct CGSRegionObject { }*)arg1;
- (void)clearActivationRegion;
- (void)clearButtonRegion;
- (void)clearDragRegion;
- (void)removeDragSubregion:(struct CGSRegionObject { }*)arg1;
- (void)removeDragSubregionForCommandModifier:(struct CGSRegionObject { }*)arg1;

// NSCGSWindow (NSCGSWindowSurface)

- (id)makeLayerSurface;

// NSCGSWindow (NSCGSWindowSynchronize)

+ (void)disableScreenUpdates;
+ (void)reenableScreenUpdates;
+ (void)synchronize;
+ (void)synchronizeForCarbon;

@end
