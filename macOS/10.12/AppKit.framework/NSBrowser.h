/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSBrowser : NSControl {
    id  _brAuxiliaryStorage;
    struct __Brflags { 
        unsigned int firstVisibleCalculationDisabled : 1; 
        unsigned int prefersAllColumnUserResizing : 1; 
        unsigned int usesSmallScrollers : 1; 
        unsigned int usesSmallSizeTitleFont : 1; 
        unsigned int actionNeedsToBeSent : 1; 
        unsigned int acceptsFirstMouse : 1; 
        unsigned int refusesFirstResponder : 1; 
        unsigned int disableCompositing : 6; 
        unsigned int delegateSelectsCellsByRow : 1; 
        unsigned int allowsIncrementalSearching : 1; 
        unsigned int time : 1; 
        unsigned int hasHorizontalScroller : 1; 
        unsigned int prohibitEmptySel : 1; 
        unsigned int sendActionOnArrowKeys : 1; 
        unsigned int dontDrawTitles : 1; 
        unsigned int acceptArrowKeys : 1; 
        unsigned int delegateValidatesColumns : 1; 
        unsigned int delegateDoesNotCreateRowsInMatrix : 1; 
        unsigned int delegateSelectsCellsByString : 1; 
        unsigned int delegateSetsTitles : 1; 
        unsigned int delegateImplementsWillDisplayCell : 1; 
        unsigned int separateColumns : 1; 
        unsigned int titleFromPrevious : 1; 
        unsigned int isTitled : 1; 
        unsigned int reuseColumns : 1; 
        unsigned int allowsBranchSelection : 1; 
        unsigned int allowsMultipleSelection : 1; 
    }  _brflags;
    id  _cellPrototype;
    struct CGSize { 
        double width; 
        double height; 
    }  _columnSize;
    NSMutableArray * _columns;
    id  _delegate;
    SEL  _doubleAction;
    NSString * _firstColumnTitle;
    short  _firstVisibleColumn;
    Class  _matrixClass;
    short  _maxVisibleColumns;
    short  _minColumnWidth;
    id  _nsreserved2;
    SEL  _nsreserved3;
    short  _numberOfVisibleColumns;
    NSString * _pathSeparator;
    NSScroller * _scroller;
    NSMutableArray * _titles;
}

@property (atomic, readwrite) BOOL allowsBranchSelection;
@property (atomic, readwrite) BOOL allowsEmptySelection;
@property (atomic, readwrite) BOOL allowsMultipleSelection;
@property (atomic, readwrite) BOOL allowsTypeSelect;
@property (atomic, readwrite) BOOL autohidesScroller;
@property (atomic, readwrite, retain) NSColor *backgroundColor;
@property (atomic, readwrite, retain) id cellPrototype;
@property (atomic, readonly) long long clickedColumn;
@property (atomic, readonly) long long clickedRow;
@property (atomic, readwrite) unsigned long long columnResizingType;
@property (atomic, readwrite, copy) NSString *columnsAutosaveName;
@property (atomic, readwrite) <NSBrowserDelegate> *delegate;
@property (atomic, readwrite) SEL doubleAction;
@property (atomic, readonly) long long firstVisibleColumn;
@property (atomic, readwrite) BOOL hasHorizontalScroller;
@property (atomic, readwrite) long long lastColumn;
@property (atomic, readonly) long long lastVisibleColumn;
@property (getter=isLoaded, atomic, readonly) BOOL loaded;
@property (atomic, readwrite) long long maxVisibleColumns;
@property (atomic, readwrite) double minColumnWidth;
@property (atomic, readonly) long long numberOfVisibleColumns;
@property (atomic, readwrite, copy) NSString *pathSeparator;
@property (atomic, readwrite) BOOL prefersAllColumnUserResizing;
@property (atomic, readwrite) BOOL reusesColumns;
@property (atomic, readwrite) double rowHeight;
@property (atomic, readonly) id selectedCell;
@property (atomic, readonly, copy) NSArray *selectedCells;
@property (atomic, readonly) long long selectedColumn;
@property (atomic, readwrite, copy) NSIndexPath *selectionIndexPath;
@property (atomic, readwrite, copy) NSArray *selectionIndexPaths;
@property (atomic, readwrite) BOOL sendsActionOnArrowKeys;
@property (atomic, readwrite) BOOL separatesColumns;
@property (atomic, readwrite) BOOL takesTitleFromPreviousColumn;
@property (atomic, readonly) double titleHeight;
@property (getter=isTitled, atomic, readwrite) BOOL titled;

+ (BOOL)_prefersCellUserInterfaceLayoutDirection;
+ (Class)browserColumnViewClass;
+ (Class)browserTableColumnClass;
+ (Class)browserTableViewClass;
+ (Class)cellClass;
+ (void)initialize;
+ (Class)matrixColumnViewControllerClass;
+ (Class)previewColumnViewControllerClass;
+ (void)removeSavedColumnsWithAutosaveName:(id)arg1;
+ (Class)tableColumnViewControllerClass;

- (BOOL)_actOnKeyDown:(id)arg1;
- (void)_addAnimatedColumn;
- (void)_addColumnSubviewAndAnimateIfNecessary:(id)arg1;
- (void)_addColumnWithoutChangingVisibleColumn;
- (BOOL)_addingOrAnimatingNewColumn;
- (void)_alignColumnForStretchedWindowWithInfo:(struct _NSBrowserColumnResizeInfo { BOOL x1; BOOL x2; BOOL x3; id x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; }*)arg1;
- (void)_alignFirstVisibleColumnToDocumentViewEdge:(BOOL)arg1;
- (BOOL)_allowsDelegateSizingForUserResize;
- (void)_animateLastAddedColumnToVisible;
- (BOOL)_autoExpandItemUnderCursor;
- (void)_autosaveColumnsIfNecessary;
- (void)_autoscrollForDraggingInfo:(id)arg1 timeDelta:(double)arg2;
- (void)_beforeDrawCell:(id)arg1 atRow:(long long)arg2 col:(long long)arg3 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)_beginColumnDragging;
- (unsigned long long)_borderType;
- (id)_browserIBMetrics;
- (void)_bumpSelectedItem:(id)arg1;
- (void)_calcNumVisibleColumnsAndColumnSize;
- (struct CGSize { double x1; double x2; })_calcVisibleColumnAreaAvailable;
- (long long)_calculateSizeToFitWidthOfColumn:(long long)arg1 testLoadedOnly:(BOOL)arg2;
- (BOOL)_canDragRowsWithIndexes:(id)arg1 inColumn:(long long)arg2 withEvent:(id)arg3;
- (void)_cancelAutoExpandItemUnderCursor;
- (id)_child:(long long)arg1 ofItem:(id)arg2;
- (void)_clearLeafControllers;
- (void)_clearVisitedColumnContentWidths;
- (void)_collapseAutoExpandedItems;
- (id)_columnControllerInColumn:(long long)arg1;
- (long long)_columnOfView:(id)arg1;
- (void)_columnResizeChangeFrameOfColumn:(id)arg1 toFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 constrainWidth:(BOOL)arg3 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x1; BOOL x2; BOOL x3; id x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; }*)arg4;
- (void)_commitAutoExpandedItems;
- (void)_computeAndAlignFirstClosestVisibleColumn;
- (void)_computeFirstCompletelyVisibleColumn;
- (void)_computeFirstMostlyVisibleColumn;
- (void)_computeFirstVisibleColumnRequireCompletelyVisible:(BOOL)arg1;
- (void)_concludeDragRows:(id)arg1 inColumn:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_containerRelativeFrameOfColumn:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_containerRelativeFrameOfInsideOfColumn:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_containerRelativeTitleFrameOfColumn:(long long)arg1;
- (id)_containerViewOfColumns;
- (id)_containerViewOfTitles;
- (BOOL)_continuousResizeNotifications;
- (unsigned long long)_controlSizeForScrollers;
- (id)_createColumn:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 empty:(BOOL)arg2;
- (BOOL)_delegateDoesNotCreateRowsInMatrix;
- (BOOL)_delegateRepondsToValidateDrop;
- (BOOL)_delegateRespondsToNamesOfPromisedFilesDroppedAtDestination;
- (BOOL)_delegateRespondsToSelectCellsByRow;
- (BOOL)_delegateRespondsToWillDisplayCell;
- (BOOL)_delegateRespondsToWriteRows;
- (BOOL)_determineIsSameTargetForDragInfo:(id)arg1;
- (void)_didChangeLastColumn:(long long)arg1 toColumn:(long long)arg2;
- (void)_disableAutosavingAndColumnResizingNotificationsAndMark:(BOOL)arg1;
- (void)_disableColumnAnimation;
- (void)_doClickAndQueueSendingOfAction:(id)arg1;
- (void)_doClickAndQueueSendingOfAction:(id)arg1 removeAndAddColumnsIfNecessary:(BOOL)arg2 movingBack:(BOOL)arg3;
- (BOOL)_doMoveBackward;
- (BOOL)_doMoveForward;
- (void)_doPostColumnConfigurationDidChangeNotification:(id)arg1;
- (void)_doTiming;
- (void)_dragRowIndexes:(id)arg1 inColumn:(long long)arg2 withEvent:(id)arg3 pasteboard:(id)arg4 source:(id)arg5 slideBack:(BOOL)arg6;
- (BOOL)_dragShouldBeginFromMouseDown:(id)arg1;
- (id)_draggingImageForRowsWithIndexes:(id)arg1 inColumn:(long long)arg2 withEvent:(id)arg3 offset:(struct CGPoint { double x1; double x2; }*)arg4;
- (void)_drawDropHighlight;
- (void)_drawDropHighlightAboveRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawDropHighlightAroundColumnWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawDropHighlightAroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isSelected:(BOOL)arg2 rounded:(BOOL)arg3;
- (void)_drawDropHighlightBackgroundAroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawEmptyColumnsForView:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (BOOL)_drawRectIfEmptyWhenSubviewsCoverDirtyRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawScrollViewFocusRing:(id)arg1 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 needsFullDisplay:(BOOL)arg3;
- (void)_drawTitlesForView:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_dropHighlightBackgroundColor;
- (id)_dropHighlightColor;
- (id)_dropHighlightColorForEntireTableView;
- (void)_enableAutosavingAndColumnResizingNotifications;
- (void)_enableColumnAnimation;
- (void)_endColumnDragging;
- (void)_ensureValidSelection;
- (void)_equalyResizeColumnsByDelta:(double)arg1 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x1; BOOL x2; BOOL x3; id x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; }*)arg2;
- (void)_fastPathDrawEmptyColumnsForView:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (BOOL)_findRow:(long long*)arg1 column:(long long*)arg2 forItem:(id)arg3;
- (long long)_firstSelectableRowInMatrix:(id)arg1 inColumn:(long long)arg2;
- (void)_fixKeyViewForView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusRingRect;
- (BOOL)_forceSynchronizedScrollingAnimation;
- (id)_gdbColumnControllers;
- (id)_gdbLeafItemViewControllerByItem;
- (BOOL)_getMatchingRow:(long long*)arg1 forString:(id)arg2 inMatrix:(id)arg3 startingAtRow:(long long)arg4 prefixMatch:(BOOL)arg5 caseSensitive:(BOOL)arg6;
- (BOOL)_hasKeyboardFocus;
- (BOOL)_hasLeafViewControllerForItem:(id)arg1;
- (id)_hitTest:(struct CGPoint { double x1; double x2; }*)arg1 dragTypes:(id)arg2;
- (id)_horizontalScroller;
- (BOOL)_hoverAreaIsSameAsLast:(id)arg1;
- (id)_imageForEmptyColumnOfSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_imageForEmptyVerticalScroller;
- (long long)_indexOfItem:(id)arg1 inColumn:(long long)arg2;
- (long long)_indexOfItem:(id)arg1 inParent:(id)arg2;
- (long long)_internalNextTypeSelectMatchFromRow:(long long)arg1 toRow:(long long)arg2 inColumn:(long long)arg3 forString:(id)arg4;
- (id)_internalTypeSelectStringForColumn:(long long)arg1 row:(long long)arg2;
- (BOOL)_isExpandableItem:(id)arg1;
- (BOOL)_isExpandableRow:(long long)arg1 withParentItem:(id)arg2;
- (BOOL)_isLeafRow:(long long)arg1 withParentItem:(id)arg2;
- (BOOL)_isTypeSelectRow:(long long)arg1 column:(long long)arg2;
- (id)_itemAtRow:(long long)arg1 parentItem:(id)arg2;
- (void)_itemBasedReloadColumn:(long long)arg1;
- (long long)_keyRowOrSelectedRowOfMatrix:(id)arg1 inColumn:(long long)arg2;
- (id)_lastDraggedEventFollowing:(id)arg1;
- (id)_lastDraggedOrUpEventFollowing:(id)arg1;
- (id)_lastNonLeafColumnController;
- (id)_loadCell:(id)arg1 atRow:(long long)arg2 col:(long long)arg3 inMatrix:(id)arg4;
- (id)_loadedCellAtRow:(long long)arg1 column:(long long)arg2 inMatrix:(id)arg3;
- (void)_markAutoExpandedItemWithDragInfo:(id)arg1;
- (void)_matrixBasedReloadColumn:(long long)arg1;
- (BOOL)_matrixShouldAddColumnForColumn:(long long)arg1 matrix:(id)arg2;
- (id)_newSelectionIndexesFromOldSelectedItems:(id)arg1 parentItem:(id)arg2;
- (long long)_nextTypeSelectMatchFromRow:(long long)arg1 toRow:(long long)arg2 inColumn:(long long)arg3 forString:(id)arg4;
- (long long)_numberOfChildrenOfItem:(id)arg1;
- (void)_old_encodeWithCoder_NSBrowser:(id)arg1;
- (id)_old_initWithCoder_NSBrowser:(id)arg1;
- (BOOL)_performDragFromMouseDown:(id)arg1 inColumn:(long long)arg2;
- (BOOL)_performTypeSelect:(id)arg1;
- (void)_postColumnConfigurationDidChangeNotification;
- (void)_postDidScrollNotification;
- (void)_postWillScrollNotification;
- (double)_preferedColumnWidth;
- (void)_prepareToDragRows:(id)arg1 inColumn:(long long)arg2;
- (void)_readPersistentBrowserColumns;
- (void)_reattachColumnSubviews:(id)arg1;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)arg1 visRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3 topView:(BOOL)arg4;
- (id)_recursiveSetDefaultKeyViewLoop;
- (void)_releaseAutoExpandingItemsCache;
- (void)_reloadRow:(long long)arg1 column:(long long)arg2;
- (void)_resizeColumn:(id)arg1 withEvent:(id)arg2;
- (void)_resizeColumnByDelta:(double)arg1 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x1; BOOL x2; BOOL x3; id x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; }*)arg2;
- (void)_restoreLastSelectedItemsBeforeAutoExpand;
- (void)_restoreTypeSelectCellValue;
- (id)_rootItem;
- (void)_scheduleCollapsingAutoExpandedItems;
- (void)_scrollColumnToLastVisible:(long long)arg1;
- (void)_scrollColumnToVisible:(long long)arg1 private:(BOOL)arg2;
- (void)_scrollColumnToVisible:(long long)arg1 requireCompletelyVisible:(BOOL)arg2;
- (BOOL)_scrollColumnsForScrollerIncrementOrDecrementUsingPart:(long long)arg1;
- (void)_scrollColumnsRightBy:(long long)arg1;
- (void)_scrollFirstVisibleColumnIntoView;
- (void)_scrollLastColumnTrailingEdgeToVisible;
- (void)_scrollOptimizingLastColumnPlacement;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_scrollViewForColumns;
- (void)_scrollViewForColumnsDidTrackHorizontalScroller:(id)arg1;
- (void)_scrollViewForColumnsDocumentViewFrameDidChange:(id)arg1;
- (void)_scrollViewForColumnsDocumentViewVisibilityChange:(id)arg1;
- (void)_scrollViewForColumnsWillTrackHorizontalScroller:(id)arg1;
- (BOOL)_selectCell:(id)arg1 inColumn:(long long)arg2;
- (BOOL)_selectItemBestMatching:(id)arg1;
- (void)_selectRowIndexes:(id)arg1 inColumn:(long long)arg2;
- (id)_selectedCellsInColumn:(long long)arg1;
- (long long)_selectedOrFirstValidRowInColumn:(long long)arg1;
- (BOOL)_sendDelegateAcceptDropForDragInfo:(id)arg1;
- (void)_sendDelegateCreateRowsForColumn:(long long)arg1 inMatrix:(id)arg2;
- (BOOL)_sendDelegateSelectRow:(long long)arg1 inColumn:(long long)arg2;
- (void)_sendDelegateValidateDropForDragInfo:(id)arg1;
- (void)_sendDelegateWillDisplayCell:(id)arg1 atRow:(long long)arg2 column:(long long)arg3;
- (BOOL)_sendDelegateWriteRowsWithIndexes:(id)arg1 inColumn:(long long)arg2 toPasteboard:(id)arg3;
- (void)_sendQueuedAction;
- (void)_setAcceptsFirstMouse:(BOOL)arg1;
- (void)_setAllowsDelegateSizingForUserResize:(BOOL)arg1;
- (void)_setBorderType:(unsigned long long)arg1;
- (void)_setClickedColumn:(long long)arg1 clickedRow:(long long)arg2;
- (void)_setContinuousResizeNotifications:(BOOL)arg1;
- (void)_setDropHighilightColorIfSelected:(BOOL)arg1;
- (void)_setDropTargetColumn:(long long)arg1 targetRow:(long long)arg2 targetDropOperation:(unsigned long long)arg3 dragOperation:(unsigned long long)arg4;
- (void)_setFirstColumnTitle:(id)arg1;
- (void)_setFocusRingNeedsDisplay;
- (void)_setHasHorizontalScroller:(BOOL)arg1;
- (void)_setInitialColumnContentSizeOfColumn:(id)arg1;
- (void)_setLineBorderColor:(id)arg1;
- (void)_setNeedsDisplayBeginingAtColumn:(long long)arg1;
- (void)_setNeedsDisplayForTargetRow:(long long)arg1 column:(long long)arg2 operation:(unsigned long long)arg3;
- (void)_setNeedsDisplayInColumn:(long long)arg1;
- (void)_setNewPreferedColumnWidth:(double)arg1;
- (void)_setNumVisibleColumns:(long long)arg1;
- (void)_setScrollViewForColumns:(id)arg1;
- (void)_setScrollerSize:(unsigned long long)arg1;
- (void)_setShouldAnimateColumnScrolling:(BOOL)arg1;
- (void)_setShouldForwardTypeSelectionToNextColumn:(BOOL)arg1;
- (void)_setTitle:(id)arg1 ofColumn:(long long)arg2;
- (void)_setUsesSmallTitleFont:(BOOL)arg1;
- (void)_setVisibleRectOfColumns:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setWantsRevealovers:(BOOL)arg1;
- (void)_setWidth:(double)arg1 ofColumn:(long long)arg2 stretchWindow:(BOOL)arg3;
- (BOOL)_shouldAnimateColumnScrolling;
- (BOOL)_shouldAutoExpandItemAtRow:(long long)arg1 inColumn:(long long)arg2;
- (BOOL)_shouldAutoScrollForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)_shouldAutoscrollForDraggingInfo:(id)arg1;
- (BOOL)_shouldClipViewForTitlesCopyOnScroll;
- (BOOL)_shouldDelegateTargetActionForSelector:(SEL)arg1;
- (BOOL)_shouldDrawFocus;
- (BOOL)_shouldForwardTypeSelectionToNextColumn;
- (BOOL)_shouldMaintainFirstResponder;
- (BOOL)_shouldScrollStartOfColumnToVisible;
- (BOOL)_shouldShowCellExpansionForRow:(long long)arg1 column:(long long)arg2;
- (BOOL)_shouldStretchWindowIfNecessaryForUserColumnResize;
- (BOOL)_shouldTypeSelectForEvent:(id)arg1;
- (void)_sizeDocumentViewToColumns;
- (void)_sizeDocumentViewToColumnsAndAlign;
- (void)_sizeDocumentViewToColumnsAndAlignIfNecessary:(BOOL)arg1;
- (void)_sizeMatrixOfColumnToFit:(id)arg1;
- (void)_sizeToFitColumn:(id)arg1 withEvent:(id)arg2;
- (void)_sizeToFitColumn:(id)arg1 withSizeToFitType:(long long)arg2;
- (void)_sizeToFitColumnMenuAction:(id)arg1;
- (void)_slowPathDrawEmptyColumnsForView:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_startObservingScrollerOfScrollViewForColumns;
- (void)_stopObservingScrollerOfScrollViewForColumns;
- (BOOL)_stretchWindowIfNecessaryToFitResizedColumnWithInfo:(struct _NSBrowserColumnResizeInfo { BOOL x1; BOOL x2; BOOL x3; id x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; }*)arg1 resizeColumnDelta:(double*)arg2;
- (void)_syncScrollerSizeOfColumn:(id)arg1;
- (void)_synchronizeTitlesAndColumnsViewFrame;
- (void)_synchronizeTitlesAndColumnsViewVisibleRect;
- (void)_tileContinuousScrollingBrowser;
- (id)_titleCellOfColumn:(long long)arg1;
- (void)_typeSelectEndCurrentSearch;
- (BOOL)_typeSelectInterpretKeyEvent:(id)arg1;
- (void)_typeSelectScheduleEndOfSearch;
- (id)_typeSelectString;
- (id)_typeSelectStringForColumn:(long long)arg1 row:(long long)arg2;
- (BOOL)_typeSelectUndoLastSearch;
- (id)_uncachedLastSelectedIndexSetForItem:(id)arg1;
- (id)_unhookColumnSubviews;
- (void)_updateNonAutomaticContentInsetsOfAllColumns;
- (void)_updateNumberOfTitleCellsIfNecessary;
- (void)_updateNumberOfTitleCellsIfNecessary:(long long)arg1;
- (BOOL)_useSnowLeopardBehavior;
- (BOOL)_userClickOrKeyInColumnShouldMaintainColumnPosition;
- (void)_validateDropForDragInfo:(id)arg1;
- (double)_validateNewWidthOfColumn:(id)arg1 width:(double)arg2;
- (id)_viewInColumn:(long long)arg1;
- (id)_viewThatShouldBecomeFirstResponder;
- (void)_viewWillResignFirstResponder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectOfColumns;
- (id)_visitedColumnContentWidths;
- (void)_willStartTrackingMouseInMatrix:(id)arg1 withEvent:(id)arg2;
- (void)_windowChangedKeyState;
- (void)_writePersistentBrowserColumns;
- (void)_zeroPinnedResizeColumnsBySharingDelta:(double)arg1 lastSharingColumn:(id)arg2 resizeInfo:(struct _NSBrowserColumnResizeInfo { BOOL x1; BOOL x2; BOOL x3; id x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; }*)arg3;
- (BOOL)abortEditing;
- (BOOL)acceptsArrowKeys;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (void)addColumn;
- (void)addColumnForItem:(id)arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (BOOL)allowsBranchSelection;
- (BOOL)allowsEmptySelection;
- (BOOL)allowsIncrementalSearching;
- (BOOL)allowsMultipleSelection;
- (BOOL)allowsTypeSelect;
- (BOOL)autohidesScroller;
- (BOOL)automaticallyAdjustsContentInsets;
- (id)backgroundColor;
- (BOOL)becomeFirstResponder;
- (void)becomeKeyWindow;
- (void)beforeDraw;
- (BOOL)canDragRowsWithIndexes:(id)arg1 inColumn:(long long)arg2 withEvent:(id)arg3;
- (id)cellPrototype;
- (long long)clickedColumn;
- (long long)clickedRow;
- (double)columnContentWidthForColumnWidth:(double)arg1;
- (long long)columnOfMatrix:(id)arg1;
- (unsigned long long)columnResizingType;
- (double)columnWidthForColumnContentWidth:(double)arg1;
- (id)columnsAutosaveName;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (id)currentTypeSelectSearchString;
- (void)dealloc;
- (double)defaultColumnWidth;
- (id)delegate;
- (void)didFinishColumnScrollWithHelper:(id)arg1;
- (void)displayAllColumns;
- (void)displayColumn:(long long)arg1;
- (void)doClick:(id)arg1;
- (void)doDoubleClick:(id)arg1;
- (SEL)doubleAction;
- (void)draggedImage:(id)arg1 beganAt:(struct CGPoint { double x1; double x2; })arg2;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint { double x1; double x2; })arg2 operation:(unsigned long long)arg3;
- (void)draggingEnded:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingExited:(id)arg1;
- (id)draggingImageForRowsWithIndexes:(id)arg1 inColumn:(long long)arg2 withEvent:(id)arg3 offset:(struct CGPoint { double x1; double x2; }*)arg4;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawTitleOfColumn:(long long)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)editItemAtIndexPath:(id)arg1 withEvent:(id)arg2 select:(BOOL)arg3;
- (void)encodeWithCoder:(id)arg1;
- (long long)firstVisibleColumn;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameOfColumn:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameOfInsideOfColumn:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameOfRow:(long long)arg1 inColumn:(long long)arg2;
- (BOOL)getRow:(long long*)arg1 column:(long long*)arg2 forPoint:(struct CGPoint { double x1; double x2; })arg3;
- (BOOL)hasHorizontalScroller;
- (BOOL)ignoreModifierKeysWhileDragging;
- (id)indexPathForColumn:(long long)arg1;
- (id)indexPathForItem:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)isLeafItem:(id)arg1;
- (BOOL)isLoaded;
- (BOOL)isOpaque;
- (BOOL)isTitled;
- (id)itemAtIndexPath:(id)arg1;
- (id)itemAtRow:(long long)arg1 column:(long long)arg2;
- (id)itemAtRow:(long long)arg1 inColumn:(long long)arg2;
- (void)keyDown:(id)arg1;
- (long long)lastColumn;
- (long long)lastVisibleColumn;
- (void)loadColumnZero;
- (id)loadedCellAtRow:(long long)arg1 column:(long long)arg2;
- (Class)matrixClass;
- (id)matrixInColumn:(long long)arg1;
- (long long)maxVisibleColumns;
- (double)minColumnWidth;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;
- (BOOL)needsPanelToBecomeKey;
- (void)noteHeightOfRowsWithIndexesChanged:(id)arg1 inColumn:(long long)arg2;
- (long long)numberOfVisibleColumns;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)parentForItem:(id)arg1;
- (id)parentForItemsInColumn:(long long)arg1;
- (id)path;
- (id)pathSeparator;
- (id)pathToColumn:(long long)arg1;
- (void)performClick:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (BOOL)prefersAllColumnUserResizing;
- (BOOL)preservesContentDuringLiveResize;
- (BOOL)refusesFirstResponder;
- (void)registerForDraggedTypes:(id)arg1;
- (void)reloadColumn:(long long)arg1;
- (void)reloadDataForRowIndexes:(id)arg1 inColumn:(long long)arg2;
- (void)reloadItem:(id)arg1 reloadChildren:(BOOL)arg2;
- (BOOL)resignFirstResponder;
- (void)resignKeyWindow;
- (BOOL)reusesColumns;
- (double)rowHeight;
- (void)scrollColumnToVisible:(long long)arg1;
- (void)scrollColumnsLeftBy:(long long)arg1;
- (void)scrollColumnsRightBy:(long long)arg1;
- (void)scrollRowToVisible:(long long)arg1 inColumn:(long long)arg2;
- (void)scrollViaScroller:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)selectRow:(long long)arg1 inColumn:(long long)arg2;
- (void)selectRowIndexes:(id)arg1 inColumn:(long long)arg2;
- (id)selectedCell;
- (id)selectedCellInColumn:(long long)arg1;
- (id)selectedCells;
- (long long)selectedColumn;
- (long long)selectedRowInColumn:(long long)arg1;
- (id)selectedRowIndexesInColumn:(long long)arg1;
- (id)selectionIndexPath;
- (id)selectionIndexPaths;
- (BOOL)sendAction;
- (BOOL)sendsActionOnArrowKeys;
- (BOOL)separatesColumns;
- (void)setAcceptsArrowKeys:(BOOL)arg1;
- (void)setAllowsBranchSelection:(BOOL)arg1;
- (void)setAllowsEmptySelection:(BOOL)arg1;
- (void)setAllowsIncrementalSearching:(BOOL)arg1;
- (void)setAllowsMultipleSelection:(BOOL)arg1;
- (void)setAllowsTypeSelect:(BOOL)arg1;
- (void)setAutohidesScroller:(BOOL)arg1;
- (void)setAutomaticallyAdjustsContentInsets:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBorderType:(unsigned long long)arg1;
- (void)setCellClass:(Class)arg1;
- (void)setCellPrototype:(id)arg1;
- (void)setColumnResizingType:(unsigned long long)arg1;
- (void)setColumnsAutosaveName:(id)arg1;
- (void)setContentInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDefaultColumnWidth:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleAction:(SEL)arg1;
- (void)setDraggingSourceOperationMask:(unsigned long long)arg1 forLocal:(BOOL)arg2;
- (void)setEnabled:(BOOL)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHasHorizontalScroller:(BOOL)arg1;
- (void)setLastColumn:(long long)arg1;
- (void)setMatrixClass:(Class)arg1;
- (void)setMaxVisibleColumns:(long long)arg1;
- (void)setMenu:(id)arg1;
- (void)setMinColumnWidth:(double)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNextKeyView:(id)arg1;
- (BOOL)setPath:(id)arg1;
- (void)setPathSeparator:(id)arg1;
- (void)setPrefersAllColumnUserResizing:(BOOL)arg1;
- (void)setRefusesFirstResponder:(BOOL)arg1;
- (void)setReusesColumns:(BOOL)arg1;
- (void)setRowHeight:(double)arg1;
- (void)setSelectionIndexPath:(id)arg1;
- (void)setSelectionIndexPaths:(id)arg1;
- (void)setSendsActionOnArrowKeys:(BOOL)arg1;
- (void)setSeparatesColumns:(BOOL)arg1;
- (void)setTakesTitleFromPreviousColumn:(BOOL)arg1;
- (void)setTitle:(id)arg1 ofColumn:(long long)arg2;
- (void)setTitled:(BOOL)arg1;
- (void)setUserColumnResizingAutoresizesWindow:(BOOL)arg1;
- (void)setWidth:(double)arg1 ofColumn:(long long)arg2;
- (BOOL)takesTitleFromPreviousColumn;
- (void)tile;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleFrameOfColumn:(long long)arg1;
- (double)titleHeight;
- (id)titleOfColumn:(long long)arg1;
- (void)unregisterDraggedTypes;
- (void)updateCell:(id)arg1;
- (void)updateCellInside:(id)arg1;
- (void)updateLayer;
- (void)updateScroller;
- (BOOL)userColumnResizingAutoresizesWindow;
- (void)validateVisibleColumns;
- (void)viewWillDraw;
- (BOOL)wantsUpdateLayer;
- (double)widthOfColumn:(long long)arg1;

// NSBrowser (NSAnimation)

+ (id)defaultAnimationForKey:(id)arg1;

- (Class)_animatorClass;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (id)valueForKey:(id)arg1;

// NSBrowser (NSBrowserAccessibility)

+ (BOOL)accessibilityIsSingleCelled;

- (BOOL)_isAccessibilityContentSectionCandidate;
- (id)accessibilityAttributeNames;
- (id)accessibilityColumnTitlesAttribute;
- (id)accessibilityColumnsAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityHorizontalScrollBarAttribute;
- (BOOL)accessibilityIsColumnTitlesAttributeSettable;
- (BOOL)accessibilityIsColumnsAttributeSettable;
- (BOOL)accessibilityIsHorizontalScrollBarAttributeSettable;
- (BOOL)accessibilityIsVisibleColumnsAttributeSettable;
- (id)accessibilityRoleAttribute;
- (id)accessibilityVisibleColumnsAttribute;

// NSBrowser (NSIBBrowserIntegration)

- (id)ns_widgetType;

@end
