/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTokenAttachmentCell : NSTextAttachmentCell {
    id  _representedObject;
    struct { 
        unsigned int _selected : 1; 
        unsigned int _inSelection : 1; 
        unsigned int _edgeStyle : 2; 
        unsigned int _style : 4; 
        unsigned int _useTintColor : 1; 
        unsigned int _needsSeparator : 1; 
        unsigned int _reserved : 22; 
    }  _tacFlags;
    id  _textColor;
    id  _view;
}

@property (atomic, readonly) BOOL alwaysShowBackground;
@property (atomic, readonly) BOOL neverShowSeparator;
@property (getter=isSelected, atomic, readonly) BOOL selected;
@property (atomic, readwrite) unsigned long long tokenStyle;

+ (BOOL)_getLineSpacing:(double*)arg1 forTokenStyle:(unsigned long long)arg2;
+ (BOOL)_getTypesetterBehavior:(long long*)arg1 forTokenStyle:(unsigned long long)arg2;
+ (struct { BOOL x1; BOOL x2; BOOL x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; BOOL x13; long long x14; BOOL x15; double x16; }*)_metricsForTokenStyle:(unsigned long long)arg1;
+ (void)initialize;
+ (BOOL)usesTintColor;

- (BOOL)_hasMenu;
- (id)_immediateActionAnimationControllerForTokenAttachment:(id)arg1 inTextView:(id)arg2;
- (unsigned long long)_interiorContentAppearanceInView:(id)arg1;
- (BOOL)_isActiveInView:(id)arg1;
- (struct { BOOL x1; BOOL x2; BOOL x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; BOOL x13; long long x14; BOOL x15; double x16; }*)_metrics;
- (BOOL)_needsSeparator;
- (void)_resetNeedsSeparatorWithLayoutManager:(id)arg1 characterIndex:(unsigned long long)arg2;
- (void)_setNeedsSeparator:(BOOL)arg1;
- (BOOL)_shouldShowPullDownImage;
- (BOOL)_supportsSeparators;
- (long long)_typesetterBehavior;
- (BOOL)alwaysShowBackground;
- (struct CGPoint { double x1; double x2; })cellBaselineOffset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cellFrameForTextContainer:(id)arg1 proposedLineFragment:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 glyphPosition:(struct CGPoint { double x1; double x2; })arg3 characterIndex:(unsigned long long)arg4;
- (struct CGSize { double x1; double x2; })cellSize;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawPullDownImageWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawTokenInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOptions:(id)arg2;
- (void)drawTokenWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 characterIndex:(unsigned long long)arg3;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 characterIndex:(unsigned long long)arg3 layoutManager:(id)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)initTextCell:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (long long)interiorBackgroundStyle;
- (BOOL)isEnabled;
- (BOOL)isSelected;
- (id)menu;
- (BOOL)neverShowSeparator;
- (id)pullDownImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pullDownRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pullDownTrackingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)representedObject;
- (void)setRepresentedObject:(id)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTokenStyle:(unsigned long long)arg1;
- (BOOL)shouldDrawSeparator;
- (BOOL)shouldDrawTokenBackground;
- (id)textColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)tokenBackgroundColor;
- (id)tokenForegroundColor;
- (unsigned long long)tokenStyle;
- (id)tokenTintColor;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 atCharacterIndex:(unsigned long long)arg4 untilMouseUp:(BOOL)arg5;
- (BOOL)wantsToTrackMouseForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 atCharacterIndex:(unsigned long long)arg4;

@end
