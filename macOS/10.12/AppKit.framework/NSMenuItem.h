/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSMenuItem : NSObject <NSAccessibility, NSAccessibilityElement, NSCoding, NSCopying, NSImmediateActionAnimationController, NSMenuItem, NSPopoverPresenting, NSUserInterfaceItemIdentification, NSValidatedUserInterfaceItem> {
    SEL  _action;
    id  _extraData;
    NSString * _keyEquivalent;
    unsigned char  _keyEquivalentModifierMask;
    NSMenu * _menu;
    struct __miFlags { 
        unsigned int keGenerationCount : 8; 
        unsigned int disabled : 1; 
        unsigned int isSeparator : 1; 
        unsigned int hidden : 1; 
        unsigned int alternate : 1; 
        unsigned int moreAlternate : 1; 
        unsigned int singleAlternate : 1; 
        unsigned int indent : 4; 
        unsigned int keShareMode : 3; 
        unsigned int state : 2; 
        unsigned int destructive : 1; 
        unsigned int RESERVED1 : 1; 
        unsigned int limitedView : 1; 
        unsigned int nextItemIsAlternate : 1; 
        unsigned int blockKE : 1; 
        unsigned int ignoredForAccessibility : 1; 
        unsigned int hiddenActiveKE : 1; 
        unsigned int noRepeatKEs : 1; 
        unsigned int targetWeak : 1; 
    }  _miFlags;
    id  _repObject;
    NSMenu * _submenu;
    long long  _tag;
    id  _target;
    NSString * _title;
    NSString * _uiid;
}

@property (atomic, readonly) BOOL _wantsDeepAnimationCallbacks;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property (atomic, readwrite, copy) NSArray *accessibilityAllowedValues;
@property (getter=isAccessibilityAlternateUIVisible, atomic, readwrite) BOOL accessibilityAlternateUIVisible;
@property (atomic, readwrite, retain) id accessibilityApplicationFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityCancelButton;
@property (atomic, readwrite, copy) NSArray *accessibilityChildren;
@property (atomic, readwrite, retain) id accessibilityClearButton;
@property (atomic, readwrite, retain) id accessibilityCloseButton;
@property (atomic, readwrite) long long accessibilityColumnCount;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityColumnIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnTitles;
@property (atomic, readwrite, copy) NSArray *accessibilityColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityContents;
@property (atomic, readwrite, retain) id accessibilityCriticalValue;
@property (atomic, readwrite, retain) id accessibilityDecrementButton;
@property (atomic, readwrite, retain) id accessibilityDefaultButton;
@property (getter=isAccessibilityDisclosed, atomic, readwrite) BOOL accessibilityDisclosed;
@property (atomic, readwrite) id accessibilityDisclosedByRow;
@property (atomic, readwrite, retain) id accessibilityDisclosedRows;
@property (atomic, readwrite) long long accessibilityDisclosureLevel;
@property (atomic, readwrite, copy) NSString *accessibilityDocument;
@property (getter=isAccessibilityEdited, atomic, readwrite) BOOL accessibilityEdited;
@property (getter=isAccessibilityElement, atomic, readwrite) BOOL accessibilityElement;
@property (getter=isAccessibilityEnabled, atomic, readwrite) BOOL accessibilityEnabled;
@property (getter=isAccessibilityExpanded, atomic, readwrite) BOOL accessibilityExpanded;
@property (atomic, readwrite) id accessibilityExtrasMenuBar;
@property (atomic, readwrite, copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityFocused, atomic, readwrite) BOOL accessibilityFocused;
@property (atomic, readwrite, retain) id accessibilityFocusedWindow;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property (getter=isAccessibilityFrontmost, atomic, readwrite) BOOL accessibilityFrontmost;
@property (atomic, readwrite, retain) id accessibilityFullScreenButton;
@property (atomic, readwrite, retain) id accessibilityGrowArea;
@property (atomic, readwrite, copy) NSArray *accessibilityHandles;
@property (atomic, readwrite, retain) id accessibilityHeader;
@property (atomic, readwrite, copy) NSString *accessibilityHelp;
@property (getter=isAccessibilityHidden, atomic, readwrite) BOOL accessibilityHidden;
@property (atomic, readwrite, retain) id accessibilityHorizontalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityHorizontalUnitDescription;
@property (atomic, readwrite) long long accessibilityHorizontalUnits;
@property (atomic, readwrite, copy) NSString *accessibilityIdentifier;
@property (atomic, readwrite, retain) id accessibilityIncrementButton;
@property (atomic, readwrite) long long accessibilityIndex;
@property (atomic, readwrite) long long accessibilityInsertionPointLineNumber;
@property (atomic, readwrite, copy) NSString *accessibilityLabel;
@property (atomic, readwrite, copy) NSArray *accessibilityLabelUIElements;
@property (atomic, readwrite) float accessibilityLabelValue;
@property (atomic, readwrite, copy) NSArray *accessibilityLinkedUIElements;
@property (getter=isAccessibilityMain, atomic, readwrite) BOOL accessibilityMain;
@property (atomic, readwrite, retain) id accessibilityMainWindow;
@property (atomic, readwrite, retain) id accessibilityMarkerGroupUIElement;
@property (atomic, readwrite, copy) NSString *accessibilityMarkerTypeDescription;
@property (atomic, readwrite, copy) NSArray *accessibilityMarkerUIElements;
@property (atomic, readwrite, retain) id accessibilityMarkerValues;
@property (atomic, readwrite, retain) id accessibilityMaxValue;
@property (atomic, readwrite) id accessibilityMenuBar;
@property (atomic, readwrite, retain) id accessibilityMinValue;
@property (atomic, readwrite, retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized, atomic, readwrite) BOOL accessibilityMinimized;
@property (getter=isAccessibilityModal, atomic, readwrite) BOOL accessibilityModal;
@property (atomic, readwrite, copy) NSArray *accessibilityNextContents;
@property (atomic, readwrite) long long accessibilityNumberOfCharacters;
@property (getter=isAccessibilityOrderedByRow, atomic, readwrite) BOOL accessibilityOrderedByRow;
@property (atomic, readwrite) long long accessibilityOrientation;
@property (atomic, readwrite, retain) id accessibilityOverflowButton;
@property (atomic, readwrite) id accessibilityParent;
@property (atomic, readwrite, copy) NSString *accessibilityPlaceholderValue;
@property (atomic, readwrite, copy) NSArray *accessibilityPreviousContents;
@property (getter=isAccessibilityProtectedContent, atomic, readwrite) BOOL accessibilityProtectedContent;
@property (atomic, readwrite, retain) id accessibilityProxy;
@property (getter=isAccessibilityRequired, atomic, readwrite) BOOL accessibilityRequired;
@property (atomic, readwrite, copy) NSString *accessibilityRole;
@property (atomic, readwrite, copy) NSString *accessibilityRoleDescription;
@property (atomic, readwrite) long long accessibilityRowCount;
@property (atomic, readwrite, copy) NSArray *accessibilityRowHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityRowIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityRows;
@property (atomic, readwrite) long long accessibilityRulerMarkerType;
@property (atomic, readwrite, retain) id accessibilitySearchButton;
@property (atomic, readwrite, retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected, atomic, readwrite) BOOL accessibilitySelected;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedCells;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedChildren;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedColumns;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedRows;
@property (atomic, readwrite, copy) NSString *accessibilitySelectedText;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySelectedTextRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedTextRanges;
@property (atomic, readwrite, copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySharedCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedFocusElements;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedTextUIElements;
@property (atomic, readwrite, retain) id accessibilityShownMenu;
@property (atomic, readwrite) long long accessibilitySortDirection;
@property (atomic, readwrite, copy) NSArray *accessibilitySplitters;
@property (atomic, readwrite, copy) NSString *accessibilitySubrole;
@property (atomic, readwrite, copy) NSArray *accessibilityTabs;
@property (atomic, readwrite, copy) NSString *accessibilityTitle;
@property (atomic, readwrite) id accessibilityTitleUIElement;
@property (atomic, readwrite, retain) id accessibilityToolbarButton;
@property (atomic, readwrite) id accessibilityTopLevelUIElement;
@property (atomic, readwrite, copy) NSURL *accessibilityURL;
@property (atomic, readwrite, copy) NSString *accessibilityUnitDescription;
@property (atomic, readwrite) long long accessibilityUnits;
@property (atomic, readwrite, retain) id accessibilityValue;
@property (atomic, readwrite, copy) NSString *accessibilityValueDescription;
@property (atomic, readwrite, retain) id accessibilityVerticalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityVerticalUnitDescription;
@property (atomic, readwrite) long long accessibilityVerticalUnits;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleCells;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityVisibleCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleRows;
@property (atomic, readwrite, retain) id accessibilityWarningValue;
@property (atomic, readwrite) id accessibilityWindow;
@property (atomic, readwrite, copy) NSArray *accessibilityWindows;
@property (atomic, readwrite, retain) id accessibilityZoomButton;
@property (atomic, readonly) SEL action;
@property (atomic, readwrite) SEL action;
@property (getter=isAlternate, atomic, readwrite) BOOL alternate;
@property (atomic, readwrite, copy) NSAttributedString *attributedTitle;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (getter=isEnabled, atomic, readwrite) BOOL enabled;
@property (atomic, readonly) BOOL hasSubmenu;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isHidden, atomic, readwrite) BOOL hidden;
@property (getter=isHiddenOrHasHiddenAncestor, atomic, readonly) BOOL hiddenOrHasHiddenAncestor;
@property (getter=isHighlighted, atomic, readonly) BOOL highlighted;
@property (atomic, readwrite, copy) NSString *identifier;
@property (atomic, readwrite, retain) NSImage *image;
@property (atomic, readwrite) long long indentationLevel;
@property (atomic, readwrite, copy) NSString *keyEquivalent;
@property (atomic, readwrite) unsigned long long keyEquivalentModifierMask;
@property (atomic, readwrite) NSMenu *menu;
@property (atomic, readwrite, retain) NSImage *mixedStateImage;
@property (atomic, readwrite, retain) NSImage *offStateImage;
@property (atomic, readwrite, retain) NSImage *onStateImage;
@property (atomic, readonly) NSMenuItem *parentItem;
@property (atomic, readwrite, retain) id representedObject;
@property (getter=isSeparatorItem, atomic, readonly) BOOL separatorItem;
@property (atomic, readwrite) long long state;
@property (atomic, readwrite, retain) NSMenu *submenu;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) long long tag;
@property (atomic, readwrite) long long tag;
@property (atomic, readwrite) id target;
@property (atomic, readwrite, copy) NSString *title;
@property (atomic, readwrite, copy) NSString *toolTip;
@property (atomic, readonly, copy) NSString *userKeyEquivalent;
@property (atomic, readwrite, retain) NSView *view;

+ (id)_defaultWindowMenuStateImageDirtyWindow;
+ (id)_defaultWindowMenuStateImageKeyWindow;
+ (id)_defaultWindowMenuStateImageMinimizedWindow;
+ (BOOL)_hasTitlePathBasedUserKeyEquivalent;
+ (struct __CFString { }*)_menuItemViewerHIViewClassName;
+ (void)_updateUserKEsAfterActivation:(id)arg1;
+ (void)initialize;
+ (id)separatorItem;
+ (void)setUsesUserKeyEquivalents:(BOOL)arg1;
+ (id)standardCopyMenuItem;
+ (id)standardDeleteMenuItem;
+ (id)standardPasteMenuItem;
+ (id)standardQuickLookMenuItem;
+ (id)standardShareMenuItemForItems:(id)arg1;
+ (id)standardShareMenuItemWithItems:(id)arg1;
+ (BOOL)usesUserKeyEquivalents;

- (id)_accessibilityLabel;
- (id)_alternateAttributedTitle;
- (id)_applicableImage;
- (unsigned long long)_applicableKeyEquivalentModifierMask;
- (id)_bindingAdaptor;
- (BOOL)_blockKE;
- (void)_cacheUserKeyEquivalentInfo:(struct NSMenuUserKeyEquivalentInfo_t { id x1; unsigned char x2; })arg1;
- (struct CGSize { double x1; double x2; })_cachedAttributedTitleSizeForMeasuring:(BOOL)arg1 hasAttachment:(BOOL*)arg2;
- (BOOL)_canBeHighlighted;
- (BOOL)_canSendAction:(SEL)arg1;
- (BOOL)_canShareKeyEquivalentWithItem:(id)arg1;
- (long long)_changedFlags;
- (struct CGSize { double x1; double x2; })_computeBoundingRectSizeForTitle:(id)arg1 hasAttachment:(BOOL*)arg2;
- (void)_configureAsSeparatorItem;
- (void)_corePerformAction;
- (long long)_currentStateImageEnumeration;
- (unsigned long long)_defaultKeyEquivalentPriority;
- (id)_desiredKeyEquivalent;
- (unsigned long long)_desiredKeyEquivalentModifierMask;
- (struct NSMenuUserKeyEquivalentInfo_t { id x1; unsigned char x2; })_fetchFreshUserKeyEquivalentInfo;
- (struct OpaqueIconRef { }*)_iconRef;
- (BOOL)_ignoredForAccessibility;
- (id)_imageForState:(long long)arg1;
- (void)_internalPerformActionThroughMenuIfPossible;
- (BOOL)_isAlternateDespiteNonmatchingModifiers;
- (BOOL)_isEnabled;
- (BOOL)_isHelpMenu;
- (BOOL)_isHelpMenuAppKitOnly;
- (BOOL)_isHidden;
- (unsigned long long)_keyEquivalentPriority;
- (unsigned short)_keyEquivalentVirtualKeyCode;
- (BOOL)_mayBeInvolvedInMenuItemPath;
- (id)_menuItemViewer;
- (BOOL)_menuTitleMayBeInvolvedInMenuPaths;
- (unsigned long long)_newItemsCount;
- (BOOL)_nextItemIsAlternate;
- (id)_rawKeyEquivalent;
- (unsigned long long)_rawKeyEquivalentModifierMask;
- (void)_recacheUserKeyEquivalentOnlyIfStale:(BOOL)arg1;
- (void)_recursivelyUpdateKeyEquivalents;
- (BOOL)_requiresKERegistration;
- (BOOL)_requiresModifiersToBeVisible;
- (BOOL)_respectsKeyEquivalentForRepeatKeys;
- (BOOL)_respectsKeyEquivalentWhileHidden;
- (void)_sendItemSelectedNote;
- (void)_setAlternateAttributedTitle:(id)arg1;
- (void)_setBindingAdaptor:(id)arg1;
- (void)_setBlockKE:(BOOL)arg1;
- (void)_setChangedFlags:(long long)arg1;
- (void)_setDefaultKeyEquivalentPriority:(unsigned long long)arg1;
- (void)_setHidden:(BOOL)arg1;
- (void)_setIconRef:(struct OpaqueIconRef { }*)arg1;
- (void)_setIgnoredForAccessibility:(BOOL)arg1;
- (void)_setIsAlternateDespiteNonmatchingModifiers:(BOOL)arg1;
- (void)_setKeyEquivalentVirtualKeyCode:(unsigned short)arg1;
- (void)_setMenuItemBelongsToContextualMenu:(BOOL)arg1;
- (void)_setNewItemsCount:(unsigned long long)arg1;
- (void)_setNextItemIsAlternate:(BOOL)arg1;
- (void)_setRequiresModifiersToBeVisible:(BOOL)arg1;
- (void)_setRespectsKeyEquivalentForRepeatKeys:(BOOL)arg1;
- (void)_setRespectsKeyEquivalentWhileHidden:(BOOL)arg1;
- (void)_setSubmenu:(id)arg1;
- (void)_setViewHandlesEvents:(BOOL)arg1;
- (void)_setViewNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_shouldForceShiftModifierWithKeyEquivalent:(id)arg1;
- (id)_startingWindowForSendAction:(SEL)arg1;
- (id)_superitem;
- (id)_titleForUserKeyEquivalents;
- (id)_titlePathForUserKeyEquivalents;
- (BOOL)_viewHandlesEvents;
- (struct CGPoint { double x1; double x2; })accessibilityActivationPoint;
- (id)accessibilityAllowedValues;
- (id)accessibilityApplicationFocusedUIElement;
- (id)accessibilityAttributedStringForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)accessibilityAuditIssues;
- (id)accessibilityCancelButton;
- (id)accessibilityCellForColumn:(long long)arg1 row:(long long)arg2;
- (id)accessibilityChildren;
- (id)accessibilityChildrenInNavigationOrder;
- (id)accessibilityClearButton;
- (id)accessibilityCloseButton;
- (long long)accessibilityColumnCount;
- (id)accessibilityColumnHeaderUIElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityColumnIndexRange;
- (id)accessibilityColumnTitles;
- (id)accessibilityColumns;
- (id)accessibilityContentSiblingAbove;
- (id)accessibilityContentSiblingBelow;
- (id)accessibilityContents;
- (id)accessibilityCriticalValue;
- (id)accessibilityCustomChoosers;
- (id)accessibilityDecrementButton;
- (id)accessibilityDefaultButton;
- (id)accessibilityDisclosedByRow;
- (id)accessibilityDisclosedRows;
- (long long)accessibilityDisclosureLevel;
- (id)accessibilityDocument;
- (id)accessibilityExtrasMenuBar;
- (id)accessibilityFilename;
- (id)accessibilityFocusedWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrameForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrameInParentSpace;
- (id)accessibilityFullScreenButton;
- (id)accessibilityGrowArea;
- (id)accessibilityHandles;
- (id)accessibilityHeader;
- (id)accessibilityHeaderGroup;
- (id)accessibilityHelp;
- (id)accessibilityHorizontalScrollBar;
- (id)accessibilityHorizontalUnitDescription;
- (long long)accessibilityHorizontalUnits;
- (id)accessibilityIdentifier;
- (id)accessibilityIncrementButton;
- (long long)accessibilityIndex;
- (long long)accessibilityInsertionPointLineNumber;
- (id)accessibilityLabel;
- (id)accessibilityLabelUIElements;
- (float)accessibilityLabelValue;
- (struct CGPoint { double x1; double x2; })accessibilityLayoutPointForScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })accessibilityLayoutSizeForScreenSize:(struct CGSize { double x1; double x2; })arg1;
- (long long)accessibilityLineForIndex:(long long)arg1;
- (id)accessibilityLinkedUIElements;
- (id)accessibilityMainWindow;
- (id)accessibilityMarkerGroupUIElement;
- (id)accessibilityMarkerTypeDescription;
- (id)accessibilityMarkerUIElements;
- (id)accessibilityMarkerValues;
- (id)accessibilityMaxValue;
- (id)accessibilityMenuBar;
- (id)accessibilityMinValue;
- (id)accessibilityMinimizeButton;
- (id)accessibilityNextContentSibling;
- (id)accessibilityNextContents;
- (long long)accessibilityNumberOfCharacters;
- (long long)accessibilityOrientation;
- (id)accessibilityOverflowButton;
- (id)accessibilityParent;
- (BOOL)accessibilityPerformCancel;
- (BOOL)accessibilityPerformConfirm;
- (BOOL)accessibilityPerformDecrement;
- (BOOL)accessibilityPerformDelete;
- (BOOL)accessibilityPerformIncrement;
- (BOOL)accessibilityPerformPick;
- (BOOL)accessibilityPerformPress;
- (BOOL)accessibilityPerformRaise;
- (BOOL)accessibilityPerformShowAlternateUI;
- (BOOL)accessibilityPerformShowDefaultUI;
- (BOOL)accessibilityPerformShowMenu;
- (id)accessibilityPlaceholderValue;
- (id)accessibilityPreviousContentSibling;
- (id)accessibilityPreviousContents;
- (id)accessibilityProxy;
- (id)accessibilityRTFForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRangeForIndex:(long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRangeForLine:(long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRangeForPosition:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityResultsForSearchPredicate:(id)arg1;
- (id)accessibilityRole;
- (id)accessibilityRoleDescription;
- (long long)accessibilityRowCount;
- (id)accessibilityRowHeaderUIElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityRowIndexRange;
- (id)accessibilityRows;
- (long long)accessibilityRulerMarkerType;
- (struct CGPoint { double x1; double x2; })accessibilityScreenPointForLayoutPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })accessibilityScreenSizeForLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (id)accessibilitySearchButton;
- (id)accessibilitySearchMenu;
- (id)accessibilitySections;
- (id)accessibilitySelectedCells;
- (id)accessibilitySelectedChildren;
- (id)accessibilitySelectedColumns;
- (id)accessibilitySelectedRows;
- (id)accessibilitySelectedText;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilitySelectedTextRange;
- (id)accessibilitySelectedTextRanges;
- (id)accessibilityServesAsTitleForUIElements;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilitySharedCharacterRange;
- (id)accessibilitySharedFocusElements;
- (id)accessibilitySharedTextUIElements;
- (id)accessibilityShownMenu;
- (long long)accessibilitySortDirection;
- (id)accessibilitySplitters;
- (id)accessibilityStringForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityStyleRangeForIndex:(long long)arg1;
- (id)accessibilitySubrole;
- (id)accessibilityTabs;
- (id)accessibilityTitle;
- (id)accessibilityTitleUIElement;
- (id)accessibilityToolbarButton;
- (id)accessibilityTopLevelUIElement;
- (id)accessibilityURL;
- (id)accessibilityUnitDescription;
- (long long)accessibilityUnits;
- (id)accessibilityValue;
- (id)accessibilityValueDescription;
- (id)accessibilityVerticalScrollBar;
- (id)accessibilityVerticalUnitDescription;
- (long long)accessibilityVerticalUnits;
- (id)accessibilityVisibleCells;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })accessibilityVisibleCharacterRange;
- (id)accessibilityVisibleChildren;
- (id)accessibilityVisibleColumns;
- (id)accessibilityVisibleRows;
- (id)accessibilityWarningValue;
- (id)accessibilityWindow;
- (id)accessibilityWindows;
- (id)accessibilityZoomButton;
- (SEL)action;
- (id)attributedTitle;
- (long long)backgroundStyle;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)font;
- (BOOL)hasSubmenu;
- (id)identifier;
- (id)image;
- (long long)indentationLevel;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithTitle:(id)arg1 action:(SEL)arg2 keyEquivalent:(id)arg3;
- (BOOL)isAccessibilityAlternateUIVisible;
- (BOOL)isAccessibilityDisclosed;
- (BOOL)isAccessibilityEdited;
- (BOOL)isAccessibilityElement;
- (BOOL)isAccessibilityEnabled;
- (BOOL)isAccessibilityEnhancedUserInterface;
- (BOOL)isAccessibilityExpanded;
- (BOOL)isAccessibilityFocused;
- (BOOL)isAccessibilityFrontmost;
- (BOOL)isAccessibilityHidden;
- (BOOL)isAccessibilityMain;
- (BOOL)isAccessibilityMimicNativeView;
- (BOOL)isAccessibilityMinimized;
- (BOOL)isAccessibilityModal;
- (BOOL)isAccessibilityOrderedByRow;
- (BOOL)isAccessibilityProtectedContent;
- (BOOL)isAccessibilityRequired;
- (BOOL)isAccessibilitySelected;
- (BOOL)isAccessibilitySelectorAllowed:(SEL)arg1;
- (BOOL)isAlternate;
- (BOOL)isDestructive;
- (BOOL)isEnabled;
- (BOOL)isHidden;
- (BOOL)isHiddenOrHasHiddenAncestor;
- (BOOL)isHighlighted;
- (BOOL)isSeparatorItem;
- (id)keyEquivalent;
- (unsigned long long)keyEquivalentModifierMask;
- (long long)keyEquivalentSharingMode;
- (id)menu;
- (id)mixedStateImage;
- (id)mnemonic;
- (unsigned long long)mnemonicLocation;
- (id)offStateImage;
- (id)onStateImage;
- (id)parentItem;
- (id)representedObject;
- (void)setAccessibilityActivationPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAccessibilityAllowedValues:(id)arg1;
- (void)setAccessibilityAlternateUIVisible:(BOOL)arg1;
- (void)setAccessibilityApplicationFocusedUIElement:(id)arg1;
- (void)setAccessibilityAuditIssues:(id)arg1;
- (void)setAccessibilityCancelButton:(id)arg1;
- (void)setAccessibilityChildren:(id)arg1;
- (void)setAccessibilityChildrenInNavigationOrder:(id)arg1;
- (void)setAccessibilityClearButton:(id)arg1;
- (void)setAccessibilityCloseButton:(id)arg1;
- (void)setAccessibilityColumnCount:(long long)arg1;
- (void)setAccessibilityColumnHeaderUIElements:(id)arg1;
- (void)setAccessibilityColumnIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilityColumnTitles:(id)arg1;
- (void)setAccessibilityColumns:(id)arg1;
- (void)setAccessibilityContentSiblingAbove:(id)arg1;
- (void)setAccessibilityContentSiblingBelow:(id)arg1;
- (void)setAccessibilityContents:(id)arg1;
- (void)setAccessibilityCriticalValue:(id)arg1;
- (void)setAccessibilityCustomChoosers:(id)arg1;
- (void)setAccessibilityDecrementButton:(id)arg1;
- (void)setAccessibilityDefaultButton:(id)arg1;
- (void)setAccessibilityDisclosed:(BOOL)arg1;
- (void)setAccessibilityDisclosedByRow:(id)arg1;
- (void)setAccessibilityDisclosedRows:(id)arg1;
- (void)setAccessibilityDisclosureLevel:(long long)arg1;
- (void)setAccessibilityDocument:(id)arg1;
- (void)setAccessibilityEdited:(BOOL)arg1;
- (void)setAccessibilityElement:(BOOL)arg1;
- (void)setAccessibilityEnabled:(BOOL)arg1;
- (void)setAccessibilityEnhancedUserInterface:(BOOL)arg1;
- (void)setAccessibilityExpanded:(BOOL)arg1;
- (void)setAccessibilityExtrasMenuBar:(id)arg1;
- (void)setAccessibilityFilename:(id)arg1;
- (void)setAccessibilityFocused:(BOOL)arg1;
- (void)setAccessibilityFocusedWindow:(id)arg1;
- (void)setAccessibilityFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAccessibilityFrameInParentSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAccessibilityFrontmost:(BOOL)arg1;
- (void)setAccessibilityFullScreenButton:(id)arg1;
- (void)setAccessibilityGrowArea:(id)arg1;
- (void)setAccessibilityHandles:(id)arg1;
- (void)setAccessibilityHeader:(id)arg1;
- (void)setAccessibilityHeaderGroup:(id)arg1;
- (void)setAccessibilityHelp:(id)arg1;
- (void)setAccessibilityHidden:(BOOL)arg1;
- (void)setAccessibilityHorizontalScrollBar:(id)arg1;
- (void)setAccessibilityHorizontalUnitDescription:(id)arg1;
- (void)setAccessibilityHorizontalUnits:(long long)arg1;
- (void)setAccessibilityIdentifier:(id)arg1;
- (void)setAccessibilityIncrementButton:(id)arg1;
- (void)setAccessibilityIndex:(long long)arg1;
- (void)setAccessibilityInsertionPointLineNumber:(long long)arg1;
- (void)setAccessibilityLabel:(id)arg1;
- (void)setAccessibilityLabelUIElements:(id)arg1;
- (void)setAccessibilityLabelValue:(float)arg1;
- (void)setAccessibilityLinkedUIElements:(id)arg1;
- (void)setAccessibilityMain:(BOOL)arg1;
- (void)setAccessibilityMainWindow:(id)arg1;
- (void)setAccessibilityMarkerGroupUIElement:(id)arg1;
- (void)setAccessibilityMarkerTypeDescription:(id)arg1;
- (void)setAccessibilityMarkerUIElements:(id)arg1;
- (void)setAccessibilityMarkerValues:(id)arg1;
- (void)setAccessibilityMaxValue:(id)arg1;
- (void)setAccessibilityMenuBar:(id)arg1;
- (void)setAccessibilityMimicNativeView:(BOOL)arg1;
- (void)setAccessibilityMinValue:(id)arg1;
- (void)setAccessibilityMinimizeButton:(id)arg1;
- (void)setAccessibilityMinimized:(BOOL)arg1;
- (void)setAccessibilityModal:(BOOL)arg1;
- (void)setAccessibilityNextContents:(id)arg1;
- (void)setAccessibilityNumberOfCharacters:(long long)arg1;
- (void)setAccessibilityOrderedByRow:(BOOL)arg1;
- (void)setAccessibilityOrientation:(long long)arg1;
- (void)setAccessibilityOverflowButton:(id)arg1;
- (void)setAccessibilityParent:(id)arg1;
- (void)setAccessibilityPlaceholderValue:(id)arg1;
- (void)setAccessibilityPreviousContents:(id)arg1;
- (void)setAccessibilityProtectedContent:(BOOL)arg1;
- (void)setAccessibilityProxy:(id)arg1;
- (void)setAccessibilityRequired:(BOOL)arg1;
- (void)setAccessibilityRole:(id)arg1;
- (void)setAccessibilityRoleDescription:(id)arg1;
- (void)setAccessibilityRowCount:(long long)arg1;
- (void)setAccessibilityRowHeaderUIElements:(id)arg1;
- (void)setAccessibilityRowIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilityRows:(id)arg1;
- (void)setAccessibilityRulerMarkerType:(long long)arg1;
- (void)setAccessibilitySearchButton:(id)arg1;
- (void)setAccessibilitySearchMenu:(id)arg1;
- (void)setAccessibilitySections:(id)arg1;
- (void)setAccessibilitySelected:(BOOL)arg1;
- (void)setAccessibilitySelectedCells:(id)arg1;
- (void)setAccessibilitySelectedChildren:(id)arg1;
- (void)setAccessibilitySelectedColumns:(id)arg1;
- (void)setAccessibilitySelectedRows:(id)arg1;
- (void)setAccessibilitySelectedText:(id)arg1;
- (void)setAccessibilitySelectedTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilitySelectedTextRanges:(id)arg1;
- (void)setAccessibilityServesAsTitleForUIElements:(id)arg1;
- (void)setAccessibilitySharedCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilitySharedFocusElements:(id)arg1;
- (void)setAccessibilitySharedTextUIElements:(id)arg1;
- (void)setAccessibilityShownMenu:(id)arg1;
- (void)setAccessibilitySortDirection:(long long)arg1;
- (void)setAccessibilitySplitters:(id)arg1;
- (void)setAccessibilitySubrole:(id)arg1;
- (void)setAccessibilityTabs:(id)arg1;
- (void)setAccessibilityTitle:(id)arg1;
- (void)setAccessibilityTitleUIElement:(id)arg1;
- (void)setAccessibilityToolbarButton:(id)arg1;
- (void)setAccessibilityTopLevelUIElement:(id)arg1;
- (void)setAccessibilityURL:(id)arg1;
- (void)setAccessibilityUnitDescription:(id)arg1;
- (void)setAccessibilityUnits:(long long)arg1;
- (void)setAccessibilityValue:(id)arg1;
- (void)setAccessibilityValueDescription:(id)arg1;
- (void)setAccessibilityVerticalScrollBar:(id)arg1;
- (void)setAccessibilityVerticalUnitDescription:(id)arg1;
- (void)setAccessibilityVerticalUnits:(long long)arg1;
- (void)setAccessibilityVisibleCells:(id)arg1;
- (void)setAccessibilityVisibleCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setAccessibilityVisibleChildren:(id)arg1;
- (void)setAccessibilityVisibleColumns:(id)arg1;
- (void)setAccessibilityVisibleRows:(id)arg1;
- (void)setAccessibilityWarningValue:(id)arg1;
- (void)setAccessibilityWindow:(id)arg1;
- (void)setAccessibilityWindows:(id)arg1;
- (void)setAccessibilityZoomButton:(id)arg1;
- (void)setAction:(SEL)arg1;
- (void)setAlternate:(BOOL)arg1;
- (void)setAttributedTitle:(id)arg1;
- (void)setDestructive:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setIndentationLevel:(long long)arg1;
- (void)setKeyEquivalent:(id)arg1;
- (void)setKeyEquivalentModifierMask:(unsigned long long)arg1;
- (void)setKeyEquivalentSharingMode:(long long)arg1;
- (void)setMenu:(id)arg1;
- (void)setMixedStateImage:(id)arg1;
- (void)setMnemonicLocation:(unsigned long long)arg1;
- (void)setNextContentSibling:(id)arg1;
- (void)setOffStateImage:(id)arg1;
- (void)setOnStateImage:(id)arg1;
- (void)setPreviousContentSibling:(id)arg1;
- (void)setRepresentedObject:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setSubmenu:(id)arg1;
- (void)setTag:(long long)arg1;
- (void)setTarget:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleWithMnemonic:(id)arg1;
- (void)setToolTip:(id)arg1;
- (void)setUserInterfaceItemIdentifier:(id)arg1;
- (void)setView:(id)arg1;
- (long long)state;
- (id)submenu;
- (long long)tag;
- (id)target;
- (id)title;
- (id)toolTip;
- (id)userInterfaceItemIdentifier;
- (id)userKeyEquivalent;
- (unsigned long long)userKeyEquivalentModifierMask;
- (id)view;

// NSMenuItem (NSCompatibilityCoding)

- (id)controlView;
- (void)setControlView:(id)arg1;

// NSMenuItem (NSMenuItemForceReactive)

- (void)_beginPredeepAnimationAgainstPoint:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)_cancelPredeepAnimation;
- (void)_completeDeepAnimation;
- (void)_doPredeepAnimationWithProgress:(double)arg1;
- (void)_releaseDeepAnimation;
- (BOOL)_wantsDeepAnimationCallbacks;
- (void)recognizerDidCancelAnimation:(id)arg1;
- (void)recognizerDidCompleteAnimation:(id)arg1;
- (void)recognizerDidDismissAnimation:(id)arg1;
- (void)recognizerDidUpdateAnimation:(id)arg1;
- (void)recognizerWillBeginAnimation:(id)arg1;

// NSMenuItem (NSMenuItemOverriddenAttributesAccessibility)

- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilitySetOverrideValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilitySupportsOverriddenAttributes;

// NSMenuItem (NSMenuItem_StandardItems)

+ (void)_dispatchActionBlockFor:(id)arg1;
+ (id)_menuItemForItem:(id)arg1 view:(id)arg2 itemFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 aimFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 options:(id)arg5;

- (void)invokeActionBlock:(id)arg1;
- (void)setActionBlock:(id)arg1;

// NSMenuItem (NSPopoverPresenting)

- (void)showPopover:(id)arg1;

// NSMenuItem (_NSBlockAction)

+ (id)_menuItemWithTitle:(id)arg1 handler:(id)arg2;

@end
