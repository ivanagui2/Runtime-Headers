/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
 */

@interface IOBluetoothDevice : IOBluetoothObject <NSCoding, NSSecureCoding> {
    id  _mReserved;
    struct BluetoothDeviceAddress { 
        unsigned char data[6]; 
    }  mAddress;
    unsigned int  mClassOfDevice;
    unsigned short  mClockOffset;
    unsigned short  mConnectionHandle;
    unsigned int  mDeviceConnectNotification;
    unsigned char  mEncryptionMode;
    NSDate * mLastInquiryUpdate;
    NSDate * mLastNameUpdate;
    NSDate * mLastServicesUpdate;
    unsigned char  mLinkType;
    NSString * mName;
    unsigned char  mPageScanMode;
    unsigned char  mPageScanPeriodMode;
    unsigned char  mPageScanRepetitionMode;
    IOBluetoothRFCOMMConnection * mRFCOMMConnection;
    id  mServerDevice;
    NSArray * mServiceArray;
}

@property (atomic, readonly) unsigned short AVDTPVersion;
@property (atomic, readonly) unsigned short AVRCPControllerVersion;
@property (atomic, readonly) unsigned short AVRCPTargetVersion;
@property (atomic, readonly) BOOL HIDBootDevice;
@property (atomic, readonly) unsigned char HIDCountryCode;
@property (atomic, readonly) NSDictionary *HIDDeviceDictionary;
@property (atomic, readonly) unsigned char HIDDeviceSubclass;
@property (atomic, readonly) BOOL HIDNormallyConnectable;
@property (atomic, readonly) BOOL HIDProfileSupported;
@property (atomic, readonly) unsigned int HIDQoSLatency;
@property (atomic, readonly) BOOL HIDReconnectInitiate;
@property (atomic, readonly) unsigned short HIDSSRHostMaxLatency;
@property (atomic, readonly) unsigned short HIDSSRHostMinTimeout;
@property (atomic, readonly) IOBluetoothSDPServiceRecord *HIDServiceRecord;
@property (atomic, readonly) unsigned short HIDSupervisionTimeout;
@property (atomic, readonly) BOOL HIDSupportsRemoteWake;
@property (atomic, readonly) BOOL HIDSupportsVirtualCable;
@property (atomic, readonly) NSURL *PnPClientExecutableURL;
@property (atomic, readonly) NSURL *PnPDocumentationURL;
@property (atomic, readonly) unsigned short PnPProductID;
@property (atomic, readonly) IOBluetoothSDPServiceRecord *PnPSDPRecord;
@property (atomic, readonly) NSString *PnPServiceDescription;
@property (atomic, readonly) unsigned short PnPSpecificationID;
@property (atomic, readonly) BOOL PnPSupported;
@property (atomic, readonly) unsigned short PnPVendorID;
@property (atomic, readonly) unsigned short PnPVendorIDSource;
@property (atomic, readonly) unsigned short PnPVersion;
@property (atomic, readonly) unsigned short SCOConnectionHandle;
@property (atomic, readonly) NSString *addressString;
@property (nonatomic, readwrite) unsigned char addressType;
@property (atomic, readonly) IOBluetoothSDPServiceRecord *appleAccessoryServerServiceRecord;
@property (atomic, readonly) IOBluetoothSDPServiceRecord *appleAccessoryServiceRecord;
@property (nonatomic, readwrite) unsigned char batteryPercentCase;
@property (nonatomic, readwrite) unsigned char batteryPercentCombined;
@property (nonatomic, readwrite) unsigned char batteryPercentLeft;
@property (nonatomic, readwrite) unsigned char batteryPercentRight;
@property (nonatomic, readwrite) unsigned char batteryPercentSingle;
@property (nonatomic, readwrite) unsigned char buttonMode;
@property (nonatomic, readwrite) unsigned char capabilityMask;
@property (atomic, readwrite) unsigned int classOfDevice;
@property (nonatomic, readwrite) unsigned char codecType;
@property (getter=isConnecting, nonatomic, readwrite) BOOL connecting;
@property (atomic, readonly) unsigned short connectionHandle;
@property (atomic, readonly) unsigned char connectionMode;
@property (atomic, readonly) unsigned short connectionModeInterval;
@property (atomic, readonly) unsigned int deviceClassMajor;
@property (atomic, readonly) unsigned int deviceClassMinor;
@property (atomic, readonly) unsigned long long deviceID;
@property (getter=isHeadsetAudioGateway, atomic, readonly) BOOL headsetAudioGateway;
@property (getter=headsetBattery, nonatomic, readwrite) long long headsetBatteryPercent;
@property (getter=isHeadsetDevice, atomic, readonly) BOOL headsetDevice;
@property (nonatomic, readwrite) BOOL highPriority;
@property (nonatomic, readwrite) BOOL inEar;
@property (nonatomic, readwrite) BOOL inEarDetect;
@property (atomic, readonly) unsigned int inputAudioDeviceID;
@property (atomic, readonly) BOOL isA2DPSink;
@property (atomic, readonly) BOOL isA2DPSource;
@property (atomic, readonly) BOOL isAppleAccessoryServer;
@property (atomic, readonly) BOOL isAudioSink;
@property (atomic, readonly) BOOL isConnnectionLLREnabled;
@property (atomic, readonly) BOOL isInEarDetectionSupported;
@property (nonatomic, readonly) BOOL isLowEnergyConnection;
@property (nonatomic, readonly) BOOL isMagicCloudPairingCapable;
@property (atomic, readonly) BOOL isTBFCCapable;
@property (atomic, readonly) BOOL isTBFCPageCapable;
@property (atomic, readonly) BOOL isTBFCSuspended;
@property (atomic, readwrite, retain) NSDate *lastNameUpdate;
@property (nonatomic, readonly) unsigned char linkLevelEncryption;
@property (getter=isLowEnergyDevice, nonatomic, readwrite) BOOL lowEnergyDevice;
@property (getter=isLowEnergyDeviceHID2, nonatomic, readwrite) BOOL lowEnergyDeviceHID2;
@property (nonatomic, readwrite) BOOL magicCloudPairedPaired;
@property (nonatomic, readwrite) unsigned char micMode;
@property (nonatomic, readwrite) BOOL midPriority;
@property (atomic, readwrite, copy) NSString *name;
@property (atomic, readonly) NSString *nameOrAddress;
@property (atomic, readonly) unsigned int outputAudioDeviceID;
@property (nonatomic, readwrite) unsigned char primaryBud;
@property (nonatomic, readwrite) unsigned char primaryInEar;
@property (nonatomic, readwrite) unsigned char secondaryInEar;
@property (atomic, readonly) unsigned int serviceClassMajor;
@property (atomic, readonly) unsigned int serviceForDevice;
@property (nonatomic, readwrite) unsigned int serviceMask;
@property (atomic, readwrite, retain) NSArray *services;
@property (nonatomic, readwrite) BOOL traceLoggingEnabled;

+ (id)configuredDevices;
+ (id)connectedDevices;
+ (id)deviceWithAddress:(const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg1;
+ (id)deviceWithAddressString:(id)arg1;
+ (id)deviceWithConnectionHandle:(unsigned short)arg1;
+ (id)deviceWithID:(unsigned long long)arg1;
+ (id)favoriteDevices;
+ (id)getKeyForIOService:(unsigned int)arg1;
+ (id)getUniqueDeviceWithAddress:(const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg1;
+ (id)getUniqueObjectDictionary:(BOOL)arg1;
+ (BOOL)isAnyPairedDevicesSupportTBFCPage;
+ (BOOL)isL2CAPPSMInUse:(unsigned short)arg1 isIncoming:(BOOL)arg2;
+ (BOOL)isRFCOMMChannelInUse:(unsigned char)arg1 isIncoming:(BOOL)arg2;
+ (id)keyPathsForValuesAffectingIsConnected;
+ (id)keyPathsForValuesAffectingNameOrAddress;
+ (id)pairedDevices;
+ (id)recentDevices:(unsigned long long)arg1;
+ (id)registerForConnectNotifications:(id)arg1 selector:(SEL)arg2;
+ (BOOL)supportsSecureCoding;
+ (void)tbfcResumeConnectedDevices;
+ (id)usbBluetoothDevices;
+ (id)withAddress:(const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg1;
+ (id)withAddressString:(id)arg1;
+ (id)withDeviceRef:(struct OpaqueIOBluetoothObjectRef { }*)arg1;

- (void)BluetoothHCIAuthenticationComplete:(id)arg1 inStatus:(int)arg2 inAuthenticationResults:(struct BluetoothHCIEventAuthenticationCompleteResults { unsigned short x1; }*)arg3;
- (void)BluetoothHCIConnectionComplete:(id)arg1 inStatus:(int)arg2 inConnectionResults:(struct BluetoothHCIEventConnectionCompleteResults { unsigned short x1; struct BluetoothDeviceAddress { unsigned char x_2_1_1[6]; } x2; unsigned char x3; unsigned char x4; }*)arg3;
- (void)BluetoothHCIRemoteNameRequestComplete:(id)arg1 inStatus:(int)arg2 inRemoteNameRequestResults:(struct BluetoothHCIEventRemoteNameRequestResults { struct BluetoothDeviceAddress { unsigned char x_1_1_1[6]; } x1; unsigned char x2[248]; }*)arg3;
- (BOOL)RSSI;
- (unsigned short)SCOConnectionHandle;
- (int)_performSDPQuery:(id)arg1 uuids:(id)arg2;
- (void)addBluetoothDUNPort:(id)arg1;
- (void)addBluetoothSerialPort:(id)arg1;
- (void)addSerialPortForDevice:(id)arg1;
- (int)addToFavorites;
- (id)addressString;
- (unsigned char)addressType;
- (id)attributeObjectForKey:(id)arg1;
- (void)autoconfigureServices;
- (id)awakeAfterUsingCoder:(id)arg1;
- (unsigned char)batteryPercentCase;
- (unsigned char)batteryPercentCombined;
- (unsigned char)batteryPercentLeft;
- (unsigned char)batteryPercentRight;
- (unsigned char)batteryPercentSingle;
- (unsigned char)buttonMode;
- (void)callConnectionCompleteCallback:(id)arg1;
- (void)callConnectionCompleteCallback:(id)arg1 status:(int)arg2;
- (unsigned char)capabilityMask;
- (int)channelReadyToReceiveData:(unsigned short)arg1;
- (void)checkRetainCount;
- (unsigned int)classOfDevice;
- (int)closeConnection;
- (int)closeConnectionWhenIdle;
- (unsigned char)codecType;
- (long long)compareNamesAndAddresses:(id)arg1;
- (long long)compareNoNamesFirst:(id)arg1;
- (long long)comparePreferredFirstThenNamed:(id)arg1;
- (unsigned int)configuredServices;
- (BOOL)connectionComplete;
- (unsigned short)connectionHandle;
- (unsigned char)connectionMode;
- (unsigned short)connectionModeInterval;
- (void)dealloc;
- (id)description;
- (int)destroyConnection;
- (int)destroyRFCOMMChannel:(unsigned char)arg1;
- (void)destroyServerConnection;
- (unsigned int)deviceClassMajor;
- (unsigned int)deviceClassMinor;
- (unsigned long long)deviceID;
- (void)deviceWasUpdated:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)finalize;
- (void)forceRemove;
- (const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)getAddress;
- (void)getAddress:(struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg1;
- (id)getAddressNSData;
- (id)getAddressString;
- (unsigned int)getClassOfDevice;
- (unsigned short)getClockOffset;
- (unsigned short)getConnectionHandle;
- (unsigned int)getDeviceClassMajor;
- (unsigned int)getDeviceClassMinor;
- (struct OpaqueIOBluetoothObjectRef { }*)getDeviceRef;
- (id)getDisplayName;
- (unsigned char)getEncryptionMode;
- (id)getKey;
- (id)getL2CAPObjectsWithPSM:(unsigned short)arg1;
- (id)getLastInquiryUpdate;
- (id)getLastNameUpdate;
- (id)getLastServicesUpdate;
- (unsigned char)getLinkType;
- (id)getMacAttributesDictionary;
- (id)getName;
- (id)getNameOrAddress;
- (unsigned char)getPageScanMode;
- (unsigned char)getPageScanPeriodMode;
- (unsigned char)getPageScanRepetitionMode;
- (void)getRemoteVersionInfo:(unsigned short*)arg1 lmpVersion:(char *)arg2 lmpSubversion:(unsigned short*)arg3;
- (unsigned int)getServiceClassMajor;
- (id)getServiceRecordForUUID:(id)arg1;
- (id)getServices;
- (long long)headsetBattery;
- (BOOL)highPriority;
- (BOOL)inEar;
- (BOOL)inEarDetect;
- (id)init;
- (id)initWithAddress:(const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithIOService:(unsigned int)arg1;
- (id)initWithIOService:(unsigned int)arg1 address:(const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg2;
- (BOOL)inquiryRSSI;
- (int)instantiateChannel:(unsigned short)arg1 findExisting:(BOOL)arg2 newChannel:(id)arg3;
- (int)instantiateChannelContinue:(unsigned short)arg1 findExisting:(BOOL)arg2 newChannel:(id)arg3;
- (void)ioServiceAdded:(unsigned int)arg1;
- (BOOL)isAddressRandomResolvable;
- (BOOL)isAppleDevice;
- (BOOL)isBRPaired;
- (BOOL)isConfigured;
- (BOOL)isConfiguredHIDDevice;
- (BOOL)isConnected;
- (BOOL)isConnecting;
- (BOOL)isConnnectionLLREnabled;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isFavorite;
- (BOOL)isIncoming;
- (BOOL)isInitiator;
- (BOOL)isKeyboardDevice;
- (BOOL)isL2CAPPSMInUse:(unsigned short)arg1 isIncoming:(BOOL)arg2;
- (BOOL)isLEPaired;
- (BOOL)isLowEnergyConnection;
- (BOOL)isLowEnergyDevice;
- (BOOL)isLowEnergyDeviceHID2;
- (BOOL)isMCPaired;
- (BOOL)isMac;
- (BOOL)isMagicCloudPairingCapable;
- (BOOL)isPaired;
- (BOOL)isPluggedOverUSB;
- (BOOL)isPointingDevice;
- (BOOL)isRFCOMMChannelInUse:(unsigned char)arg1 isIncoming:(BOOL)arg2;
- (BOOL)isRecent;
- (BOOL)isSpecialMicrosoftMouse;
- (BOOL)isTBFCCapable;
- (BOOL)isTBFCPageCapable;
- (BOOL)isTBFCSuspended;
- (BOOL)isiCloudPaired;
- (BOOL)isiPad;
- (BOOL)isiPhone;
- (id)l2capChannels;
- (unsigned int)lastBytesReceivedTimestamp;
- (unsigned int)lastBytesSentTimestamp;
- (id)lastNameUpdate;
- (unsigned char)linkLevelEncryption;
- (BOOL)magicCloudPairedPaired;
- (BOOL)matchesSearchAttributes:(const struct IOBluetoothDeviceSearchAttributes { unsigned int x1; unsigned int x2; unsigned int x3; struct IOBluetoothDeviceSearchDeviceAttributes {} *x4; }*)arg1 ignoreDeviceNameIfNil:(BOOL)arg2;
- (unsigned short)maxACLPacketSize;
- (unsigned char)micMode;
- (BOOL)midPriority;
- (id)name;
- (id)nameOrAddress;
- (id)newMatchingDictionary;
- (int)openConnection;
- (int)openConnection:(id)arg1;
- (int)openConnection:(id)arg1 withPageTimeout:(unsigned short)arg2 authenticationRequired:(BOOL)arg3;
- (int)openConnection:(id)arg1 withPageTimeout:(unsigned short)arg2 authenticationRequired:(BOOL)arg3 allowRoleSwitch:(BOOL)arg4;
- (int)openConnection:(id)arg1 withPageTimeout:(unsigned short)arg2 authenticationRequired:(BOOL)arg3 allowRoleSwitch:(BOOL)arg4 forPairing:(BOOL)arg5;
- (int)openL2CAPChannel:(unsigned short)arg1 findExisting:(BOOL)arg2 newChannel:(id*)arg3;
- (int)openL2CAPChannelAsync:(id*)arg1 withPSM:(unsigned short)arg2 delegate:(id)arg3;
- (int)openL2CAPChannelAsync:(id*)arg1 withPSM:(unsigned short)arg2 withConfiguration:(id)arg3 delegate:(id)arg4;
- (int)openL2CAPChannelSync:(id*)arg1 withPSM:(unsigned short)arg2 delegate:(id)arg3;
- (int)openL2CAPChannelSync:(id*)arg1 withPSM:(unsigned short)arg2 withConfiguration:(id)arg3 delegate:(id)arg4;
- (int)openRFCOMMChannel:(unsigned char)arg1 channel:(id*)arg2;
- (int)openRFCOMMChannelAsync:(id*)arg1 withChannelID:(unsigned char)arg2 delegate:(id)arg3;
- (int)openRFCOMMChannelSync:(id*)arg1 withChannelID:(unsigned char)arg2 delegate:(id)arg3;
- (int)performSDPQuery:(id)arg1;
- (int)performSDPQuery:(id)arg1 uuids:(id)arg2;
- (unsigned char)primaryBud;
- (unsigned char)primaryInEar;
- (id)processName;
- (unsigned short)productID;
- (BOOL)rawRSSI;
- (id)recentAccessDate;
- (id)registerForDisconnectNotification:(id)arg1 selector:(SEL)arg2;
- (void)release;
- (int)remoteNameRequest:(id)arg1;
- (int)remoteNameRequest:(id)arg1 withPageTimeout:(unsigned short)arg2;
- (void)remove;
- (int)removeAttributeObjectForKey:(id)arg1;
- (int)removeFromFavorites;
- (void)removeLinkKey;
- (void)rename:(id)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (int)requestAuthentication;
- (BOOL)requiresAuthenticationEncryption:(unsigned short)arg1;
- (id)retain;
- (void)sdpQueryComplete:(id)arg1 status:(int)arg2;
- (unsigned char)secondaryInEar;
- (int)sendL2CAPEchoRequest:(void*)arg1 length:(unsigned short)arg2;
- (int)sendL2CAPEchoRequest:(void*)arg1 length:(unsigned short)arg2 withFlags:(unsigned int)arg3;
- (unsigned int)serviceClassMajor;
- (unsigned int)serviceMask;
- (id)services;
- (void)setAddress:(const struct BluetoothDeviceAddress { unsigned char x1[6]; }*)arg1;
- (void)setAddressType:(unsigned char)arg1;
- (void)setAllowedPacketTypes:(unsigned short)arg1;
- (int)setAttributeObject:(id)arg1 forKey:(id)arg2;
- (void)setBatteryPercentCase:(unsigned char)arg1;
- (void)setBatteryPercentCombined:(unsigned char)arg1;
- (void)setBatteryPercentLeft:(unsigned char)arg1;
- (void)setBatteryPercentRight:(unsigned char)arg1;
- (void)setBatteryPercentSingle:(unsigned char)arg1;
- (void)setButtonMode:(unsigned char)arg1;
- (void)setCapabilityMask:(unsigned char)arg1;
- (void)setClassOfDevice:(unsigned int)arg1;
- (void)setClockOffset:(unsigned short)arg1;
- (void)setCodecType:(unsigned char)arg1;
- (void)setConnecting:(BOOL)arg1;
- (void)setConnectionHandle:(unsigned short)arg1;
- (void)setConnectionInfo:(unsigned short)arg1 linkType:(unsigned char)arg2 encryptionMode:(unsigned char)arg3;
- (void)setDisplayName:(id)arg1;
- (void)setHeadsetBatteryPercent:(long long)arg1;
- (void)setHighPriority:(BOOL)arg1;
- (void)setInEar:(BOOL)arg1;
- (void)setInEarDetect:(BOOL)arg1;
- (void)setInquiryRSSI:(BOOL)arg1;
- (void)setLastNameUpdate:(id)arg1;
- (void)setLowEnergyDevice:(BOOL)arg1;
- (void)setLowEnergyDeviceHID2:(BOOL)arg1;
- (void)setMagicCloudPairedPaired:(BOOL)arg1;
- (void)setMaxACLPacketSize:(unsigned short)arg1;
- (void)setMicMode:(unsigned char)arg1;
- (void)setMidPriority:(BOOL)arg1;
- (void)setName:(id)arg1;
- (void)setPageScanMode:(unsigned char)arg1;
- (void)setPageScanPeriodMode:(unsigned char)arg1;
- (void)setPageScanRepetitionMode:(unsigned char)arg1;
- (void)setPrimaryBud:(unsigned char)arg1;
- (void)setPrimaryInEar:(unsigned char)arg1;
- (void)setRemoteVersionInfo:(unsigned short)arg1 lmpVersion:(unsigned char)arg2 lmpSubversion:(unsigned short)arg3;
- (void)setSecondaryInEar:(unsigned char)arg1;
- (void)setServiceMask:(unsigned int)arg1;
- (void)setServices:(id)arg1;
- (int)setSupervisionTimeout:(unsigned short)arg1;
- (void)setTraceLoggingEnabled:(BOOL)arg1;
- (id)shortDescription;
- (BOOL)shouldHideDevice;
- (unsigned long long)totalBytesReceived;
- (unsigned long long)totalBytesSent;
- (BOOL)traceLoggingEnabled;
- (void)triggerTraceLog;
- (void)updateFromAttributeDict:(id)arg1;
- (void)updateFromNewIOService:(unsigned int)arg1;
- (void)updateFromServer;
- (oneway void)updateInquiryInfo:(in struct IOBluetoothHCIUnifiedInquiryResult { struct BluetoothHCIInquiryResult { struct BluetoothDeviceAddress { unsigned char x_1_2_1[6]; } x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; unsigned char x_1_1_4; unsigned int x_1_1_5; unsigned short x_1_1_6; } x1; unsigned char x2; struct BluetoothHCIExtendedInquiryResponse { unsigned char x_3_1_1[240]; } x3; unsigned char x4; BOOL x5; }*)arg1 lastUpdate:(in bycopy id)arg2;
- (oneway void)updateName:(in bycopy id)arg1 lastUpdate:(in bycopy id)arg2;
- (void)updateName:(id)arg1 lastUpdate:(id)arg2 postNotification:(BOOL)arg3;
- (void)updateServiceMask;
- (oneway void)updateServices:(in bycopy id)arg1 lastUpdate:(in bycopy id)arg2;
- (oneway void)updateServicesArchive:(in bycopy id)arg1 lastUpdate:(in bycopy id)arg2;
- (unsigned short)vendorID;

// IOBluetoothDevice (A2DPAdditions)

- (unsigned short)AVDTPVersion;
- (unsigned short)AVRCPControllerVersion;
- (unsigned short)AVRCPTargetVersion;
- (unsigned short)AVRCPVersion:(BOOL)arg1;
- (id)appleAccessoryServerServiceRecord;
- (id)appleAccessoryServiceRecord;
- (id)appleSupportFeatures;
- (id)appleSupportFeaturesVersion;
- (void)audioCodecString:(id)arg1;
- (unsigned int)audioDeviceID:(BOOL)arg1;
- (void)batteryLevel:(id)arg1;
- (unsigned int)inputAudioDeviceID;
- (BOOL)isA2DPSink;
- (BOOL)isA2DPSource;
- (BOOL)isAppleAccessoryServer;
- (BOOL)isAudioSink;
- (BOOL)isInEarDetectionSupported;
- (unsigned int)outputAudioDeviceID;
- (unsigned int)serviceForDevice;

// IOBluetoothDevice (HIDAdditions)

- (BOOL)HIDBootDevice;
- (unsigned char)HIDCountryCode;
- (id)HIDDeviceDictionary;
- (unsigned char)HIDDeviceSubclass;
- (BOOL)HIDNormallyConnectable;
- (BOOL)HIDProfileSupported;
- (unsigned int)HIDQoSLatency;
- (BOOL)HIDReconnectInitiate;
- (unsigned short)HIDSSRHostMaxLatency;
- (unsigned short)HIDSSRHostMinTimeout;
- (id)HIDServiceRecord;
- (unsigned short)HIDSupervisionTimeout;
- (BOOL)HIDSupportsRemoteWake;
- (BOOL)HIDSupportsVirtualCable;

// IOBluetoothDevice (HandsFreeAdditions)

- (id)handsFreeAudioGatewayDriverID;
- (id)handsFreeAudioGatewayServiceRecord;
- (id)handsFreeDeviceDriverID;
- (id)handsFreeDeviceServiceRecord;
- (BOOL)isHandsFreeAudioGateway;
- (BOOL)isHandsFreeDevice;

// IOBluetoothDevice (HeadsetAdditions)

- (id)headsetAudioGatewayServiceRecord;
- (id)headsetDeviceServiceRecord;
- (BOOL)isHeadsetAudioGateway;
- (BOOL)isHeadsetDevice;

// IOBluetoothDevice (PnPAdditions)

- (id)PnPClientExecutableURL;
- (id)PnPDocumentationURL;
- (unsigned short)PnPProductID;
- (id)PnPSDPRecord;
- (id)PnPServiceDescription;
- (unsigned short)PnPSpecificationID;
- (BOOL)PnPSupported;
- (unsigned short)PnPVendorID;
- (unsigned short)PnPVendorIDSource;
- (unsigned short)PnPVersion;

@end
