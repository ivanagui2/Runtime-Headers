/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ApplePushService.framework/Versions/A/ApplePushService
 */

@interface APSConnection : NSObject {
    NSObject<OS_xpc_object> * _connection;
    unsigned int  _connectionPort;
    NSString * _connectionPortName;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    CUTWeakReference * _delegateReference;
    void * _dynamicStore;
    BOOL  _enableCriticalReliability;
    BOOL  _enablePushDuringSleep;
    BOOL  _enableStatusNotifications;
    NSArray * _enabledTopics;
    NSString * _environmentName;
    BOOL  _everHadDelegate;
    NSMutableDictionary * _idsToOutgoingMessages;
    NSArray * _ignoredTopics;
    BOOL  _isConnected;
    BOOL  _isDeallocing;
    BOOL  _isDisconnected;
    BOOL  _isReconnectScheduled;
    BOOL  _isShutdown;
    NSObject<OS_dispatch_queue> * _ivarQueue;
    unsigned long long  _largeMessageSize;
    NSObject<OS_dispatch_queue> * _machQueue;
    NSObject<OS_dispatch_source> * _mach_source;
    unsigned long long  _messageSize;
    unsigned long long  _nextOutgoingMessageID;
    NSArray * _opportunisticTopics;
    APSPerAppTokenMap * _perAppTokenMap;
    BOOL  _portNameIsBundleId;
    NSData * _publicToken;
    NSArray * _pushWakeTopics;
    NSMutableArray * _queuedDelegateBlocks;
    double  _reconnectDelay;
    BOOL  _usesAppLaunchStats;
}

@property (nonatomic, readwrite) <APSConnectionDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (nonatomic, readonly) BOOL isShutdown;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *ivarQueue;
@property (nonatomic, readwrite) unsigned long long largeMessageSize;
@property (nonatomic, readwrite) unsigned long long messageSize;
@property (nonatomic, readonly, retain) NSData *publicToken;
@property (nonatomic, readwrite) BOOL usesAppLaunchStats;

+ (void)_blockingXPCCallWithArgumentBlock:(id)arg1 resultHandler:(id)arg2;
+ (void)_blockingXPCCallWithArgumentBlock:(id)arg1 resultHandler:(id)arg2 timeout:(double)arg3;
+ (void)_nonblockingXPCCallWithArgumentBlock:(id)arg1;
+ (void)_safelyCancelAndReleaseAfterBarrierConnection:(id)arg1;
+ (void)_safelyCancelAndReleaseConnection:(id)arg1;
+ (id)connectionsDebuggingState;
+ (struct OpaqueSecIdentityRef { }*)copyIdentity;
+ (id)environmentForNamedPort:(id)arg1;
+ (void)finishLogin;
+ (id)geoRegion;
+ (void)initialize;
+ (void)invalidateDeviceIdentity;
+ (BOOL)isValidEnvironment:(id)arg1;
+ (double)keepAliveIntervalForEnvironmentName:(id)arg1;
+ (id)preference:(id)arg1;
+ (void)requestCourierConnection;
+ (BOOL)sendActivationRecordToMachService:(id)arg1;
+ (double)serverTime;

- (void)_addEnableCriticalReliabilityToXPCMessage:(id)arg1;
- (void)_addEnableStatusNotificationsToXPCMessage:(id)arg1;
- (void)_addPushWakeTopicsToXPCMessage:(id)arg1;
- (void)_addUsesAppLaunchStatsToXPCMessage:(id)arg1;
- (void)_callDelegateOnIvarQueueWithBlock:(id)arg1;
- (void)_cancelConnectionOnIvarQueue;
- (void)_connectIfNecessary;
- (void)_connectIfNecessaryOnIvarQueue;
- (void)_connectOnIvarQueue;
- (void)_deliverConnectionStatusChange:(BOOL)arg1;
- (void)_deliverConnectionStatusFromDealloc:(BOOL)arg1;
- (void)_deliverDidReconnectOnIvarQueue;
- (void)_deliverMessage:(id)arg1;
- (void)_deliverOutgoingMessageResultWithID:(unsigned long long)arg1 error:(id)arg2;
- (void)_deliverPublicToken:(id)arg1;
- (void)_deliverPublicTokenOnIvarQueue:(id)arg1;
- (void)_deliverToken:(id)arg1 forTopic:(id)arg2 identifier:(id)arg3;
- (void)_disconnect;
- (void)_disconnectFromDealloc;
- (void)_disconnectOnIvarQueue;
- (void)_dispatch_async_to_ivarQueue:(id)arg1;
- (void)_flushConnection;
- (void)_handleEvent:(id)arg1 withHandler:(id)arg2;
- (void)_noteDisconnectedFromDaemonOnIvarQueue;
- (void)_onIvarQueue_setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3 sendToDaemon:(BOOL)arg4;
- (void)_reconnectIfNecessaryOnIvarQueueAfterDelay;
- (void)_rerequestPerAppTokens;
- (void)_sendOutgoingMessage:(id)arg1 fake:(BOOL)arg2;
- (void)_sendPerAppTokenRequestForTopic:(id)arg1 identifier:(id)arg2;
- (void)_setEnableStatusNotifications:(BOOL)arg1 sendToDaemon:(BOOL)arg2;
- (void)_setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3 sendToDaemon:(BOOL)arg4;
- (void)_setPushWakeTopics:(id)arg1;
- (void)_shutdownFromDealloc;
- (void)_shutdownOnIvarQueue;
- (void)acknowledgeDidReceivePublicToken:(id)arg1;
- (void)cancelOutgoingMessage:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)deregisterForConsoleUserChangeNotifications;
- (BOOL)hasIdentity;
- (id)initWithEnvironmentName:(id)arg1;
- (id)initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2;
- (id)initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2 enablePushDuringSleep:(BOOL)arg3 queue:(id)arg4;
- (id)initWithEnvironmentName:(id)arg1 namedDelegatePort:(id)arg2 queue:(id)arg3;
- (id)initWithEnvironmentName:(id)arg1 queue:(id)arg2;
- (void)invalidateTokenForTopic:(id)arg1 identifier:(id)arg2;
- (BOOL)isConnected;
- (BOOL)isShutdown;
- (id)ivarQueue;
- (unsigned long long)largeMessageSize;
- (unsigned long long)messageSize;
- (void)performOSXDeallocation;
- (id)publicToken;
- (void)registerForConsoleUserChangeNotifications;
- (void)removeFromRunLoop;
- (void)requestTokenForTopic:(id)arg1 identifier:(id)arg2;
- (void)scheduleInRunLoop:(id)arg1;
- (void)sendFakeMessage:(id)arg1;
- (void)sendOutgoingMessage:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnableCriticalReliability:(BOOL)arg1;
- (void)setEnableStatusNotifications:(BOOL)arg1;
- (void)setEnabledTopics:(id)arg1;
- (void)setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2;
- (void)setEnabledTopics:(id)arg1 ignoredTopics:(id)arg2 opportunisticTopics:(id)arg3;
- (void)setEnabledTopicsAreInteractive:(BOOL)arg1;
- (void)setIgnoredTopics:(id)arg1;
- (void)setLargeMessageSize:(unsigned long long)arg1;
- (void)setMessageSize:(unsigned long long)arg1;
- (void)setOpportunisticTopics:(id)arg1;
- (void)setPushWakeTopics:(id)arg1;
- (void)setUsesAppLaunchStats:(BOOL)arg1;
- (void)shutdown;
- (BOOL)usesAppLaunchStats;

@end
