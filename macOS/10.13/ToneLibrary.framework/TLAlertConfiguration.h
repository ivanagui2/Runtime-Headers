/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ToneLibrary.framework/Versions/A/ToneLibrary
 */

@interface TLAlertConfiguration : NSObject <NSCopying, NSSecureCoding> {
    NSString * _audioCategory;
    float  _audioVolume;
    NSURL * _externalToneFileURL;
    unsigned long long  _externalToneMediaLibraryItemIdentifier;
    NSDictionary * _externalVibrationPattern;
    NSURL * _externalVibrationPatternFileURL;
    BOOL  _forPreview;
    BOOL  _hasCustomAudioVolume;
    BOOL  _hasCustomRepeatingFlag;
    BOOL  _isFrozen;
    double  _maximumDuration;
    BOOL  _shouldIgnoreRingerSwitch;
    BOOL  _shouldRepeat;
    NSString * _toneIdentifier;
    NSString * _topic;
    long long  _type;
}

@property (nonatomic, readonly) BOOL _hasCustomAudioVolume;
@property (nonatomic, readwrite, copy) NSString *audioCategory;
@property (nonatomic, readwrite) float audioVolume;
@property (nonatomic, readwrite, copy) NSURL *externalToneFileURL;
@property (nonatomic, readwrite) unsigned long long externalToneMediaLibraryItemIdentifier;
@property (nonatomic, readwrite, copy) NSDictionary *externalVibrationPattern;
@property (nonatomic, readwrite, copy) NSURL *externalVibrationPatternFileURL;
@property (getter=isForPreview, nonatomic, readwrite) BOOL forPreview;
@property (nonatomic, readwrite) double maximumDuration;
@property (nonatomic, readwrite) BOOL shouldIgnoreRingerSwitch;
@property (nonatomic, readwrite) BOOL shouldRepeat;
@property (nonatomic, readwrite, copy) NSString *toneIdentifier;
@property (nonatomic, readwrite, copy) NSString *topic;
@property (nonatomic, readonly) long long type;

+ (BOOL)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_freeze;
- (BOOL)_hasCustomAudioVolume;
- (void)_throwForFrozenInstance;
- (id)audioCategory;
- (float)audioVolume;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)externalToneFileURL;
- (unsigned long long)externalToneMediaLibraryItemIdentifier;
- (id)externalVibrationPattern;
- (id)externalVibrationPatternFileURL;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isForPreview;
- (double)maximumDuration;
- (void)setAudioCategory:(id)arg1;
- (void)setAudioVolume:(float)arg1;
- (void)setExternalToneFileURL:(id)arg1;
- (void)setExternalToneMediaLibraryItemIdentifier:(unsigned long long)arg1;
- (void)setExternalVibrationPattern:(id)arg1;
- (void)setExternalVibrationPatternFileURL:(id)arg1;
- (void)setForPreview:(BOOL)arg1;
- (void)setMaximumDuration:(double)arg1;
- (void)setShouldIgnoreRingerSwitch:(BOOL)arg1;
- (void)setShouldRepeat:(BOOL)arg1;
- (void)setToneIdentifier:(id)arg1;
- (void)setTopic:(id)arg1;
- (BOOL)shouldIgnoreRingerSwitch;
- (BOOL)shouldRepeat;
- (id)toneIdentifier;
- (id)topic;
- (long long)type;

@end
