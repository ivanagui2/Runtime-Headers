/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ImageCaptureCore.framework/Versions/A/ImageCaptureCore
 */

@interface ICScannerFunctionalUnit : NSObject {
    id  _fuProps;
}

@property (atomic, readonly) BOOL acceptsThresholdForBlackAndWhiteScanning;
@property (atomic, readwrite) unsigned long long bitDepth;
@property (atomic, readonly) BOOL canPerformOverviewScan;
@property (atomic, readonly) unsigned char defaultThresholdForBlackAndWhiteScanning;
@property (atomic, readwrite) unsigned long long measurementUnit;
@property (atomic, readonly) unsigned long long nativeXResolution;
@property (atomic, readonly) unsigned long long nativeYResolution;
@property (atomic, readonly) struct CGImage { }*overviewImage;
@property (atomic, readwrite) unsigned long long overviewResolution;
@property (atomic, readonly) BOOL overviewScanInProgress;
@property (atomic, readonly) struct CGSize { double x1; double x2; } physicalSize;
@property (atomic, readwrite) unsigned long long pixelDataType;
@property (atomic, readonly) NSIndexSet *preferredResolutions;
@property (atomic, readonly) NSIndexSet *preferredScaleFactors;
@property (atomic, readwrite) unsigned long long resolution;
@property (atomic, readwrite) unsigned long long scaleFactor;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } scanArea;
@property (atomic, readwrite) unsigned long long scanAreaOrientation;
@property (atomic, readonly) BOOL scanInProgress;
@property (atomic, readonly) NSDictionary *scanParams;
@property (atomic, readonly) double scanProgressPercentDone;
@property (atomic, readonly) unsigned int state;
@property (atomic, readonly) NSIndexSet *supportedBitDepths;
@property (atomic, readonly) NSIndexSet *supportedMeasurementUnits;
@property (atomic, readonly) NSIndexSet *supportedResolutions;
@property (atomic, readonly) NSIndexSet *supportedScaleFactors;
@property (atomic, readonly) BOOL supportsProgressNotificationsWithScanData;
@property (atomic, readonly) NSArray *templates;
@property (atomic, readwrite) unsigned char thresholdForBlackAndWhiteScanning;
@property (atomic, readonly) unsigned long long type;
@property (atomic, readwrite) BOOL useOverviewImageAsFinalImage;
@property (atomic, readwrite) BOOL usesThresholdForBlackAndWhiteScanning;
@property (atomic, readonly) NSArray *vendorFeatures;

+ (BOOL)automaticallyNotifiesObserversOfScanProgressPercentDone;

- (BOOL)acceptsThresholdForBlackAndWhiteScanning;
- (void)addScanAreaToDictionary:(id)arg1;
- (unsigned char)backgroundGrayValue;
- (unsigned long long)bitDepth;
- (BOOL)canPerformOverviewScan;
- (void)clearOverviewImageBuffer;
- (id)colorSyncModeForGrayOverview;
- (id)colorSyncModeForRGBOverview;
- (id)colorSyncProfilePath;
- (id)currentSettings;
- (void)dealloc;
- (unsigned char)defaultThresholdForBlackAndWhiteScanning;
- (void)finalize;
- (struct CGImage { }*)grayOverviewImage;
- (id)initWithDictionary:(id)arg1 andScanner:(id)arg2;
- (unsigned long long)measurementUnit;
- (unsigned long long)measurementUnitPrivate;
- (struct CGSize { double x1; double x2; })minimumScanSizeInInches;
- (unsigned long long)nativeXResolution;
- (unsigned long long)nativeYResolution;
- (struct CGImage { }*)overviewImage;
- (id)overviewImageBufferRep;
- (unsigned long long)overviewResolution;
- (BOOL)overviewScanInProgress;
- (struct CGSize { double x1; double x2; })physicalSize;
- (struct CGSize { double x1; double x2; })physicalSizeInInches;
- (unsigned long long)pixelDataType;
- (id)preferredResolutions;
- (id)preferredScaleFactors;
- (unsigned long long)resolution;
- (unsigned long long)scaleFactor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })scanArea;
- (unsigned long long)scanAreaOrientation;
- (BOOL)scanInProgress;
- (id)scanParams;
- (double)scanProgressPercentDone;
- (id)scanner;
- (void)setBackgroundGrayValue:(unsigned char)arg1;
- (void)setBitDepth:(unsigned long long)arg1;
- (void)setMeasurementUnit:(unsigned long long)arg1;
- (void)setOverviewResolution:(unsigned long long)arg1;
- (void)setPixelDataType:(unsigned long long)arg1;
- (void)setResolution:(unsigned long long)arg1;
- (void)setScaleFactor:(unsigned long long)arg1;
- (void)setScanArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setScanAreaOrientation:(unsigned long long)arg1;
- (void)setScanProgressPercentDone:(double)arg1;
- (void)setState:(unsigned int)arg1;
- (void)setThresholdForBlackAndWhiteScanning:(unsigned char)arg1;
- (void)setUseOverviewImageAsFinalImage:(BOOL)arg1;
- (void)setUsesThresholdForBlackAndWhiteScanning:(BOOL)arg1;
- (void)setVendorFeatures:(id)arg1;
- (unsigned int)state;
- (id)supportedBitDepths;
- (id)supportedMeasurementUnits;
- (id)supportedResolutions;
- (id)supportedScaleFactors;
- (BOOL)supportsProgressNotificationsWithScanData;
- (unsigned long long)templateMeasurementUnit;
- (id)templates;
- (unsigned char)thresholdForBlackAndWhiteScanning;
- (unsigned long long)type;
- (void)updateOverviewOvelayBuffer:(id)arg1;
- (void)updateOverviewSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)updateScanProgressWithImageInfo:(id)arg1;
- (void)updateVendorFeature:(id)arg1;
- (BOOL)useOverviewImageAsFinalImage;
- (BOOL)usesThresholdForBlackAndWhiteScanning;
- (id)vendorFeatures;

@end
