/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ImageCaptureCore.framework/Versions/A/ImageCaptureCore
 */

@interface ICScannerImageRep : NSObject {
    unsigned char  _backgroundGrayValue;
    unsigned int  _bitmapInfo;
    unsigned long long  _bitsPerComponent;
    unsigned long long  _bitsPerPixel;
    char * _buffer;
    NSLock * _bufferLock;
    long long  _bufferSize;
    long long  _bufferSizeUsed;
    BOOL  _bufferUpdated;
    unsigned long long  _bytesPerRow;
    struct CGColorSpace { } * _colorspace;
    unsigned long long  _height;
    char * _overlayBuffer;
    long long  _overlayBufferSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _overlayRect;
    BOOL  _useOverlay;
    unsigned long long  _width;
}

@property (atomic, readwrite) unsigned char backgroundGrayValue;
@property (atomic, readonly) unsigned int bitmapInfo;
@property (atomic, readonly) unsigned long long bitsPerComponent;
@property (atomic, readonly) unsigned long long bitsPerPixel;
@property (atomic, readonly) char *buffer;
@property (atomic, readonly) long long bufferSize;
@property (atomic, readonly) long long bufferSizeUsed;
@property (atomic, readonly) unsigned long long bytesPerRow;
@property (atomic, readonly) struct CGColorSpace { }*colorspace;
@property (atomic, readonly) unsigned long long height;
@property (atomic, readonly) unsigned long long width;

- (unsigned char)backgroundGrayValue;
- (unsigned int)bitmapInfo;
- (unsigned long long)bitsPerComponent;
- (unsigned long long)bitsPerPixel;
- (char *)buffer;
- (long long)bufferSize;
- (long long)bufferSizeUsed;
- (unsigned long long)bytesPerRow;
- (void)clearOverlay;
- (void)clearOverviewImageBuffer;
- (struct CGColorSpace { }*)colorspace;
- (struct CGImage { }*)copyCGImage:(BOOL*)arg1;
- (unsigned long long)copyFromOffset:(long long)arg1 length:(unsigned long long)arg2 toBuffer:(char *)arg3;
- (BOOL)copyOverlayBuffer:(id)arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)copyToRow:(long long)arg1 numRows:(unsigned long long)arg2 fromRGBBuffer:(const char *)arg3 withBytesPerRow:(unsigned long long)arg4;
- (void)dealloc;
- (void)finalize;
- (unsigned long long)height;
- (id)initWithBufferSize:(unsigned long long)arg1 andBytesPerRow:(unsigned long long)arg2;
- (void)lock;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overlayRect;
- (void)setBackgroundGrayValue:(unsigned char)arg1;
- (void)setBitmapInfo:(unsigned int)arg1;
- (void)setBitsPerComponent:(unsigned long long)arg1;
- (void)setBitsPerPixel:(unsigned long long)arg1;
- (void)setBufferSizeUsed:(long long)arg1;
- (void)setBytesPerRow:(unsigned long long)arg1;
- (void)setColorspace:(struct CGColorSpace { }*)arg1;
- (void)setHeight:(unsigned long long)arg1;
- (void)setOverlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setWidth:(unsigned long long)arg1;
- (void)unlock;
- (unsigned long long)width;

@end
