/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
 */

@interface MKIconManager : NSObject

+ (id)_iconManager;
+ (id)_imageForFeatureStyleAttributes:(id)arg1 iconText:(id)arg2 size:(unsigned long long)arg3 forScale:(double)arg4 navMode:(BOOL)arg5;
+ (id)_imageForFeatureStyleAttributes:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3;
+ (id)_imageForFeatureStyleAttributes:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 navMode:(BOOL)arg4;
+ (id)imageForMapItem:(id)arg1 forScale:(double)arg2;
+ (id)imageForMapItem:(id)arg1 forScale:(double)arg2 fallbackToBundleIcon:(BOOL)arg3;
+ (id)imageForMapItem:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3;
+ (id)imageForMapItem:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 fallbackToBundleIcon:(BOOL)arg4;
+ (id)imageForMapItem:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4;
+ (id)imageForMapItem:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4 fallbackToBundleIcon:(BOOL)arg5;
+ (id)imageForStyle:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4;
+ (id)imageForStyle:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4 customIconID:(unsigned long long)arg5;
+ (id)imageForStyle:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4 customIconID:(unsigned long long)arg5 fallbackToBundleIcon:(BOOL)arg6 transparent:(BOOL)arg7 interactive:(BOOL)arg8;
+ (id)imageForStyle:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4 transparent:(BOOL)arg5;
+ (id)imageForStyle:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3 isResizableImage:(BOOL*)arg4 transparent:(BOOL)arg5 interactive:(BOOL)arg6;
+ (id)imageForTrafficCamera:(id)arg1 size:(unsigned long long)arg2 forScale:(double)arg3;
+ (id)imageForTrafficIncidentType:(long long)arg1 size:(unsigned long long)arg2 forScale:(double)arg3;
+ (struct CGColor { }*)newFillColorForStyleAttributes:(id)arg1 forScale:(double)arg2;
+ (struct CGColor { }*)newGlyphColorForStyleAttributes:(id)arg1 forScale:(double)arg2;
+ (struct CGColor { }*)newHaloColorForStyleAttributes:(id)arg1 forScale:(double)arg2;
+ (void)setDiskCacheURL:(id)arg1;
+ (void)setUseSharedCaches;

@end
