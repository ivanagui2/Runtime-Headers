/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
 */

@interface MKURLParser : NSObject {
    GEOMapURLParser * parser;
}

@property (atomic, readonly) NSString *abAddressID;
@property (atomic, readonly) NSString *abRecordID;
@property (atomic, readonly) NSString *addressString;
@property (atomic, readonly) double altitude;
@property (atomic, readonly) struct CLLocationCoordinate2D { double x1; double x2; } centerCoordinate;
@property (atomic, readonly) NSString *cnAddressIdentifier;
@property (atomic, readonly) NSString *cnContactIdentifier;
@property (atomic, readonly) NSString *contentProvider;
@property (atomic, readonly) NSString *contentProviderID;
@property (atomic, readonly) NSString *directionsDestinationAddressString;
@property (atomic, readonly) NSString *directionsSourceAddressString;
@property (atomic, readonly) BOOL exactPositionSpecified;
@property (atomic, readonly) GEOURLExtraStorage *extraStorage;
@property (atomic, readonly) long long favoritesType;
@property (atomic, readonly) unsigned long long lineMUID;
@property (atomic, readonly, copy) NSString *lineName;
@property (atomic, readonly) unsigned long long mapType;
@property (atomic, readonly) double roll;
@property (atomic, readonly) double rotation;
@property (atomic, readonly) struct CLLocationCoordinate2D { double x1; double x2; } searchCoordinate;
@property (atomic, readonly) int searchProviderID;
@property (atomic, readonly) NSString *searchQuery;
@property (atomic, readonly) struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } searchRegion;
@property (atomic, readonly) unsigned long long searchUID;
@property (atomic, readonly) struct { double x1; double x2; } span;
@property (atomic, readonly) BOOL tester;
@property (atomic, readonly) double tilt;
@property (atomic, readonly) long long trackingMode;
@property (atomic, readonly) unsigned long long transportType;
@property (atomic, readonly) GEOUserSessionEntity *userSessionEntity;
@property (atomic, readonly) float zoomLevel;

+ (BOOL)isValidMapURL:(id)arg1;

- (void).cxx_destruct;
- (id)abAddressID;
- (id)abRecordID;
- (id)addressString;
- (double)altitude;
- (struct CLLocationCoordinate2D { double x1; double x2; })centerCoordinate;
- (id)cnAddressIdentifier;
- (id)cnContactIdentifier;
- (id)contentProvider;
- (id)contentProviderID;
- (id)directionsDestinationAddressString;
- (id)directionsSourceAddressString;
- (BOOL)exactPositionSpecified;
- (id)extraStorage;
- (long long)favoritesType;
- (id)initWithURL:(id)arg1;
- (unsigned long long)lineMUID;
- (id)lineName;
- (unsigned long long)mapType;
- (BOOL)parseIncludingCustomParameters:(BOOL)arg1;
- (double)roll;
- (double)rotation;
- (struct CLLocationCoordinate2D { double x1; double x2; })searchCoordinate;
- (int)searchProviderID;
- (id)searchQuery;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })searchRegion;
- (unsigned long long)searchUID;
- (struct { double x1; double x2; })span;
- (BOOL)tester;
- (double)tilt;
- (long long)trackingMode;
- (unsigned long long)transportType;
- (id)userSessionEntity;
- (float)zoomLevel;

// MKURLParser (MKSnapshotExtras)

+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })commonSnapshotRegionForRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;

- (void)_drawImage:(id)arg1 point:(struct CGPoint { double x1; double x2; })arg2 inContext:(struct CGContext { }*)arg3 hiDpi:(BOOL)arg4;
- (unsigned long long)_indexOfHiDpi:(id)arg1;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionFromMapItems:(id)arg1;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionWithViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)renderSnapshotWithOptions:(id)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2 completion:(id)arg3;
- (BOOL)resolveWithViewSize:(struct CGSize { double x1; double x2; })arg1 completionBlock:(id)arg2;
- (BOOL)resolveWithViewSize:(struct CGSize { double x1; double x2; })arg1 options:(id)arg2 completionBlock:(id)arg3;

@end
