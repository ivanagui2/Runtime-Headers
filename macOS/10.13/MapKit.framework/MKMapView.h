/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
 */

@interface MKMapView : NSView <CALayerDelegate, DebugHierarchyObject, GEOLogContextDelegate, GEOResourceManifestTileGroupObserver, MKAnnotationContainerViewDelegate, MKAnnotationManagerDelegate, MKAnnotationMarkerContainer, MKMapGestureControllerDelegate, MKMouseOverLabelRecognizerDelegate, MKMouseOverLabelTarget, MKOverlayContainerViewDelegate, MKRotationFilterDelegate, NSCoding, NSGestureRecognizerDelegate, VKMapViewDelegate> {
    MKAnnotationContainerView * _annotationContainer;
    id  _annotationCoordinateTest;
    MKMapAnnotationManager * _annotationManager;
    id  _annotationRectTest;
    _MKCustomFeatureStore * _annotationsCustomFeatureStore;
    BOOL  _attributionBadgeClickable;
    NSImageView * _attributionBadgeView;
    int  _attributionCorner;
    MKAttributionLabel * _attributionLabel;
    BOOL  _automaticallySnapsToNorth;
    short  _cachedDisplayedFloorOrdinalForVenueWithFocus;
    unsigned long long  _cachedVenueIDWithFocus;
    MKMapCamera * _camera;
    BOOL  _canChangeZoomingSpeed;
    BOOL  _canShowMouseOverFeedback;
    NSClickGestureRecognizer * _compassClickGestureRecognizer;
    MKCompassView * _compassView;
    BOOL  _continueToRenderWhenOccluded;
    unsigned long long  _currentFlyoverAnimationID;
    _MKEnvironmentLabel * _debugCurrentEnvironmentLabel;
    struct NSEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _edgeInsets;
    NSLayoutConstraint * _edgeInsetsBottomConstraint;
    NSLayoutGuide * _edgeInsetsGuide;
    NSLayoutConstraint * _edgeInsetsLeftConstraint;
    NSLayoutConstraint * _edgeInsetsRightConstraint;
    NSLayoutConstraint * _edgeInsetsTopConstraint;
    struct { 
        unsigned int changingRegion : 1; 
        unsigned int draggingInterrupted : 1; 
        unsigned int didStartSmoothScrolling : 1; 
        unsigned int hasRenderedSomething : 1; 
        unsigned int ignoreLocationUpdates : 1; 
        unsigned int longPressing : 1; 
        unsigned int regionChangeIsAnimated : 1; 
        unsigned int scrollEnabled : 1; 
        unsigned int scrolling : 1; 
        unsigned int showsUserLocation : 1; 
        unsigned int zoomEnabled : 1; 
        unsigned int zoomIsAnimated : 1; 
        unsigned int zooming : 1; 
        unsigned int isChangingViewSize : 1; 
        unsigned int isChangingEdgeInsets : 1; 
        unsigned int showsAttribution : 1; 
        unsigned int showsAttributionBadge : 1; 
        unsigned int showsVenues : 1; 
        unsigned int rotating : 1; 
        unsigned int pitching : 1; 
        unsigned int rotateEnabled : 1; 
        unsigned int pitchEnabled : 1; 
        unsigned int showsBuildings : 1; 
        unsigned int showsPointsOfInterest : 1; 
        unsigned int showsTraffic : 1; 
        unsigned int hasPendingCameraChange : 1; 
        unsigned int currentRegionChangeShouldUpdateAnnotationsMidstream : 1; 
        unsigned int canSelectPOIs : 1; 
        unsigned int canSelectAllLabels : 1; 
        unsigned int edgeInsetsAreExplicit : 1; 
        unsigned int locationPropagationEnabled : 1; 
        unsigned int userInteractionPausesLocationUpdates : 1; 
        unsigned int locationPulseEnabled : 1; 
        unsigned int shouldSplitRouteLine : 1; 
        unsigned int shouldAnimatePositionWithRouteMatch : 1; 
        unsigned int clearUserLocationOnLocationReset : 1; 
        unsigned int showsCurrentEnvironmentName : 1; 
        unsigned int processingUserLocationUpdate : 1; 
        unsigned int changingMapType : 1; 
        unsigned int userRotatedAwayFromVerticalYaw : 1; 
        unsigned int goingToDefaultLocation : 1; 
        unsigned int isDraggingAnnotationView : 1; 
        unsigned int shouldLoadFallbackTiles : 1; 
        unsigned int iconPixelAlignmentExplicitlyDisabled : 1; 
        unsigned int userDidRotateDuringCurrentRegionChange : 1; 
    }  _flags;
    MKAccessibilityItem * _focusedAccessibilityItem;
    BOOL  _forceLayoutOnBoundsChange;
    MKMapGestureController * _gestureController;
    BOOL  _hasPendingEdgeInsetsChange;
    BOOL  _hasSetLayoutMargins;
    BOOL  _hidesAllUIOnMap;
    long long  _interactionMode;
    MKMapViewInternal * _internal;
    BOOL  _isInitializing;
    BOOL  _isObservingContentLayoutRect;
    BOOL  _lastPossiblyVisible;
    double  _lastYaw;
    _MKAnnotationDragGestureRecognizer * _longClickRecognizer;
    VKMapView * _mapLayer;
    double  _mapModeStartTime;
    unsigned long long  _mapType;
    VKMapView * _mapView;
    long long  _mouseOverFeedbackState;
    NSArray * _mouseOverLabelRecognizers;
    VKNavContext * _navContext;
    NSClickGestureRecognizer * _nonselectingClickGestureRecognizer;
    double  _oldAltitude;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _oldCenterCoordinate;
    double  _oldHeading;
    double  _oldPitch;
    long long  _originalLoopRate;
    MKOverlayContainerView * _overlayContainer;
    long long  _overlaysWritingDirection;
    struct CGPoint { 
        double x; 
        double y; 
    }  _pointInMapOnMouseDown;
    long long  _preGesturingLoopRate;
    id  _regionSetterWhenSized;
    MKRotationFilter * _rotationFilter;
    VKRouteContext * _routeContext;
    <MKMapViewDelegate><MKMapViewDelegatePrivate> * _safeDelegate;
    MKScaleView * _scaleView;
    BOOL  _scaleVisible;
    id  _selectAnnotationViewAfterRedrawBlock;
    MKLabelMarker * _selectedLabelMarker;
    NSClickGestureRecognizer * _selectingClickGestureRecognizer;
    NSView * _settingsView;
    id  _showCalloutAfterRegionChangeBlock;
    BOOL  _showsAboutMapInContextualMenu;
    BOOL  _showsCompass;
    BOOL  _showsScale;
    BOOL  _showsScaleDuringZoom;
    BOOL  _showsZoomControls;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _smartAimingCachedCoordinate;
    NSOrderedSet * _storedAccessibilityItems;
    unsigned long long  _suspendedEffectsCount;
    <MKMapViewDelegate><MKMapViewDelegatePrivate> * _unsafeDelegate;
    BOOL  _useBalloonCalloutsForLabels;
    MKUserLocation * _userLocation;
    double  _verticalYawOverride;
    BOOL  _wantsAccessibilityUpdates;
    BOOL  _willUpdateAccessibilityItems;
    NSSegmentedControl * _zoomButtons;
    MKAccessibilityItem * focusedAccessibilityItem;
    BOOL  wantsAccessibilityUpdates;
    BOOL  willUpdateAccessibilityItems;
}

@property (nonatomic, readwrite) BOOL _annotationViewsAreAddedImmediately;
@property (getter=_safeDelegate, setter=_setSafeDelegate:, nonatomic, readwrite) <MKMapViewDelegate> *_safeDelegate;
@property (nonatomic, readonly) double _zoomLevel;
@property (nonatomic, readonly) double _zoomScale;
@property (atomic, readonly, retain) NSOrderedSet *accessibilityItems;
@property (getter=_additionalManifestConfiguration, setter=_setAdditionalManifestConfiguration:, nonatomic, readwrite, retain) GEOResourceManifestConfiguration *additionalManifestConfiguration;
@property (nonatomic, readonly) BOOL animating;
@property (getter=_annotationViews, nonatomic, readonly) NSArray *annotationViews;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } annotationVisibleRect;
@property (nonatomic, readonly) NSArray *annotations;
@property (nonatomic, readonly) CALayer *annotationsContainerLayer;
@property (getter=_applicationState, setter=_setApplicationState:, nonatomic, readwrite) int applicationState;
@property (getter=_isAttributionBadgeClickable, setter=_setAttributionBadgeClickable:, nonatomic, readwrite) BOOL attributionBadgeClickable;
@property (nonatomic, readwrite) int attributionCorner;
@property (getter=_automaticallySnapsToNorth, setter=_setAutomaticallySnapsToNorth:, nonatomic, readwrite) BOOL automaticallySnapsToNorth;
@property (getter=isCalloutLeftAnchored, nonatomic, readonly) BOOL calloutLeftAnchored;
@property (nonatomic, readonly, retain) NSView *calloutView;
@property (getter=isCalloutVisible, nonatomic, readonly) BOOL calloutVisible;
@property (nonatomic, readwrite, copy) MKMapCamera *camera;
@property (getter=_canEnter3DMode, nonatomic, readonly) BOOL canEnter3DMode;
@property (getter=_canEnter3DModeFlyover, nonatomic, readonly) BOOL canEnter3DModeFlyover;
@property (getter=_canEnterNightMode, nonatomic, readonly) BOOL canEnterNightMode;
@property (getter=_canSelectAllLabels, setter=_setCanSelectAllLabels:, nonatomic, readwrite) BOOL canSelectAllLabels;
@property (getter=_canSelectPOIs, setter=_setCanSelectPOIs:, nonatomic, readwrite) BOOL canSelectPOIs;
@property (getter=_canShowFlyover, nonatomic, readonly) BOOL canShowFlyover;
@property (nonatomic, readwrite) BOOL canShowMouseOverFeedback;
@property (nonatomic, readwrite) struct CLLocationCoordinate2D { double x1; double x2; } centerCoordinate;
@property (getter=_isChangingRegionForGesture, nonatomic, readonly) BOOL changingRegionForGesture;
@property (nonatomic, readwrite) BOOL continueToRenderWhenOccluded;
@property (getter=_currentEnvironmentLabelFrame, nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentEnvironmentLabelFrame;
@property (getter=_currentFlyoverAnimationID, setter=_setCurrentFlyoverAnimationID:, nonatomic, readwrite) unsigned long long currentFlyoverAnimationID;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (nonatomic, readwrite) <MKMapViewDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (getter=_detailedDescription, nonatomic, readonly) NSString *detailedDescription;
@property (getter=_detailedDescriptionDictionaryRepresentation, nonatomic, readonly) NSDictionary *detailedDescriptionDictionaryRepresentation;
@property (getter=_isDimmingOutsideVenueWithFocus, nonatomic, readwrite) BOOL dimmingOutsideVenueWithFocus;
@property (getter=_displayedSearchResultsType, setter=_setDisplayedSearchResultsType:, nonatomic, readwrite) long long displayedSearchResultsType;
@property (getter=_edgeInsets, setter=_setEdgeInsets:, nonatomic, readwrite) struct NSEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsets;
@property (getter=_edgeInsetsLayoutGuide, nonatomic, readonly) NSLayoutGuide *edgeInsetsLayoutGuide;
@property (nonatomic, readonly) BOOL effectsEnabled;
@property (nonatomic, readwrite, retain) MKAccessibilityItem *focusedAccessibilityItem;
@property (nonatomic, readonly) BOOL hasUserLocation;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite) BOOL hidesAllUIOnMap;
@property (nonatomic, readwrite) BOOL ignoreLocationUpdates;
@property (getter=_interactionMode, setter=_setInteractionMode:, nonatomic, readwrite) long long interactionMode;
@property (getter=_labelEdgeInsets, setter=_setLabelEdgeInsets:, nonatomic, readwrite) struct NSEdgeInsets { double x1; double x2; double x3; double x4; } labelEdgeInsets;
@property (nonatomic, readwrite) long long labelTextSize;
@property (getter=_localizeLabels, setter=_setLocalizeLabels:, nonatomic, readwrite) BOOL localizeLabels;
@property (getter=_isLocationPulseEnabled, setter=_setLocationPulseEnabled:, nonatomic, readwrite) BOOL locationPulseEnabled;
@property (getter=_mapLayer, nonatomic, readonly) VKMapView *mapLayer;
@property (getter=_mapRegion, nonatomic, readonly) GEOMapRegion *mapRegion;
@property (nonatomic, readwrite) unsigned long long mapType;
@property (nonatomic, readwrite) BOOL markersEnabled;
@property (getter=_maximumZoomLevel, nonatomic, readonly) double maximumZoomLevel;
@property (getter=_minimumZoomLevel, nonatomic, readonly) double minimumZoomLevel;
@property (nonatomic, readwrite) NSView *nextKeyViewAfterSubtree;
@property (getter=_nonselectingClickGestureRecognizer, nonatomic, readonly) NSClickGestureRecognizer *nonselectingClickGestureRecognizer;
@property (nonatomic, readonly) NSArray *overlays;
@property (nonatomic, readwrite) long long overlaysWritingDirection;
@property (getter=isPitchEnabled, nonatomic, readwrite) BOOL pitchEnabled;
@property (getter=_isPitched, nonatomic, readonly) BOOL pitched;
@property (nonatomic, readwrite, retain) CLLocation *predictedUserLocation;
@property (nonatomic, readwrite) struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } region;
@property (getter=isRegionChanging, nonatomic, readonly) BOOL regionChanging;
@property (getter=isRotateEnabled, nonatomic, readwrite) BOOL rotateEnabled;
@property (getter=_rotationSnappingEnabled, setter=_setRotationSnappingEnabled:, nonatomic, readwrite) BOOL rotationSnappingEnabled;
@property (getter=isScrollEnabled, nonatomic, readwrite) BOOL scrollEnabled;
@property (nonatomic, readwrite, copy) NSArray *selectedAnnotations;
@property (getter=_selectedFeatureID, setter=_setSelectedFeatureID:, nonatomic, readwrite) unsigned long long selectedFeatureID;
@property (nonatomic, readonly, retain) MKLabelMarker *selectedLabelMarker;
@property (getter=_selectingClickGestureRecognizer, nonatomic, readonly) NSClickGestureRecognizer *selectingClickGestureRecognizer;
@property (nonatomic, readwrite, retain) NSView *settingsView;
@property (getter=_shouldAnimatePositionWithRouteMatch, setter=_setShouldAnimatePositionWithRouteMatch:, nonatomic, readwrite) BOOL shouldAnimatePositionWithRouteMatch;
@property (getter=_shouldLoadFallbackTiles, setter=_setShouldLoadFallbackTiles:, nonatomic, readwrite) BOOL shouldLoadFallbackTiles;
@property (getter=_shouldSplitRouteLine, setter=_setShouldSplitRouteLine:, nonatomic, readwrite) BOOL shouldSplitRouteLine;
@property (getter=_isShowingFlyover, nonatomic, readonly) BOOL showingFlyover;
@property (nonatomic, readwrite) BOOL showsAboutMapInContextualMenu;
@property (nonatomic, readwrite) BOOL showsAttribution;
@property (nonatomic, readwrite) BOOL showsAttributionBadge;
@property (nonatomic, readwrite) BOOL showsBuildings;
@property (nonatomic, readwrite) BOOL showsCompass;
@property (getter=_showsCurrentEnvironmentName, setter=_setShowsCurrentEnvironmentName:, nonatomic, readwrite) BOOL showsCurrentEnvironmentName;
@property (getter=_showsNightMode, setter=_setShowsNightMode:, nonatomic, readwrite) BOOL showsNightMode;
@property (nonatomic, readwrite) BOOL showsPointsOfInterest;
@property (nonatomic, readwrite) BOOL showsScale;
@property (getter=_showsScaleDuringZoom, setter=_setShowsScaleDuringZoom:, nonatomic, readwrite) BOOL showsScaleDuringZoom;
@property (nonatomic, readwrite) BOOL showsTraffic;
@property (getter=_showsTrafficIncidents, setter=_setShowsTrafficIncidents:, nonatomic, readwrite) BOOL showsTrafficIncidents;
@property (nonatomic, readwrite) BOOL showsUserLocation;
@property (getter=_showsVenues, setter=_setShowsVenues:, nonatomic, readwrite) BOOL showsVenues;
@property (nonatomic, readwrite) BOOL showsZoomControls;
@property (atomic, readwrite, retain) NSOrderedSet *storedAccessibilityItems;
@property (atomic, readonly) Class superclass;
@property (nonatomic, readwrite) BOOL trafficEnabled;
@property (getter=_transitLineMarkersInCurrentViewport, nonatomic, readonly) NSArray *transitLineMarkersInCurrentViewport;
@property (getter=_useBalloonCalloutsForLabels, setter=_setUseBalloonCalloutsForLabels:, nonatomic, readwrite) BOOL useBalloonCalloutsForLabels;
@property (getter=_userInteractionPausesLocationUpdates, setter=_setUserInteractionPausesLocationUpdates:, nonatomic, readwrite) BOOL userInteractionPausesLocationUpdates;
@property (nonatomic, readonly) MKUserLocation *userLocation;
@property (nonatomic, readonly, retain) MKAnnotationView *userLocationView;
@property (getter=isUserLocationVisible, nonatomic, readonly) BOOL userLocationVisible;
@property (getter=_userTrackingZoomStyle, setter=_setUserTrackingZoomStyle:, nonatomic, readwrite) long long userTrackingZoomStyle;
@property (nonatomic, readonly) VKVenueBuildingFeatureMarker *venueBuildingWithFocus;
@property (nonatomic, readonly) VKVenueFeatureMarker *venueWithFocus;
@property (nonatomic, readwrite) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } visibleMapRect;
@property (getter=_visibleTileSets, nonatomic, readonly) NSArray *visibleTileSets;
@property (atomic, readwrite) BOOL wantsAccessibilityUpdates;
@property (atomic, readwrite) BOOL willUpdateAccessibilityItems;
@property (nonatomic, readwrite, retain) NSSegmentedControl *zoomButtons;
@property (getter=isZoomEnabled, nonatomic, readwrite) BOOL zoomEnabled;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2 edgeInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg3 region:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg4;
+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2 region:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg3;

- (void).cxx_destruct;
- (void)_addAnnotation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)_addAnnotations:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)_addAnnotationsCustomFeatureStoreIfNeeded;
- (void)_addCustomFeatureDataSource:(id)arg1;
- (void)_addPersistentVectorOverlay:(id)arg1;
- (void)_addSetRegionBlockWhenSized:(id)arg1;
- (void)_addVectorOverlay:(id)arg1;
- (void)_addViewsForAnnotations:(id)arg1;
- (id)_additionalManifestConfiguration;
- (id)_annotationAtPoint:(struct CGPoint { double x1; double x2; })arg1 avoidCurrent:(BOOL)arg2;
- (void)_annotationViewDragStateChanged:(id)arg1;
- (id)_annotationViews;
- (BOOL)_annotationViewsAreAddedImmediately;
- (int)_applicationState;
- (BOOL)_automaticallySnapsToNorth;
- (double)_boundedZoomLevel:(double)arg1;
- (BOOL)_canEnter3DMode;
- (BOOL)_canEnter3DModeFlyover;
- (BOOL)_canEnterNightMode;
- (BOOL)_canSelectAllLabels;
- (BOOL)_canSelectPOIs;
- (BOOL)_canShowFlyover;
- (struct { double x1; double x2; })_centerMapPoint;
- (struct CGPoint { double x1; double x2; })_centerPoint;
- (void)_clearGestureRecognizers;
- (void)_clearGesturesAndAnimations;
- (void)_clearLayoutGuides;
- (void)_clearMouseOverLabelRecognizers;
- (id)_commonInitFromIB:(BOOL)arg1 gestureRecognizerHostView:(id)arg2 showsAttribution:(BOOL)arg3;
- (void)_configureGestureRecognizers:(id)arg1;
- (void)_contextualMenuAboutMaps;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_currentEnvironmentLabelFrame;
- (unsigned long long)_currentFlyoverAnimationID;
- (double)_defaultAnimationDurationForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)_deselectLabelMarkerAnimated:(BOOL)arg1;
- (void)_didChangeRegionMidstream:(BOOL)arg1;
- (void)_didEndZoom;
- (void)_displayWorld;
- (long long)_displayedSearchResultsType;
- (void)_dropDraggingAnnotationView:(BOOL)arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsets;
- (id)_edgeInsetsLayoutGuide;
- (void)_enter3DMode;
- (void)_enterARMode;
- (void)_enterARModeWithLocation:(id)arg1;
- (void)_exit3DMode;
- (void)_exitARMode;
- (void)_forceMapViewLayout;
- (BOOL)_gestureRecognizer:(id)arg1 shouldAttemptToRecognizeWithEvent:(id)arg2;
- (BOOL)_gesturesShouldAttemptToRecognizeWithEvent:(id)arg1;
- (double)_goToCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 zoomLevel:(double)arg2 animated:(BOOL)arg3;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(BOOL)arg3;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(BOOL)arg3 completionHandler:(id)arg4;
- (void)_handleClickOnCompass:(id)arg1;
- (void)_handleClickToDeselect:(id)arg1;
- (void)_handleClickToSelect:(id)arg1;
- (void)_handleLongClick:(id)arg1;
- (void)_handleSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)_iconsShouldAlignToPixels;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 gestureRecognizerHostView:(id)arg2 showsAttribution:(BOOL)arg3;
- (void)_insertKeyView:(id)arg1 afterKeyView:(id)arg2;
- (long long)_interactionMode;
- (BOOL)_isAttributionBadgeClickable;
- (BOOL)_isChangingRegionForGesture;
- (BOOL)_isDimmingOutsideVenueWithFocus;
- (BOOL)_isHandlingUserEvent;
- (BOOL)_isLocationPulseEnabled;
- (BOOL)_isPitched;
- (BOOL)_isShowingFlyover;
- (BOOL)_isUsingDevResourceStyleSheet;
- (BOOL)_isZooming;
- (void)_issueDatasetCheckinCall;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_labelEdgeInsets;
- (id)_labelMarkerAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_labelMarkerForCustomFeatureAnnotation:(id)arg1;
- (id)_labelMarkersInViewport;
- (id)_lastKeyViewInSubtree;
- (void)_layoutBottomViews;
- (BOOL)_localizeLabels;
- (void)_logTimeSpentInCurrentMapMode;
- (id)_mapAttribution;
- (struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; BOOL x5; })_mapDisplayStyle;
- (double)_mapKitZoomLevelForVectorKitTileZoomLevel:(double)arg1;
- (id)_mapLayer;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectWithFraction:(double)arg1 ofVisible:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_mapRegion;
- (id)_mapRegionWithCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 zoomScale:(double)arg2;
- (BOOL)_mapViewHasUpdatedCamera;
- (double)_maximumZoomLevel;
- (double)_minimumZoomLevel;
- (BOOL)_mustWaitUntilSized;
- (id)_nonselectingClickGestureRecognizer;
- (double)_panDurationFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)_pauseFlyoverAnimation;
- (void)_performFlyoverAnimation:(id)arg1;
- (void)_performFlyoverAnimation:(id)arg1 animateToStart:(BOOL)arg2;
- (void)_prepareFlyoverAnimation:(id)arg1 completion:(id)arg2;
- (void)_removeCustomFeatureDataSource:(id)arg1;
- (void)_removePersistentVectorOverlay:(id)arg1;
- (void)_removeVectorOverlay:(id)arg1;
- (void)_replaceAnnotation:(id)arg1 withAnnotation:(id)arg2;
- (void)_resumeFlyoverAnimation;
- (BOOL)_roomForCompass;
- (long long)_roundedZoomLevel;
- (id)_safeDelegate;
- (void)_selectAnnotation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)_selectingClickGestureRecognizer;
- (void)_setAdditionalManifestConfiguration:(id)arg1;
- (void)_setApplicationState:(int)arg1;
- (void)_setAttributionBadgeClickable:(BOOL)arg1;
- (void)_setAutomaticallySnapsToNorth:(BOOL)arg1;
- (void)_setCanSelectAllLabels:(BOOL)arg1;
- (void)_setCanSelectPOIs:(BOOL)arg1;
- (void)_setCurrentFlyoverAnimationID:(unsigned long long)arg1;
- (void)_setDisplayedSearchResultsType:(long long)arg1;
- (void)_setEdgeInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setEdgeInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1 explicit:(BOOL)arg2;
- (void)_setInteractionMode:(long long)arg1;
- (void)_setLabelEdgeInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setLocalizeLabels:(BOOL)arg1;
- (void)_setLocationPulseEnabled:(BOOL)arg1;
- (void)_setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; BOOL x5; })arg1;
- (void)_setMapType:(unsigned long long)arg1 animated:(BOOL)arg2;
- (void)_setMapType:(unsigned long long)arg1 onInit:(BOOL)arg2 animated:(BOOL)arg3;
- (void)_setMapType:(unsigned long long)arg1 onInit:(BOOL)arg2 animated:(BOOL)arg3 forceSetting:(BOOL)arg4;
- (void)_setSafeDelegate:(id)arg1;
- (void)_setShouldAnimatePositionWithRouteMatch:(BOOL)arg1;
- (void)_setShouldLoadFallbackTiles:(BOOL)arg1;
- (void)_setShouldSplitRouteLine:(BOOL)arg1;
- (void)_setShowsCurrentEnvironmentName:(BOOL)arg1;
- (void)_setShowsNightMode:(BOOL)arg1;
- (void)_setShowsScaleDuringZoom:(BOOL)arg1;
- (void)_setShowsTrafficIncidents:(BOOL)arg1;
- (void)_setShowsVenues:(BOOL)arg1;
- (void)_setTracePlaybackSpeedMultiplier:(double)arg1;
- (void)_setUseBalloonCalloutsForLabels:(BOOL)arg1;
- (void)_setUserInteractionPausesLocationUpdates:(BOOL)arg1;
- (void)_setUserTrackingZoomStyle:(long long)arg1;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2 completionHandler:(id)arg3;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 duration:(double)arg2 completionHandler:(id)arg3;
- (void)_setZoomScale:(double)arg1 centerCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 duration:(double)arg3 animated:(BOOL)arg4;
- (void)_setZoomScale:(double)arg1 centerMapPoint:(struct { double x1; double x2; })arg2 duration:(double)arg3 animated:(BOOL)arg4;
- (BOOL)_shouldAnimatePositionWithRouteMatch;
- (BOOL)_shouldLoadFallbackTiles;
- (BOOL)_shouldSplitRouteLine;
- (void)_showOrHideScaleIfNecessary:(BOOL)arg1;
- (BOOL)_showsCurrentEnvironmentName;
- (BOOL)_showsNightMode;
- (BOOL)_showsScaleDuringZoom;
- (BOOL)_showsTrafficIncidents;
- (BOOL)_showsVenues;
- (void)_sizeDidChangeWithCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)_sizeWillChange;
- (void)_snapToTrueNorthAndCallBack:(BOOL)arg1;
- (void)_startEffects;
- (void)_startFlyoverTourAnimation:(unsigned long long)arg1 duration:(double)arg2 completion:(id)arg3;
- (void)_stopEffects;
- (void)_stopFlyoverAnimation;
- (BOOL)_supportsVKMapType:(long long)arg1;
- (void)_updateAllUIOnMapVisibility;
- (void)_updateAttribution;
- (void)_updateBackgroundStateNow;
- (void)_updateBackgroundStateSoon;
- (void)_updateCompassVisibility;
- (void)_updateContentBounds;
- (void)_updateEffects;
- (void)_updateEnvironmentLabelText;
- (void)_updateFallbackTileLoading;
- (void)_updateIconsShouldAlignToPixels;
- (void)_updateInsets;
- (void)_updateInsetsWithForce:(BOOL)arg1;
- (void)_updateMouseOverLabelRecognizers;
- (void)_updateScale;
- (void)_updateScrollContainerView:(BOOL)arg1 forReason:(long long)arg2;
- (void)_updateScrollingAndGestures;
- (void)_updateShouldDisplayEffects;
- (void)_updateZoomControlsVisiblility;
- (BOOL)_useBalloonCalloutsForLabels;
- (BOOL)_userInteractionPausesLocationUpdates;
- (long long)_userTrackingZoomStyle;
- (double)_vectorKitTileZoomLevelForMapKitZoomLevel:(double)arg1;
- (id)_viewsToIgnoreForGestures;
- (void)_willChangeRegionAnimated:(BOOL)arg1;
- (void)_willStartZoom:(BOOL)arg1;
- (double)_zoomLevel;
- (double)_zoomLevelForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 includeAccessoryPadding:(BOOL)arg2;
- (double)_zoomLevelForRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 includeAccessoryPadding:(BOOL)arg2;
- (struct { double x1; struct CLLocationCoordinate2D { double x_2_1_1; double x_2_1_2; } x2; })_zoomRegionForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg2 maxZoomLevel:(long long)arg3 minZoomLevel:(long long)arg4;
- (double)_zoomScale;
- (double)_zoomScaleForMapRegion:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)addAnnotation:(id)arg1;
- (void)addAnnotationRepresentation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)addAnnotations:(id)arg1;
- (BOOL)allowsVibrancy;
- (BOOL)animating;
- (void)annotationContainer:(id)arg1 calloutPrimaryActionTriggeredForAnnotationView:(id)arg2;
- (BOOL)annotationContainer:(id)arg1 isAnnotationView:(id)arg2 validForDisplayAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (double)annotationContainer:(id)arg1 pinDropDistanceForCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 maxDistance:(double*)arg3;
- (id)annotationContainer:(id)arg1 requestAddingClusterForAnnotationViews:(id)arg2;
- (void)annotationContainer:(id)arg1 requestRemovingClusterAnnotationView:(id)arg2;
- (void)annotationContainer:(id)arg1 scrollToRevealCalloutWithOffset:(struct CGPoint { double x1; double x2; })arg2 annotationCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg3 completionHandler:(id)arg4;
- (void)annotationContainerDidAnimateBubble:(id)arg1;
- (void)annotationContainerDidDropPins:(id)arg1;
- (void)annotationContainerDidFinishMapsTransitionExpanding:(id)arg1;
- (BOOL)annotationContainerIsRotated:(id)arg1;
- (BOOL)annotationContainerShouldAlignToPixels:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })annotationContainerVisibleRect:(id)arg1;
- (void)annotationContainerWillAnimateBubble:(id)arg1;
- (void)annotationContainerWillDropPins:(id)arg1;
- (double)annotationContainerZoomScale:(id)arg1;
- (id)annotationCoordinateTest;
- (BOOL)annotationManager:(id)arg1 canSelectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didRemoveAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2;
- (id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2;
- (BOOL)annotationManager:(id)arg1 shouldAnimateDeselectionOfAnnotation:(id)arg2 forSelectionOfAnnotation:(id)arg3;
- (void)annotationManager:(id)arg1 willDeselectAnnotationRepresentation:(id)arg2;
- (id)annotationRectTest;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })annotationVisibleRect;
- (id)annotations;
- (id)annotationsInMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationDidResignActiveOrWillTerminate:(id)arg1;
- (int)attributionCorner;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })attributionFrame;
- (id)beginStoppingEffects;
- (void)calloutDidAppearForAnnotationView:(id)arg1 inContainer:(id)arg2;
- (id)calloutView;
- (id)camera;
- (BOOL)canShowMouseOverFeedback;
- (void)cancelOperation:(id)arg1;
- (struct CLLocationCoordinate2D { double x1; double x2; })centerCoordinate;
- (id)compass;
- (id)compassView;
- (void)containingWindowWillClose:(id)arg1;
- (BOOL)continueToRenderWhenOccluded;
- (struct CGPoint { double x1; double x2; })convertCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toMapRectFromView:(id)arg2;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRegionFromView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (int)currentMapViewTargetForAnalytics;
- (int)currentUITargetForAnalytics;
- (void)cursorUpdate:(id)arg1;
- (void)dealloc;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1 forAnnotation:(id)arg2;
- (void)deselectAllMarkersAndAnnotationViews;
- (void)deselectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)deselectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2;
- (void)deselectVenuePoiFeatureId;
- (void)disableAndRearmEnableMarkerPixelAlignment;
- (void)disableMarkerPixelAlignment;
- (BOOL)displayedFloorIsDefaultForBuildingsInVenue:(id)arg1;
- (short)displayedFloorOrdinalForBuildingsInVenue:(id)arg1;
- (BOOL)drawsBlackOnWhiteScale;
- (BOOL)effectsEnabled;
- (void)enableMarkerPixelAlignment;
- (void)encodeWithCoder:(id)arg1;
- (void)flagsChanged:(id)arg1;
- (id)focusedAccessibilityItem;
- (struct CGPoint { double x1; double x2; })gestureController:(id)arg1 focusPointForPoint:(struct CGPoint { double x1; double x2; })arg2 gestureKind:(long long)arg3;
- (BOOL)gestureController:(id)arg1 shouldAttemptToRecognizeWithEvent:(id)arg2;
- (void)gestureControllerDidStopPanning:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerDidStopPanningDecelerating:(id)arg1;
- (void)gestureControllerDidStopRotating:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerDidStopRotatingDecelerating:(id)arg1;
- (void)gestureControllerDidStopTilting:(id)arg1 willDecelerate:(BOOL)arg2 tiltDirection:(long long)arg3;
- (void)gestureControllerDidStopTiltingDecelerating:(id)arg1;
- (void)gestureControllerDidStopUserInteraction:(id)arg1;
- (void)gestureControllerDidStopZooming:(id)arg1 direction:(long long)arg2 type:(long long)arg3 willDecelerate:(BOOL)arg4;
- (void)gestureControllerDidStopZooming:(id)arg1 direction:(long long)arg2 willDecelerate:(BOOL)arg3;
- (void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(long long)arg2;
- (void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(long long)arg2 type:(long long)arg3;
- (void)gestureControllerWillStartPanning:(id)arg1;
- (void)gestureControllerWillStartRotating:(id)arg1;
- (void)gestureControllerWillStartTilting:(id)arg1;
- (void)gestureControllerWillStartUserInteraction:(id)arg1;
- (void)gestureControllerWillStartZooming:(id)arg1 animated:(BOOL)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (void)goToDefaultLocation;
- (BOOL)hasRenderedSomething;
- (BOOL)hasUserLocation;
- (BOOL)hidesAllUIOnMap;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)isCalloutLeftAnchored;
- (BOOL)isCalloutVisible;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (BOOL)isPitchEnabled;
- (BOOL)isRegionChanging;
- (BOOL)isRotateEnabled;
- (BOOL)isScrollEnabled;
- (BOOL)isShowingNoDataPlaceholders;
- (BOOL)isUserLocationVisible;
- (BOOL)isZoomEnabled;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (long long)labelTextSize;
- (BOOL)layer:(id)arg1 shouldInheritContentsScale:(double)arg2 fromWindow:(id)arg3;
- (id)logContextForLogMsgEvent:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (id)makeZoomButtonsIfNeeded;
- (void)mapLayer:(id)arg1 arSessionWasInterrupted:(unsigned long long)arg2;
- (void)mapLayer:(id)arg1 arTrackingStateDidChange:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (void)mapLayer:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 canZoomInDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 canZoomOutDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didEncounterARError:(id)arg2;
- (void)mapLayer:(id)arg1 didStopFlyoverTourCompleted:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)mapLayer:(id)arg1 flyoverTourLabelDidChange:(id)arg2;
- (id)mapLayer:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)mapLayer:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapLayer:(id)arg1 venueWithFocusDidChange:(id)arg2 building:(id)arg3;
- (void)mapLayer:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)mapLayer:(id)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (void)mapLayerARSessionInterruptionEnded:(id)arg1;
- (void)mapLayerDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(BOOL)arg2;
- (void)mapLayerDidBecomePartiallyDrawn:(id)arg1;
- (void)mapLayerDidChangeVisibleRegion:(id)arg1;
- (void)mapLayerDidDraw:(id)arg1;
- (void)mapLayerDidEnterAR:(id)arg1;
- (void)mapLayerDidExitAR:(id)arg1;
- (void)mapLayerDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapLayerDidFinishLoadingTiles:(id)arg1;
- (void)mapLayerDidStartLoadingTiles:(id)arg1;
- (void)mapLayerLabelsDidLayout:(id)arg1;
- (void)mapLayerNavigationCameraDidLeaveDefaultZoom:(id)arg1;
- (void)mapLayerNavigationCameraDidReturnToDefaultZoom:(id)arg1;
- (void)mapLayerNavigationCameraHasStartedPanning:(id)arg1;
- (void)mapLayerNavigationCameraHasStoppedPanning:(id)arg1;
- (void)mapLayerWillEnterAR:(id)arg1;
- (void)mapLayerWillStartFlyoverTour:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (unsigned long long)mapType;
- (id)menuForEvent:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseOverLabelRecognizer:(id)arg1 stateChangedWithEvent:(id)arg2;
- (void)moveAnnotationRepresentation:(id)arg1 fromCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg2 animated:(BOOL)arg3 duration:(double)arg4;
- (id)nextKeyViewAfterSubtree;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)overlaysWritingDirection;
- (void)pauseUserLocationUpdates;
- (BOOL)performKeyEquivalent:(id)arg1;
- (struct CGPoint { double x1; double x2; })pointInMapOnMouseDown;
- (struct CGPoint { double x1; double x2; })pointInMapViewFromEvent:(id)arg1;
- (void)prepareMenu:(id)arg1 withEvent:(id)arg2;
- (double)presentationYaw;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })region;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFits:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)registerClass:(Class)arg1 forAnnotationViewWithReuseIdentifier:(id)arg2;
- (void)removeAnnotation:(id)arg1;
- (void)removeAnnotationRepresentation:(id)arg1;
- (void)removeAnnotations:(id)arg1;
- (void)resetDisplayedFloorOrdinalForAllVenues;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x1; double x2; })arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (BOOL)restoreViewportFromDictionary:(id)arg1;
- (void)resumeUserLocationUpdates;
- (void)rotateWithEvent:(id)arg1;
- (void)rotationFilter:(id)arg1 didChangeSnapping:(BOOL)arg2;
- (id)scaleView;
- (void)scrollWheel:(id)arg1;
- (id)seamlessOpeningURLForMapItems:(id)arg1 launchOptions:(id)arg2;
- (void)selectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)selectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2;
- (void)selectLabelMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)selectedAnnotations;
- (id)selectedLabelMarker;
- (void)setAttributionCorner:(int)arg1;
- (void)setCamera:(id)arg1;
- (void)setCamera:(id)arg1 animated:(BOOL)arg2;
- (void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6;
- (void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(id)arg7;
- (void)setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5;
- (void)setCanShowMouseOverFeedback:(BOOL)arg1;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 animated:(BOOL)arg2;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 animated:(BOOL)arg2 completion:(id)arg3;
- (void)setCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 zoomLevel:(double)arg2 animated:(BOOL)arg3;
- (void)setContinueToRenderWhenOccluded:(BOOL)arg1;
- (void)setDimmingOutsideVenueWithFocus:(BOOL)arg1;
- (void)setDisplayedFloorOrdinal:(short)arg1 forBuildingsInVenue:(id)arg2;
- (void)setFlyoverMode:(int)arg1;
- (void)setFocusedAccessibilityItem:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setGestureRecognizers:(id)arg1;
- (void)setHidesAllUIOnMap:(BOOL)arg1;
- (void)setHighlightedTransitLabelMarker:(id)arg1;
- (void)setLabelTextSize:(long long)arg1;
- (void)setMapType:(unsigned long long)arg1;
- (void)setMouseOverFeedbackState:(long long)arg1;
- (void)setNextKeyViewAfterSubtree:(id)arg1;
- (void)setOverlaysWritingDirection:(long long)arg1;
- (void)setPitchEnabled:(BOOL)arg1;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2 completion:(id)arg3;
- (void)setRotateEnabled:(BOOL)arg1;
- (void)setScrollEnabled:(BOOL)arg1;
- (void)setSelectedAnnotations:(id)arg1;
- (void)setSelectedVenuePoiFeatureId:(unsigned long long)arg1;
- (void)setSettingsView:(id)arg1;
- (void)setShowsAboutMapInContextualMenu:(BOOL)arg1;
- (void)setShowsAttribution:(BOOL)arg1;
- (void)setShowsAttributionBadge:(BOOL)arg1;
- (void)setShowsBuildings:(BOOL)arg1;
- (void)setShowsCompass:(BOOL)arg1;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (void)setShowsScale:(BOOL)arg1;
- (void)setShowsTraffic:(BOOL)arg1;
- (void)setShowsUserLocation:(BOOL)arg1;
- (void)setShowsZoomControls:(BOOL)arg1;
- (void)setStoredAccessibilityItems:(id)arg1;
- (void)setVehicleState:(struct { BOOL x1; })arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg2 animated:(BOOL)arg3;
- (void)setWantsAccessibilityUpdates:(BOOL)arg1;
- (void)setWillUpdateAccessibilityItems:(BOOL)arg1;
- (void)setZoomButtons:(id)arg1;
- (void)setZoomEnabled:(BOOL)arg1;
- (void)set_annotationViewsAreAddedImmediately:(BOOL)arg1;
- (id)settingsView;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (BOOL)shouldRecognizeMouseOverSelectablePartsOnly;
- (void)showAnnotations:(id)arg1 animated:(BOOL)arg2;
- (BOOL)showsAboutMapInContextualMenu;
- (BOOL)showsAttribution;
- (BOOL)showsAttributionBadge;
- (BOOL)showsBuildings;
- (BOOL)showsCompass;
- (BOOL)showsPointsOfInterest;
- (BOOL)showsScale;
- (BOOL)showsSettingsView;
- (BOOL)showsTraffic;
- (BOOL)showsUserLocation;
- (BOOL)showsZoomControls;
- (void)smartMagnifyWithEvent:(id)arg1;
- (void)snapToNorth:(id)arg1;
- (void)startLinearZoomIn:(BOOL)arg1 withEvent:(id)arg2;
- (void)stopZoomingWithInertia;
- (id)storedAccessibilityItems;
- (void)updateLayoutGuides;
- (void)updateTrackingAreas;
- (BOOL)userIsGesturing;
- (id)userLocation;
- (id)venueBuildingWithFocus;
- (id)venueWithFocus;
- (id)venueWithID:(unsigned long long)arg1;
- (void)viewDidMoveToWindow;
- (id)viewForAnnotation:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (id)viewportDictionary;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleCenteringRectInView:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })visibleMapRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectInView:(id)arg1;
- (BOOL)wantsAccessibilityUpdates;
- (BOOL)willUpdateAccessibilityItems;
- (void)windowDidChangeOcclusionState:(id)arg1;
- (id)zoomButtons;
- (void)zoomControlSegmentPressed:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;
- (struct CGPoint { double x1; double x2; })zoomPointInMapViewFromEvent:(id)arg1 smartAiming:(BOOL)arg2 lockOnPreviousTarget:(BOOL)arg3;
- (struct CGPoint { double x1; double x2; })zoomPointInMapViewFromPoint:(struct CGPoint { double x1; double x2; })arg1 smartAiming:(BOOL)arg2 lockOnPreviousTarget:(BOOL)arg3;
- (double)zoomToFocusVenue:(id)arg1;
- (double)zoomToFocusVenueBuilding:(id)arg1;

// MKMapView (AOIFeatureSelection)

- (unsigned long long)_selectedFeatureID;
- (void)_setSelectedFeatureID:(unsigned long long)arg1;

// MKMapView (Accessibility)

- (void)_checkIfNeedToUpdateAccessibilityItems;
- (void)_focusAccessibilityItemWithDelta:(long long)arg1;
- (void)_updateAccessibilityItemsNow;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityChildren;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityItemAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityItems;
- (id)accessibilityVisibleChildren;
- (void)focusNextAccessibilityItem;
- (void)focusPreviousAccessibilityItem;
- (void)setNeedsUpdateAccessibilityItems:(BOOL)arg1;

// MKMapView (DeprecatedSPI)

- (void)_setShowsTraffic:(BOOL)arg1;
- (BOOL)_showsTraffic;

// MKMapView (MKCamera)

- (id)_camera;
- (double)_durationFoCamera:(id)arg1;
- (void)_setCamera:(id)arg1;
- (void)_setCamera:(id)arg1 animated:(BOOL)arg2;
- (void)_setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(id)arg7;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timing:(id)arg3 completionHandler:(id)arg4;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (void)_setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5;
- (void)_snapToNorthIfNecessary;
- (void)_updateCameraState;
- (void)_updateFromCamera:(id)arg1;
- (void)_updateFromCamera:(id)arg1 duration:(double)arg2 timing:(id)arg3 completionHandler:(id)arg4;

// MKMapView (MKGeometry)

+ (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectThatFitsViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 mapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg2 viewInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg3 edgePadding:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg4 minZoomLevel:(double)arg5 maxZoomLevel:(double)arg6 snapToZoomLevel:(BOOL)arg7;
+ (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_regionThatFitsMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2 viewInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg3 edgePadding:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg4 region:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg5 minZoomLevel:(double)arg6 maxZoomLevel:(double)arg7 snapToZoomLevel:(BOOL)arg8;
+ (unsigned long long)minZoomLevelForMapType:(unsigned long long)arg1 viewSize:(struct CGSize { double x1; double x2; })arg2;

- (struct CGPoint { double x1; double x2; })_convertCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertMapPoint:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct CLLocationCoordinate2D { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 toMapPointFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toMapRectFromView:(id)arg2;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRegionFromView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (double)_distanceFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 fromView:(id)arg3 withPrecision:(long long)arg4;

// MKMapView (MKNonARC)

- (id)_flattenedAnnotationsForAnnotationViews:(id)arg1 maxdisplayPriority:(float*)arg2;
- (id)delegate;
- (void)setDelegate:(id)arg1;

// MKMapView (MKRAP)

- (id)_detailedDescription;
- (id)_detailedDescriptionDictionaryRepresentation;
- (id)_transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_visibleTileSets;

// MKMapView (OverlaysAPI)

- (void)addOverlay:(id)arg1;
- (void)addOverlay:(id)arg1 level:(long long)arg2;
- (void)addOverlays:(id)arg1;
- (void)addOverlays:(id)arg1 level:(long long)arg2;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (id)overlays;
- (id)overlaysInLevel:(long long)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removeOverlays:(id)arg1;
- (id)rendererForOverlay:(id)arg1;

// MKMapView (OverlaysInternal)

- (id)createDrawableForOverlay:(id)arg1;
- (id)overlayContainer;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (id)vk_mapLayer;

// MKMapView (ToBeDeprecatedSPI)

- (BOOL)_rotationSnappingEnabled;
- (void)_setRotationSnappingEnabled:(BOOL)arg1;
- (id)annotationsContainerLayer;
- (double)currentZoomLevel;
- (void)enter3DMode;
- (void)exit3DMode;
- (BOOL)isShowingFlyover;
- (BOOL)localizeLabels;
- (BOOL)markersEnabled;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (double)pitch;
- (void)setLocalizeLabels:(BOOL)arg1;
- (void)setMarkersEnabled:(BOOL)arg1;
- (void)setTrafficEnabled:(BOOL)arg1;
- (void)setZoomLevel:(double)arg1 animated:(BOOL)arg2;
- (BOOL)trafficEnabled;
- (double)yaw;
- (double)zoomLevel;

// MKMapView (TransitLineExtras)

- (void)_deselectTransitLineMarker;
- (void)_selectTransitLineMarker:(id)arg1;
- (void)_selectTransitLineMarkerWithIdentifier:(id)arg1;
- (id)_selectedTransitLineIDs;
- (id)_transitLineMarkerForIdentifier:(id)arg1;
- (id)_transitLineMarkersInCurrentViewport;

// MKMapView (UserPositioningInternal)

- (BOOL)_clearUserLocationOnLocationReset;
- (BOOL)_isLocationPropagationEnabled;
- (BOOL)_isUserLocationInView:(BOOL)arg1;
- (BOOL)_isUserLocationViewCentered:(double)arg1;
- (void)_pauseUserLocationUpdates;
- (void)_resumeUserLocationUpdates:(BOOL)arg1;
- (void)_setClearUserLocationOnLocationReset:(BOOL)arg1;
- (void)_setLocationPropagationEnabled:(BOOL)arg1;
- (void)_updateUserLocation:(id)arg1 routeMatch:(id)arg2;
- (void)_updateUserLocationViewWithLocation:(id)arg1 hadUserLocation:(BOOL)arg2;
- (BOOL)_userLocationWithinVisibleMapBounds;
- (BOOL)ignoreLocationUpdates;
- (void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;
- (BOOL)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (id)predictedUserLocation;
- (void)removeUserLocation;
- (void)setIgnoreLocationUpdates:(BOOL)arg1;
- (void)setPredictedUserLocation:(id)arg1;
- (void)startUpdatingUserLocation;
- (void)stopUpdatingUserLocation;
- (id)userLocationView;

// MKMapView (VKRouteContext)

- (void)_clearRouteContext;
- (void)_setAlternateRouteContextAnnotationETAComparison:(unsigned char)arg1 forRoute:(id)arg2;
- (void)_setRouteContextAnnotationText:(id)arg1 tollCurrency:(unsigned char)arg2 forRoute:(id)arg3;
- (void)_setRouteContextForRoute:(id)arg1;
- (void)_setRouteContextForRoutes:(id)arg1 selectedRouteIndex:(unsigned long long)arg2;
- (void)_setRouteContextInspectedLegIndex:(unsigned long long)arg1 inspectedStepIndex:(unsigned long long)arg2;
- (struct multimap<unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> > > > > { struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> > > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<URS::RouteShare, std::__1::allocator<URS::RouteShare> > >, std::__1::less<unsigned int>, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })_shareSectionsForRoutes:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// MKMapView (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;

@end
