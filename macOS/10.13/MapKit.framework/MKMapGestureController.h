/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
 */

@interface MKMapGestureController : NSObject <NSGestureRecognizerDelegate> {
    _MKDirectionalArrowRecognizer * _activeArrowGestureRecognizer;
    _MKDirectionalArrowRecognizer * _arrowPanGestureRecognizer;
    _MKDirectionalArrowRecognizer * _arrowRotateGestureRecognizer;
    _MKDirectionalArrowRecognizer * _arrowZoomGestureRecognizer;
    double  _arrowZoomSpeed;
    double  _arrowZoomStartTimestamp;
    _MKDirectionalPanGestureRecognizer * _compassDragRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _compassDragSimultaneousRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _compassDragTiltGestureRecognizer;
    MKCompassView * _compassView;
    VKTimedAnimation * _currentArrowAnimation;
    <MKMapGestureControllerDelegate> * _delegate;
    NSClickGestureRecognizer * _doubleClickGestureRecognizer;
    BOOL  _dragRotating;
    BOOL  _dragTilting;
    BOOL  _dragZooming;
    long long  _gestureCount;
    BOOL  _handlingTrackpadScroll;
    BOOL  _isFullRotatingFromArrows;
    BOOL  _isScrollDecelerating;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastArrowScrollTranslationDelta;
    double  _lastMagnification;
    double  _lastPinchUpdateTimestamp;
    double  _lastRotation;
    double  _lastRotationInGestureDelta;
    double  _lastRotationUpdateTimestamp;
    double  _lastRotationVelocity;
    double  _lastScale;
    double  _lastZoomDragTranslation;
    MKMapView * _mapView;
    _MKMouseDownGestureRecognizer * _mouseDownGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _otherButtonPanRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _otherButtonPanTiltGestureRecognizer;
    VKCompoundAnimation * _panDecelerationAnimationGroup;
    NSPanGestureRecognizer * _panGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _panRotationGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _panTiltGestureRecognizer;
    _MKDirectionalPanGestureRecognizer * _panZoomGestureRecognizer;
    BOOL  _panning;
    VKTimedAnimation * _pinchDecelerationAnimation;
    double  _pinchFactorAverageInGesture;
    _MKMagnificationGestureRecognizer * _pinchGestureRecognizer;
    BOOL  _pinching;
    BOOL  _rotating;
    VKTimedAnimation * _rotationDecelerationAnimation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _rotationDragCursorStartPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _rotationDragStartPoint;
    BOOL  _rotationEnabled;
    MKRotationFilter * _rotationFilter;
    _MKRotationGestureRecognizer * _rotationGestureRecognizer;
    BOOL  _rotationSnappingEnabled;
    _MKDirectionalPanGestureRecognizer * _scaleDragGestureRecognizer;
    MKScaleView * _scaleView;
    long long  _scrollBehavior;
    BOOL  _scrollEnabled;
    NSObject<OS_dispatch_source> * _scrollMomentumTimer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _scrollTranslation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _tiltDragCursorStartPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _tiltDragStartPoint;
    BOOL  _tiltEnabled;
    struct CGPoint { 
        double x; 
        double y; 
    }  _zoomDragCursorStartPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _zoomDragStartPoint;
    BOOL  _zoomEnabled;
}

@property (nonatomic, readwrite, retain) MKCompassView *compassView;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (nonatomic, readwrite) <MKMapGestureControllerDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (nonatomic, readonly) NSClickGestureRecognizer *doubleClickGestureRecognizer;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isRotationEnabled, nonatomic, readwrite) BOOL rotationEnabled;
@property (nonatomic, readwrite, retain) MKRotationFilter *rotationFilter;
@property (getter=isRotationSnappingEnabled, nonatomic, readwrite) BOOL rotationSnappingEnabled;
@property (nonatomic, readwrite, retain) MKScaleView *scaleView;
@property (getter=isScrollEnabled, nonatomic, readwrite) BOOL scrollEnabled;
@property (atomic, readonly) Class superclass;
@property (getter=isTiltEnabled, nonatomic, readwrite) BOOL tiltEnabled;
@property (getter=isZoomEnabled, nonatomic, readwrite) BOOL zoomEnabled;

- (void).cxx_destruct;
- (BOOL)_gestureRecognizer:(id)arg1 shouldAttemptToRecognizeWithEvent:(id)arg2;
- (void)_handleMouseDown:(id)arg1;
- (void)_handleStandardPan:(id)arg1;
- (void)beginGesturing;
- (void)cancelZoomInOrOut;
- (id)compassView;
- (id)delegate;
- (id)doubleClickGestureRecognizer;
- (void)endGesturing;
- (void)flagsChanged:(id)arg1;
- (BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleArrowPan:(id)arg1;
- (void)handleArrowRotate:(id)arg1;
- (void)handleArrowZoom:(id)arg1;
- (void)handleDoubleClick:(id)arg1;
- (void)handlePinch:(id)arg1;
- (void)handleRotation:(id)arg1;
- (void)handleRotationPan:(id)arg1;
- (void)handleScrollArrowMask:(long long)arg1;
- (void)handleTiltPan:(id)arg1;
- (void)handleZoomArrowMask:(long long)arg1 speed:(double)arg2;
- (void)handleZoomPan:(id)arg1;
- (id)initWithMapView:(id)arg1 gestureTargetView:(id)arg2;
- (BOOL)isRotationEnabled;
- (BOOL)isRotationSnappingEnabled;
- (BOOL)isScrollEnabled;
- (BOOL)isTiltEnabled;
- (BOOL)isZoomEnabled;
- (BOOL)keyDown:(id)arg1;
- (BOOL)keyUp:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)rotateWithEvent:(id)arg1;
- (id)rotationFilter;
- (id)scaleView;
- (void)scrollWithEvent:(id)arg1;
- (void)setCompassView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setRotationEnabled:(BOOL)arg1;
- (void)setRotationFilter:(id)arg1;
- (void)setRotationSnappingEnabled:(BOOL)arg1;
- (void)setScaleView:(id)arg1;
- (void)setScrollEnabled:(BOOL)arg1;
- (void)setTiltEnabled:(BOOL)arg1;
- (void)setZoomEnabled:(BOOL)arg1;
- (void)smartMagnifyWithEvent:(id)arg1;
- (void)stopDynamicAnimations;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;

@end
