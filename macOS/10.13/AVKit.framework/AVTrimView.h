/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit
 */

@interface AVTrimView : NSView {
    NSColor * _clearColor;
    AVTrimClipView * _clipView;
    CAGradientLayer * _clipViewMaskLayer;
    double  _currentValue;
    <AVTrimViewDelegate> * _delegate;
    AVTrimDimmerView * _dimmerViews;
    unsigned long long  _focusedPart;
    <NSObject><NSCopying> * _identityOfTrackedTouch;
    AVTrimIndicatorFocusRingView * _indicatorFocusRingView;
    AVTrimIndicatorView * _indicatorView;
    BOOL  _isFirstResponder;
    BOOL  _isScrolling;
    double  _maxValue;
    double  _maximumSelectionDuration;
    double  _minValue;
    BOOL  _needsLayoutSubviews;
    double  _nominalFrameRate;
    double  _offset;
    double  _offsetOnTrimHandle;
    NSColor * _opaqueColor;
    unsigned long long  _scrollDirection;
    NSTimer * _scrollTimer;
    NSView * _selectionContainerView;
    CAGradientLayer * _selectionContainerViewMaskLayer;
    double  _selectionEnd;
    AVTrimSelectionEndFocusRingView * _selectionEndFocusRingView;
    double  _selectionStart;
    AVTrimSelectionStartFocusRingView * _selectionStartFocusRingView;
    AVTrimSelectionView * _selectionView;
    NSColor * _semiOpaqueColor;
    NSTimer * _stopTrackingTimer;
    unsigned long long  _style;
    AVTimeIndicatorPopover * _timeIndicatorPopover;
    AVTimeFormatter * _timeIndicatorTimeFormatter;
    NSArray * _trackViewControllers;
    unsigned long long  _trackedPart;
    AVTrimTracksView * _tracksView;
    double  _zoomFactor;
    NSTimer * _zoomInTimer;
    struct { 
        double fromZoomFactor; 
        double currentZoomFactor; 
        double toZoomFactor; 
        double fromOffset; 
        double currentOffset; 
        double toOffset; 
        double centerTime; 
    }  _zoomInfo;
    BOOL  _zoomOutWhenScrollFinishes;
}

@property (nonatomic, readwrite) double currentValue;
@property (nonatomic, readwrite) <AVTrimViewDelegate> *delegate;
@property (nonatomic, readwrite) double maxValue;
@property (nonatomic, readwrite) double maximumSelectionDuration;
@property (nonatomic, readwrite) double minValue;
@property (nonatomic, readwrite) double nominalFrameRate;
@property (nonatomic, readwrite) double offset;
@property (nonatomic, readwrite) double selectionEnd;
@property (nonatomic, readwrite) double selectionStart;
@property (atomic, readwrite) unsigned long long style;
@property (nonatomic, readwrite, copy) NSArray *trackViewControllers;
@property (nonatomic, readwrite) double zoomFactor;

+ (void)initialize;

- (void).cxx_destruct;
- (unsigned int)_CAViewFlags;
- (BOOL)_canStartTracking;
- (BOOL)_canZoom;
- (void)_fireStopTrackingTimer:(id)arg1;
- (BOOL)_isScrolling;
- (BOOL)_isTracking;
- (BOOL)_isZoomed;
- (BOOL)_isZooming;
- (double)_maximumPossibleOffset;
- (unsigned long long)_partForLocation:(struct CGPoint { double x1; double x2; })arg1 shouldJumpToLocation:(BOOL*)arg2;
- (void)_scroll:(id)arg1;
- (void)_setZoomFactor:(unsigned long long)arg1 centerZoomAtTime:(double)arg2;
- (void)_startScrollingPart:(unsigned long long)arg1 inDirection:(unsigned long long)arg2;
- (void)_startTrackingWithPart:(unsigned long long)arg1;
- (void)_startTrackingWithPart:(unsigned long long)arg1 location:(struct CGPoint { double x1; double x2; })arg2 shouldJumpToLocation:(BOOL)arg3;
- (void)_startZoomInTimerForTime:(double)arg1;
- (void)_stopScrolling;
- (void)_stopTrackingWithPart:(unsigned long long)arg1;
- (void)_stopTrackingWithPart:(unsigned long long)arg1 afterDelay:(double)arg2;
- (void)_stopZoomInTimer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_timeIndicatorPopoverPositioningRectForValue:(double)arg1;
- (void)_touchesEndedOrCancelledWithEvent:(id)arg1;
- (double)_trimHandleWidth;
- (void)_updateFocusRingVisibility;
- (void)_updateValueForPart:(unsigned long long)arg1 location:(struct CGPoint { double x1; double x2; })arg2 event:(id)arg3;
- (double)_valueForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)_zoomFactorForZoomDepth:(unsigned long long)arg1;
- (void)_zoomInTimerTask:(id)arg1;
- (void)_zoomOutAndStopScrollingForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (double)_zoomedRange;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (double)currentValue;
- (void)dealloc;
- (id)delegate;
- (double)displayedMaxValue;
- (double)displayedMinValue;
- (void)encodeWithCoder:(id)arg1;
- (void)hideTimeIndicatorPopover;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)keyDown:(id)arg1;
- (void)layoutSubviewsIfNeeded;
- (double)maxValue;
- (double)maximumSelectionDuration;
- (double)minValue;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (double)nominalFrameRate;
- (double)offset;
- (BOOL)resignFirstResponder;
- (double)selectionEnd;
- (double)selectionStart;
- (void)setCurrentValue:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMaxValue:(double)arg1;
- (void)setMaximumSelectionDuration:(double)arg1;
- (void)setMinValue:(double)arg1;
- (void)setNeedsLayoutSubviews;
- (void)setNominalFrameRate:(double)arg1;
- (void)setOffset:(double)arg1;
- (void)setSelectionEnd:(double)arg1;
- (void)setSelectionStart:(double)arg1;
- (void)setStyle:(unsigned long long)arg1;
- (void)setTrackViewControllers:(id)arg1;
- (void)setZoomFactor:(double)arg1;
- (void)showTimeIndicatorPopoverWithValue:(double)arg1;
- (unsigned long long)style;
- (void)touchesBeganWithEvent:(id)arg1;
- (void)touchesCancelledWithEvent:(id)arg1;
- (void)touchesEndedWithEvent:(id)arg1;
- (void)touchesMovedWithEvent:(id)arg1;
- (id)trackViewControllers;
- (void)updateTimeIndicatorPopoverWithValue:(double)arg1;
- (double)zoomFactor;

// AVTrimView (AVTrimIndicatorAccessibilityElement)

- (id)indicatorAccessibilityElementForPart:(unsigned long long)arg1;

// AVTrimView (NSAccessibility)

- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsIgnored;

@end
