/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit
 */

@interface AVCaptureView : NSView <AVCaptureControllerDelegate, NSTouchBarProvider> {
    AVCameraDisabledView * _cameraDisabledView;
    AVCaptureController * _captureController;
    AVCaptureControlsViewController * _captureControlsViewController;
    AVControlsContainerViewController * _controlsContainerViewController;
    long long  _controlsStyle;
    NSTimer * _controlsTimer;
    <AVCaptureViewDelegate> * _delegate;
    BOOL  _doNotMakeCurrentControlsViewControllerViewFirstResponder;
    struct { 
        double top; 
        double right; 
        double bottom; 
        double left; 
    }  _floatingCaptureControlsMargin;
    BOOL  _hideControlsOnMouseUp;
    AVCaptureControlsViewController * _initialControlsViewController;
    BOOL  _isShowingControlsForMouseMovingInsideView;
    AVLoadingIndicatorView * _loadingIndicatorView;
    NSArray * _noHideAreaViews;
    NSObject<OS_dispatch_semaphore> * _propertySemaphore;
    long long  _showControlsCount;
    BOOL  _showsControlsPane;
    NSTimer * _temporaryControlsTimer;
    NSTrackingArea * _trackingArea;
    BOOL  _usesDefaultSession;
    NSString * _videoGravity;
    AVCaptureVideoPreviewLayer * _videoPreviewLayer;
    BOOL  _viewHasBeenSetup;
    BOOL  _viewNeedsResetupInViewDidMoveToWindow;
}

@property (atomic, readonly) AVCaptureDevice *audioDevice;
@property (atomic, readwrite, retain) AVCaptureController *captureController;
@property (atomic, readwrite, retain) AVCaptureControlsViewController *captureControlsViewController;
@property (atomic, readwrite) long long controlsStyle;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <AVCaptureViewDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) AVCaptureFileOutput *fileOutput;
@property (getter=isFinishingRecording, atomic, readwrite) BOOL finishingRecording;
@property (atomic, readwrite) struct { double x1; double x2; double x3; double x4; } floatingCaptureControlsMargin;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite, copy) NSArray *noHideAreaViews;
@property (atomic, readonly) BOOL prefersUnobscuredContent;
@property (atomic, readwrite, copy) NSString *selectedCompressionOptionsIdentifier;
@property (atomic, readonly) AVCaptureSession *session;
@property (atomic, readonly) BOOL showsControlsPane;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) NSTouchBar *touchBar;
@property (atomic, readonly) AVCaptureDevice *videoDevice;
@property (atomic, readwrite, copy) NSString *videoGravity;

+ (BOOL)automaticallyNotifiesObserversOfFileOutput;
+ (BOOL)automaticallyNotifiesObserversOfSession;
+ (void)initialize;
+ (id)keyPathsForValuesAffectingFileOutput;
+ (id)keyPathsForValuesAffectingSession;
+ (id)keyPathsForValuesAffectingTouchBar;

- (void).cxx_destruct;
- (id)_currentControlsViewController;
- (void)_fireControlsTimer:(id)arg1;
- (void)_fireTemporaryControlsTimer:(id)arg1;
- (void)_hideControlsIfPossible;
- (void)_hideControlsIfPossibleAfterDelay;
- (id)_makeSelfFirstResponderIfCurrentFirstResponderIsDescendantOfSelfAndReturnCurrentFirstResponderInThatCase;
- (BOOL)_mouseInNoHideArea;
- (id)_noHideAreaViews;
- (void)_replaceCurrentControlsViewControllerWithViewController:(id)arg1;
- (void)_restorePreviousFirstResponderOrMakeCurrentControlsViewControllersInitialFirstResponderFirstResponderIfSelfIsCurrentFirstResponder:(id)arg1;
- (void)_setupCameraDisabledView;
- (void)_setupControlsContainerView;
- (void)_setupLoadingIndicatorView;
- (void)_setupTrackingAreas;
- (void)_showControlsIfNeeded;
- (void)_showControlsTemporarily;
- (void)_showOrHideControls;
- (void)_updateVideoPreviewLayerIfNeeded;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)beginGestureWithEvent:(id)arg1;
- (id)captureController;
- (void)captureController:(id)arg1 startRecordingToFileOutput:(id)arg2;
- (id)captureControlsViewController;
- (long long)controlsStyle;
- (void)cursorUpdate:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)encodeWithCoder:(id)arg1;
- (void)endGestureWithEvent:(id)arg1;
- (id)fileOutput;
- (void)flagsChanged:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)otherMouseDown:(id)arg1;
- (void)otherMouseDragged:(id)arg1;
- (void)otherMouseUp:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)rightMouseDragged:(id)arg1;
- (void)rightMouseUp:(id)arg1;
- (void)rotateWithEvent:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (id)session;
- (void)setCaptureController:(id)arg1;
- (void)setCaptureControlsViewController:(id)arg1;
- (void)setControlsStyle:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setSession:(id)arg1 showVideoPreview:(BOOL)arg2 showAudioPreview:(BOOL)arg3;
- (void)setVideoGravity:(id)arg1;
- (id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2;
- (void)swipeWithEvent:(id)arg1;
- (void)tabletPoint:(id)arg1;
- (void)tabletProximity:(id)arg1;
- (id)touchBar;
- (void)touchesBeganWithEvent:(id)arg1;
- (void)touchesCancelledWithEvent:(id)arg1;
- (void)touchesEndedWithEvent:(id)arg1;
- (void)touchesMovedWithEvent:(id)arg1;
- (id)videoGravity;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;

// AVCaptureView (AVCaptureViewInternalUserInterface)

- (void)hideControlsForAuxiliaryControl;
- (void)showControlsForAuxiliaryControl;

// AVCaptureView (AVCaptureViewQuickTimePlayerX)

+ (id)keyPathsForValuesAffectingAudioDevice;
+ (id)keyPathsForValuesAffectingPrefersUnobscuredContent;
+ (id)keyPathsForValuesAffectingSelectedCompressionOptionsIdentifier;
+ (id)keyPathsForValuesAffectingVideoDevice;

- (id)audioDevice;
- (struct { double x1; double x2; double x3; double x4; })floatingCaptureControlsMargin;
- (BOOL)isFinishingRecording;
- (id)noHideAreaViews;
- (BOOL)prefersUnobscuredContent;
- (id)selectedCompressionOptionsIdentifier;
- (void)setCompressionOptions:(id)arg1;
- (void)setFinishingRecording:(BOOL)arg1;
- (void)setFloatingCaptureControlsMargin:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setNoHideAreaViews:(id)arg1;
- (void)setSelectedCompressionOptionsIdentifier:(id)arg1;
- (BOOL)showsControlsPane;
- (id)videoDevice;

@end
