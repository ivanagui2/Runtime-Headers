/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit
 */

@interface AVPlayerView : NSView <AVTrimControlsViewControllerDelegate, CALayerDelegate, DebugHierarchyObject, NSSharingServiceDelegate, NSSharingServicePickerDelegate> {
    NSMenu * _actionPopUpButtonMenu;
    AVAnimator * _animator;
    AVAudioOnlyIndicatorView * _audioOnlyIndicatorView;
    BOOL  _canHideControls;
    BOOL  _canRequestBecomingFirstResponder;
    BOOL  _canZoomHorizontally;
    BOOL  _canZoomVertically;
    NSView * _contentOverlayView;
    AVControlsContainerViewController * _controlsContainerViewController;
    long long  _controlsStyle;
    NSTimer * _controlsTimer;
    BOOL  _didPausePlaybackForSheet;
    NSTimer * _dimTouchBarTimer;
    BOOL  _doNotMakeCurrentControlsViewControllerViewFirstResponder;
    AVPlayerControlsViewController * _editControlsViewController;
    AVExternalPlaybackIndicatorView * _externalPlaybackIndicatorView;
    struct CGSize { 
        double width; 
        double height; 
    }  _fixedPlayerLayerSize;
    struct { 
        double top; 
        double right; 
        double bottom; 
        double left; 
    }  _floatingPlaybackControlsMargin;
    NSWindow * _fullScreenWindow;
    BOOL  _hideControlsOnMouseUp;
    AVPlayerControlsViewController * _initialControlsViewController;
    BOOL  _isFullScreen;
    BOOL  _isShowingPlaybackControlsForMouseMovingInsideView;
    BOOL  _isShowingPlaybackControlsViewForAudioOnlyContent;
    BOOL  _isShowingPlaybackControlsViewForPlayingOnExternalScreen;
    BOOL  _isShowingPlaybackControlsViewForUnsupportedContent;
    BOOL  _isZoomed;
    NSTimer * _loadingIndicatorTimer;
    AVLoadingIndicatorView * _loadingIndicatorView;
    NSArray * _noHideAreaViews;
    AVNowPlayingInfoController * _nowPlayingInfoController;
    NSWindow * _originalWindow;
    NSView * _placeholderView;
    AVPlayerControlsViewController * _playbackControlsViewController;
    AVPlayerController * _playerController;
    AVPlayerLayer * _playerLayer;
    long long  _playerLayerLayoutMode;
    BOOL  _playerShouldAutoplay;
    BOOL  _prefersReducedUserInterface;
    unsigned long long  _savedPresentationOptions;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _savedViewFrame;
    AVShareController * _shareController;
    long long  _showControlsCount;
    BOOL  _showsAlternateMediaTrackPreview;
    BOOL  _showsControlsPane;
    BOOL  _showsDurationInsteadOfRemainingTime;
    BOOL  _showsFrameSteppingButtons;
    BOOL  _showsFullScreenToggleButton;
    BOOL  _showsSharingServiceButton;
    <AVPlayerViewSlowMotionDelegate> * _slowMotionDelegate;
    struct { 
        BOOL playerView_playerItemTimeForNormalizedTime; 
        BOOL playerView_userInterfaceTimeForPlayerItemTime; 
        BOOL playerView_playerItemTimeForUserInterfaceTime; 
    }  _slowMotionDelegateRespondsTo;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _slowMotionTimeRange;
    AVStatusOverlayView * _statusOverlayView;
    NSMutableArray * _statusOverlayViewLayoutConstraints;
    NSView * _superview;
    NSTimer * _temporaryControlsTimer;
    AVPlayerLayer * _touchBarThumbnailPlayerLayer;
    long long  _touchBarViewAppearCount;
    NSTrackingArea * _trackingArea;
    id  _trimCompletionBlock;
    AVTrimControlsViewController * _trimControlsViewController;
    AVPlayerLayer * _trimThumbnailPlayerLayer;
    AVUnsupportedContentIndicatorView * _unsupportedContentIndicatorView;
    NSString * _videoGravity;
    BOOL  _viewHasBeenSetup;
    BOOL  _viewHasWindow;
}

@property (atomic, readwrite, retain) NSMenu *actionPopUpButtonMenu;
@property (atomic, readonly) BOOL canBeginTrimming;
@property (atomic, readwrite) BOOL canHideControls;
@property (atomic, readwrite) BOOL canRequestBecomingFirstResponder;
@property (atomic, readonly) BOOL canShowSharingServiceButton;
@property (atomic, readwrite) BOOL canZoomHorizontally;
@property (atomic, readwrite) BOOL canZoomVertically;
@property (atomic, readonly) NSView *contentOverlayView;
@property (atomic, readwrite, retain) AVControlsContainerViewController *controlsContainerViewController;
@property (atomic, readwrite) long long controlsStyle;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite, retain) AVPlayerControlsViewController *editControlsViewController;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } fixedPlayerLayerSize;
@property (atomic, readwrite) struct { double x1; double x2; double x3; double x4; } floatingPlaybackControlsMargin;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) BOOL isFullScreen;
@property (atomic, readonly) BOOL isTrimming;
@property (atomic, readwrite, retain) NSArray *noHideAreaViews;
@property (atomic, readwrite, retain) AVPlayerControlsViewController *playbackControlsViewController;
@property (atomic, readwrite, retain) AVPlayer *player;
@property (atomic, readwrite, retain) AVPlayerController *playerController;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } playerLayerFrame;
@property (atomic, readwrite) long long playerLayerLayoutMode;
@property (atomic, readwrite) BOOL prefersReducedUserInterface;
@property (atomic, readonly) BOOL prefersUnobscuredContent;
@property (getter=isReadyForDisplay, atomic, readonly) BOOL readyForDisplay;
@property (atomic, readonly) AVShareController *shareController;
@property (atomic, readwrite) BOOL showsAlternateMediaTrackPreview;
@property (atomic, readonly) BOOL showsControlsPane;
@property (atomic, readwrite) BOOL showsDurationInsteadOfRemainingTime;
@property (atomic, readwrite) BOOL showsFrameSteppingButtons;
@property (atomic, readwrite) BOOL showsFullScreenToggleButton;
@property (atomic, readwrite) BOOL showsSharingServiceButton;
@property (atomic, readwrite) <AVPlayerViewSlowMotionDelegate> *slowMotionDelegate;
@property (atomic, readwrite) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } slowMotionTimeRange;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) AVPlayerLayer *touchBarThumbnailPlayerLayer;
@property (atomic, readwrite, retain) AVPlayerLayer *touchBarThumbnailPlayerLayer;
@property (atomic, readwrite, retain) AVTrimControlsViewController *trimControlsViewController;
@property (atomic, readonly) AVPlayerLayer *trimThumbnailPlayerLayer;
@property (atomic, readwrite, retain) AVPlayerLayer *trimThumbnailPlayerLayer;
@property (atomic, readwrite) BOOL updatesNowPlayingInfoCenter;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } videoBounds;
@property (atomic, readwrite, copy) NSString *videoGravity;
@property (getter=isZoomed, atomic, readwrite) BOOL zoomed;

// Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit

+ (void)initialize;
+ (id)keyPathsForValuesAffectingPlayer;
+ (id)keyPathsForValuesAffectingReadyForDisplay;
+ (id)keyPathsForValuesAffectingTouchBar;
+ (id)keyPathsForValuesAffectingVideoBounds;
+ (id)keyPathsForValuesAffectingVideoGravity;
+ (id)restorableStateKeyPaths;

- (void).cxx_destruct;
- (id)_currentControlsViewController;
- (void)_dimTouchBarIfNeeded;
- (void)_dimTouchBarIfNeededAfterDelay;
- (void)_fireControlsTimer:(id)arg1;
- (void)_fireLoadingIndicatorTimer:(id)arg1;
- (void)_fireTemporaryControlsTimer:(id)arg1;
- (void)_hideControlsIfPossible;
- (void)_hideControlsIfPossibleAfterDelay;
- (BOOL)_isAudioOnlyContent;
- (BOOL)_isUnsupportedContent;
- (void)_layoutStatusOverlayView;
- (id)_makeSelfFirstResponderIfCurrentFirstResponderIsDescendantOfSelfAndReturnCurrentFirstResponderInThatCase;
- (BOOL)_mouseInNoHideArea;
- (id)_noHideAreaViews;
- (void)_replaceCurrentControlsViewControllerWithViewController:(id)arg1;
- (void)_restorePreviousFirstResponderOrMakeCurrentControlsViewControllersInitialFirstResponderFirstResponderIfSelfIsCurrentFirstResponder:(id)arg1;
- (void)_setupAudioOnlyIndicatorView;
- (void)_setupContentOverlayView;
- (void)_setupControlsContainerView;
- (void)_setupExternalPlaybackIndicatorView;
- (void)_setupLoadingIndicatorView;
- (void)_setupPlayerLayer;
- (void)_setupPreferredIndicatorAreas;
- (void)_setupStatusOverlayView;
- (void)_setupTrackingAreas;
- (void)_setupUnsupportedContentIndicatorView;
- (BOOL)_shouldDimTouchBar;
- (void)_showControlsIfNeeded;
- (void)_showControlsTemporarily;
- (void)_showOrHideControls;
- (void)_updateAudioOnlyIndicatorView;
- (void)_updateExternalPlaybackIndicatorView;
- (void)_updatePlaybackControlsViewVisibilityForAudioOnlyContent;
- (void)_updatePlaybackControlsViewVisibilityForPlayingOnExternalScreen;
- (void)_updatePlaybackControlsViewVisibilityForUnsupportedContent;
- (void)_updateUnsupportedContentIndicatorView;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)beginGestureWithEvent:(id)arg1;
- (id)contentOverlayView;
- (id)controlsContainerViewController;
- (long long)controlsStyle;
- (void)cursorUpdate:(id)arg1;
- (void)dealloc;
- (id)editControlsViewController;
- (void)encodeWithCoder:(id)arg1;
- (void)endGestureWithEvent:(id)arg1;
- (void)flagsChanged:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)isReadyForDisplay;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)otherMouseDown:(id)arg1;
- (void)otherMouseDragged:(id)arg1;
- (void)otherMouseUp:(id)arg1;
- (id)playbackControlsViewController;
- (id)player;
- (void)playerControllerDidChangePlaybackStateByHandlingEvent:(id)arg1;
- (void)playerControllerDidSeekChapter:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)rightMouseDragged:(id)arg1;
- (void)rightMouseUp:(id)arg1;
- (void)rotateWithEvent:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (void)setControlsContainerViewController:(id)arg1;
- (void)setControlsStyle:(long long)arg1;
- (void)setEditControlsViewController:(id)arg1;
- (void)setPlaybackControlsViewController:(id)arg1;
- (void)setPlayer:(id)arg1;
- (void)setTouchBarThumbnailPlayerLayer:(id)arg1;
- (void)setTrimControlsViewController:(id)arg1;
- (void)setTrimThumbnailPlayerLayer:(id)arg1;
- (void)setUpdatesNowPlayingInfoCenter:(BOOL)arg1;
- (void)setVideoGravity:(id)arg1;
- (id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2;
- (void)swipeWithEvent:(id)arg1;
- (void)tabletPoint:(id)arg1;
- (void)tabletProximity:(id)arg1;
- (id)touchBar;
- (id)touchBarThumbnailPlayerLayer;
- (void)touchesBeganWithEvent:(id)arg1;
- (void)touchesCancelledWithEvent:(id)arg1;
- (void)touchesEndedWithEvent:(id)arg1;
- (void)touchesMovedWithEvent:(id)arg1;
- (id)trimControlsViewController;
- (id)trimThumbnailPlayerLayer;
- (BOOL)updatesNowPlayingInfoCenter;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })videoBounds;
- (id)videoGravity;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowWillBeginSheet:(id)arg1;

// AVPlayerView (AVPlayerViewChapterIndicator)

- (void)flashChapterNumber:(unsigned long long)arg1 chapterTitle:(id)arg2;

// AVPlayerView (AVPlayerViewControls)

- (BOOL)canHideControls;
- (BOOL)canRequestBecomingFirstResponder;
- (void)setCanHideControls:(BOOL)arg1;
- (void)setCanRequestBecomingFirstResponder:(BOOL)arg1;

// AVPlayerView (AVPlayerViewCustomization)

- (id)actionPopUpButtonMenu;
- (void)setActionPopUpButtonMenu:(id)arg1;
- (void)setShowsFrameSteppingButtons:(BOOL)arg1;
- (void)setShowsFullScreenToggleButton:(BOOL)arg1;
- (void)setShowsSharingServiceButton:(BOOL)arg1;
- (BOOL)showsFrameSteppingButtons;
- (BOOL)showsFullScreenToggleButton;
- (BOOL)showsSharingServiceButton;

// AVPlayerView (AVPlayerViewFullScreenSupport)

- (void)enterFullScreen:(id)arg1;
- (void)exitFullScreen:(id)arg1;
- (BOOL)isFullScreen;
- (void)setIsFullScreen:(BOOL)arg1;

// AVPlayerView (AVPlayerViewInternalUserInterface)

- (void)hideControlsForAuxiliaryControl;
- (BOOL)prefersReducedUserInterface;
- (void)setPrefersReducedUserInterface:(BOOL)arg1;
- (void)setShowsDurationInsteadOfRemainingTime:(BOOL)arg1;
- (void)showControlsForAuxiliaryControl;
- (BOOL)showsDurationInsteadOfRemainingTime;

// AVPlayerView (AVPlayerViewNowPlayingInfoInternal)

- (void)touchBarControlsViewDidDisappear;
- (void)touchBarControlsViewWillAppear;

// AVPlayerView (AVPlayerViewPlayerController)

+ (BOOL)automaticallyNotifiesObserversOfPlayerController;

- (id)playerController;
- (void)setPlayerController:(id)arg1;

// AVPlayerView (AVPlayerViewPlayerLayerLayout)

+ (id)keyPathsForValuesAffectingPlayerLayerFrame;
+ (BOOL)wantsPlayerLayerLayout;

- (id)animator;
- (struct CGSize { double x1; double x2; })fixedPlayerLayerSize;
- (void)layoutSublayersOfLayer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })playerLayerFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })playerLayerFrameForBoundsSize:(struct CGSize { double x1; double x2; })arg1 playerLayerLayoutMode:(long long)arg2;
- (long long)playerLayerLayoutMode;
- (void)setFixedPlayerLayerSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPlayerLayerLayoutMode:(long long)arg1;

// AVPlayerView (AVPlayerViewQuickTimePlayerX)

+ (id)keyPathsForValuesAffectingPrefersUnobscuredContent;

- (BOOL)canZoomHorizontally;
- (BOOL)canZoomVertically;
- (struct { double x1; double x2; double x3; double x4; })floatingPlaybackControlsMargin;
- (void)hideEditControlsViewControllerWithCompletionHandler:(id)arg1;
- (BOOL)isZoomed;
- (id)noHideAreaViews;
- (BOOL)prefersUnobscuredContent;
- (void)setCanZoomHorizontally:(BOOL)arg1;
- (void)setCanZoomVertically:(BOOL)arg1;
- (void)setFloatingPlaybackControlsMargin:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setNoHideAreaViews:(id)arg1;
- (void)setShowsAlternateMediaTrackPreview:(BOOL)arg1;
- (void)setZoomed:(BOOL)arg1;
- (void)showEditControlsViewController:(id)arg1 withCompletionHandler:(id)arg2;
- (BOOL)showsAlternateMediaTrackPreview;
- (BOOL)showsControlsPane;
- (void)toggleZoom:(id)arg1;

// AVPlayerView (AVPlayerViewShareSupport)

- (id)shareController;

// AVPlayerView (AVPlayerViewSharingInternal)

+ (id)keyPathsForValuesAffectingCanShowSharingServiceButton;

- (BOOL)canShowSharingServiceButton;
- (void)showSharingServicePickerRelativeToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ofView:(id)arg2 preferredEdge:(unsigned long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })videoRect;

// AVPlayerView (AVPlayerViewSlowMotionSupport)

- (void)setSlowMotionDelegate:(id)arg1;
- (void)setSlowMotionTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)slowMotionDelegate;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })slowMotionTimeRange;

// AVPlayerView (AVPlayerViewTrimming)

+ (id)keyPathsForValuesAffectingCanBeginTrimming;

- (void)_callTrimCompletionHandlerWithResult:(long long)arg1;
- (void)_restorePlaybackControlsAfterTrimmingWithTrimControlsViewController:(id)arg1;
- (void)beginTrimmingWithCompletionHandler:(id)arg1;
- (BOOL)canBeginTrimming;
- (void)trimControlsViewControllerDidCancel:(id)arg1;
- (void)trimControlsViewControllerDidTrim:(id)arg1;

// AVPlayerView (AVPlayerViewTrimming_Private)

+ (id)keyPathsForValuesAffectingIsTrimming;

- (void)beginTrimmingWithMaximumDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 completionHandler:(id)arg2;
- (BOOL)isTrimming;

// AVPlayerView (AVShareController)

- (BOOL)canShareCompositionWithService:(id)arg1;
- (void)doService:(id)arg1 withItems:(id)arg2;
- (void)performWithService:(id)arg1;
- (id)previewThumbnailImage;
- (void)sharingService:(id)arg1 didFailToShareItems:(id)arg2 error:(id)arg3;
- (void)sharingService:(id)arg1 didShareItems:(id)arg2;
- (id)sharingService:(id)arg1 imageForShareItem:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sharingService:(id)arg1 sourceFrameOnScreenForShareItem:(id)arg2;
- (id)sharingService:(id)arg1 sourceWindowForShareItems:(id)arg2 sharingContentScope:(long long*)arg3;
- (id)sharingService:(id)arg1 transitionImageForShareItem:(id)arg2 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (void)sharingService:(id)arg1 willShareItems:(id)arg2;
- (id)sharingServicePicker:(id)arg1 delegateForSharingService:(id)arg2;
- (id)sharingServicePicker:(id)arg1 sharingServicesForItems:(id)arg2 proposedSharingServices:(id)arg3;
- (BOOL)validateUserInterfaceItem:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// AVPlayerView (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;

@end
