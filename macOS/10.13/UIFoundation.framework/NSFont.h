/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation
 */

@interface NSFont : NSObject <DebugHierarchyValue, NSCopying, NSSecureCoding> {
    struct __fFlags { 
        unsigned int _isScreenFont : 1; 
        unsigned int _systemFontType : 8; 
        unsigned int _reserved1 : 4; 
        unsigned int _matrixIsIdentity : 1; 
        unsigned int _renderingMode : 3; 
        unsigned int _inInstanceCache : 1; 
        unsigned int _appearanceSize : 1; 
        unsigned int _reserved2 : 13; 
    }  _fFlags;
    NSString * _name;
    id  _private;
    long long  _retainCount;
    double  _size;
}

@property (atomic, readonly) double _spaceGlyphAdvance;
@property (atomic, readonly) double ascender;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } boundingRectForFont;
@property (atomic, readonly) double capHeight;
@property (atomic, readonly) NSCharacterSet *coveredCharacterSet;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly) double descender;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly, copy) NSString *displayName;
@property (atomic, readonly, copy) NSString *familyName;
@property (getter=isFixedPitch, atomic, readonly) BOOL fixedPitch;
@property (atomic, readonly) NSFontDescriptor *fontDescriptor;
@property (atomic, readonly, copy) NSString *fontName;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) double italicAngle;
@property (atomic, readonly) double leading;
@property (atomic, readonly) const double*matrix;
@property (atomic, readonly) struct CGSize { double x1; double x2; } maximumAdvancement;
@property (atomic, readonly) unsigned long long mostCompatibleStringEncoding;
@property (atomic, readonly) unsigned long long numberOfGlyphs;
@property (atomic, readonly) double pointSize;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly, copy) NSAffineTransform *textTransform;
@property (atomic, readonly) double underlinePosition;
@property (atomic, readonly) double underlineThickness;
@property (getter=isVertical, atomic, readonly) BOOL vertical;
@property (atomic, readonly, copy) NSFont *verticalFont;
@property (atomic, readonly) double xHeight;

// Image: /System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation

+ (BOOL)_allowsDefaultFontSubstitution;
+ (BOOL)_allowsDefaultFontSubstitutionFor1XOnly;
+ (BOOL)_allowsLatin1MappingForFontFamily:(id)arg1;
+ (BOOL)_characterCannotBeRendered:(unsigned int)arg1;
+ (id)_lightSystemFontOfSize:(double)arg1;
+ (id)_mediumSystemFontOfSize:(double)arg1;
+ (id)_opticalBoldSystemFontOfSize:(double)arg1;
+ (id)_opticalSystemFontOfSize:(double)arg1;
+ (void)_postFontSetChangedNotifications;
+ (void)_registerForFontSetNotification;
+ (void)_setExportSpecialFonts:(BOOL)arg1;
+ (BOOL)_simulatesTransparentLayerBehavior;
+ (id)_thinSystemFontOfSize:(double)arg1;
+ (id)_toolbarLabelFontOfSize:(double)arg1;
+ (double)_toolbarLabelFontSize;
+ (double)_toolbarSmallLabelFontSize;
+ (id)_ultraLightSystemFontOfSize:(double)arg1;
+ (void)_updateAntialiasingThreshold;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)boldSystemFontOfSize:(double)arg1;
+ (id)controlContentFontOfSize:(double)arg1;
+ (id)coveredCharacterCache;
+ (id)findFontLike:(id)arg1 forCharacter:(unsigned int)arg2 inLanguage:(id)arg3;
+ (id)findFontLike:(id)arg1 forString:(id)arg2 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 inLanguage:(id)arg4;
+ (id)findFontLike:(id)arg1 traits:(unsigned long long)arg2 forCharacters:(const unsigned short*)arg3 length:(unsigned long long)arg4 inLanguage:(id)arg5 checkCoveredCache:(BOOL)arg6;
+ (id)fontWithDescriptor:(id)arg1 size:(double)arg2;
+ (id)fontWithDescriptor:(id)arg1 textTransform:(id)arg2;
+ (id)fontWithName:(id)arg1 matrix:(const double*)arg2;
+ (id)fontWithName:(id)arg1 size:(double)arg2;
+ (void)initialize;
+ (id)labelFontOfSize:(double)arg1;
+ (double)labelFontSize;
+ (id)menuBarFontOfSize:(double)arg1;
+ (id)menuFontOfSize:(double)arg1;
+ (id)messageFontOfSize:(double)arg1;
+ (id)monospacedDigitSystemFontOfSize:(double)arg1 weight:(double)arg2;
+ (id)paletteFontOfSize:(double)arg1;
+ (id)preferredFontNames;
+ (void)setLocaleListForDefaultFontFallback:(id)arg1;
+ (void)setPreferredFontNames:(id)arg1;
+ (void)setUserFixedPitchFont:(id)arg1;
+ (void)setUserFont:(id)arg1;
+ (double)smallSystemFontSize;
+ (BOOL)supportsSecureCoding;
+ (id)systemFontOfSize:(double)arg1;
+ (id)systemFontOfSize:(double)arg1 weight:(double)arg2;
+ (double)systemFontSize;
+ (double)systemFontSizeForControlSize:(unsigned long long)arg1;
+ (id)titleBarFontOfSize:(double)arg1;
+ (id)toolTipsFontOfSize:(double)arg1;
+ (id)toolbarLabelFontOfSize:(double)arg1;
+ (double)toolbarLabelFontSizeForToolbarSize:(unsigned long long)arg1;
+ (void)useFont:(id)arg1;
+ (id)userFixedPitchFontOfSize:(double)arg1;
+ (id)userFontOfSize:(double)arg1;

- (BOOL)__isSystemFont;
- (double)_ascenderDeltaForBehavior:(long long)arg1;
- (unsigned int)_atsFontID;
- (struct CGFont { }*)_backingCGSFont;
- (double)_baseLineHeightForFont:(BOOL)arg1;
- (double)_baselineOffsetForUILayout;
- (BOOL)_canDrawOutsideLineHeight;
- (id)_coveredCharSet;
- (unsigned int)_defaultGlyphForChar:(unsigned short)arg1;
- (double)_defaultLineHeightForUILayout;
- (double)_defaultLineHightForUILayout;
- (double)_descenderDeltaForBehavior:(long long)arg1;
- (bool)_getLatin1Glyphs:(const unsigned short**)arg1 advanceWidths:(const double**)arg2;
- (BOOL)_glyphDrawsOutsideLineHeight:(unsigned int)arg1;
- (BOOL)_hasColorGlyphs;
- (BOOL)_hasNonNominalDescriptor;
- (BOOL)_isDeallocating;
- (BOOL)_isDefaultFace;
- (BOOL)_isFakeFixedPitch;
- (BOOL)_isHiraginoFont;
- (BOOL)_isIdealMetricsOnly;
- (id)_kernOverride;
- (const unsigned short*)_latin1MappingTable:(bool*)arg1;
- (double)_leading;
- (unsigned long long)_metaType;
- (unsigned long long)_numberOfGlyphs;
- (id)_safeFontDescriptor;
- (id)_sharedFontInstanceInfo;
- (id)_similarFontWithName:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_textMatrixTransformForContext:(id)arg1;
- (double)_totalAdvancementForNativeGlyphs:(const unsigned short*)arg1 count:(long long)arg2;
- (BOOL)_tryRetain;
- (BOOL)_usesAppearanceFontSize;
- (double)_widthOfPackedGlyphs:(const char *)arg1 count:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })advancementForCGGlyph:(unsigned short)arg1;
- (struct CGSize { double x1; double x2; })advancementForGlyph:(unsigned int)arg1;
- (id)afmDictionary;
- (double)ascender;
- (id)baseFontForSingleLineModeCell:(id)arg1;
- (id)bestMatchingFontForCharacters:(const unsigned short*)arg1 length:(unsigned long long)arg2 attributes:(id)arg3 actualCoveredLength:(unsigned long long*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForCGGlyph:(unsigned short)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForFont;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForGlyph:(unsigned int)arg1;
- (double)capHeight;
- (Class)classForCoder;
- (Class)classForKeyedArchiver;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)coveredCharacterSet;
- (BOOL)coversAllCharactersInString:(id)arg1;
- (BOOL)coversCharacter:(unsigned short)arg1;
- (const void*)ctFontRef;
- (void)dealloc;
- (double)defaultLineHeightForFont;
- (double)descender;
- (id)description;
- (id)displayName;
- (void)encodeWithCoder:(id)arg1;
- (id)encodingScheme;
- (id)familyName;
- (id)fontDescriptor;
- (id)fontForAppearance:(id)arg1;
- (id)fontName;
- (id)fontWithSize:(double)arg1;
- (void)getAdvancements:(struct CGSize { double x1; double x2; }*)arg1 forCGGlyphs:(const unsigned short*)arg2 count:(unsigned long long)arg3;
- (void)getAdvancements:(struct CGSize { double x1; double x2; }*)arg1 forGlyphs:(const unsigned int*)arg2 count:(unsigned long long)arg3;
- (void)getAdvancements:(struct CGSize { double x1; double x2; }*)arg1 forPackedGlyphs:(const void*)arg2 length:(unsigned long long)arg3;
- (void)getBoundingRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 forCGGlyphs:(const unsigned short*)arg2 count:(unsigned long long)arg3;
- (void)getBoundingRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 forGlyphs:(const unsigned int*)arg2 count:(unsigned long long)arg3;
- (unsigned long long)getCaretPositions:(double*)arg1 forGlyph:(unsigned int)arg2 maximumLength:(unsigned long long)arg3;
- (void)getVerticalOriginTranslations:(struct CGSize { double x1; double x2; }*)arg1 forCGGlyphs:(const unsigned short*)arg2 count:(unsigned long long)arg3;
- (BOOL)glyphIsEncoded:(unsigned int)arg1;
- (unsigned long long)glyphPacking;
- (unsigned int)glyphWithName:(id)arg1;
- (unsigned long long)hash;
- (unsigned int)hyphenGlyphForLanguage:(id)arg1;
- (unsigned int)hyphenGlyphForLocale:(id)arg1;
- (id)initWithBaseFont:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFontRef:(unsigned int)arg1 size:(double)arg2;
- (id)initWithInstanceInfo:(id)arg1 renderingMode:(unsigned long long)arg2;
- (BOOL)isBaseFont;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isFixedPitch;
- (BOOL)isScreenFont;
- (BOOL)isVertical;
- (double)italicAngle;
- (id)lastResortFont;
- (double)leading;
- (const double*)matrix;
- (struct CGSize { double x1; double x2; })maximumAdvancement;
- (unsigned long long)mostCompatibleStringEncoding;
- (id)nameOfGlyph:(unsigned int)arg1;
- (unsigned long long)numberOfGlyphs;
- (double)pointSize;
- (struct CGPoint { double x1; double x2; })positionOfGlyph:(unsigned int)arg1 forCharacter:(unsigned short)arg2 struckOverRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGPoint { double x1; double x2; })positionOfGlyph:(unsigned int)arg1 precededByGlyph:(unsigned int)arg2 isNominal:(BOOL*)arg3;
- (struct CGPoint { double x1; double x2; })positionOfGlyph:(unsigned int)arg1 struckOverGlyph:(unsigned int)arg2 metricsExist:(BOOL*)arg3;
- (struct CGPoint { double x1; double x2; })positionOfGlyph:(unsigned int)arg1 struckOverRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 metricsExist:(BOOL*)arg3;
- (long long)positionsForCompositeSequence:(unsigned int*)arg1 numberOfGlyphs:(long long)arg2 pointArray:(struct CGPoint { double x1; double x2; }*)arg3;
- (id)preferredFallbackFontForLanguage:(id)arg1;
- (id)printerFont;
- (oneway void)release;
- (unsigned long long)renderingMode;
- (id)retain;
- (unsigned long long)retainCount;
- (id)screenFont;
- (id)screenFontWithRenderingMode:(unsigned long long)arg1;
- (void)set;
- (void)setInContext:(id)arg1;
- (id)textTransform;
- (unsigned long long)traits;
- (double)underlinePosition;
- (double)underlineThickness;
- (id)verticalFont;
- (double)widthOfString:(id)arg1;
- (double)xHeight;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSFont (DebugHierarchyAdditions)

- (id)debugHierarchyValue;

// Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit

// NSFont (AVAdditions)

+ (id)_timeFontFromFont:(id)arg1 compact:(BOOL)arg2 monospacedDigits:(BOOL)arg3 weight:(double)arg4;
+ (id)boldTimeFontOfSize:(double)arg1;
+ (id)compactMonospacedTimeFontOfSize:(double)arg1;
+ (id)compactMonospacedTimeFontOfSize:(double)arg1 weight:(double)arg2;
+ (id)monospacedTimeFontOfSize:(double)arg1;
+ (id)timeFontOfSize:(double)arg1;
+ (id)timeFontWithName:(id)arg1 size:(double)arg2;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

// NSFont (NSPortCoding)

- (id)replacementObjectForPortCoder:(id)arg1;

// NSFont (_NSAdvanceConvenience)

- (double)_spaceGlyphAdvance;
- (double)_trackingNecessaryToScaleToFontOfSize:(double)arg1;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// NSFont (MKCrossPlatformExtras)

- (id)_mapkit_fontByAddingFeaturesForTabularFigures;
- (id)_mapkit_fontByAddingFeaturesForTimeDisplay;
- (id)_mapkit_fontByAddingFeaturesForTimeDisplayUseMonospace:(BOOL)arg1;

// NSFont (MKCrossPlatformOperations)

- (double)_mapkit_lineHeight;
- (double)_mapkit_scaledValueForValue:(double)arg1;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit

// NSFont (IKCommonFonts)

+ (id)IKBoldFontWithSize:(double)arg1;
+ (id)IKFinderFlavorFontWithSize:(double)arg1;
+ (id)IKFontWithSize:(double)arg1;

- (BOOL)ik_isSystemFont;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore

// NSFont (WebCoreTheme)

- (id)webCoreFamilyName;

// Image: /System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup

// NSFont (NSFontAdditions)

- (bool)isMonospaced;

@end
