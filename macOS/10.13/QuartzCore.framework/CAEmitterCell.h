/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore
 */

@interface CAEmitterCell : NSObject <CAMediaTiming, CAPropertyInfo, NSCopying, NSSecureCoding> {
    void * _attr;
    unsigned int  _flags;
    void * _state;
}

@property (atomic, readwrite) float alphaRange;
@property (atomic, readwrite) float alphaSpeed;
@property (atomic, readwrite) BOOL autoreverses;
@property (atomic, readwrite) double beginTime;
@property (atomic, readwrite) float birthRate;
@property (atomic, readwrite) float blueRange;
@property (atomic, readwrite) float blueSpeed;
@property (atomic, readwrite) struct CGColor { }*color;
@property (atomic, readwrite, retain) id contents;
@property (atomic, readwrite) unsigned int contentsFrameCount;
@property (atomic, readwrite, copy) NSString *contentsFrameMode;
@property (atomic, readwrite) unsigned int contentsFramesPerRow;
@property (atomic, readwrite) float contentsFramesPerSecond;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentsRect;
@property (atomic, readwrite) double contentsScale;
@property (atomic, readwrite) double duration;
@property (atomic, readwrite) double emissionLatitude;
@property (atomic, readwrite) double emissionLongitude;
@property (atomic, readwrite) double emissionRange;
@property (atomic, readwrite, copy) NSArray *emitterBehaviors;
@property (atomic, readwrite, copy) NSArray *emitterCells;
@property (getter=isEnabled, atomic, readwrite) BOOL enabled;
@property (atomic, readwrite, copy) NSString *fillMode;
@property (atomic, readwrite) float greenRange;
@property (atomic, readwrite) float greenSpeed;
@property (atomic, readwrite) float lifetime;
@property (atomic, readwrite) float lifetimeRange;
@property (atomic, readwrite, copy) NSString *magnificationFilter;
@property (atomic, readwrite) float mass;
@property (atomic, readwrite) float massRange;
@property (atomic, readwrite, copy) NSString *minificationFilter;
@property (atomic, readwrite) float minificationFilterBias;
@property (atomic, readwrite, copy) NSString *name;
@property (atomic, readwrite) double orientationLatitude;
@property (atomic, readwrite) double orientationLongitude;
@property (atomic, readwrite) double orientationRange;
@property (atomic, readwrite, copy) NSString *particleType;
@property (atomic, readwrite) float redRange;
@property (atomic, readwrite) float redSpeed;
@property (atomic, readwrite) float repeatCount;
@property (atomic, readwrite) double repeatDuration;
@property (atomic, readwrite) double rotation;
@property (atomic, readwrite) double rotationRange;
@property (atomic, readwrite) double scale;
@property (atomic, readwrite) double scaleRange;
@property (atomic, readwrite) double scaleSpeed;
@property (atomic, readwrite) float speed;
@property (atomic, readwrite) double spin;
@property (atomic, readwrite) double spinRange;
@property (atomic, readwrite, copy) NSDictionary *style;
@property (atomic, readwrite) double timeOffset;
@property (atomic, readwrite) double velocity;
@property (atomic, readwrite) double velocityRange;
@property (atomic, readwrite) double xAcceleration;
@property (atomic, readwrite) double yAcceleration;
@property (atomic, readwrite) double zAcceleration;

+ (void)CAMLParserStartElement:(id)arg1;
+ (id)CA_attributes;
+ (BOOL)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)emitterCell;
+ (BOOL)supportsSecureCoding;

- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)CAMLTypeForKey:(id)arg1;
- (struct Object { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; }*)CA_copyRenderValue;
- (void)CA_prepareRenderValue;
- (float)alphaRange;
- (float)alphaSpeed;
- (BOOL)autoreverses;
- (double)beginTime;
- (float)birthRate;
- (float)blueRange;
- (float)blueSpeed;
- (struct CGColor { }*)color;
- (id)contents;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentsRect;
- (double)contentsScale;
- (void)dealloc;
- (id)debugDescription;
- (void)didChangeValueForKey:(id)arg1;
- (double)duration;
- (double)emissionLatitude;
- (double)emissionLongitude;
- (double)emissionRange;
- (id)emitterCells;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)fillMode;
- (float)greenRange;
- (float)greenSpeed;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEnabled;
- (float)lifetime;
- (float)lifetimeRange;
- (id)magnificationFilter;
- (id)minificationFilter;
- (float)minificationFilterBias;
- (id)name;
- (double)orientationLatitude;
- (double)orientationLongitude;
- (double)orientationRange;
- (float)redRange;
- (float)redSpeed;
- (float)repeatCount;
- (double)repeatDuration;
- (double)rotation;
- (double)rotationRange;
- (double)scale;
- (double)scaleRange;
- (double)scaleSpeed;
- (void)setAlphaRange:(float)arg1;
- (void)setAlphaSpeed:(float)arg1;
- (void)setAutoreverses:(BOOL)arg1;
- (void)setBeginTime:(double)arg1;
- (void)setBirthRate:(float)arg1;
- (void)setBlueRange:(float)arg1;
- (void)setBlueSpeed:(float)arg1;
- (void)setColor:(struct CGColor { }*)arg1;
- (void)setContents:(id)arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentsScale:(double)arg1;
- (void)setDuration:(double)arg1;
- (void)setEmissionLatitude:(double)arg1;
- (void)setEmissionLongitude:(double)arg1;
- (void)setEmissionRange:(double)arg1;
- (void)setEmitterCells:(id)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFillMode:(id)arg1;
- (void)setGreenRange:(float)arg1;
- (void)setGreenSpeed:(float)arg1;
- (void)setLifetime:(float)arg1;
- (void)setLifetimeRange:(float)arg1;
- (void)setMagnificationFilter:(id)arg1;
- (void)setMinificationFilter:(id)arg1;
- (void)setMinificationFilterBias:(float)arg1;
- (void)setName:(id)arg1;
- (void)setOrientationLatitude:(double)arg1;
- (void)setOrientationLongitude:(double)arg1;
- (void)setOrientationRange:(double)arg1;
- (void)setRedRange:(float)arg1;
- (void)setRedSpeed:(float)arg1;
- (void)setRepeatCount:(float)arg1;
- (void)setRepeatDuration:(double)arg1;
- (void)setRotation:(double)arg1;
- (void)setRotationRange:(double)arg1;
- (void)setScale:(double)arg1;
- (void)setScaleRange:(double)arg1;
- (void)setScaleSpeed:(double)arg1;
- (void)setSpeed:(float)arg1;
- (void)setSpin:(double)arg1;
- (void)setSpinRange:(double)arg1;
- (void)setStyle:(id)arg1;
- (void)setTimeOffset:(double)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)setVelocity:(double)arg1;
- (void)setVelocityRange:(double)arg1;
- (void)setXAcceleration:(double)arg1;
- (void)setYAcceleration:(double)arg1;
- (void)setZAcceleration:(double)arg1;
- (BOOL)shouldArchiveValueForKey:(id)arg1;
- (float)speed;
- (double)spin;
- (double)spinRange;
- (id)style;
- (double)timeOffset;
- (id)valueForKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (double)velocity;
- (double)velocityRange;
- (double)xAcceleration;
- (double)yAcceleration;
- (double)zAcceleration;

// CAEmitterCell (CAEmitterCellPrivate)

+ (id)attributesForKey:(id)arg1;
+ (id)properties;

- (id)attributesForKeyPath:(id)arg1;
- (unsigned int)contentsFrameCount;
- (id)contentsFrameMode;
- (unsigned int)contentsFramesPerRow;
- (float)contentsFramesPerSecond;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)emitterBehaviors;
- (float)mass;
- (float)massRange;
- (id)particleType;
- (void)setContentsFrameCount:(unsigned int)arg1;
- (void)setContentsFrameMode:(id)arg1;
- (void)setContentsFramesPerRow:(unsigned int)arg1;
- (void)setContentsFramesPerSecond:(float)arg1;
- (void)setEmitterBehaviors:(id)arg1;
- (void)setMass:(float)arg1;
- (void)setMassRange:(float)arg1;
- (void)setParticleType:(id)arg1;

@end
