/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore
 */

@interface CALayer : NSObject <CAMediaTiming, CAPropertyInfo, DebugHierarchyObject, NSSecureCoding, QLDisplayable> {
    struct _CALayerIvars { 
        int refcount; 
        unsigned int magic; 
        void *layer; 
    }  _attr;
}

@property (atomic, readonly) BOOL NS_contentsAligningEnabled;
@property (getter=NS_actualContentsScaleSize, setter=NS_setContentsScaleSize:, atomic, readwrite) struct CGSize { double x1; double x2; } NS_contentsScaleSize;
@property (getter=NS_contentsScaleSize, atomic, readonly) struct CGSize { double x1; double x2; } NS_contentsScaleSizeOrContentsScale;
@property (setter=NS_setDefersTransformInvalidation:, atomic, readwrite) BOOL NS_defersTransformInvalidation;
@property (atomic, readonly) BOOL NS_managesOpenGLDrawable;
@property (atomic, readonly) BOOL NS_shouldUseContentsAligning;
@property (atomic, readonly) double NS_suggestedContentsScale;
@property (atomic, readonly) struct CGSize { double x1; double x2; } NS_suggestedContentsScaleSize;
@property (setter=NS_setView:, atomic, readwrite) NSView *NS_view;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } NS_visibleRect;
@property (nonatomic, readonly, retain) CALayer *_mapKit_mapLayer;
@property (getter=_usesPanoramicStretch, setter=_setUsesPanoramicStretch:, atomic, readwrite) BOOL _usesPanoramicStretch;
@property (atomic, readwrite) BOOL acceleratesDrawing;
@property (atomic, readonly) id accessibilityFocusedUIElement;
@property (atomic, readwrite, copy) NSDictionary *actions;
@property (atomic, readwrite) BOOL allowsContentsRectCornerMasking;
@property (atomic, readwrite) BOOL allowsDisplayCompositing;
@property (atomic, readwrite) BOOL allowsEdgeAntialiasing;
@property (atomic, readwrite) BOOL allowsGroupBlending;
@property (atomic, readwrite) BOOL allowsGroupOpacity;
@property (atomic, readwrite) BOOL allowsHitTesting;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } anchorPoint;
@property (atomic, readwrite) double anchorPointZ;
@property (atomic, readwrite) unsigned int autoresizingMask;
@property (atomic, readwrite) BOOL autoreverses;
@property (atomic, readwrite) struct CGColor { }*backgroundColor;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } backgroundColorPhase;
@property (atomic, readwrite, copy) NSArray *backgroundFilters;
@property (atomic, readwrite) double beginTime;
@property (atomic, readwrite, copy) NSArray *behaviors;
@property (atomic, readwrite) struct CGColor { }*borderColor;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } borderFrame;
@property (atomic, readwrite) double borderWidth;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (atomic, readwrite) BOOL canDrawConcurrently;
@property (atomic, readwrite) BOOL clearsContext;
@property (atomic, readwrite) double coefficientOfRestitution;
@property (atomic, readwrite, retain) id compositingFilter;
@property (atomic, readwrite, copy) NSArray *constraints;
@property (atomic, readwrite, retain) id contents;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentsCenter;
@property (atomic, readwrite) BOOL contentsContainsSubtitles;
@property (atomic, readwrite) BOOL contentsDither;
@property (atomic, readwrite, copy) NSString *contentsFormat;
@property (atomic, readwrite, copy) NSString *contentsGravity;
@property (atomic, readwrite) struct CGColor { }*contentsMultiplyColor;
@property (atomic, readwrite) BOOL contentsOpaque;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentsRect;
@property (atomic, readwrite) double contentsScale;
@property (atomic, readwrite, copy) NSString *contentsScaling;
@property (atomic, readwrite) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } contentsTransform;
@property (atomic, readwrite) BOOL continuousCorners;
@property (atomic, readwrite, retain) id cornerContents;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cornerContentsCenter;
@property (atomic, readwrite) BOOL cornerContentsMasksEdges;
@property (atomic, readwrite) double cornerRadius;
@property (nonatomic, readonly, retain) CALayer *currentLayer;
@property (atomic, readwrite) unsigned long long currentPage;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <CALayerDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (getter=isDoubleSided, atomic, readwrite) BOOL doubleSided;
@property (atomic, readwrite) BOOL drawsAsynchronously;
@property (atomic, readwrite) double duration;
@property (atomic, readwrite) unsigned int edgeAntialiasingMask;
@property (atomic, readwrite, copy) NSString *fillMode;
@property (atomic, readwrite, copy) NSArray *filters;
@property (atomic, readwrite) BOOL flipsHorizontalAxis;
@property (getter=isFloating, atomic, readwrite) BOOL floating;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (getter=isFrozen, atomic, readwrite) BOOL frozen;
@property (getter=isGeometryFlipped, atomic, readwrite) BOOL geometryFlipped;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isHidden, atomic, readwrite) BOOL hidden;
@property (atomic, readwrite) BOOL hitTestsAsOpaque;
@property (atomic, readwrite) BOOL inheritsTiming;
@property (atomic, readwrite) int inputFocusType;
@property (atomic, readwrite) BOOL invertsShadow;
@property (atomic, readwrite) unsigned int layoutFlags;
@property (atomic, readwrite, retain) <CALayoutManager> *layoutManager;
@property (atomic, readwrite) BOOL literalContentsCenter;
@property (atomic, readwrite, copy) NSString *magnificationFilter;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } margin;
@property (atomic, readwrite, retain) CALayer *mask;
@property (atomic, readwrite) unsigned long long maskedCorners;
@property (atomic, readwrite) BOOL masksToBounds;
@property (atomic, readwrite) double mass;
@property (atomic, readwrite, copy) CAMeshTransform *meshTransform;
@property (atomic, readwrite, copy) NSString *minificationFilter;
@property (atomic, readwrite) float minificationFilterBias;
@property (atomic, readwrite) double momentOfInertia;
@property (atomic, readwrite) double motionBlurAmount;
@property (atomic, readwrite, copy) NSString *name;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } naturalSizeForPanoramicStretch;
@property (atomic, readwrite) BOOL needsDisplayOnBoundsChange;
@property (atomic, readwrite) BOOL needsLayoutOnGeometryChange;
@property (atomic, readwrite) float opacity;
@property (getter=isOpaque, atomic, readwrite) BOOL opaque;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } position;
@property (atomic, readwrite) BOOL preloadsCache;
@property (atomic, readwrite, copy) NSArray *presentationModifiers;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } quickLookFrame;
@property (atomic, readonly) CALayer *quickLookLayer;
@property (atomic, readonly) NSView *quickLookView;
@property (atomic, readonly) NSViewController *quickLookViewController;
@property (atomic, readwrite) BOOL rasterizationPrefersDisplayCompositing;
@property (atomic, readwrite) double rasterizationScale;
@property (atomic, readwrite) float repeatCount;
@property (atomic, readwrite) double repeatDuration;
@property (atomic, readonly) NSResponder *responder;
@property (atomic, readwrite) struct CGColor { }*shadowColor;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } shadowOffset;
@property (atomic, readwrite) float shadowOpacity;
@property (atomic, readwrite) const struct CGPath { }*shadowPath;
@property (atomic, readwrite) BOOL shadowPathIsBounds;
@property (atomic, readwrite) double shadowRadius;
@property (atomic, readwrite) BOOL shouldRasterize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } sizeRequisition;
@property (atomic, readonly) NSDictionary *sizingConstraints;
@property (atomic, readwrite) BOOL sortsSublayers;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } spacing;
@property (atomic, readwrite) float speed;
@property (atomic, readwrite, copy) NSArray *stateTransitions;
@property (atomic, readwrite, copy) NSArray *states;
@property (atomic, readwrite, copy) NSDictionary *style;
@property (atomic, readwrite) struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; } sublayerTransform;
@property (atomic, readwrite, copy) NSArray *sublayers;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) CALayer *superlayer;
@property (atomic, readwrite) unsigned int tableColumn;
@property (atomic, readwrite) unsigned int tableColumns;
@property (atomic, readwrite) unsigned int tableRow;
@property (atomic, readwrite) unsigned int tableRows;
@property (atomic, readwrite) double timeOffset;
@property (atomic, readwrite) struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; } transform;
@property (atomic, readwrite) BOOL usesPanoramicStretch;
@property (atomic, readwrite) double velocityStretch;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleRect;
@property (atomic, readwrite, copy) NSString *wrappedDirection;
@property (atomic, readwrite, copy) NSString *wrappedOrigin;
@property (atomic, readwrite) double zPosition;

// Image: /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore

+ (id)CA_attributes;
+ (BOOL)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (BOOL)_hasRenderLayerSubclass;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)defaultActionForKey:(id)arg1;
+ (id)defaultValueForKey:(id)arg1;
+ (id)layer;
+ (BOOL)needsDisplayForKey:(id)arg1;
+ (BOOL)supportsSecureCoding;

- (void)_cancelAnimationTimer;
- (void)_colorSpaceDidChange;
- (void)_contentsFormatDidChange:(id)arg1;
- (void)_dealloc;
- (void)_display;
- (id)_initWithReference:(id)arg1;
- (struct CGSize { double x1; double x2; })_preferredSize;
- (void)_renderBackgroundInContext:(struct CGContext { }*)arg1;
- (void)_renderBorderInContext:(struct CGContext { }*)arg1;
- (void)_renderForegroundInContext:(struct CGContext { }*)arg1;
- (void)_renderSublayersInContext:(struct CGContext { }*)arg1;
- (struct CGColorSpace { }*)_retainColorSpace;
- (BOOL)_scheduleAnimationTimer;
- (id)actionForKey:(id)arg1;
- (id)actions;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)addSublayer:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })affineTransform;
- (BOOL)allowsWeakReference;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (double)anchorPointZ;
- (id)animationForKey:(id)arg1;
- (id)animationKeys;
- (unsigned int)autoresizingMask;
- (BOOL)autoreverses;
- (struct CGColor { }*)backgroundColor;
- (id)backgroundFilters;
- (double)beginTime;
- (struct CGColor { }*)borderColor;
- (double)borderWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (id)compositingFilter;
- (BOOL)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)contents;
- (BOOL)contentsAreFlipped;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentsCenter;
- (BOOL)contentsContainsSubtitles;
- (id)contentsFormat;
- (id)contentsGravity;
- (struct CGColor { }*)contentsMultiplyColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentsRect;
- (double)contentsScale;
- (id)contentsScaling;
- (BOOL)continuousCorners;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toLayer:(id)arg2;
- (double)convertTime:(double)arg1 fromLayer:(id)arg2;
- (double)convertTime:(double)arg1 toLayer:(id)arg2;
- (id)cornerContents;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cornerContentsCenter;
- (BOOL)cornerContentsMasksEdges;
- (double)cornerRadius;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (void)display;
- (void)displayIfNeeded;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (BOOL)drawsAsynchronously;
- (double)duration;
- (unsigned int)edgeAntialiasingMask;
- (void)encodeWithCoder:(id)arg1;
- (id)fillMode;
- (id)filters;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithLayer:(id)arg1;
- (void)insertSublayer:(id)arg1 above:(id)arg2;
- (void)insertSublayer:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertSublayer:(id)arg1 below:(id)arg2;
- (BOOL)isDoubleSided;
- (BOOL)isGeometryFlipped;
- (BOOL)isHidden;
- (BOOL)isOpaque;
- (void)layoutIfNeeded;
- (id)layoutManager;
- (void)layoutSublayers;
- (id)magnificationFilter;
- (id)mask;
- (unsigned long long)maskedCorners;
- (BOOL)masksToBounds;
- (id)minificationFilter;
- (float)minificationFilterBias;
- (id)modelLayer;
- (id)name;
- (BOOL)needsDisplay;
- (BOOL)needsDisplayOnBoundsChange;
- (BOOL)needsLayout;
- (float)opacity;
- (struct CGPoint { double x1; double x2; })position;
- (struct CGSize { double x1; double x2; })preferredFrameSize;
- (id)presentationLayer;
- (BOOL)rasterizationPrefersDisplayCompositing;
- (double)rasterizationScale;
- (oneway void)release;
- (void)removeAllAnimations;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeFromSuperlayer;
- (void)renderInContext:(struct CGContext { }*)arg1;
- (float)repeatCount;
- (double)repeatDuration;
- (void)replaceSublayer:(id)arg1 with:(id)arg2;
- (void)resizeSublayersWithOldSize:(struct CGSize { double x1; double x2; })arg1;
- (void)resizeWithOldSuperlayerSize:(struct CGSize { double x1; double x2; })arg1;
- (id)retain;
- (unsigned long long)retainCount;
- (BOOL)retainWeakReference;
- (void)setActions:(id)arg1;
- (void)setAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAnchorPointZ:(double)arg1;
- (void)setAutoresizingMask:(unsigned int)arg1;
- (void)setAutoreverses:(BOOL)arg1;
- (void)setBackgroundColor:(struct CGColor { }*)arg1;
- (void)setBackgroundFilters:(id)arg1;
- (void)setBeginTime:(double)arg1;
- (void)setBorderColor:(struct CGColor { }*)arg1;
- (void)setBorderWidth:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCompositingFilter:(id)arg1;
- (void)setContents:(id)arg1;
- (void)setContentsCenter:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentsContainsSubtitles:(BOOL)arg1;
- (void)setContentsFormat:(id)arg1;
- (void)setContentsGravity:(id)arg1;
- (void)setContentsMultiplyColor:(struct CGColor { }*)arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentsScale:(double)arg1;
- (void)setContentsScaling:(id)arg1;
- (void)setContinuousCorners:(BOOL)arg1;
- (void)setCornerContents:(id)arg1;
- (void)setCornerContentsCenter:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCornerContentsMasksEdges:(BOOL)arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleSided:(BOOL)arg1;
- (void)setDrawsAsynchronously:(BOOL)arg1;
- (void)setDuration:(double)arg1;
- (void)setEdgeAntialiasingMask:(unsigned int)arg1;
- (void)setFillMode:(id)arg1;
- (void)setFilters:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGeometryFlipped:(BOOL)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setLayoutManager:(id)arg1;
- (void)setMagnificationFilter:(id)arg1;
- (void)setMask:(id)arg1;
- (void)setMaskedCorners:(unsigned long long)arg1;
- (void)setMasksToBounds:(BOOL)arg1;
- (void)setMinificationFilter:(id)arg1;
- (void)setMinificationFilterBias:(float)arg1;
- (void)setName:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNeedsDisplayOnBoundsChange:(BOOL)arg1;
- (void)setNeedsLayout;
- (void)setOpacity:(float)arg1;
- (void)setOpaque:(BOOL)arg1;
- (void)setPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRasterizationPrefersDisplayCompositing:(BOOL)arg1;
- (void)setRasterizationScale:(double)arg1;
- (void)setRepeatCount:(float)arg1;
- (void)setRepeatDuration:(double)arg1;
- (void)setShadowColor:(struct CGColor { }*)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setShadowOpacity:(float)arg1;
- (void)setShadowPath:(struct CGPath { }*)arg1;
- (void)setShadowRadius:(double)arg1;
- (void)setShouldRasterize:(BOOL)arg1;
- (void)setSpeed:(float)arg1;
- (void)setStyle:(id)arg1;
- (void)setSublayerTransform:(struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })arg1;
- (void)setSublayers:(id)arg1;
- (void)setTimeOffset:(double)arg1;
- (void)setTransform:(struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (void)setZPosition:(double)arg1;
- (struct CGColor { }*)shadowColor;
- (struct CGSize { double x1; double x2; })shadowOffset;
- (float)shadowOpacity;
- (const struct CGPath { }*)shadowPath;
- (double)shadowRadius;
- (BOOL)shouldArchiveValueForKey:(id)arg1;
- (BOOL)shouldRasterize;
- (float)speed;
- (id)style;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })sublayerTransform;
- (id)sublayers;
- (id)superlayer;
- (double)timeOffset;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })transform;
- (id)valueForKey:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (double)zPosition;

// CALayer (CABehavior)

- (id)behaviors;
- (void)setBehaviors:(id)arg1;
- (void)setVelocityStretch:(double)arg1;
- (double)velocityStretch;

// CALayer (CAConstraintLayoutManager)

- (void)addConstraint:(id)arg1;

// CALayer (CADynamicsBehavior)

- (double)coefficientOfRestitution;
- (double)mass;
- (double)momentOfInertia;
- (void)setCoefficientOfRestitution:(double)arg1;
- (void)setMass:(double)arg1;
- (void)setMomentOfInertia:(double)arg1;

// CALayer (CALayerFunctions)

- (BOOL)getRendererInfo:(struct _CARenderRendererInfo { int x1; unsigned int x2; unsigned int x3; }*)arg1 size:(unsigned long long)arg2;

// CALayer (CALayerPrivate)

+ (void)CAMLParserEndElement:(id)arg1;
+ (void)CAMLParserStartElement:(id)arg1;
+ (int (*)CA_getterForProperty:(const struct _CAPropertyInfo { unsigned int x1; SEL x2[2]; unsigned int x3 : 16; unsigned int x4 : 16; char *x5; struct __CFString {} *x6; }*)arg1;
+ (int (*)CA_setterForProperty:(const struct _CAPropertyInfo { unsigned int x1; SEL x2[2]; unsigned int x3 : 16; unsigned int x4 : 16; char *x5; struct __CFString {} *x6; }*)arg1;
+ (id)attributesForKey:(id)arg1;
+ (BOOL)needsLayoutForKey:(id)arg1;
+ (id)properties;
+ (BOOL)resolveInstanceMethod:(SEL)arg1;

- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;
- (id)CAMLTypeForKey:(id)arg1;
- (BOOL)_canDisplayConcurrently;
- (struct Layer { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct Data { struct Vec4<float> { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; } x_3_1_1; unsigned char x_3_1_2; unsigned char x_3_1_3; unsigned char x_3_1_4; unsigned char x_3_1_5; unsigned int x_3_1_6 : 3; unsigned int x_3_1_7 : 3; unsigned int x_3_1_8 : 4; unsigned int x_3_1_9 : 4; unsigned int x_3_1_10 : 4; unsigned int x_3_1_11 : 1; unsigned int x_3_1_12 : 1; unsigned int x_3_1_13 : 1; unsigned int x_3_1_14 : 1; unsigned int x_3_1_15 : 1; unsigned int x_3_1_16 : 1; unsigned int x_3_1_17 : 1; unsigned int x_3_1_18 : 1; unsigned int x_3_1_19 : 1; unsigned int x_3_1_20 : 1; unsigned int x_3_1_21 : 1; unsigned int x_3_1_22 : 1; unsigned int x_3_1_23 : 1; unsigned int x_3_1_24 : 1; unsigned int x_3_1_25 : 1; unsigned int x_3_1_26 : 1; unsigned int x_3_1_27 : 1; unsigned int x_3_1_28 : 1; unsigned int x_3_1_29 : 1; unsigned int x_3_1_30 : 1; unsigned int x_3_1_31 : 1; unsigned int x_3_1_32 : 1; unsigned int x_3_1_33 : 1; unsigned int x_3_1_34 : 1; unsigned int x_3_1_35 : 1; unsigned int x_3_1_36 : 1; unsigned int x_3_1_37 : 1; } x3; }*)_copyRenderLayer:(struct Transaction { struct Shared {} *x1; int x2; struct HashTable<CA::Layer *, unsigned int *> {} *x3; struct SpinLock {} *x4; unsigned int x5; struct Level {} *x6; struct List<void (^)()> {} *x7; struct Command {} *x8; struct Deleted {} *x9; struct List<const void *> {} *x10; struct Context {} *x11; struct HashTable<CA::Layer *, CA::Layer *> {} *x12; struct __CFRunLoop {} *x13; struct __CFRunLoopObserver {} *x14; struct LayoutList {} *x15; struct List<CA::Layer *> {} *x16; struct Atomic { struct { int x_1_2_1; } x_17_1_1; } x17; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; unsigned int x22 : 1; }*)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int*)arg3;
- (BOOL)_defersDidBecomeVisiblePostCommit;
- (void)_didCommitLayer:(struct Transaction { struct Shared {} *x1; int x2; struct HashTable<CA::Layer *, unsigned int *> {} *x3; struct SpinLock {} *x4; unsigned int x5; struct Level {} *x6; struct List<void (^)()> {} *x7; struct Command {} *x8; struct Deleted {} *x9; struct List<const void *> {} *x10; struct Context {} *x11; struct HashTable<CA::Layer *, CA::Layer *> {} *x12; struct __CFRunLoop {} *x13; struct __CFRunLoopObserver {} *x14; struct LayoutList {} *x15; struct List<CA::Layer *> {} *x16; struct Atomic { struct { int x_1_2_1; } x_17_1_1; } x17; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; unsigned int x22 : 1; }*)arg1;
- (void)_prepareContext:(struct CGContext { }*)arg1;
- (unsigned int)_renderImageCopyFlags;
- (bool)_renderLayerDefinesProperty:(unsigned int)arg1;
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;
- (BOOL)acceleratesDrawing;
- (void)addPresentationModifier:(id)arg1;
- (BOOL)allowsContentsRectCornerMasking;
- (BOOL)allowsDisplayCompositing;
- (BOOL)allowsEdgeAntialiasing;
- (BOOL)allowsGroupBlending;
- (BOOL)allowsGroupOpacity;
- (BOOL)allowsHitTesting;
- (id)ancestorSharedWithLayer:(id)arg1;
- (id)attributesForKeyPath:(id)arg1;
- (struct CGSize { double x1; double x2; })backgroundColorPhase;
- (BOOL)canDrawConcurrently;
- (void)clearHasBeenCommitted;
- (BOOL)clearsContext;
- (BOOL)contentsDither;
- (BOOL)contentsOpaque;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })contentsTransform;
- (id)context;
- (BOOL)doubleSided;
- (BOOL)drawsMipmapLevels;
- (void)encodeWithCAMLWriter:(id)arg1;
- (BOOL)flipsHorizontalAxis;
- (BOOL)floating;
- (BOOL)hasBeenCommitted;
- (BOOL)hidden;
- (BOOL)hitTestsAsOpaque;
- (BOOL)ignoresHitTesting;
- (id)implicitAnimationForKeyPath:(id)arg1;
- (BOOL)inheritsTiming;
- (void)invalidateContents;
- (BOOL)invertsShadow;
- (BOOL)isDescendantOf:(id)arg1;
- (BOOL)isFlipped;
- (BOOL)isFloating;
- (BOOL)isFrozen;
- (id)layerAtTime:(double)arg1;
- (id)layerBeingDrawn;
- (void)layerDidBecomeVisible:(BOOL)arg1;
- (void)layerDidChangeDisplay:(unsigned int)arg1;
- (void)layoutBelowIfNeeded;
- (BOOL)layoutIsActive;
- (BOOL)literalContentsCenter;
- (id)meshTransform;
- (double)motionBlurAmount;
- (BOOL)needsLayoutOnGeometryChange;
- (BOOL)opaque;
- (BOOL)preloadsCache;
- (id)presentationModifiers;
- (void*)regionBeingDrawn;
- (void)reloadValueForKeyPath:(id)arg1;
- (void)removePresentationModifier:(id)arg1;
- (void)setAcceleratesDrawing:(BOOL)arg1;
- (void)setAllowsContentsRectCornerMasking:(BOOL)arg1;
- (void)setAllowsDisplayCompositing:(BOOL)arg1;
- (void)setAllowsEdgeAntialiasing:(BOOL)arg1;
- (void)setAllowsGroupBlending:(BOOL)arg1;
- (void)setAllowsGroupOpacity:(BOOL)arg1;
- (void)setAllowsHitTesting:(BOOL)arg1;
- (void)setBackgroundColorPhase:(struct CGSize { double x1; double x2; })arg1;
- (void)setCanDrawConcurrently:(BOOL)arg1;
- (void)setClearsContext:(BOOL)arg1;
- (void)setContentsChanged;
- (void)setContentsDither:(BOOL)arg1;
- (void)setContentsOpaque:(BOOL)arg1;
- (void)setContentsTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setFlipped:(BOOL)arg1;
- (void)setFlipsHorizontalAxis:(BOOL)arg1;
- (void)setFloating:(BOOL)arg1;
- (void)setFrozen:(BOOL)arg1;
- (void)setHitTestsAsOpaque:(BOOL)arg1;
- (void)setInheritsTiming:(BOOL)arg1;
- (void)setInvertsShadow:(BOOL)arg1;
- (void)setLiteralContentsCenter:(BOOL)arg1;
- (void)setMeshTransform:(id)arg1;
- (void)setMotionBlurAmount:(double)arg1;
- (void)setNeedsLayoutOnGeometryChange:(BOOL)arg1;
- (void)setPreloadsCache:(BOOL)arg1;
- (void)setPresentationModifiers:(id)arg1;
- (void)setShadowPathIsBounds:(BOOL)arg1;
- (void)setSizeRequisition:(struct CGSize { double x1; double x2; })arg1;
- (void)setSortsSublayers:(BOOL)arg1;
- (void)setWantsExtendedDynamicRangeContent:(BOOL)arg1;
- (BOOL)shadowPathIsBounds;
- (struct CGSize { double x1; double x2; })size;
- (struct CGSize { double x1; double x2; })sizeRequisition;
- (BOOL)sortsSublayers;
- (id)sublayerEnumerator;
- (BOOL)wantsExtendedDynamicRangeContent;

// CALayer (CALayerScrolling)

- (void)_scrollPoint:(struct CGPoint { double x1; double x2; })arg1 fromLayer:(id)arg2;
- (void)_scrollRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectOfLayer:(id)arg1;
- (void)scrollPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;

// CALayer (CALight)

- (id)lights;
- (void)setLights:(id)arg1;

// CALayer (CARemoteLayerServer)

+ (id)layerWithRemoteClientId:(unsigned int)arg1;

// CALayer (CAState)

- (void)addState:(id)arg1;
- (id)dependentStatesOfState:(id)arg1;
- (void)insertState:(id)arg1 atIndex:(unsigned int)arg2;
- (void)removeState:(id)arg1;
- (id)stateTransitionFrom:(id)arg1 to:(id)arg2;
- (id)stateWithName:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// CALayer (DebugHierarchyAdditions)

- (id)debugHierarchyChildGroupingID;
- (id)debugHierarchyObjectsInGroupWithID:(id)arg1 outOptions:(id*)arg2;
- (id)debugHierarchyPropertyDescriptions;
- (id)debugHierarchyValueForPropertyWithName:(id)arg1;

// Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit

// CALayer (AVPanoramicStretch)

+ (BOOL)automaticallyNotifiesObserversOfUsesPanoramicStretch;
+ (id)keyPathsForValuesAffectingUsesPanoramicStretch;

- (void)setUsesPanoramicStretch:(BOOL)arg1;
- (BOOL)usesPanoramicStretch;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

// CALayer (NSBackingLayerContents)

- (Class)NS_backingLayerContentsClass;
- (id)NS_makeContentsLayer;

// CALayer (NSCanDraw)

- (BOOL)NS_canDraw;

// CALayer (NSContentsAligning)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_alignedDisplayRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_alignedRect;
- (BOOL)NS_contentsAligningEnabled;
- (struct CGSize { double x1; double x2; })NS_contentsScaleSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_convertRectFromDisplay:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_convertRectToDisplay:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_displayAlignedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_displayAlignedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2;
- (double)NS_displayContentsScale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_displayRect;
- (void)NS_displayUsingContentsAligning;
- (void)NS_prepareForDisplayUsingContentsAligning;
- (void)NS_setNeedsDisplayInRectUsingContentsAligning:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)NS_shouldUseContentsAligning;
- (void)NS_updateContentsTransformForContentsAligning;
- (void)NS_updateOpaqueForContentsAligning;
- (void)NS_willDisplayWithoutContentsAligning;

// CALayer (NSDebuggingAddition)

- (void)_NS_dumpContents;
- (id)_NS_subtreeDescription;
- (id)_NS_subtreeDescriptionWithIndent:(unsigned long long)arg1;

// CALayer (NSDefaultContentsScale)

- (void)NS_didChangeDefaultContentsScale:(double)arg1;

// CALayer (NSFocusContext)

- (struct CGContext { }*)NS_focusContext;

// CALayer (NSOpenGLInternal)

- (BOOL)NS_managesOpenGLDrawable;

// CALayer (NSSuggestedContentsScale)

- (BOOL)NS_defersTransformInvalidation;
- (void)NS_setDefersTransformInvalidation:(BOOL)arg1;
- (double)NS_suggestedContentsScale;
- (struct CGSize { double x1; double x2; })NS_suggestedContentsScaleSize;
- (void)_NS_accumulateSuggestedScale:(double*)arg1 :(double*)arg2;
- (void)_NS_accumulateSuggestedScaleBelow:(double*)arg1 :(double*)arg2;
- (void)_NS_invalidateSuggestedContentsScale;

// CALayer (NSTextLayerAddition)

- (BOOL)NS_needsLinearMaskOverlayForFontSmoothing;
- (BOOL)NS_shouldChangeFontSmoothing;
- (BOOL)NS_usesLinearMaskOverlay;

// CALayer (NSTileLayerAdditions)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_activeVisibleRect;
- (void)NS_dropPrefetchedContentsIfNecessary;
- (BOOL)NS_hasPartialPrefetchedContentsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)NS_hasPrefetchedContents;
- (BOOL)NS_hasPrefetchedContentsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)NS_invalidatePreparedContentRect;
- (BOOL)NS_isPurged;
- (BOOL)NS_isVisibleTile;
- (void)NS_prefetchContentsIfNecessary;
- (BOOL)NS_prefetchContentsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scrollVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (void)NS_prepareContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_renderedRectInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scrollVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (void)NS_setIsScrolling:(BOOL)arg1;
- (void)NS_setPreparedContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)NS_setPresentationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)NS_setPurged:(BOOL)arg1;
- (void)NS_setVisibleTile:(BOOL)arg1;
- (void)NS_showPrefetchedContentsIfNecessaryInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)NS_wantsToPrefetchTiles;

// CALayer (NSViewAssociation)

- (void)_setView:(id)arg1;
- (id)_view;

// CALayer (NSVisibleRect)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })NS_visibleRect;

// CALayer (NSVisualTabPickerCALayerExtras)

- (id)nearestAncestorIgnoringTransformLayers;
- (id)visualTabPicker_hitTestIgnoringTransformLayers:(struct CGPoint { double x1; double x2; })arg1 inRootLayer:(id)arg2;

// CALayer (_NSTiledLayer)

+ (id)keyPathsForValuesAffectingNS_tiledLayerVisibleRect;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// CALayer (MKAdditions)

- (id)_mapKit_mapLayer;
- (void)_mapkit_addAnimation:(id)arg1 forKey:(id)arg2 completion:(id)arg3;
- (void)_mapkit_removeAnimationImmediatelyForKey:(id)arg1;
- (id)currentLayer;
- (BOOL)getPresentationValue:(id*)arg1 forKey:(id)arg2 removeAnimation:(BOOL)arg3;
- (BOOL)getPresentationValue:(id*)arg1 forValueKey:(id)arg2 animationKey:(id)arg3 removeAnimation:(BOOL)arg4;

// CALayer (MKDoubleLayer)

- (struct CGPoint { double x1; double x2; })convertDoublePoint:(struct CGPoint { double x1; double x2; })arg1 fromLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertDoublePoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertDoubleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertDoubleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })doubleBounds;
- (struct CGPoint { double x1; double x2; })doublePosition;
- (void)setDoubleBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDoublePosition:(struct CGPoint { double x1; double x2; })arg1;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit

// CALayer (Delegate)

+ (id)delegate;

// CALayer (IKImageView2Transforms)

- (void)setAnchorPointWithoutShift:(struct CGPoint { double x1; double x2; })arg1;

// CALayer (IKNImageView)

- (struct CGColor { }*)createScannerBackgroundColorBottom;
- (struct CGColor { }*)createScannerBackgroundColorTop;
- (void)debug;
- (long long)layerType;
- (void)setBackgroundGray:(double)arg1 alpha:(double)arg2;
- (void)setBackgroundRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (void)setBorderGray:(double)arg1 alpha:(double)arg2;
- (void)setBorderRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
- (void)setScannerBackgroundColor;

// CALayer (LayerExtra)

- (void)adjustPosition;
- (void)beginMouseOperation;
- (void)clearSelection;
- (struct CGImage { }*)createNewMaskedImage:(struct CGImage { }*)arg1;
- (unsigned int)defaultKnob;
- (void)doDrawInContext:(struct CGContext { }*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)drawInContext:(struct CGContext { }*)arg1 drawSelection:(BOOL)arg2;
- (void)endMouseOperation;
- (BOOL)handleDoubleClick:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)handleMouseDown:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)hasSubLayer:(id)arg1;
- (struct CGPoint { double x1; double x2; })ikConvertEventLocationInWindow:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (id)ikImageBackgroundLayer;
- (id)ikImageLayer;
- (void)ikLayerWasAddedToSuperlayer;
- (void)ikMouseDown:(id)arg1;
- (id)ikRootLayer;
- (id)ikView;
- (BOOL)isAnnotationLayer;
- (BOOL)isPasteboardLayer;
- (BOOL)isSelectionLayer;
- (id)knobLayer;
- (void)saveState:(id)arg1;
- (void)selectLayer:(id)arg1 extendSelection:(BOOL)arg2;
- (void)setAnchorPointAndKeepFrame:(struct CGPoint { double x1; double x2; })arg1;
- (void)setShouldUseOriginalLayerToDraw:(BOOL)arg1;
- (void)setSupportsUndo:(BOOL)arg1;
- (void)setup:(id)arg1;
- (BOOL)shouldUseOriginalLayerToDraw;
- (void)startEditing:(id)arg1;
- (BOOL)supportsUndo;
- (void)toolmodeWillChangeFrom:(long long)arg1 to:(long long)arg2;
- (void)willBeRemovedFromSuperlayer;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI

// CALayer (QLDisplayableAddition)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })quickLookFrame;
- (id)quickLookLayer;
- (id)quickLookView;
- (id)quickLookViewController;
- (void)setQuickLookFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// CALayer (QLExtensions)

- (void)_ql_getPixelBufferPixelFormat:(unsigned int*)arg1;
- (BOOL)_ql_renderIntoPixelBuffer:(struct __CVBuffer { }*)arg1 forTime:(struct { unsigned int x1; int x2; long long x3; unsigned long long x4; double x5; long long x6; struct CVSMPTETime { short x_7_1_1; short x_7_1_2; unsigned int x_7_1_3; unsigned int x_7_1_4; unsigned int x_7_1_5; short x_7_1_6; short x_7_1_7; short x_7_1_8; short x_7_1_9; } x7; unsigned long long x8; unsigned long long x9; }*)arg2;

// Image: /System/Library/Frameworks/SceneKit.framework/Versions/A/SceneKit

// CALayer (SCN_JSSupport)

+ (id)SCNJSExportProtocol;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore

// CALayer (WebCoreCALayerExtras)

- (void)web_disableAllActions;

@end
