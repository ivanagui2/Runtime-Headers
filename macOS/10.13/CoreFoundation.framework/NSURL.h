/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
 */

@interface NSURL : NSObject <NSCopying, NSItemProviderReading, NSItemProviderWriting, NSPasteboardReading, NSPasteboardWriting, NSSecureCoding, NSURLHandleClient, QLPreviewItem> {
    NSURL * _baseURL;
    void * _clients;
    void * _reserved;
    NSString * _urlString;
}

@property (atomic, readonly, copy) NSURL *URLByDeletingLastPathComponent;
@property (atomic, readonly, copy) NSURL *URLByDeletingPathExtension;
@property (atomic, readonly, copy) NSURL *URLByResolvingSymlinksInPath;
@property (atomic, readonly, copy) NSURL *URLByStandardizingPath;
@property (atomic, readonly, copy) NSString *absoluteString;
@property (atomic, readonly, copy) NSURL *absoluteURL;
@property (atomic, readonly, copy) NSURL *baseURL;
@property (atomic, readonly, copy) NSData *dataRepresentation;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly, copy) NSURL *filePathURL;
@property (atomic, readonly) const char *fileSystemRepresentation;
@property (getter=isFileURL, atomic, readonly) BOOL fileURL;
@property (atomic, readonly, copy) NSString *fragment;
@property (atomic, readonly) BOOL hasDirectoryPath;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly, copy) NSString *host;
@property (getter=isiWorkURL, atomic, readonly) BOOL iWorkURL;
@property (atomic, readonly, copy) NSString *lastPathComponent;
@property (setter=ls_setPreferredLocalizations:, atomic, readwrite, retain) NSArray *ls_preferredLocalizations;
@property (nonatomic, readonly) NSString *mpUniversalTrackIDBaseID;
@property (nonatomic, readonly) long long mpUniversalTrackIDType;
@property (atomic, readonly, copy) NSString *parameterString;
@property (atomic, readonly, copy) NSString *password;
@property (atomic, readonly, copy) NSString *path;
@property (atomic, readonly, copy) NSArray *pathComponents;
@property (atomic, readonly, copy) NSString *pathExtension;
@property (atomic, readonly, copy) NSNumber *port;
@property (atomic, readonly) id previewItemDisplayState;
@property (atomic, readonly) NSString *previewItemTitle;
@property (atomic, readonly) NSURL *previewItemURL;
@property (atomic, readonly, copy) NSString *query;
@property (atomic, readonly, copy) NSString *relativePath;
@property (atomic, readonly, copy) NSString *relativeString;
@property (atomic, readonly, copy) NSString *resourceSpecifier;
@property (atomic, readonly, copy) NSString *scheme;
@property (atomic, readonly, copy) NSURL *standardizedURL;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly, copy) NSString *user;
@property (atomic, readonly, copy) NSArray *writableTypeIdentifiersForItemProvider;

// Image: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation

+ (id)__unurl;
+ (id)bookmarkDataWithContentsOfURL:(id)arg1 error:(id*)arg2;
+ (id)resourceValuesForKeys:(id)arg1 fromBookmarkData:(id)arg2;
+ (BOOL)supportsSecureCoding;
+ (BOOL)writeBookmarkData:(id)arg1 toURL:(id)arg2 options:(unsigned long long)arg3 error:(id*)arg4;

- (id)bookmarkDataWithAliasRecord:(id)arg1;
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 includingResourceValuesForKeys:(id)arg2 relativeToURL:(id)arg3 error:(id*)arg4;
- (BOOL)checkResourceIsReachableAndReturnError:(id*)arg1;
- (id)filePathURL;
- (id)fileReferenceURL;
- (BOOL)getResourceValue:(out id*)arg1 forKey:(id)arg2 error:(out id*)arg3;
- (BOOL)isFileReferenceURL;
- (void)removeAllCachedResourceValues;
- (void)removeCachedResourceValueForKey:(id)arg1;
- (id)resourceValuesForKeys:(id)arg1 error:(id*)arg2;
- (BOOL)setResourceValue:(id)arg1 forKey:(id)arg2 error:(id*)arg3;
- (BOOL)setResourceValues:(id)arg1 error:(id*)arg2;
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;
- (BOOL)startAccessingSecurityScopedResource;
- (void)stopAccessingSecurityScopedResource;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

// NSURL (NSPasteboardSupport)

+ (id)URLFromPasteboard:(id)arg1;
+ (id)readableTypesForPasteboard:(id)arg1;
+ (unsigned long long)readingOptionsForType:(id)arg1 pasteboard:(id)arg2;

- (BOOL)__isAbsolute;
- (id)initWithPasteboardPropertyList:(id)arg1 ofType:(id)arg2;
- (id)pasteboardPropertyListForType:(id)arg1;
- (id)writableTypesForPasteboard:(id)arg1;
- (void)writeToPasteboard:(id)arg1;
- (unsigned long long)writingOptionsForType:(id)arg1 pasteboard:(id)arg2;

// NSURL (NSURL_NSSavePanel)

- (BOOL)_urlForNSOpenSavePanelIsMobileDocumentsURL;

// NSURL (PrivateNSPasteboardSupport)

+ (id)_URLFromPasteboardNSData:(struct __CFData { }*)arg1;
+ (id)_convertedFileReferenceURLDataOrNil:(struct __CFData { }*)arg1;
+ (id)_securityScopedURLFromPasteboard:(id)arg1;

- (id)_absoluteStringConvertingFileReferenceURLIfRequired;

// NSURL (_NSDocumentSecurityScopeHelpers)

- (void)_NSDocument_createSecurityScope;
- (id)_NSDocument_debugDescription;
- (void)_NSDocument_setHasKnownSecurityScope:(BOOL)arg1;
- (long long)_NSDocument_startAccessingKnownSecurityScopedResource;

// Image: /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork

// NSURL (NSURLSession_Additions)

- (BOOL)_isSafeDirectoryForDownloads:(int)arg1;
- (BOOL)_isSafeFileForBackgroundUpload:(int)arg1;

// Image: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices

// NSURL (LSAdditions)

+ (id)LS_iCloudFamilyURLWithComponents:(id)arg1;
+ (id)ls_bizURL:(id)arg1;

- (id)LS_nooverride:(id)arg1;
- (BOOL)LS_pathHasCaseInsensitivePrefix:(id)arg1;
- (BOOL)conformsToOverridePatternWithKey:(id)arg1;
- (id)fmfURL;
- (id)fmipURL;
- (id)iCloudEmailPrefsURL;
- (id)iCloudSharingURL;
- (id)iCloudSharingURL_noFragment;
- (id)iTunesStoreURL;
- (id)iWorkApplicationName;
- (id)iWorkDocumentName;
- (BOOL)isiWorkURL;
- (id)keynoteLiveURL;
- (id)keynoteLiveURL_noFragment;
- (id)mapsURL;
- (id)photosURL;

// NSURL (LSPreferredLocalizations)

- (id)ls_preferredLocalizations;
- (void)ls_setPreferredLocalizations:(id)arg1;

// Image: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList

// NSURL (SFLAdditions)

- (id)__sfl__displayName;
- (BOOL)__sfl__isBootVolume;
- (BOOL)__sfl__isBrowsableVolume;
- (BOOL)__sfl__isCDVolume;
- (BOOL)__sfl__isDVDVolume;
- (BOOL)__sfl__isEjectableVolume;
- (BOOL)__sfl__isHFSStandard;
- (BOOL)__sfl__isIPodVolume;
- (BOOL)__sfl__isInternalVolume;
- (BOOL)__sfl__isLocalVolume;
- (BOOL)__sfl__isRemovableVolume;
- (BOOL)__sfl__isVolume;
- (BOOL)__sfl__isVolumeMounted;
- (id)__sfl__volumeURL;
- (BOOL)__sfl_isInTrash;
- (id)__sfl_securityScope;
- (void)__sfl_setSecurityScope:(id)arg1;

// NSURL (SFLBookmarkAdditions)

- (id)__sfl_cachedResourcePropertyForKey:(id)arg1;

// NSURL (SFLSharePointUtil)

- (id)__sfl_fileSecurity;
- (BOOL)__sfl_isWriteable;
- (BOOL)__sfl_supportsPermissions;

// Image: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation

// NSURL (NSItemProvider)

+ (id)objectWithItemProviderData:(id)arg1 typeIdentifier:(id)arg2 error:(id*)arg3;
+ (id)readableTypeIdentifiersForItemProvider;
+ (id)writableTypeIdentifiersForItemProvider;

- (id)_URLArchive;
- (id)loadDataWithTypeIdentifier:(id)arg1 forItemProviderCompletionHandler:(id)arg2;
- (id)writableTypeIdentifiersForItemProvider;

// NSURL (NSKeyValueObservingCustomization)

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;

// NSURL (NSScriptAppleEventConversion)

+ (id)_scriptingFileWithDescriptor:(id)arg1;

- (int)_scriptingAlternativeValueRankWithDescriptor:(id)arg1;
- (id)_scriptingFileDescriptor;

// NSURL (NSURL)

+ (id)URLByResolvingAliasFileAtURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
+ (id)URLByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToURL:(id)arg3 bookmarkDataIsStale:(BOOL*)arg4 error:(id*)arg5;
+ (id)URLWithDataRepresentation:(id)arg1 relativeToURL:(id)arg2;
+ (id)URLWithString:(id)arg1;
+ (id)URLWithString:(id)arg1 relativeToURL:(id)arg2;
+ (id)absoluteURLWithDataRepresentation:(id)arg1 relativeToURL:(id)arg2;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)fileURLWithFileSystemRepresentation:(const char *)arg1 isDirectory:(BOOL)arg2 relativeToURL:(id)arg3;
+ (id)fileURLWithPath:(id)arg1;
+ (id)fileURLWithPath:(id)arg1 isDirectory:(BOOL)arg2;
+ (id)fileURLWithPath:(id)arg1 isDirectory:(BOOL)arg2 relativeToURL:(id)arg3;
+ (id)fileURLWithPath:(id)arg1 relativeToURL:(id)arg2;

- (void)URLHandle:(id)arg1 resourceDataDidBecomeAvailable:(id)arg2;
- (void)URLHandle:(id)arg1 resourceDidFailLoadingWithReason:(id)arg2;
- (void)URLHandleResourceDidBeginLoading:(id)arg1;
- (void)URLHandleResourceDidCancelLoading:(id)arg1;
- (void)URLHandleResourceDidFinishLoading:(id)arg1;
- (id)URLHandleUsingCache:(BOOL)arg1;
- (unsigned long long)_cfTypeID;
- (struct __CFURL { }*)_cfurl;
- (struct __CFDictionary { }*)_clientsCreatingIfNecessary:(BOOL)arg1;
- (void)_freeClients;
- (BOOL)_isAbsolute;
- (BOOL)_isDeallocating;
- (BOOL)_tryRetain;
- (id)absoluteString;
- (id)absoluteURL;
- (id)baseURL;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dataRepresentation;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (const char *)fileSystemRepresentation;
- (id)fragment;
- (BOOL)getFileSystemRepresentation:(char *)arg1 maxLength:(unsigned long long)arg2;
- (BOOL)hasDirectoryPath;
- (unsigned long long)hash;
- (id)host;
- (id)init;
- (id)initAbsoluteURLWithDataRepresentation:(id)arg1 relativeToURL:(id)arg2;
- (id)initByResolvingAliasFileAtURL:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToURL:(id)arg3 bookmarkDataIsStale:(BOOL*)arg4 error:(id*)arg5;
- (id)initFileURLWithFileSystemRepresentation:(const char *)arg1 isDirectory:(BOOL)arg2 relativeToURL:(id)arg3;
- (id)initFileURLWithPath:(id)arg1;
- (id)initFileURLWithPath:(id)arg1 isDirectory:(BOOL)arg2;
- (id)initFileURLWithPath:(id)arg1 isDirectory:(BOOL)arg2 relativeToURL:(id)arg3;
- (id)initFileURLWithPath:(id)arg1 relativeToURL:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithDataRepresentation:(id)arg1 relativeToURL:(id)arg2;
- (id)initWithScheme:(id)arg1 host:(id)arg2 path:(id)arg3;
- (id)initWithString:(id)arg1;
- (id)initWithString:(id)arg1 relativeToURL:(id)arg2;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isFileURL;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (void)loadResourceDataNotifyingClient:(id)arg1 usingCache:(BOOL)arg2;
- (id)parameterString;
- (id)password;
- (id)path;
- (id)port;
- (id)propertyForKey:(id)arg1;
- (id)query;
- (id)relativePath;
- (id)relativeString;
- (oneway void)release;
- (id)resourceDataUsingCache:(BOOL)arg1;
- (id)resourceSpecifier;
- (id)retain;
- (unsigned long long)retainCount;
- (id)scheme;
- (BOOL)setProperty:(id)arg1 forKey:(id)arg2;
- (BOOL)setResourceData:(id)arg1;
- (id)standardizedURL;
- (id)user;

// NSURL (NSURLExtras)

+ (id)_web_URLWithComponents:(/* Warning: unhandled struct encoding: '{?=@@@@q@@@}' */ struct { id x1; id x2; long long x3; id x4; id x5; })arg1;
+ (id)_web_URLWithString:(id)arg1 relativeToURL:(id)arg2;

- (/* Warning: unhandled struct encoding: '{?=@@@@q@@@}' */ struct { id x1; id x2; long long x3; id x4; id x5; })_web_URLComponents;
- (BOOL)_web_isJavaScriptURL;
- (id)_web_scriptIfJavaScriptURL;
- (id)_web_suggestedFilenameWithMIMEType:(id)arg1;

// NSURL (NSURLExtrasInternal)

+ (id)_URLWithData:(id)arg1 relativeToURL:(id)arg2;
+ (id)_URLWithDataAsString:(id)arg1 relativeToURL:(id)arg2;

- (id)_URLByEscapingSpacesAndControlChars;
- (id)_hostString;
- (id)_web_URLByRemovingLastPathComponent_nowarn;
- (id)_web_URLByRemovingUserAndPath_nowarn;
- (id)_web_URLByRemovingUserAndQueryAndFragment_nowarn;

// NSURL (NSURLPathUtilities)

+ (id)fileURLWithPathComponents:(id)arg1;

- (id)URLByAppendingPathComponent:(id)arg1;
- (id)URLByAppendingPathComponent:(id)arg1 isDirectory:(BOOL)arg2;
- (id)URLByAppendingPathExtension:(id)arg1;
- (id)URLByDeletingLastPathComponent;
- (id)URLByDeletingPathExtension;
- (id)URLByResolvingSymlinksInPath;
- (id)URLByStandardizingPath;
- (id)lastPathComponent;
- (id)pathComponents;
- (id)pathExtension;

// NSURL (NSURLPromisedItems)

- (id)_fixedUpSideFaultError:(id)arg1;
- (void)_performWithPhysicalURL:(id)arg1;
- (long long)_promiseExtensionConsume;
- (void)_promiseExtensionRelease:(long long)arg1;
- (id)_valueFromFaultDictionary:(id)arg1 forKey:(id)arg2;
- (BOOL)checkPromisedItemIsReachableAndReturnError:(id*)arg1;
- (BOOL)getPromisedItemResourceValue:(out id*)arg1 forKey:(id)arg2 error:(out id*)arg3;
- (id)promisedItemResourceValuesForKeys:(id)arg1 error:(id*)arg2;

// Image: /System/Library/Frameworks/MediaPlayer.framework/Versions/A/MediaPlayer

// NSURL (MPUniversalTrackIDAdditions)

- (long long)_mpUTITypeFromMRUTIType:(unsigned int)arg1;
- (id)mpUniversalTrackIDBaseID;
- (long long)mpUniversalTrackIDType;

// Image: /System/Library/Frameworks/QTKit.framework/Versions/A/QTKit

// NSURL (NSURL_QTKitAdditions)

- (id)QT_URLByRemovingFragment;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI

// NSURL (QLPreviewConvenienceAdditions)

- (id)previewItemURL;

// NSURL (QLPreviewItemVirtualNode)

+ (id)previewItemVirtualNodeURLWithPath:(id)arg1;

- (BOOL)isPreviewItemVirtualNodeURL;

// Image: /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore

// NSURL (CAMLWriter)

- (id)CAMLType;
- (void)encodeWithCAMLWriter:(id)arg1;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy

// NSURL (WebDataURL)

+ (id)_web_uniqueWebDataURL;

// NSURL (WebNSURLExtras)

+ (id)_web_URLWithData:(id)arg1;
+ (id)_web_URLWithData:(id)arg1 relativeToURL:(id)arg2;
+ (id)_web_URLWithDataAsString:(id)arg1;
+ (id)_web_URLWithDataAsString:(id)arg1 relativeToURL:(id)arg2;
+ (id)_web_URLWithUserTypedString:(id)arg1;
+ (id)_web_URLWithUserTypedString:(id)arg1 relativeToURL:(id)arg2;
+ (id)_webkit_URLWithUserTypedString:(id)arg1;
+ (id)_webkit_URLWithUserTypedString:(id)arg1 relativeToURL:(id)arg2;

- (id)_web_URLByRemovingUserInfo;
- (const char *)_web_URLCString;
- (id)_web_dataForURLComponentType:(long long)arg1;
- (id)_web_hostData;
- (id)_web_hostString;
- (BOOL)_web_isEmpty;
- (id)_web_originalData;
- (id)_web_originalDataAsString;
- (id)_web_schemeData;
- (id)_web_schemeSeparatorWithoutColon;
- (id)_web_userVisibleString;
- (id)_webkit_URLByRemovingFragment;
- (id)_webkit_URLFromURLOrSchemelessFileURL;
- (id)_webkit_canonicalize;
- (BOOL)_webkit_isFileURL;
- (BOOL)_webkit_isJavaScriptURL;
- (id)_webkit_scriptIfJavaScriptURL;
- (id)_webkit_suggestedFilenameWithMIMEType:(id)arg1;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/WebKit

// NSURL (WKExtras)

+ (id)_web_URLWithWTFString:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg1;
+ (id)_web_URLWithWTFString:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg1 relativeToURL:(id)arg2;

- (struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; })_web_originalDataAsWTFString;

// Image: /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement

// NSURL (BTMAdditions)

- (id)__btm_innerAppURL;
- (BOOL)__btm_isApplication;
- (BOOL)__btm_isBundle;
- (id)__btm_localizedName;
- (id)__btm_outerAppURL;

// Image: /System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage

// NSURL (GSAdditions)

- (void)chmod:(unsigned short)arg1;

// NSURL (GSExtensions)

- (id)gs_URLByUpdatingPathExtensionWithPathOrURL:(id)arg1;
- (id)gs_issueExtension:(const char *)arg1 error:(id*)arg2;
- (id)gs_issueReadExtensionIfNeededForPid:(int)arg1;

// Image: /System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices

// NSURL (UTIAdditions)

- (BOOL)__is__conformsToUTI:(id)arg1;
- (BOOL)__is__getFSRef:(struct FSRef { unsigned char x1[80]; }*)arg1;
- (BOOL)__is__isAliasFile;
- (BOOL)__is__isDirectory;
- (BOOL)__is__isVolume;
- (BOOL)__is_isBootVolume;
- (BOOL)__is_isOnBootVolume;
- (id)__is_volumeURL;

@end
