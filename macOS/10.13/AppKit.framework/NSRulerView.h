/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSRulerView : NSView {
    NSView * _accessoryView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _cachedContentBoundsOrigin;
    double  _cachedDocViewToRulerConversion;
    NSDictionary * _cachedHashDict;
    NSView * _clientView;
    NSRulerMarker * _draggingMarker;
    NSMutableArray * _markers;
    unsigned long long  _orientation;
    double  _originOffset;
    id  _reservedRulerView1;
    double  _ruleThickness;
    NSScrollView * _scrollView;
    double  _thicknessForAccessoryView;
    double  _thicknessForMarkers;
    NSString * _units;
}

@property (atomic, readwrite, retain) NSView *accessoryView;
@property (atomic, readonly) double baselineLocation;
@property (atomic, readwrite) NSView *clientView;
@property (getter=isFlipped, atomic, readonly) BOOL flipped;
@property (atomic, readwrite, copy) NSArray *markers;
@property (atomic, readwrite, copy) NSString *measurementUnits;
@property (atomic, readwrite) unsigned long long orientation;
@property (atomic, readwrite) double originOffset;
@property (atomic, readonly) double requiredThickness;
@property (atomic, readwrite) double reservedThicknessForAccessoryView;
@property (atomic, readwrite) double reservedThicknessForMarkers;
@property (atomic, readwrite) double ruleThickness;
@property (atomic, readwrite) NSScrollView *scrollView;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)initialize;
+ (void)registerUnitWithName:(id)arg1 abbreviation:(id)arg2 unitToPointsConversionFactor:(double)arg3 stepUpCycle:(id)arg4 stepDownCycle:(id)arg5;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_centerScanSeparatorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectWithSingleThickness:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (id)description;

// NSRulerView (NSPrivate)

+ (id)_labelCell;
+ (void)_registerUnitWithName:(id)arg1 abbreviation:(id)arg2 unitToPointsConversionFactor:(double)arg3 stepUpCycle:(id)arg4 stepDownCycle:(id)arg5;
+ (id)_registrationDictionaryForUnitNamed:(id)arg1;
+ (id)backgroundColor;
+ (id)labelColor;
+ (id)rulerLineColor;
+ (id)separatorColor;

- (void)_bitBlitSourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toDestinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_draggingMarkerView;
- (id)_hashMarkDictionary;
- (id)_hashMarkDictionaryForDocView:(id)arg1 measurementUnitToBoundsConversionFactor:(double)arg2 stepUpCycle:(id)arg3 stepDownCycle:(id)arg4 minimumHashSpacing:(double)arg5 minimumLabelSpacing:(double)arg6;
- (id)_hashMarkDictionaryForDocumentView:(id)arg1 measurementUnitName:(id)arg2;
- (BOOL)_isAccessoryViewHostMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_markerAreaRect;
- (id)_markerHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_maxRuleAreaRect;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3 topView:(BOOL)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_ruleAreaMarginRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_ruleAreaRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rulerAccessoryViewAreaRect;
- (struct CGPoint { double x1; double x2; })_rulerOrigin;
- (void)_scrollToMatchContentView;
- (void)_setAccessoryViewHostMode:(BOOL)arg1;
- (void)_setDraggingMarker:(id)arg1;
- (double)_unitsForClientLocation:(double)arg1;
- (double)_unitsForRulerLocation:(double)arg1;

// NSRulerView (NSRulerViewAccessibility)

+ (BOOL)accessibilityIsSingleCelled;

- (void)_addMarker:(id)arg1;
- (void)_cancelAddMarker:(id)arg1;
- (double)_locationFromUnitsValue:(double)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsMarkerUIElementsAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsUnitDescriptionAttributeSettable;
- (BOOL)accessibilityIsUnitsAttributeSettable;
- (id)accessibilityMarkerUIElementsAttribute;
- (id)accessibilityMaxValueAttribute;
- (id)accessibilityMinValueAttribute;
- (id)accessibilityOrientationAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPositionOfChild:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilityUnitDescriptionAttribute;
- (id)accessibilityUnitsAttribute;
- (id)accessoryView;
- (void)addMarker:(id)arg1;
- (double)baselineLocation;
- (id)clientView;
- (BOOL)displaysTooltips;
- (void)drawBackgroundInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawHashMarksAndLabelsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawMarkersInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRulerLines;
- (void)drawSeparatorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithScrollView:(id)arg1 orientation:(unsigned long long)arg2;
- (void)invalidateHashMarks;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (id)labelStringForValue:(id)arg1;
- (id)markers;
- (id)measurementUnits;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)moveRulerlineFromLocation:(double)arg1 toLocation:(double)arg2;
- (unsigned long long)orientation;
- (double)originOffset;
- (BOOL)preservesContentDuringLiveResize;
- (void)removeMarker:(id)arg1;
- (double)requiredThickness;
- (double)reservedThicknessForAccessoryView;
- (double)reservedThicknessForMarkers;
- (void)rightMouseDown:(id)arg1;
- (double)ruleThickness;
- (id)scrollView;
- (void)setAccessoryView:(id)arg1;
- (void)setClientView:(id)arg1;
- (void)setDisplaysTooltips:(BOOL)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLabelString:(id)arg1 forValue:(id)arg2;
- (void)setMarkers:(id)arg1;
- (void)setMeasurementUnits:(id)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setOrientation:(unsigned long long)arg1;
- (void)setOriginOffset:(double)arg1;
- (void)setReservedThicknessForAccessoryView:(double)arg1;
- (void)setReservedThicknessForMarkers:(double)arg1;
- (void)setRuleThickness:(double)arg1;
- (void)setScrollView:(id)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (id)testPart:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)trackMarker:(id)arg1 withMouseEvent:(id)arg2;
- (long long)userInterfaceLayoutDirection;
- (void)viewDidEndLiveResize;

@end
