/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTabBarNewTabButton : NSButton <NSDraggingDestination, NSTabBarSyncedButton> {
    NSColor * _backgroundColor;
    CALayer * _backgroundLayer;
    <NSTabBarSyncedButtonDelegate> * _buttonInTabSyncGroupDelegate;
    BOOL  _forcesActiveWindowState;
    CALayer * _leadingBorderLayer;
    BOOL  _mouseIsOverButton;
    BOOL  _syncedWithOtherButton;
    CALayer * _topBorderLayer;
    NSTrackingArea * _trackingArea;
}

@property (nonatomic, readwrite) <NSTabBarSyncedButtonDelegate> *buttonInTabSyncGroupDelegate;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (nonatomic, readwrite) BOOL forcesActiveWindowState;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) Class superclass;
@property (getter=isSyncedWithOtherButton, nonatomic, readwrite) BOOL syncedWithOtherButton;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)initialize;
+ (id)installNewTabButtonInView:(id)arg1;
+ (double)width;

- (void).cxx_destruct;
- (id)_backgroundDefaultColor;
- (void)_finishInitialization;
- (BOOL)_isDark;
- (id)_leadingBorderDefaultColor;
- (void)_setBackgroundColor:(id)arg1 withAnimation:(id)arg2;
- (void)_setLeadingBorderColor:(id)arg1 topBorderColor:(id)arg2 withAnimation:(id)arg3;
- (id)_topBorderDefaultColor;
- (void)_updateButtonColors;
- (void)_updateButtonHighlightWhenPressed:(BOOL)arg1 hovered:(BOOL)arg2;
- (void)_updateButtonHighlightWhenPressed:(BOOL)arg1 hovered:(BOOL)arg2 notifyNSTabBarSyncedButtonDelegate:(BOOL)arg3;
- (void)_viewDidChangeAppearance:(id)arg1;
- (void)_windowChangedKeyState;
- (BOOL)_windowIsActive;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)allowsVibrancy;
- (void)awakeFromNib;
- (id)buttonInTabSyncGroupDelegate;
- (BOOL)forcesActiveWindowState;
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)isSyncedWithOtherButton;
- (void)layout;
- (void)mouseDown:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)setButtonInTabSyncGroupDelegate:(id)arg1;
- (void)setForcesActiveWindowState:(BOOL)arg1;
- (void)setHighlightStateToPressed:(BOOL)arg1 hovered:(BOOL)arg2;
- (void)setSyncedWithOtherButton:(BOOL)arg1;

@end
