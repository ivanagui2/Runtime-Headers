/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface _NSTouchBarButtonsStackView : NSStackView <_NSTouchBarItemLayoutWrapper> {
    NSMutableArray * _adjustableButtons;
    NSLayoutConstraint * _desiredWidthConstraint;
    NSMutableArray * _equalWidthConstraints;
    NSButtonGroupTouchBarItem * _groupTouchBarItem;
    double  _maxWidth;
    NSMutableArray * _popoverItems;
    NSMutableArray * _preferredWidthConstraints;
    BOOL  _usingShortestTitle;
}

@property (atomic, readwrite, retain) NSMutableArray *adjustableButtons;
@property (atomic, readonly) struct CGSize { double x1; double x2; } contentClippingSize;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite, retain) NSLayoutConstraint *desiredWidthConstraint;
@property (atomic, readwrite, retain) NSMutableArray *equalWidthConstraints;
@property (atomic, readwrite) NSButtonGroupTouchBarItem *groupTouchBarItem;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) BOOL isSpace;
@property (atomic, readonly) double itemPadding;
@property (atomic, readonly) unsigned long long itemPosition;
@property (atomic, readonly) struct CGSize { double x1; double x2; } maxSize;
@property (atomic, readonly) struct CGSize { double x1; double x2; } minSize;
@property (atomic, readwrite, retain) NSMutableArray *popoverItems;
@property (atomic, readonly) struct CGSize { double x1; double x2; } preferredSize;
@property (atomic, readwrite, retain) NSMutableArray *preferredWidthConstraints;
@property (atomic, readonly) double preferredZOrder;
@property (atomic, readonly) long long priorityIndex;
@property (atomic, readonly) Class superclass;

+ (id)_buttonWithTitle:(id)arg1 image:(id)arg2 target:(id)arg3 action:(SEL)arg4 preferredWidth:(double)arg5 isAlertButton:(BOOL)arg6;
+ (id)makeAlertButtonWithTitle:(id)arg1 image:(id)arg2 target:(id)arg3 action:(SEL)arg4;
+ (id)makeButtonWithTitle:(id)arg1 image:(id)arg2 target:(id)arg3 action:(SEL)arg4 preferredWidth:(double)arg5;
+ (id)makePopoverItemWithIdentifier:(id)arg1 popoverTouchBar:(id)arg2 title:(id)arg3 image:(id)arg4 preferredWidth:(double)arg5;

- (void).cxx_destruct;
- (BOOL)_buttonsFitFullTitles;
- (BOOL)_buttonsFitShortTitles;
- (unsigned long long)_compressedImagePosition;
- (void)_removeConstraintsForView:(id)arg1;
- (void)_removeConstraintsForView:(id)arg1 fromConstraints:(id)arg2;
- (void)_removeSubview:(id)arg1;
- (void)_setButtonsWithFullTitles;
- (void)_setButtonsWithShortTitles;
- (void)_setButtonsWithShortTitlesCompressedImage;
- (id)adjustableButtons;
- (struct CGSize { double x1; double x2; })contentClippingSize;
- (void)dealloc;
- (id)desiredWidthConstraint;
- (id)equalWidthConstraints;
- (id)groupTouchBarItem;
- (id)initWithBarItem:(id)arg1;
- (void)insertPopover:(id)arg1 atIndex:(long long)arg2;
- (void)insertView:(id)arg1 atIndex:(long long)arg2;
- (BOOL)isSpace;
- (void)layout;
- (struct CGSize { double x1; double x2; })maxSize;
- (struct CGSize { double x1; double x2; })minSize;
- (id)popoverItems;
- (id)preferredWidthConstraints;
- (void)resetButtons;
- (void)resetLayout;
- (void)setAdjustableButtons:(id)arg1;
- (void)setDesiredWidthConstraint:(id)arg1;
- (void)setEqualWidthConstraints:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGroupTouchBarItem:(id)arg1;
- (void)setPopoverItems:(id)arg1;
- (void)setPreferredWidthConstraints:(id)arg1;
- (void)updateButtons;

@end
