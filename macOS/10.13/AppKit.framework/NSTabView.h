/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTabView : NSView <DebugHierarchyObject> {
    BOOL  _allowTruncatedLabels;
    <NSTabViewDelegate> * _delegate;
    struct __NSTabViewDelegateRespondTo { 
        unsigned int shouldSelectTabViewItem : 1; 
        unsigned int willSelectTabViewItem : 1; 
        unsigned int didSelectTabViewItem : 1; 
        unsigned int didChangeNumberOfTabViewItems : 1; 
        unsigned int reserved : 28; 
    }  _delegateRespondTo;
    BOOL  _drawsBackground;
    long long  _endTabWidth;
    struct __NSTabViewFlags { 
        unsigned int needsLayout : 1; 
        unsigned int controlTint : 3; 
        unsigned int controlSize : 2; 
        unsigned int wiringNibConnections : 1; 
        unsigned int wiringInteriorLastKeyView : 1; 
        unsigned int originalNextKeyViewChanged : 1; 
        unsigned int liveResizeSkippedResetToolTips : 1; 
        unsigned int subviewsAddedForTabs : 1; 
        unsigned int allowsPropertyChange : 1; 
        unsigned int ownedByTabViewController : 1; 
        unsigned int reserved : 19; 
    }  _flags;
    NSTabViewItem * _focusedTabViewItem;
    NSFont * _font;
    long long  _maxOverlap;
    NSView * _originalNextKeyView;
    NSTabViewItem * _pressedTabViewItem;
    NSTabViewItem * _selectedTabViewItem;
    double  _tabHeight;
    NSTabViewItem * _tabViewItemWithKeyView;
    id  _tabViewItems;
    NSLayoutConstraint * _tabViewMinimumSizeConstraint;
    void * _tabViewUnused2;
    BOOL  _tabViewUnusedBOOL1;
    struct __NSTabViewTypeFlags { 
        unsigned int tabViewBorderType : 3; 
        unsigned int tabPosition : 5; 
        unsigned int reserved : 24; 
    }  _typeFlags;
}

@property (atomic, readwrite) BOOL allowsTruncatedLabels;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentRect;
@property (atomic, readwrite) unsigned long long controlSize;
@property (atomic, readwrite) unsigned long long controlTint;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <NSTabViewDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite) BOOL drawsBackground;
@property (atomic, readwrite, retain) NSFont *font;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) struct CGSize { double x1; double x2; } minimumSize;
@property (atomic, readonly) long long numberOfTabViewItems;
@property (atomic, readonly) NSTabViewItem *selectedTabViewItem;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) unsigned long long tabPosition;
@property (atomic, readwrite) unsigned long long tabViewBorderType;
@property (atomic, readonly, copy) NSArray *tabViewItems;
@property (atomic, readwrite) unsigned long long tabViewType;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)_setUsesToolTipsWhenTruncated:(BOOL)arg1;
+ (BOOL)_usesToolTipsWhenTruncated;
+ (void)initialize;
+ (BOOL)requiresConstraintBasedLayout;

- (void).cxx_destruct;
- (void)_addAndUpdateBezelLayerIfNeeded;
- (void)_addTabViewButtons;
- (void)_addedTab:(id)arg1 atIndex:(long long)arg2;
- (id)_backgroundBezelLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_bezelLayerFrame;
- (BOOL)_canMakePropertyChange;
- (void)_cancelDelayedKeyboardNavigationTabSwitch;
- (Class)_classToCheckForWantsUpdateLayer;
- (void)_commonInit;
- (void)_concludeDefaultKeyLoopComputation;
- (struct __CFDictionary { }*)_copyCoreUIOptionsForTabViewItem:(id)arg1 withState:(unsigned long long)arg2 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (BOOL)_coreUIDrawBezelInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withClip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 flipped:(BOOL)arg3;
- (BOOL)_coreUIDrawTab:(id)arg1 withState:(unsigned long long)arg2 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct __CFDictionary { }*)_createCoreUIBezelOptionsFlipped:(BOOL)arg1;
- (id)_currentBorderColor;
- (double)_currentTabHeight;
- (void)_didChangeTabViewType;
- (void)_didRemoveLayer;
- (double)_doLayoutTabs:(double)arg1;
- (void)_doTestTabSwitchingPerformance;
- (void)_drawBezelBorder:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_drawBorder:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_drawTabViewItem:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_drawTabsInDirtyRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawThemeBezelBorder:(id)arg1 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_drawThemeTab:(id)arg1 withState:(unsigned long long)arg2 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)_endTabWidth;
- (id)_findFirstValidKeyViewStartingFrom:(id)arg1 inTabViewItem:(id)arg2;
- (long long)_findPreviousNextTab:(long long)arg1 loop:(BOOL)arg2 invertForR2L:(BOOL)arg3 startingAtTabItem:(id)arg4;
- (void)_finishedMakingConnections;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForBezelBorder;
- (struct CGSize { double x1; double x2; })_frameSizeForContentSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_hackFrameToMatchLegacyBezelRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_hasBezelBorder;
- (BOOL)_hasHorizontalOrientation;
- (BOOL)_hasKeyboardFocus;
- (BOOL)_hasKeyboardFocusInTabItem:(id)arg1;
- (BOOL)_hasTabs;
- (id)_highlightColorForCell:(id)arg1;
- (id)_hitTest:(struct CGPoint { double x1; double x2; }*)arg1 dragTypes:(id)arg2;
- (void)_invalidateTabsCache;
- (BOOL)_isViewValidOriginalNextKeyView:(id)arg1;
- (void)_keyboardNavigateDoSelectOfFocusItem:(id)arg1;
- (void)_keyboardNavigateToTabAtIndex:(long long)arg1;
- (void)_keyboardNavigateToTabByDelta:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_labelRectForTabRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forItem:(id)arg2;
- (void)_layoutTabs;
- (double)_maxOverlap;
- (struct CGSize { double x1; double x2; })_minimumSizeNeedForTabItemLabel:(id)arg1;
- (struct CGSize { double x1; double x2; })_nominalSizeNeedForTabItemLabel:(id)arg1;
- (void)_old_encodeWithCoder_NSTabView:(id)arg1;
- (id)_old_initWithCoder_NSTabView:(id)arg1;
- (id)_originalNextKeyView;
- (void)_performTabLayoutIfNeeded;
- (void)_prepareForDefaultKeyLoopComputation;
- (id)_pressedTabViewItem;
- (void)_previousNextTab:(long long)arg1 loop:(BOOL)arg2;
- (void)_primitiveSetDefaultNextKeyView:(id)arg1;
- (void)_primitiveSetNextKeyView:(id)arg1;
- (void)_primitiveSetPreviousKeyView:(id)arg1;
- (unsigned long long)_realControlTint;
- (void)_recursiveBreakKeyViewLoop;
- (id)_recursiveSetDefaultKeyViewLoop;
- (void)_redisplayForStateChange;
- (void)_removeBackgroundBezelLayer;
- (void)_removeTabButtonLayer;
- (void)_removeTabViewItems:(id)arg1;
- (void)_resizeSelectedTabViewItem;
- (void)_setBackgroundBezelLayer:(id)arg1;
- (void)_setCurrentTabHeight:(double)arg1;
- (void)_setEndTabWidth:(double)arg1;
- (void)_setInteriorNextKeyView:(id)arg1;
- (void)_setKeyboardFocusRingNeedsDisplayForTabViewItem:(id)arg1;
- (void)_setLayoutEngine:(id)arg1;
- (void)_setMaxOverlap:(double)arg1;
- (void)_setNeedsDisplayForTabViewItem:(id)arg1;
- (void)_setNeedsLayout:(BOOL)arg1;
- (void)_setNextKeyViewFor:(id)arg1 toNextKeyView:(id)arg2;
- (void)_setPressedTabViewItem:(id)arg1;
- (void)_setTabViewButtons:(id)arg1;
- (void)_setTabViewControllerAllowsPropertyChange:(BOOL)arg1;
- (void)_setTabViewItemForSpringLoading:(id)arg1;
- (void)_setTabViewItems:(id)arg1;
- (void)_setTabViewTypeFlags:(unsigned long long)arg1;
- (void)_setWindow:(id)arg1;
- (BOOL)_shouldAppearActive;
- (BOOL)_shouldSelectTabViewItem:(id)arg1;
- (BOOL)_shouldUseSeparateLayoutEngineForItem:(id)arg1;
- (void)_springLoadItem;
- (void)_switchInitialFirstResponder:(id)arg1 lastKeyView:(id)arg2 forTabViewItem:(id)arg3;
- (void)_switchTabViewItem:(id)arg1 oldView:(id)arg2 withTabViewItem:(id)arg3 newView:(id)arg4 initialFirstResponder:(id)arg5 lastKeyView:(id)arg6;
- (void)_systemColorChanged:(id)arg1;
- (id)_tabEnumerationFromLeftToRight;
- (double)_tabHeight;
- (BOOL)_tabIndexIsLeftOrTop:(unsigned long long)arg1;
- (BOOL)_tabIndexIsRightOrBottom:(unsigned long long)arg1;
- (unsigned long long)_tabOrientation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tabRectAdjustedForOverlap:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tabRectForTabViewItem:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tabViewButtonFrame;
- (id)_tabViewButtons;
- (id)_tabViewController;
- (BOOL)_tabViewControllerAllowsPropertyChange;
- (id)_tabViewItemForSpringLoading;
- (BOOL)_tabViewOwnedByTabViewController;
- (BOOL)_tabsAreR2L;
- (void)_testTabSwitchingPerformance;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_themeContentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_themeTabAndBarArea;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleRectForTabViewItem:(id)arg1;
- (double)_totalMinimumTabsLengthWithOverlap:(double)arg1;
- (double)_totalNominalTabsLengthWithOverlap:(double)arg1;
- (double)_totalTabsLength:(BOOL)arg1 overlap:(double)arg2;
- (void)_updateBackgroundBezelLayerIfRequired;
- (void)_updateMinimumSizeConstraint;
- (void)_updateTabBezelStyleForLayer:(id)arg1;
- (void)_updateTabViewButtonsFrame;
- (BOOL)_usesSubviewsForButtons;
- (int)_vibrancyBlendMode;
- (id)_vibrancyFilter;
- (void)_willChangeTabViewType;
- (void)_windowChangedKeyState;
- (BOOL)_wiringNibConnections;
- (void)dealloc;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSTabView (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityContentsAttribute;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsContentsAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsTabsAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (id)accessibilityRoleAttribute;
- (id)accessibilityTabsAttribute;
- (id)accessibilityValueAttribute;
- (void)addTabViewItem:(id)arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (BOOL)allowsTruncatedLabels;
- (BOOL)allowsVibrancy;
- (BOOL)becomeFirstResponder;
- (void)becomeKeyWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (unsigned long long)controlSize;
- (unsigned long long)controlTint;
- (id)currentEditor;
- (id)delegate;
- (void)drawFocusRingMask;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)drawsBackground;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBounds;
- (id)font;
- (long long)indexOfTabViewItem:(id)arg1;
- (long long)indexOfTabViewItemWithIdentifier:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)insertTabViewItem:(id)arg1 atIndex:(long long)arg2;
- (void)instantiateWithObjectInstantiator:(id)arg1;
- (BOOL)isFlipped;
- (BOOL)isOpaque;
- (void)layout;
- (struct CGSize { double x1; double x2; })minimumSize;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)mouseTracker:(id)arg1 didStopTrackingWithEvent:(id)arg2;
- (BOOL)mouseTracker:(id)arg1 shouldContinueTrackingWithEvent:(id)arg2;
- (BOOL)mouseTracker:(id)arg1 shouldStartTrackingWithEvent:(id)arg2;
- (void)moveDown:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveUp:(id)arg1;
- (BOOL)needsPanelToBecomeKey;
- (id)ns_widgetType;
- (long long)numberOfTabViewItems;
- (void)performClick:(id)arg1;
- (void)removeFromSuperview;
- (void)removeFromSuperviewWithoutNeedingDisplay;
- (void)removeTabViewItem:(id)arg1;
- (BOOL)resignFirstResponder;
- (void)resignKeyWindow;
- (void)restoreStateWithCoder:(id)arg1;
- (void)selectFirstTabViewItem:(id)arg1;
- (void)selectLastTabViewItem:(id)arg1;
- (void)selectNextTabViewItem:(id)arg1;
- (void)selectPreviousTabViewItem:(id)arg1;
- (void)selectTabViewItem:(id)arg1;
- (void)selectTabViewItemAtIndex:(long long)arg1;
- (void)selectTabViewItemWithIdentifier:(id)arg1;
- (id)selectedTabViewItem;
- (void)setAllowsTruncatedLabels:(BOOL)arg1;
- (void)setContentCompressionResistancePriority:(float)arg1 forOrientation:(long long)arg2;
- (void)setControlSize:(unsigned long long)arg1;
- (void)setControlTint:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDrawsBackground:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setNextKeyView:(id)arg1;
- (void)setTabPosition:(unsigned long long)arg1;
- (void)setTabViewBorderType:(unsigned long long)arg1;
- (void)setTabViewMinimumSizeConstraint:(id)arg1;
- (void)setTabViewType:(unsigned long long)arg1;
- (void)springLoadingActivated:(BOOL)arg1 draggingInfo:(id)arg2;
- (unsigned long long)springLoadingEntered:(id)arg1;
- (void)springLoadingExited:(id)arg1;
- (void)springLoadingHighlightChanged:(id)arg1;
- (unsigned long long)springLoadingUpdated:(id)arg1;
- (unsigned long long)tabPosition;
- (unsigned long long)tabViewBorderType;
- (id)tabViewItemAtIndex:(long long)arg1;
- (id)tabViewItemAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)tabViewItems;
- (id)tabViewMinimumSizeConstraint;
- (unsigned long long)tabViewType;
- (void)takeSelectedTabViewItemFromSender:(id)arg1;
- (void)updateConstraints;
- (void)updateLayer;
- (void)viewDidChangeBackingProperties;
- (void)viewDidEndLiveResize;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewWillStartLiveResize;

@end
