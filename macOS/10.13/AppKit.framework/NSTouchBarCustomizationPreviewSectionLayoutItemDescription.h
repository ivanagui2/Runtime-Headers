/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTouchBarCustomizationPreviewSectionLayoutItemDescription : NSObject <_NSTouchBarItemLayoutWrapper> {
    struct CGSize { 
        double width; 
        double height; 
    }  _backupDragSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _contentClippingSize;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dragAnchorPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dragPosition;
    BOOL  _isCentered;
    BOOL  _isEditable;
    BOOL  _isSpace;
    BOOL  _isStacked;
    unsigned long long  _itemPosition;
    long long  _itemState;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _minSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _preferredSize;
    long long  _priorityIndex;
    BOOL  _showsAppState;
}

@property (atomic, readwrite) struct CGSize { double x1; double x2; } backupDragSize;
@property (getter=isCentered, atomic, readwrite) BOOL centered;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } contentClippingSize;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } dragAnchorPoint;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } dragPosition;
@property (getter=isDragging, atomic, readonly) BOOL dragging;
@property (getter=isEditable, atomic, readwrite) BOOL editable;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite) BOOL isSpace;
@property (atomic, readonly) double itemPadding;
@property (atomic, readwrite) unsigned long long itemPosition;
@property (atomic, readwrite) long long itemState;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } maxSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } minSize;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } preferredSize;
@property (atomic, readonly) double preferredZOrder;
@property (atomic, readwrite) long long priorityIndex;
@property (atomic, readwrite) BOOL showsAppState;
@property (getter=isStacked, atomic, readwrite) BOOL stacked;
@property (atomic, readonly) Class superclass;

- (struct CGSize { double x1; double x2; })backupDragSize;
- (struct CGSize { double x1; double x2; })contentClippingSize;
- (void)dealloc;
- (id)description;
- (struct CGPoint { double x1; double x2; })dragAnchorPoint;
- (struct CGPoint { double x1; double x2; })dragPosition;
- (id)init;
- (BOOL)isCentered;
- (BOOL)isDragging;
- (BOOL)isEditable;
- (BOOL)isSpace;
- (BOOL)isStacked;
- (unsigned long long)itemPosition;
- (long long)itemState;
- (struct CGSize { double x1; double x2; })maxSize;
- (struct CGSize { double x1; double x2; })minSize;
- (struct CGSize { double x1; double x2; })preferredSize;
- (long long)priorityIndex;
- (void)setBackupDragSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCentered:(BOOL)arg1;
- (void)setContentClippingSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDragAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setDragPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setEditable:(BOOL)arg1;
- (void)setIsSpace:(BOOL)arg1;
- (void)setItemPosition:(unsigned long long)arg1;
- (void)setItemState:(long long)arg1;
- (void)setMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPreferredSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPriorityIndex:(long long)arg1;
- (void)setShowsAppState:(BOOL)arg1;
- (void)setStacked:(BOOL)arg1;
- (BOOL)showsAppState;

@end
