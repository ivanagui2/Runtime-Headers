/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSButtonCell : NSActionCell {
    NSString * _altContents;
    id  _alternateImageOrKeyEquivalentFont;
    struct __BCFlags { 
        unsigned int __reserved : 1; 
        unsigned int hasOverlayView : 1; 
        unsigned int alwaysRadioExclusive : 1; 
        unsigned int leadingOrTrailing : 1; 
        unsigned int shouldNotHighlightOnPerformClick : 1; 
        unsigned int imageHugsTitle : 1; 
        unsigned int allowTitleTightening : 1; 
        unsigned int isDrawingFocus : 1; 
        unsigned int useButtonImageSource : 1; 
        unsigned int hasTitleTextField : 1; 
        unsigned int isDrawingDisclosure : 1; 
        unsigned int suppressAXValueChangeNote : 1; 
        unsigned int doesNotDimImage : 1; 
        unsigned int inset : 2; 
        unsigned int transparent : 1; 
        unsigned int inIntermediateDisclosure : 1; 
        unsigned int hasKeyEquivalentInsteadOfImage : 1; 
        unsigned int imageSizeDiff : 1; 
        unsigned int imageAndText : 1; 
        unsigned int bottomOrLeft : 1; 
        unsigned int horizontal : 1; 
        unsigned int imageOverlaps : 1; 
        unsigned int bordered : 1; 
        unsigned int drawing : 1; 
        unsigned int lightByGray : 1; 
        unsigned int lightByBackground : 1; 
        unsigned int lightByContents : 1; 
        unsigned int changeGray : 1; 
        unsigned int changeBackground : 1; 
        unsigned int changeContents : 1; 
        unsigned int pushIn : 1; 
    }  _bcFlags;
    struct __BCFlags2 { 
        unsigned int bezelStyle : 3; 
        unsigned int showsBorderOnlyWhileMouseInside : 1; 
        unsigned int mouseInside : 1; 
        unsigned int bezelStyle2 : 1; 
        unsigned int imageScaling : 2; 
        unsigned int keyEquivalentModifierMask : 24; 
    }  _bcFlags2;
    _NSButtonCellAux * _buttonCellAuxStorage;
    NSString * _keyEquivalent;
    NSImage * _normalImage;
    unsigned short  _periodicDelay;
    unsigned short  _periodicInterval;
    id  _sound;
}

@property (nonatomic, readonly) NSImageView *_imageView;
@property (atomic, readwrite) SEL alternateAction;
@property (atomic, readwrite, retain) NSImage *alternateImage;
@property (atomic, readwrite, copy) NSString *alternateTitle;
@property (atomic, readwrite) unsigned long long highlightsBy;
@property (atomic, readwrite) unsigned long long imagePosition;
@property (atomic, readwrite) unsigned long long imageScaling;
@property (atomic, readwrite, copy) NSString *keyEquivalent;
@property (atomic, readwrite, retain) NSFont *keyEquivalentFont;
@property (atomic, readwrite) unsigned long long keyEquivalentModifierMask;
@property (atomic, readwrite) long long maxAcceleratorLevel;
@property (atomic, readwrite) long long maxState;
@property (getter=isOpaque, atomic, readonly) BOOL opaque;
@property (atomic, readwrite) unsigned long long showsStateBy;
@property (atomic, readwrite, copy) NSString *title;
@property (getter=isTransparent, atomic, readwrite) BOOL transparent;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)initialize;

- (void)_acceleratorTimerFired;
- (BOOL)_acceptsFirstMouseForEvent:(id)arg1 inView:(id)arg2;
- (BOOL)_allowsVibrancyForControlView:(id)arg1;
- (BOOL)_allowsVibrancyForImageInView:(id)arg1;
- (BOOL)_allowsVibrancyForTitleInView:(id)arg1;
- (id)_altContents;
- (id)_alternateImageSynthesizedForCheckOrRadio:(BOOL*)arg1;
- (id)_attributedStringForDrawing;
- (void)_autoflipUnarchivedProperties;
- (struct CGSize { double x1; double x2; })_autolayout_cellSize;
- (id)_backgroundColorForFontSmoothing;
- (BOOL)_backgroundIsSetOnLayer;
- (id)_backgroundView;
- (void)_beginAcceleratorPeriodicActionsUsingLegacyHW:(BOOL)arg1;
- (id)_bezelContentsByDrawingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (id)_bezelContentsFromCoreUIWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_bezelStyleOnlyCenteredVertically;
- (BOOL)_bezelStyleWantsUpdateLayerInView:(id)arg1;
- (id)_buttonCellAux;
- (id)_buttonCellAuxAllocatingIfNeeded:(BOOL)arg1;
- (BOOL)_canUseFocusRingMaskForText;
- (Class)_classForOverrideCheck;
- (void)_clearButtonCellAux;
- (void)_clearMouseTracking;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_commonBaseRectWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_commonInit;
- (void)_configureAndDrawImageWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 controlView:(id)arg3;
- (void)_configureAndDrawTitleWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 controlView:(id)arg3;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth;
- (void)_controlView:(id)arg1 didChangeAppearance:(id)arg2;
- (void)_controlViewDidMoveToWindow:(id)arg1;
- (void)_convertToText:(id)arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_coreUIAlignmentRectInsetsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct __CFDictionary { }*)_coreUIBezelDrawOptionsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_coreUIContentRectInsetsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGSize { double x1; double x2; })_coreUIIntrinsticContentSizeForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct __CFString { }*)_coreUIWidgetName;
- (id)_currentBezelContentsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (id)_currentTitle;
- (id)_currentTitleTextFieldAttributedString;
- (id)_defaultFont;
- (long long)_destinationDisclosureState;
- (BOOL)_disabledForDrawing;
- (void)_disposeAnimator;
- (void)_doUserDisclosureExpandOrCollapseInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawCustomFocusMaskWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (int)_effectiveBackgroundStyleInView:(id)arg1;
- (void)_endAcceleratorPeriodicActions;
- (BOOL)_funkyOptOutLogicThatShouldGoAwayForView:(id)arg1 semanticContext:(int)arg2;
- (BOOL)_hasButtonCellAux;
- (BOOL)_hasCenteredBezelBackground;
- (BOOL)_hasCustomFocusMask;
- (BOOL)_hasCustomForegroundColor;
- (BOOL)_hasRolloverContentArt;
- (void)_imageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 titleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 forBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)_imageSynthesizedForCheckOrRadio:(BOOL*)arg1;
- (double)_imageVerticalAdjustmentForBezel;
- (id)_imageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_imageViewFrameWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_inToolbar;
- (long long)_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext;
- (unsigned long long)_interiorContentAppearanceInView:(id)arg1;
- (unsigned long long)_interiorContentValueStateInView:(id)arg1;
- (BOOL)_isAnyAcceleratorButton;
- (BOOL)_isInlineBezelStyle;
- (BOOL)_isMultiLevelAcceleratorButton;
- (id)_layerKeysForCachingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 drawingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (void)_legacyDrawFocusRingInCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_logImageState:(unsigned long long)arg1 andBGStyle:(int)arg2 forLabel:(id)arg3;
- (BOOL)_maybeBeginStateChangeAnimationWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGSize { double x1; double x2; })_minCellSize;
- (struct CGSize { double x1; double x2; })_minCellSizeIncrement;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (BOOL)_needsOutline;
- (BOOL)_needsToDoBezelDrawingForLayerInView:(id)arg1;
- (id)_obtainButtonAnimator;
- (id)_overrideImageRecolorColor;
- (void)_preeffectBaseImage:(id*)arg1 state:(unsigned long long*)arg2 backgroundStyle:(int*)arg3 inView:(id)arg4;
- (BOOL)_preferAlternateContent;
- (BOOL)_preferAlternateContentForImage;
- (BOOL)_preferInactiveBezelArtInView:(id)arg1;
- (BOOL)_preferInactiveContentInView:(id)arg1;
- (BOOL)_preferOnArtForBezel;
- (BOOL)_preferSlightlyDarkerImageForOnBezel;
- (unsigned long long)_preferredFocusLocationMask;
- (unsigned long long)_presentationImagePosition;
- (id)_pressureConfigurationIfNeeded;
- (void)_removeBackgroundView;
- (void)_removeImageView;
- (void)_removeTitleTextField;
- (double)_roundCoordinate:(double)arg1 upToDevicePixelForView:(id)arg2;
- (BOOL)_sendActionFrom:(id)arg1;
- (void)_setAltContents:(id)arg1;
- (void)_setAnimationsAllowed:(BOOL)arg1;
- (void)_setBackgroundView:(id)arg1;
- (void)_setDestinationDisclosureState:(long long)arg1;
- (void)_setImageView:(id)arg1;
- (void)_setIsDrawingDisclosure:(BOOL)arg1;
- (void)_setLayerNeedsLayout;
- (void)_setMouseTrackingInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ofView:(id)arg2;
- (void)_setNeedsStateUpdate:(id)arg1;
- (void)_setNextDisclosureState:(long long)arg1;
- (void)_setPresentationImagePosition:(unsigned long long)arg1;
- (void)_setShouldNotHighlightOnPerformClick:(BOOL)arg1;
- (void)_setShowsDisclosureChevron:(BOOL)arg1;
- (void)_setSound:(id)arg1;
- (void)_setTitleTextField:(id)arg1;
- (BOOL)_shouldSetHighlightToFlag:(BOOL)arg1;
- (BOOL)_shouldShowFocus;
- (BOOL)_shouldTweakRoundingBehaviorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_shouldUseStyledTextInView:(id)arg1;
- (BOOL)_shouldUseStyledTextInView:(id)arg1 forAttributedTitle:(id)arg2;
- (BOOL)_showsDisclosureChevron;
- (id)_sound;
- (id)_startSound;
- (void)_stateAnimationDone;
- (long long)_stateForDrawing;
- (BOOL)_subclassOverridesAnyDrawMethods;
- (BOOL)_subclassOverridesDrawImage;
- (BOOL)_suppressMouseUpAction;
- (BOOL)_templateImageShouldPunchHoleInBezel;
- (id)_textAttributes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleRectForProposedTitleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_titleTextField;
- (BOOL)_titleTextIsScrollable;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_trackingBoundsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_updateAllOtherButtonsInGroupToNotBeChecked;
- (void)_updateBackgroundViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_updateCoreUIOptions:(id)arg1 withContentAppearanceInView:(id)arg2;
- (void)_updateImageViewImageInView:(id)arg1;
- (void)_updateImageViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_updateMouseInside:(BOOL)arg1;
- (void)_updateMouseTracking;
- (BOOL)_updateStyledTextOptions:(id)arg1 withContentAppearanceInView:(id)arg2;
- (void)_updateSubviewsWhenLayerBackedInView:(id)arg1 includeTitleTextField:(BOOL)arg2;
- (void)_updateTitleTextFieldValue;
- (void)_updateTitleTextFieldWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_useHitTestInTrackMouse;
- (BOOL)_usesDefaultContinuousBehavior;
- (int)_vibrancyBlendModeForControlView:(id)arg1;
- (id)_vibrancyFilterForControlView:(id)arg1;
- (BOOL)_wantsSeparatedContentSubviewsInView:(id)arg1;
- (BOOL)_wantsToUseFocusRingMask;
- (BOOL)_wasNoticedBySenpai;
- (void)_windowChangedKeyStateInView:(id)arg1;
- (void)dealloc;

// NSButtonCell (NSButtonAnimations)

- (id)_detachCurrentImageView;
- (id)_detachCurrentTextField;
- (void)_exchangeImageViewsWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 withMutation:(id)arg3;
- (void)_exchangeTextFieldsWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 withMutation:(id)arg3;
- (void)_layoutExitingViewsWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_setAlternateImage:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setAlternateTitle:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setAttributedAlternateTitle:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setAttributedTitle:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setBezelTintColor:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setImage:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setImagePosition:(unsigned long long)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)_setTitle:(id)arg1 animatedInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;

// NSButtonCell (NSButtonCellAccessibility)

- (BOOL)_accessibilityIncludeDescriptionAttribute;
- (BOOL)_axIsNonCheckboxToggleButton;
- (id)_buttonCellAccessibilityRoleAttribute;

// NSButtonCell (NSButtonCellPrivate)

+ (struct CGSize { double x1; double x2; })_keyEquivalentSizeWithFont:(id)arg1;

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignedTitleRectWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_alwaysEnablesRadioButtonExclusivity;
- (BOOL)_alwaysShowBezelForCurrentBezelStyleAndState;
- (id)_backgroundColor;
- (id)_bezelTintColor;
- (unsigned long long)_buttonType;
- (BOOL)_canBecomeDefaultButtonCell;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_centerTitle:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_fillBackground:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withAlternateColor:(BOOL)arg2;
- (BOOL)_hasImage;
- (BOOL)_hasTitle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_imageRectWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_insetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_isDrawingDisclosure;
- (BOOL)_isGuarded;
- (double)_leading;
- (double)_minimumPressDuration;
- (long long)_nextDisclosureState;
- (void)_renderCurrentAnimationFrameInContext:(struct CGContext { }*)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)_setAlwaysEnablesRadioButtonExclusivity:(BOOL)arg1;
- (void)_setBackgroundColor:(id)arg1;
- (void)_setBezelTintColor:(id)arg1;
- (void)_setButtonType:(unsigned long long)arg1 adjustingImage:(BOOL)arg2;
- (void)_setGuarded:(BOOL)arg1;
- (void)_setHighlighted:(BOOL)arg1 animated:(BOOL)arg2;
- (void)_setMinimumPressDuration:(double)arg1;
- (void)_setState:(long long)arg1 animated:(BOOL)arg2;
- (BOOL)_shouldDrawBezel;
- (BOOL)_shouldDrawDragged;
- (BOOL)_shouldDrawTextWithDisabledAppearance;
- (BOOL)_stateAnimationRunning;
- (id)_textDimColor;
- (id)_textHighlightColor;
- (double)_titlePadding;
- (struct CGSize { double x1; double x2; })_titleSizeWithSize:(struct CGSize { double x1; double x2; })arg1;
- (double)_titleSpacing;
- (struct CGSize { double x1; double x2; })_unconstrainedImageSize;

// NSButtonCell (NSButtonImageSourcePrivate)

- (id)_buttonImageSource;
- (void)_setButtonImageSource:(id)arg1;

// NSButtonCell (NSDefaultButtonIndicatorPrivate)

+ (double)_defaultButtonCycleTime;
+ (double)_defaultButtonCycleValue;
+ (void)_finishHitTracking:(id)arg1;
+ (BOOL)_requireMainThreadDefaultBezelCaching;
+ (void)_resetDefaultButtonCycleValue;
+ (void)_setDefaultButtonCycleTime:(float)arg1;
+ (void)_startHitTracking:(id)arg1;

- (BOOL)_appRequiresOldHeartbeatBehavior;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusRingBoundsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_hasDefaultButtonIndicator;
- (BOOL)_isAnimatingDefaultCell;
- (BOOL)_isDefaultButton;
- (void)_setDefaultButtonIndicatorNeedsDisplay;
- (BOOL)_shouldUpdateLayersInControlView:(id)arg1;
- (id)_stringDrawingContextForStyledTextOptions:(id)arg1 replacementColor:(id*)arg2;
- (BOOL)_wantsHeartBeat;

// NSButtonCell (_NSTableViewPrivate)

- (BOOL)_shouldHighlightCellWhenSelected;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityActivationPointAttribute;
- (id)accessibilityAttributeNames;
- (id)accessibilityDescriptionAttribute;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFocusRingBoundsForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)accessibilityIsDescriptionAttributeSettable;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySubroleAttribute;
- (id)accessibilityTitleAttribute;
- (id)accessibilityValueAttribute;
- (SEL)alternateAction;
- (id)alternateImage;
- (id)alternateMnemonic;
- (unsigned long long)alternateMnemonicLocation;
- (id)alternateTitle;
- (id)attributedAlternateTitle;
- (id)attributedStringValue;
- (id)attributedTitle;
- (id)backgroundColor;
- (unsigned long long)bezelStyle;
- (BOOL)canSmoothFontsInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forLayerBackedView:(id)arg2;
- (long long)cellAttribute:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)compare:(id)arg1;
- (id)compressionOptions;
- (BOOL)continueTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (BOOL)continueTrackingGesture:(id)arg1 inView:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)doubleValue;
- (void)drawBezelWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawImage:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawTitle:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (float)floatValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)getPeriodicDelay:(float*)arg1 interval:(float*)arg2;
- (unsigned long long)gradientType;
- (void)heartBeat:(struct { double x1; double x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 31; } x4; }*)arg1;
- (void)highlight:(BOOL)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (unsigned long long)highlightsBy;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)image;
- (BOOL)imageDimsWhenDisabled;
- (BOOL)imageHugsTitle;
- (unsigned long long)imagePosition;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (unsigned long long)imageScaling;
- (id)init;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (int)intValue;
- (long long)integerValue;
- (long long)interiorBackgroundStyle;
- (BOOL)isBordered;
- (BOOL)isOpaque;
- (BOOL)isSpringLoaded;
- (BOOL)isSpringLoadingEmphasized;
- (BOOL)isTransparent;
- (id)keyEquivalent;
- (id)keyEquivalentFont;
- (unsigned long long)keyEquivalentModifierMask;
- (void)layoutLayerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (long long)maxAcceleratorLevel;
- (long long)maxState;
- (id)mnemonic;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (long long)nextState;
- (id)objectValue;
- (void)performClick:(id)arg1;
- (void)setAlignment:(unsigned long long)arg1;
- (void)setAlternateAction:(SEL)arg1;
- (void)setAlternateImage:(id)arg1;
- (void)setAlternateMnemonicLocation:(unsigned long long)arg1;
- (void)setAlternateTitle:(id)arg1;
- (void)setAlternateTitleWithMnemonic:(id)arg1;
- (void)setAttributedAlternateTitle:(id)arg1;
- (void)setAttributedStringValue:(id)arg1;
- (void)setAttributedTitle:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundStyle:(long long)arg1;
- (void)setBezelStyle:(unsigned long long)arg1;
- (void)setBordered:(BOOL)arg1;
- (void)setButtonType:(unsigned long long)arg1;
- (void)setCellAttribute:(unsigned long long)arg1 to:(long long)arg2;
- (void)setCompressionOptions:(id)arg1;
- (void)setControlView:(id)arg1;
- (void)setDoubleValue:(double)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFloatValue:(float)arg1;
- (void)setFont:(id)arg1;
- (void)setGradientType:(unsigned long long)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setHighlightsBy:(unsigned long long)arg1;
- (void)setImage:(id)arg1;
- (void)setImageDimsWhenDisabled:(BOOL)arg1;
- (void)setImageHugsTitle:(BOOL)arg1;
- (void)setImagePosition:(unsigned long long)arg1;
- (void)setImageScaling:(unsigned long long)arg1;
- (void)setIntValue:(int)arg1;
- (void)setIntegerValue:(long long)arg1;
- (void)setKeyEquivalent:(id)arg1;
- (void)setKeyEquivalentFont:(id)arg1;
- (void)setKeyEquivalentFont:(id)arg1 size:(double)arg2;
- (void)setKeyEquivalentModifierMask:(unsigned long long)arg1;
- (void)setMaxAcceleratorLevel:(long long)arg1;
- (void)setMaxState:(long long)arg1;
- (void)setObjectValue:(id)arg1;
- (void)setPeriodicDelay:(float)arg1 interval:(float)arg2;
- (void)setShowsBorderOnlyWhileMouseInside:(BOOL)arg1;
- (void)setShowsStateBy:(unsigned long long)arg1;
- (void)setSound:(id)arg1;
- (void)setSpringLoaded:(BOOL)arg1;
- (void)setSpringLoadingEmphasized:(BOOL)arg1;
- (void)setState:(long long)arg1;
- (void)setStringValue:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleWithMnemonic:(id)arg1;
- (void)setTransparent:(BOOL)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (BOOL)showsBorderOnlyWhileMouseInside;
- (unsigned long long)showsStateBy;
- (id)sound;
- (BOOL)startTrackingAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)stopTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (id)stringValue;
- (id)title;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)touchEndedAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)updateLayerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)updateTrackingAreaWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)wantsUpdateLayerInView:(id)arg1;

@end
