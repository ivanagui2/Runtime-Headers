/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSColor : NSObject <DebugHierarchyObject, NSCopying, NSPasteboardReading, NSPasteboardWriting, NSSecureCoding>

@property (atomic, readonly) struct CGColor { }*CGColor;
@property (atomic, readonly) double alphaComponent;
@property (atomic, readonly) double blackComponent;
@property (atomic, readonly) double blueComponent;
@property (atomic, readonly) double brightnessComponent;
@property (atomic, readonly, copy) NSString *catalogNameComponent;
@property (atomic, readonly, copy) NSString *colorNameComponent;
@property (atomic, readonly) NSColorSpace *colorSpace;
@property (atomic, readonly, copy) NSString *colorSpaceName;
@property (atomic, readonly) double cyanComponent;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) double greenComponent;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) double hueComponent;
@property (atomic, readonly, copy) NSString *localizedCatalogNameComponent;
@property (atomic, readonly, copy) NSString *localizedColorNameComponent;
@property (atomic, readonly) double magentaComponent;
@property (atomic, readonly) long long numberOfComponents;
@property (atomic, readonly) NSImage *patternImage;
@property (atomic, readonly) double redComponent;
@property (atomic, readonly) double saturationComponent;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) long long type;
@property (atomic, readonly) double whiteComponent;
@property (atomic, readonly) double yellowComponent;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (id)_alternateDisabledSelectedControlTextColor;
+ (id)_blackRGBColor;
+ (id)_blueAlternatingRowColor;
+ (id)_blueControlTintColor;
+ (id)_blueKeyboardFocusColor;
+ (BOOL)_calibratedColorOK;
+ (id)_clearControlTintColor;
+ (id)_colorForMetal:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 style:(unsigned long long)arg2 topHeight:(double)arg3 bottomHeight:(double)arg4;
+ (id)_colorFromData:(id)arg1;
+ (id)_colorWithGradientImage:(id)arg1;
+ (id)_controlColor;
+ (id)_darkBlueColor;
+ (id)_darkGrayRGBColor;
+ (id)_darkLinenColor;
+ (id)_darkLinenPatternImage;
+ (id)_defaultKnobColor;
+ (id)_defaultProgressIndicatorColor;
+ (id)_defaultSecondaryColor;
+ (id)_defaultSelectedKnobColor;
+ (id)_defaultSelectionColor;
+ (id)_defaultWindowBackgroundColor;
+ (id)_embossedActiveForegroundTextColor;
+ (id)_embossedDisabledForegroundTextColor;
+ (id)_embossedOffsetTextColor;
+ (id)_engravedActiveForegroundTextColor;
+ (id)_engravedBoldActiveForegroundTextColor;
+ (id)_engravedBoldDisabledForegroundTextColor;
+ (id)_engravedDisabledForegroundTextColor;
+ (id)_engravedMenuOffsetTextColor;
+ (id)_engravedOffsetTextColor;
+ (id)_graphiteAlternatingRowColor;
+ (id)_graphiteControlTintColor;
+ (id)_graphiteKeyboardFocusColor;
+ (id)_gray136Color;
+ (id)_gray204Color;
+ (id)_gray221Color;
+ (id)_lightBlueColor;
+ (id)_lightGrayRGBColor;
+ (id)_lightTextEngravedActiveForegroundTextColor;
+ (id)_lightTextEngravedDisabledForegroundTextColor;
+ (id)_lightTextEngravedOffsetTextColor;
+ (id)_lightYellowColor;
+ (id)_linenPatternImage;
+ (id)_roundDeteminateProgressIndicatorColor;
+ (id)_sourceListBackgroundColor;
+ (id)_springLoadedBlendColor;
+ (id)_whiteRGBColor;
+ (id)alternateSecondarySelectedControlColor;
+ (id)alternateSelectedControlColor;
+ (id)alternateSelectedControlTextColor;
+ (id)alternateSelectionBlueColor;
+ (id)alternateSelectionGraphiteColor;
+ (id)blackColor;
+ (id)blackDeviceColor;
+ (id)blueColor;
+ (id)blueControlTintColor;
+ (id)brownColor;
+ (id)clearColor;
+ (id)clearControlTintColor;
+ (id)colorForControlTint:(unsigned long long)arg1;
+ (id)colorFromPasteboard:(id)arg1;
+ (id)colorNamed:(id)arg1;
+ (id)colorNamed:(id)arg1 bundle:(id)arg2;
+ (id)colorWithCGColor:(struct CGColor { }*)arg1;
+ (id)colorWithCalibratedHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;
+ (id)colorWithCalibratedRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
+ (id)colorWithCalibratedWhite:(double)arg1 alpha:(double)arg2;
+ (id)colorWithCatalogName:(id)arg1 colorName:(id)arg2;
+ (id)colorWithColorSpace:(id)arg1 components:(const double*)arg2 count:(long long)arg3;
+ (id)colorWithColorSpace:(id)arg1 hue:(double)arg2 saturation:(double)arg3 brightness:(double)arg4 alpha:(double)arg5;
+ (id)colorWithDeviceCyan:(double)arg1 magenta:(double)arg2 yellow:(double)arg3 black:(double)arg4 alpha:(double)arg5;
+ (id)colorWithDeviceHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;
+ (id)colorWithDeviceRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
+ (id)colorWithDeviceWhite:(double)arg1 alpha:(double)arg2;
+ (id)colorWithDisplayP3Red:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
+ (id)colorWithGenericGamma22White:(double)arg1 alpha:(double)arg2;
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;
+ (id)colorWithPatternImage:(id)arg1;
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
+ (id)colorWithSRGBRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;
+ (id)colorWithWhite:(double)arg1 alpha:(double)arg2;
+ (id)controlAlternatingRowBackgroundColors;
+ (id)controlAlternatingRowColor;
+ (id)controlBackgroundColor;
+ (id)controlColor;
+ (id)controlDarkShadowColor;
+ (id)controlHighlightColor;
+ (id)controlLightHighlightColor;
+ (id)controlShadowColor;
+ (id)controlTextColor;
+ (unsigned long long)currentControlTint;
+ (id)cyanColor;
+ (id)darkGrayColor;
+ (id)disabledControlTextColor;
+ (id)findHighlightColor;
+ (id)graphiteControlTintColor;
+ (id)grayColor;
+ (id)grayDeviceColor;
+ (id)greenColor;
+ (id)gridColor;
+ (id)headerColor;
+ (id)headerTextColor;
+ (id)highlightColor;
+ (id)highlightedMenuColor;
+ (id)highlightedMenuTextColor;
+ (BOOL)ignoresAlpha;
+ (id)keyboardFocusIndicatorColor;
+ (id)knobColor;
+ (id)labelColor;
+ (id)lightGrayColor;
+ (id)lightGrayDeviceColor;
+ (id)linenColor;
+ (id)linkColor;
+ (id)magentaColor;
+ (id)oldSystemColorWithCoder:(id)arg1;
+ (id)orangeColor;
+ (id)placeholderTextColor;
+ (id)progressIndicatorColor;
+ (id)purpleColor;
+ (id)quarternaryLabelColor;
+ (id)quaternaryLabelColor;
+ (id)readableTypesForPasteboard:(id)arg1;
+ (id)redColor;
+ (id)scrollBarColor;
+ (id)scrubberTexturedBackgroundColor;
+ (id)secondaryLabelColor;
+ (id)secondarySelectedControlColor;
+ (id)selectedControlColor;
+ (id)selectedControlTextColor;
+ (id)selectedHeaderTextColor;
+ (id)selectedInactiveColor;
+ (id)selectedKnobColor;
+ (id)selectedMenuItemColor;
+ (id)selectedMenuItemTextColor;
+ (id)selectedTextBackgroundColor;
+ (id)selectedTextColor;
+ (void)setIgnoresAlpha:(BOOL)arg1;
+ (id)shadowColor;
+ (id)sourceListBackgroundColor;
+ (id)springLoadedOverlayColor;
+ (BOOL)supportsSecureCoding;
+ (id)systemBlueColor;
+ (id)systemBrownColor;
+ (id)systemGrayColor;
+ (id)systemGreenColor;
+ (id)systemMintColor;
+ (id)systemOrangeColor;
+ (id)systemPinkColor;
+ (id)systemPurpleColor;
+ (id)systemRedColor;
+ (id)systemTealColor;
+ (id)systemYellowColor;
+ (id)tertiaryLabelColor;
+ (id)textBackgroundColor;
+ (id)textColor;
+ (id)toolTipColor;
+ (id)toolTipTextColor;
+ (id)toolbarBackgroundColor;
+ (id)underPageBackgroundColor;
+ (id)whiteColor;
+ (id)whiteDeviceColor;
+ (id)windowBackgroundColor;
+ (id)windowFrameColor;
+ (id)windowFrameTextColor;
+ (id)yellowColor;

- (struct CGColor { }*)CGColor;
- (id)_addColor:(id)arg1;
- (id)_resolvedColor;
- (void)_setAsSystemColor;
- (id)_subtractColor:(id)arg1;
- (double)alphaComponent;
- (double)blackComponent;
- (id)blendedColorWithFraction:(double)arg1 ofColor:(id)arg2;
- (double)blueComponent;
- (double)brightnessComponent;
- (id)catalogNameComponent;
- (id)colorNameComponent;
- (id)colorSpace;
- (id)colorSpaceName;
- (id)colorUsingColorSpace:(id)arg1;
- (id)colorUsingColorSpaceName:(id)arg1;
- (id)colorUsingColorSpaceName:(id)arg1 device:(id)arg2;
- (id)colorUsingType:(long long)arg1;
- (id)colorWithAlphaComponent:(double)arg1;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)cyanComponent;
- (void)drawSwatchInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)getComponents:(double*)arg1;
- (void)getCyan:(double*)arg1 magenta:(double*)arg2 yellow:(double*)arg3 black:(double*)arg4 alpha:(double*)arg5;
- (void)getHue:(double*)arg1 saturation:(double*)arg2 brightness:(double*)arg3 alpha:(double*)arg4;
- (void)getRed:(double*)arg1 green:(double*)arg2 blue:(double*)arg3 alpha:(double*)arg4;
- (void)getWhite:(double*)arg1 alpha:(double*)arg2;
- (double)greenComponent;
- (unsigned long long)hash;
- (id)highlightWithLevel:(double)arg1;
- (double)hueComponent;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithPasteboardPropertyList:(id)arg1 ofType:(id)arg2;
- (BOOL)isUniform;
- (id)localizedCatalogNameComponent;
- (id)localizedColorNameComponent;
- (double)magentaComponent;
- (long long)numberOfComponents;
- (id)pasteboardPropertyListForType:(id)arg1;
- (id)patternImage;
- (double)redComponent;
- (double)saturationComponent;
- (void)set;
- (void)setFill;
- (void)setStroke;
- (id)shadowWithLevel:(double)arg1;
- (long long)type;
- (double)whiteComponent;
- (id)writableTypesForPasteboard:(id)arg1;
- (void)writeToPasteboard:(id)arg1;
- (double)yellowComponent;

// NSColor (CAAnimatableValue)

- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
- (double)CA_distanceToValue:(id)arg1;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;

// NSColor (NSColorAccessibility)

- (id)_accessibilityValue;

// NSColor (NSColorPickingHSBSupport)

- (id)_colorWithValue:(double)arg1 forComponent:(long long)arg2 backupHue:(double)arg3 backupSaturation:(double)arg4;
- (id)_hsbColor;

// NSColor (NSEqualsColors)

- (BOOL)isEqualToColor:(id)arg1;

// NSColor (NSHexString)

+ (id)colorWithHex:(id)arg1;
+ (id)colorWithHex:(id)arg1 alpha:(double)arg2 colorSpace:(id)arg3;

// NSColor (NSPortCoding)

- (id)replacementObjectForPortCoder:(id)arg1;

// NSColor (NSQuartzCoreAdditions)

+ (id)colorWithCIColor:(id)arg1;

// NSColor (NSScriptingCompatibility)

+ (id)scriptingColorWithDescriptor:(id)arg1;

- (id)scriptingColorDescriptor;

// NSColor (NSTitledFrameColors)

+ (id)keyWindowFrameHighlightColor;
+ (id)keyWindowFrameShadowColor;
+ (id)mainWindowFrameColor;
+ (id)mainWindowFrameHighlightColor;
+ (id)mainWindowFrameShadowColor;
+ (id)notActiveWindowFrameColor;
+ (id)notActiveWindowFrameHighlightColor;
+ (id)notActiveWindowFrameShadowColor;
+ (id)notActiveWindowTitlebarTextColor;
+ (id)tearOffTitlebarHighlightColor;
+ (id)tearOffTitlebarShadowColor;
+ (void)updateFrameColors:(id)arg1;
+ (id)windowFrameOutlineColor;

- (id)shadeColorWithDistance:(double)arg1 towardsColor:(id)arg2;

// NSColor (NSTouchBarControlStripSeparatorColor)

+ (id)controlStripSeparatorColor;

// NSColor (NSTransparencyCheckerboardPatternColor)

+ (id)transparencyCheckboardPatternColor;

// NSColor (NSUserHighlightColors)

+ (id)_userHighlightColors:(long long*)arg1;

// NSColor (cgGraphicsOps_Private)

+ (id)controlFillColor;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSColor (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// NSColor (MKAdditions)

+ (id)_mapkit_userLocationAccuracyRingFillColor;
+ (id)_mapkit_userLocationAccuracyRingStrokeColor;
+ (id)_mapkit_userLocationAccuracyRingStrokeColorSatellite;

// NSColor (MKTransitExtras)

+ (id)_mapkit_colorForTransitLine:(id)arg1;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit

// NSColor (IKAdditions)

- (BOOL)IKGetComponentsRed:(double*)arg1 green:(double*)arg2 blue:(double*)arg3 alpha:(double*)arg4;

// NSColor (IKPictureTakerAdditions)

+ (id)IKIPMenuWindowBackgroundColor;

// NSColor (IKScan)

+ (id)colorWithIntegerDeviceRed:(long long)arg1 green:(long long)arg2 blue:(long long)arg3 alpha:(long long)arg4;
+ (id)disabledTextColor;
+ (id)enabledTextColor;

// NSColor (hexColorExtension)

+ (id)colorWithHexColorString:(id)arg1;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer

// NSColor (QCSCN_Additions)

+ (id)colorWithC3DColor4:(const struct C3DColor4 { union { float x_1_1_1[4]; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_1_1_2; } x1; }*)arg1;

- (BOOL)colorToC3DColor4:(struct C3DColor4 { union { float x_1_1_1[4]; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_1_1_2; } x1; }*)arg1;

// NSColor (QCSCN_ColorAdditions)

- (BOOL)QCSCN_ColorGetRed:(float*)arg1 green:(float*)arg2 blue:(float*)arg3 alpha:(float*)arg4;
- (BOOL)QCSCN_GetComponentsRed:(double*)arg1 green:(double*)arg2 blue:(double*)arg3 alpha:(double*)arg4;

// Image: /System/Library/Frameworks/SceneKit.framework/Versions/A/SceneKit

// NSColor (SCNAdditions)

+ (id)scn_colorWithC3DColor:(const struct C3DColor4 { union { float x_1_1_1[4]; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_1_1_2; } x1; }*)arg1;

- (struct C3DColor4 { union { float x_1_1_1[4]; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_1_1_2; } x1; })scn_C3DColorIgnoringColorSpace:(BOOL)arg1 success:(BOOL*)arg2;

// NSColor (SCNJSExtensions)

+ (id)color:(double)arg1 :(double)arg2 :(double)arg3 :(double)arg4;

- (double)a;
- (double)b;
- (double)g;
- (double)r;

@end
