/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface _NSFullScreenSpace : NSObject <NSAnimationDelegate> {
    NSPointerArray * _activeTransitions;
    NSMutableArray * _animatingOverlayWindows;
    _NSFullScreenBackdropController * _backdropController;
    double  _bottomReservedSpace;
    _NSFullScreenContentController * _contentController;
    _NSFullScreenCreateTileDropTargetController * _createTileDropTargetController;
    unsigned long long  _dividerDirections;
    _NSFullScreenTileDividerWindow * _eastDividerWindow;
    unsigned int  _exitReplacementWindowID;
    BOOL  _hasSiblings;
    BOOL  _isDoingExternalCloseAnimation;
    double  _leftReservedSpace;
    long long  _liveResizeCount;
    _NSFullScreenSpaceMenuRevealAnimation * _menuRevealAnimation;
    BOOL  _messageTracedFirstUserResize;
    _NSFullScreenModalStackController * _modalStackController;
    BOOL  _modelInvalidated;
    unsigned long long  _parentSpaceID;
    double  _resizeCrossfadeDuration;
    _NSFullScreenTileResizeCrossfadeOverlayWindow * _resizeCrossfadeOverlay;
    double  _rightReservedSpace;
    BOOL  _siblingOverlayNeedsBeginPresentation;
    _NSFullScreenTileOverlayWindow * _siblingTileOverlayWindow;
    BOOL  _suppressFetchingNewTileSize;
    double  _tileCreationTime;
    double  _tileDividerSize;
    BOOL  _tileHadLimitedClipping;
    long long  _tileOverlayShowCount;
    _NSFullScreenTileOverlayWindow * _tileOverlayWindow;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _tileRect;
    unsigned long long  _tileSpaceID;
    unsigned long long  _wallSpaceID;
    _NSFullScreenTileDividerWindow * _westDividerWindow;
}

@property (nonatomic, readonly) _NSFullScreenBackdropController *backdropController;
@property (nonatomic, readwrite) double bottomReservedSpace;
@property (nonatomic, readwrite) _NSFullScreenContentController *contentController;
@property (nonatomic, readonly) _NSFullScreenCreateTileDropTargetController *createTileDropTargetController;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned int exitReplacementWindowID;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite) double leftReservedSpace;
@property (nonatomic, readonly) _NSFullScreenModalStackController *modalStackController;
@property (nonatomic, readwrite) double rightReservedSpace;
@property (atomic, readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long tileSpaceID;

+ (id)_fullScreenMapTable;
+ (id)_placeholderFullScreenInstances;
+ (void)_registerCGSNotificationsIfNeededForSpace:(id)arg1;
+ (void)_unregisterCGSNotificationsForAllSpaces;
+ (id)fullScreenSpaceEnteringFullScreen;
+ (id)fullScreenSpaceWithTileID:(unsigned long long)arg1;
+ (id)fullScreenSpaceWithTileID:(unsigned long long)arg1 createIfNeeded:(BOOL)arg2;
+ (id)fullScreenSpaces;
+ (BOOL)hasSpaceEnteringOrExitingFullScreen;
+ (BOOL)hasTransitionForWindowID:(unsigned int)arg1;
+ (BOOL)hasVisibleFullScreenSpaces;
+ (id)placeholderFullScreenSpace;
+ (id)spaceWithContentWindowID:(unsigned int)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileRectForSpaceWithID:(unsigned long long)arg1;
+ (id)visibleFullScreenSpaceOnScreen:(id)arg1;
+ (id)visibleFullScreenSpaces;

- (void)_cacheTileRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_removeEastTileDividerWindow;
- (void)_removeTileDividerWindows;
- (void)_removeWestTileDividerWindow;
- (BOOL)_spaceConsideredVisible;
- (void)_updateTileDividerWindows;
- (void)_updateTileShapeAndReshapeContentsWithAckServer:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })availableWallSpaceSize;
- (id)backdropController;
- (id)backgroundWindowIDs;
- (void)beginSeparateExternalCloseAnimation;
- (double)bottomReservedSpace;
- (id)contentController;
- (id)createTileDropTargetController;
- (void)dealloc;
- (void)displayChanged;
- (unsigned int)exitReplacementWindowID;
- (BOOL)hasSiblingFromThisApp;
- (id)init;
- (id)initWithTileSpaceID:(unsigned long long)arg1;
- (void)invalidateModelBacking;
- (BOOL)isLeftTile;
- (BOOL)isPerformingExternalCloseAnimation;
- (double)leftReservedSpace;
- (id)modalStackController;
- (BOOL)modelBackingIsValid;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })parentSpaceCGRect;
- (unsigned long long)parentSpaceID;
- (void)parentSpaceRelocated;
- (void)replaceContentWithSnapshotForClose;
- (void)resolveTileSpaceID:(unsigned long long)arg1;
- (double)rightReservedSpace;
- (id)screen;
- (void)setBottomReservedSpace:(double)arg1;
- (void)setContentController:(id)arg1;
- (void)setLeftReservedSpace:(double)arg1;
- (void)setRightReservedSpace:(double)arg1;
- (id)siblingFullScreenSpaceFromThisApp;
- (BOOL)suppressImplicitFullScreenForOtherWindows;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileContentRect;
- (BOOL)tileFillsScreen;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileRect;
- (unsigned long long)tileSpaceID;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileToolbarContentRect;
- (void)updateTileShape;
- (void)updateTileShapeAndReshapeContents;
- (void)updateTileShapeAndReshapeContentsUsingTileFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)updateTileShapeAndReshapeContentsUsingTileFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ackServer:(BOOL)arg2;
- (void)updateTileShapeAndReshapeContentsWithoutNotifyingServer;
- (unsigned long long)wallSpaceID;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })wallSpaceRect;
- (id)windowIDsInTile;

// _NSFullScreenSpace (LiveResizePerfTest)

- (id)perfTestResizeWindow;

// _NSFullScreenSpace (MenuBarReveal)

- (void)_animateMenuBarTo:(float)arg1 startingAt:(double)arg2 duration:(double)arg3;
- (void)_cancelMenuRevealAnimationIfNeeded;
- (void)_menuBarRevealUpdated:(float)arg1;
- (float)animation:(id)arg1 valueForProgress:(float)arg2;
- (void)animationDidEnd:(id)arg1;

// _NSFullScreenSpace (Overlay)

- (void)hideOverlayWindow;
- (void)showOverlayWindowFromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 blurContent:(BOOL)arg2;
- (BOOL)showingOverlayWindowFrame;
- (id)tileOverlayWindow;
- (void)updateOverlayWithBlur:(BOOL)arg1;

// _NSFullScreenSpace (ResizeCrossfade)

- (void)_cancelResizeCrosfadeAnimation;
- (void)performResizeCrossfadeIfNeeded;
- (void)prepareResizeCrossfadeOverlayWithDuration:(double)arg1 resize:(BOOL)arg2;
- (void)suppressFetchingNewTileSize;

// _NSFullScreenSpace (SiblingOverlay)

- (void)beginSiblingOverlayPresentationIfNeeded;
- (void)cancelSiblingOverlayAnimations;
- (void)removeSiblingOverlayWindow;
- (void)setupSiblingOverlayWindowImmediately:(BOOL)arg1 blurContent:(BOOL)arg2;
- (BOOL)showingSiblingTileOverlayWindow;
- (void)updateSiblingOverlayWindow;

// _NSFullScreenSpace (Snapshots)

- (struct CGImage { }*)captureSnapshotIncludingMenuBar:(BOOL)arg1 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;

// _NSFullScreenSpace (Transitions)

+ (void)interruptTransitions;

- (void)interruptTransitions;
- (BOOL)isEnteringFullScreen;
- (BOOL)isExitingFullScreen;
- (BOOL)isInFullScreen;
- (BOOL)isTransitioning;
- (void)removeTransition:(id)arg1;
- (void)startTransition:(id)arg1;

// _NSFullScreenSpace (UserResizing)

- (id)currentDividerResizeDirections;
- (id)cursorForResizeDirection:(long long)arg1;
- (void)endLiveResize;
- (BOOL)inLiveResize;
- (BOOL)performDividerDragWithEvent:(id)arg1 forResizeDirection:(long long)arg2;
- (void)startLiveResize;

@end
