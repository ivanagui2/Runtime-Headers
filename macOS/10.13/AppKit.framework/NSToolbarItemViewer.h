/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSToolbarItemViewer : NSView <DebugHierarchyObject> {
    double  _forcibleFrameWidthForLayout;
    double  _iconWidthForLayout;
    NSToolbarItem * _item;
    double  _labelHeight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _labelRect;
    NSMutableArray * _labelViews;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxViewerSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _minIconFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _minLabelFrame;
    struct CGSize { 
        double width; 
        double height; 
    }  _minViewerSize;
    struct _NSToolbarMotion { double x1; double x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; double x5; double x6; } * _motion;
    struct { 
        unsigned int drawsIconPart : 1; 
        unsigned int drawsLabelPart : 1; 
        unsigned int iconAreaIncludesLabelArea : 1; 
        unsigned int transparentBackground : 1; 
        unsigned int labelOnlyShowsAsPopupMenu : 1; 
        unsigned int inMotion : 1; 
        unsigned int inRecursiveDisplay : 1; 
        unsigned int RESERVED1 : 1; 
        unsigned int needsViewerLayout : 1; 
        unsigned int needsModeConfiguration : 1; 
        unsigned int inPaletteView : 1; 
        unsigned int returnFocusToWindowAfterClick : 1; 
        unsigned int needsInitialAutovalidation : 1; 
        unsigned int needsRedrawForChangeInActiveState : 1; 
        unsigned int watchingBackgroundChangedNotification : 1; 
        unsigned int accessibilityAddedDescriptionToSubelements : 1; 
        unsigned int UNUSED : 16; 
    }  _tbivFlags;
    NSToolbarView * _toolbarView;
    double  _xOriginForLayout;
}

@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (nonatomic, readwrite) double forcibleFrameWidthForLayout;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite) double iconWidthForLayout;
@property (atomic, readonly) Class superclass;
@property (nonatomic, readwrite) double xOriginForLayout;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

- (BOOL)_acceptsFirstResponderInItem:(id)arg1;
- (BOOL)_allowsIndividualLabelViewSelection;
- (id)_backgroundColorForFontSmoothing;
- (long long)_backgroundStyleForLabelCell:(id)arg1;
- (void)_beginToolbarEditingMode;
- (Class)_classToCheckForWantsUpdateLayer;
- (void)_clearToolbarView;
- (void)_computeLayoutInfoForIconViewSize:(struct CGSize { double x1; double x2; })arg1 frameSize:(struct CGSize { double x1; double x2; }*)arg2 iconFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 labelFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (void)_configureLabelCellStringValue;
- (void)_drawSelectionIndicatorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_endInsertionOptimization;
- (void)_endToolbarEditingMode;
- (id)_firstLabelView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameAssumingLTR;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_getPixelAligningTransformForLayout;
- (void)_hackUpTheItemSizesAndFrameToHaveSpaceFor10_11Borders;
- (BOOL)_heightIsFlexible;
- (id)_initialLabelViewToSelectFromDirection:(long long)arg1;
- (void)_invalidateLabelViewsWhenLayerBacked:(id)arg1;
- (BOOL)_isPartitionItem;
- (BOOL)_isSizedSmallerThanMinWidth;
- (BOOL)_itemCanBeDraggedInTemporaryEditingModeFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_itemChanged;
- (void)_itemChangedLabelOrPaletteLabel;
- (void)_itemChangedToolTip;
- (void)_itemEnabledStateChanged;
- (void)_itemLayoutChanged;
- (long long)_itemVisibilityPriority;
- (id)_labelFont;
- (BOOL)_labelOnlyShowsAsPopupMenu;
- (BOOL)_labelViewIsSelectable:(id)arg1;
- (id)_labelViewToSelectInDirection:(long long)arg1;
- (void)_menuFormRepresentationChanged;
- (const struct __NSToolbarMetrics { struct __NSToolbarLayoutMetrics { double x_1_1_1; double x_1_1_2; double x_1_1_3; double x_1_1_4; double x_1_1_5; double x_1_1_6; double x_1_1_7; double x_1_1_8; } x1; struct __NSToolbarItemLayoutMetrics { double x_2_1_1; double x_2_1_2; double x_2_1_3; double x_2_1_4; double x_2_1_5; double x_2_1_6; double x_2_1_7; double x_2_1_8; double x_2_1_9; double x_2_1_10; double x_2_1_11; double x_2_1_12; double x_2_1_13; double x_2_1_14; double x_2_1_15; } x2; }*)_metrics;
- (BOOL)_needsModeConfiguration;
- (BOOL)_needsViewerLayout;
- (void)_noteToolbarSizeModeChanged;
- (void)_popUpMenuFormRepresentationInLabelView:(id)arg1;
- (BOOL)_reallyShouldDrawFocusAroundLabel;
- (void)_recomputeLabelHeight;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)arg1 visRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGSRegionObject { }*)_regionForOpaqueDescendants:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forMove:(BOOL)arg2 forUnderTitlebar:(BOOL)arg3;
- (void)_segmentedControlDidChangeHighlightDuringTracking:(id)arg1;
- (void)_selectLabelView:(id)arg1;
- (void)_setFrameAssumingLTR:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setFrameOriginAssumingLTR:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setHighlighted:(BOOL)arg1 displayNow:(BOOL)arg2;
- (void)_setHighlighted:(BOOL)arg1 pieces:(unsigned long long)arg2 forItemAtIndex:(unsigned long long)arg3 displayNow:(BOOL)arg4;
- (void)_setLabelViewCount:(unsigned long long)arg1;
- (void)_setNeedsModeConfiguration:(BOOL)arg1;
- (void)_setNeedsViewerLayout:(BOOL)arg1;
- (void)_setToolbarItem:(id)arg1;
- (BOOL)_shouldDrawFocus;
- (BOOL)_shouldDrawSelectionIndicator;
- (BOOL)_shouldMinimizeWindowForEvent:(id)arg1;
- (BOOL)_shouldPreventCustomViewFromDraggingWindow:(id)arg1;
- (void)_simulateClickInLabelView:(id)arg1 deferringPopUpsForAccessibility:(BOOL)arg2;
- (BOOL)_simultaneousSegmentAndLabelTrackingWithEvent:(id)arg1 forSegmentAtIndex:(long long)arg2 withLabelRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)_spaceRequiredToSatisfySplitViewTrackingForMinimumLeftOrigin:(struct CGPoint { double x1; double x2; })arg1 inWindow:(id)arg2;
- (void)_startInsertionOptimization;
- (void)_stopWatchingBackgroundGradientNotification;
- (BOOL)_supportsSimultaneousSegmentAndLabelTrackingWithEvent:(id)arg1 segment:(long long*)arg2;
- (void)_teardownMotionData;
- (id)_toolbarView;
- (void)_updateEnableStateOfLabelViews;
- (void)_updateLabelViewByLabelRect;
- (void)_updateLabelViewByLabelRectInWindow:(id)arg1;
- (BOOL)_useLeopardToolbarSelectionHighlight;
- (BOOL)_useSquareToolbarSelectionHighlight;
- (void)_watchBackgroundGradientNotification;
- (BOOL)_widthIsFlexible;
- (double)_widthRequiredForLabelLayout;
- (void)_windowChangedKeyState;
- (void)dealloc;
- (id)description;

// NSToolbarItemViewer (NSToolbarItemViewerAccessibility)

- (BOOL)_accessibilityIsCommonToolbarButtonItem;
- (BOOL)_accessibilityIsInCustomizationSheet;
- (BOOL)_accessibilityIsSpaceOrSeparatorItem;
- (id)_accessibilityLabelElements;
- (id)_accessibilityParentAdjustedFocusedUIElement:(id)arg1;
- (id)_accessibilityParentAdjustedHitTestElement:(id)arg1 atLocation:(id)arg2;
- (void)_accessibilityShowMenu:(id)arg1;
- (id)_accessibilityTitleElement;
- (long long)_accessibilityToolbarItemViewerConfiguration;
- (Class)_accessibilityToolbarItemViewerHelperClass;
- (BOOL)_accessibilityTreatButtonAsToolbarButton:(id)arg1;
- (BOOL)_accessibilityTreatSegmentedControlAsToolbarButtons:(id)arg1;

// NSToolbarItemViewer (NSToolbarItemViewerLabelAccessibility)

- (void)_accessibilityConfigureToolbarItem;
- (void)_accessibilityConfigureViewItemToolbarItem;
- (id)_accessibilityToolbarItemLabel;
- (id)_accessibilityToolbarItemLabelAtIndex:(unsigned long long)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSToolbarItemViewer (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;
- (id)debugHierarchyValueForPropertyWithName:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityDescriptionAttribute;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsDescriptionAttributeSettable;
- (BOOL)accessibilityIsEnabledAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (void)accessibilityPerformAction:(id)arg1;
- (void)accessibilityPopUpMenuCreated:(id)arg1 forSubview:(id)arg2 returningAccessibilityParent:(id*)arg3;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetFocusedAttribute:(id)arg1;
- (id)accessibilityTitleAttribute;
- (id)accessibilityValueAttribute;
- (BOOL)becomeFirstResponder;
- (void)becomeKeyWindow;
- (void)configureForLayoutInDisplayMode:(unsigned long long)arg1 andSizeMode:(unsigned long long)arg2 inToolbarView:(id)arg3;
- (struct CGPoint { double x1; double x2; })destination;
- (void)drawFocusRingMask;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawSelectionIndicatorInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)element:(id)arg1 hasOverriddenAttribute:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBounds;
- (double)forcibleFrameWidthForLayout;
- (double)frameWidthForIconWidth:(double)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (double)iconWidthForLayout;
- (id)initWithItem:(id)arg1 forToolbarView:(id)arg2;
- (BOOL)isInMotion;
- (BOOL)isOpaque;
- (id)item;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })itemViewRect;
- (void)labelOnlyMenuDidSendActionNotification:(id)arg1;
- (Class)labelViewClass;
- (void)layoutToFitInIconWidth:(double)arg1;
- (void)layoutToFitInMinimumIconSize;
- (void)layoutToFitInMinimumIconSizeInWindow:(id)arg1;
- (void)layoutToFitInViewerFrameHeight:(double)arg1;
- (struct CGSize { double x1; double x2; })maxSize;
- (struct CGSize { double x1; double x2; })minIconSize;
- (struct CGSize { double x1; double x2; })minViewerSize;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseUp:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (BOOL)needsPanelToBecomeKey;
- (void)performClick:(id)arg1;
- (BOOL)resignFirstResponder;
- (void)resignKeyWindow;
- (void)setDestinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 targetIconWidth:(double)arg2 travelTimeInSeconds:(double)arg3;
- (void)setForcibleFrameWidthForLayout:(double)arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setIconWidthForLayout:(double)arg1;
- (void)setLayer:(id)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)setTransparentBackground:(BOOL)arg1;
- (void)setXOriginForLayout:(double)arg1;
- (void)stepTowardsDestinationWithCurrentTime:(double)arg1;
- (void)trackMouseForPopupMenuFormRepresentation:(id)arg1;
- (void)trackMouseForPopupMenuFormRepresentation:(id)arg1 forItem:(id)arg2 forLabelView:(id)arg3;
- (BOOL)transparentBackground;
- (void)updateLayer;
- (void)viewDidMoveToWindow;
- (void)viewWillDraw;
- (void)viewWillMoveToWindow:(id)arg1;
- (double)xOriginForLayout;

@end
