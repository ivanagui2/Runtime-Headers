/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTextFieldCell : NSActionCell {
    NSColor * _backgroundColor;
    NSColor * _textColor;
    struct __tfFlags { 
        unsigned int drawsBackground : 1; 
        unsigned int bezelStyle : 3; 
        unsigned int thcSortDirection : 2; 
        unsigned int thcSortPriority : 4; 
        unsigned int mini : 1; 
        unsigned int textColorIgnoresNormalDisableFlag : 1; 
        unsigned int textColorDisableFlag : 1; 
        unsigned int thcForceHighlightForSort : 1; 
        unsigned int invalidTextColor : 1; 
        unsigned int notificationForMarkedText : 1; 
        unsigned int inToolbar : 1; 
        unsigned int hasTextLayer : 1; 
        unsigned int isButtonTitle : 1; 
        unsigned int allowTightening : 1; 
        unsigned int thcHighlighted : 1; 
        unsigned int shouldNotClipToBounds : 1; 
        unsigned int allowsDefaultTightening : 1; 
        unsigned int enableCP : 1; 
        unsigned int automaticCompletionDisabled : 1; 
        unsigned int reservedTextFieldCell : 7; 
    }  _tfFlags;
}

@property (atomic, readwrite, copy) NSArray *allowedInputSourceLocales;
@property (atomic, readwrite, copy) NSColor *backgroundColor;
@property (atomic, readwrite) unsigned long long bezelStyle;
@property (atomic, readwrite) BOOL drawsBackground;
@property (atomic, readwrite, copy) NSAttributedString *placeholderAttributedString;
@property (atomic, readwrite, copy) NSString *placeholderString;
@property (atomic, readwrite, copy) NSColor *textColor;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)initialize;

- (BOOL)_acceptsFirstResponderWhenSelectableWithFullKeyboardAccess;
- (BOOL)_allowsVibrancyForControlView:(id)arg1;
- (id)_cachedLineRef;
- (BOOL)_canCacheAttributedStringValue;
- (struct __CFDictionary { }*)_coreUIDrawOptionsWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 includeFocus:(BOOL)arg3;
- (struct __CFString { }*)_coreUIEnabledStateKeyValue;
- (double)_coreUIHeightForRoundedBezel;
- (struct __CFString { }*)_coreUISizeKeyValueForCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct __CFString { }*)_coreUIVariantKeyValue;
- (struct __CFString { }*)_coreUIWidgetName;
- (void)_drawBezeledBackgroundWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 includeFocus:(BOOL)arg3;
- (void)_drawFocusRingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawForegroundOfTextLayer;
- (id)_drawHandlerDelegate;
- (void)_drawKeyboardFocusRingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (int)_effectiveBackgroundStyleInView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusRingFrameForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (BOOL)_funkyOptOutLogicThatShouldGoAwayForView:(id)arg1 semanticContext:(int)arg2;
- (void)_getTextColor:(id*)arg1 backgroundColor:(id*)arg2;
- (BOOL)_hasOpaqueContentBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 coreUIOptions:(struct __CFDictionary { }*)arg2;
- (BOOL)_hasOpaqueContentBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 includeFocus:(BOOL)arg3;
- (unsigned long long)_interiorContentAppearanceInView:(id)arg1;
- (void)_invalidateTextColor;
- (void)_invalidateTextLayerIfNeeded;
- (BOOL)_isButtonTitleCell;
- (BOOL)_isEditingInView:(id)arg1;
- (BOOL)_maybeCheckTitleClippingForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (BOOL)_okayToHitTest;
- (BOOL)_permitDarkenedTextForDisabled;
- (BOOL)_reallyDrawsBackground;
- (id)_selectOrEdit:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 inView:(id)arg2 target:(id)arg3 editor:(id)arg4 event:(id)arg5 start:(long long)arg6 end:(long long)arg7;
- (void)_setButtonTitleCell:(BOOL)arg1;
- (void)_setCachedLineRef:(id)arg1;
- (void)_setContents:(id)arg1;
- (void)_setDrawHandlerDelegate:(id)arg1;
- (void)_setShouldNotClipToBounds:(BOOL)arg1;
- (BOOL)_shouldDrawHighlightRect;
- (BOOL)_shouldStyleUneditableTextInView:(id)arg1;
- (BOOL)_shouldUseStyledTextInView:(id)arg1;
- (id)_stringDrawingContext;
- (id)_stringDrawingContextWithBaselineOffsetsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_textAttributes;
- (BOOL)_textDimsWhenDisabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_textLayerFrameForCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (long long)_typesetterBehavior;
- (void)_updateCoreUIOptions:(id)arg1 withContentAppearanceInView:(id)arg2;
- (int)_vibrancyBlendModeForControlView:(id)arg1;
- (id)_vibrancyFilterForControlView:(id)arg1;
- (void)_windowChangedKeyStateInView:(id)arg1;
- (void)dealloc;

// NSTextFieldCell (NSTextFieldCellAccessibility)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityBoundsOfChild:(id)arg1;

// NSTextFieldCell (NSToolbarModeCategory)

- (BOOL)_isToolbarMode;
- (void)_setToolbarMode:(BOOL)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttachmentAtIndex:(unsigned long long)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityAuditContrast;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityElementForAttachment:(id)arg1;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsPlaceholderValueAttributeSettable;
- (id)accessibilityParameterizedAttributeNames;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPlaceholderValueAttribute;
- (id)accessibilityPositionOfChild:(id)arg1;
- (void)accessibilitySetFocus:(id)arg1 forChild:(id)arg2;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)allowedInputSourceLocales;
- (BOOL)allowsCharacterPickerTouchBarItem;
- (BOOL)allowsDefaultTighteningForTruncation;
- (id)backgroundColor;
- (unsigned long long)bezelStyle;
- (BOOL)cachesLineRef;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)drawsBackground;
- (void)encodeWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })expansionFrameWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)init;
- (id)initTextCell:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (long long)interiorBackgroundStyle;
- (BOOL)isAutomaticTextCompletionEnabled;
- (BOOL)isOpaque;
- (id)placeholderAttributedString;
- (id)placeholderString;
- (void)setAllowedInputSourceLocales:(id)arg1;
- (void)setAllowsCharacterPickerTouchBarItem:(BOOL)arg1;
- (void)setAllowsDefaultTighteningForTruncation:(BOOL)arg1;
- (void)setAutomaticTextCompletionEnabled:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundStyle:(long long)arg1;
- (void)setBezelStyle:(unsigned long long)arg1;
- (void)setBezeled:(BOOL)arg1;
- (void)setDrawsBackground:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setPlaceholderAttributedString:(id)arg1;
- (void)setPlaceholderString:(id)arg1;
- (void)setTextColor:(id)arg1;
- (id)setUpFieldEditorAttributes:(id)arg1;
- (void)setWantsNotificationForMarkedText:(BOOL)arg1;
- (unsigned long long)textAlignmentPolicy;
- (id)textColor;
- (BOOL)textLayerNeedsLinearMaskOverlayForFontSmoothing:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)updateLayerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (BOOL)wantsNotificationForMarkedText;
- (BOOL)wantsUpdateLayerInView:(id)arg1;

@end
