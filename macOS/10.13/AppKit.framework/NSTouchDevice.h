/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTouchDevice : NSObject <NSHapticFeedbackPerformer> {
    unsigned long long  _deviceID;
    long long  _flags;
    id  _lastEndedTouches;
    long long  _reserved1;
    double  _reserved2;
    /* Warning: unhandled array encoding: '[3@]' */ id  _reserved3;
    struct CGSize { 
        double width; 
        double height; 
    }  _surfaceSize;
}

@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long deviceID;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) struct CGSize { double x1; double x2; } surfaceSize;

+ (id)_firstTouchInView:(id)arg1 contextID:(long long)arg2;
+ (BOOL)_hasForceCapableTouchDevice;
+ (BOOL)_hasPressureEnabledTouchDevice;
+ (BOOL)_isTouchStillValid:(id)arg1;
+ (void)_pressureCapabilitiesPrefChanged:(id)arg1;
+ (void)_touchDeviceAdded:(id)arg1;
+ (id)_touchDeviceFromTrueDeviceID:(unsigned long long)arg1;
+ (void)_touchDeviceRemoved:(id)arg1;
+ (id)_touchDeviceWithIOHIDDictionary:(id)arg1;
+ (void)initialize;
+ (id)touchDeviceFromDeviceID:(unsigned long long)arg1;
+ (id)touchDevices;

- (id)_activeTouchGestureRecognizersForContextID:(long long)arg1;
- (id)_beginTouchForIdentity:(id)arg1 contextId:(long long)arg2;
- (void)_cancelActiveTouchGestureRecognizersForContextID:(long long)arg1;
- (void)_cancelAllTouchesRemoving:(BOOL)arg1;
- (void)_cancelCommandeeredTouchesForContextId:(long long)arg1;
- (void)_cancelTouchesForContextID:(long long)arg1 removing:(BOOL)arg2;
- (void)_cancelViewTouchesForContextID:(long long)arg1;
- (id)_cancelledTouches;
- (id)_cancelledTouchesForContextID:(long long)arg1;
- (void)_claimTouchesAssociatedWithGestureRecognizer:(id)arg1 forContextID:(long long)arg2;
- (void)_commandeerDirectTouches:(id)arg1 handler:(id)arg2;
- (void)_commandeerTouchIdentities:(id)arg1 forContextID:(long long)arg2;
- (void)_commandeerTouches:(id)arg1;
- (id)_commandeeredTouchIdentitiesForContextID:(long long)arg1;
- (id)_deviceInfo;
- (void)_flushContextID:(long long)arg1;
- (id)_gestureRecognizerClaimedTouchIdentitiesForContextID:(long long)arg1;
- (id)_gestureRecognizersForTouch:(id)arg1;
- (id)_initWithIOHIDDictionary:(id)arg1;
- (id)_lastEndedTouches;
- (void)_preventFlushingContextID:(long long)arg1 during:(id)arg2;
- (void)_removeActiveGestureRecognizer:(id)arg1 forContextID:(long long)arg2;
- (void)_removeClaimedTouchIdentities:(id)arg1 forContextID:(long long)arg2;
- (void)_removeCommandeeredTouchIdentities:(id)arg1 forContextID:(long long)arg2;
- (void)_setLastEndedTouches:(id)arg1;
- (id)_touchingTouches;
- (id)_touchingTouchesForContextID:(long long)arg1;
- (unsigned long long)_trueDeviceID;
- (void)addGestureRecognizers:(id)arg1 forTouch:(id)arg2;
- (void)dealloc;
- (id)description;
- (unsigned long long)deviceID;
- (long long)deviceType;
- (BOOL)hasActuation;
- (id)init;
- (void)performFeedbackPattern:(long long)arg1 performanceTime:(unsigned long long)arg2;
- (void)removeGestureRecognizersForTouch:(id)arg1;
- (void)setOverridePressureConfiguration:(id)arg1;
- (void)setTouches:(id)arg1 forContextID:(long long)arg2;
- (BOOL)supportsForce;
- (struct CGSize { double x1; double x2; })surfaceSize;

@end
