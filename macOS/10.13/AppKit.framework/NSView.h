/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSView : NSResponder <DebugHierarchyObject, MKInfoCardThemeListener, NSAccessibility, NSAccessibilityElement, NSAnimatablePropertyContainer, NSAppearanceCustomization, NSDraggingDestination, NSServiceViewControllerActionResponder, NSUserInterfaceItemIdentification, QLDisplayable> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    id  _dragTypes;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    id  _frameMatrix;
    CALayer * _layer;
    NSArray * _subviews;
    NSView * _superview;
    id  _unused_was_gState;
    struct __VFlags { 
        unsigned int aboutToResize : 1; 
        unsigned int isOpaque : 1; 
        unsigned int unused3 : 5; 
        unsigned int hasNotMessedWithIsFlipped : 1; 
        unsigned int ignoreHitTest : 1; 
        unsigned int specialArchiving : 1; 
        unsigned int needsDisplayForBounds : 1; 
        unsigned int isFlipped : 1; 
        unsigned int removingWithoutInvalidation : 1; 
        unsigned int needsBoundsChangeNote : 1; 
        unsigned int boundsChangeNotesSuspended : 1; 
        unsigned int unused2 : 1; 
        unsigned int needsFrameChangeNote : 1; 
        unsigned int frameChangeNotesSuspended : 1; 
        unsigned int canDrawSubviewsIntoLayer : 1; 
        unsigned int allowsVibrancy : 2; 
        unsigned int needsDisplay : 1; 
        unsigned int unused1 : 1; 
        unsigned int autoresizeSubviews : 1; 
        unsigned int autosizing : 6; 
        unsigned int rotatedOrScaledFromBase : 1; 
        unsigned int rotatedFromBase : 1; 
    }  _vFlags;
    struct __VFlags2 { 
        unsigned int nextKeyViewRefCount : 14; 
        unsigned int previousKeyViewRefCount : 14; 
        unsigned int isVisibleRect : 1; 
        unsigned int hasToolTip : 1; 
        unsigned int cachedIsFlipped : 1; 
        unsigned int menuWasSet : 1; 
    }  _vFlags2;
    _NSViewAuxiliary * _viewAuxiliary;
    NSWindow * _window;
}

@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _behindWindowVisualEffectLayoutRect;
@property (setter=_setClipPath:, atomic, readwrite, copy) NSBezierPath *_clipPath;
@property (atomic, readonly) struct NSEdgeInsets { double x1; double x2; double x3; double x4; } _cui_alignmentRectInsets;
@property (atomic, readonly, copy) NSArray *_cui_availableMetrics;
@property (atomic, readonly) struct CGSize { double x1; double x2; } _cui_intrinsicContentSize;
@property (atomic, readonly, copy) NSDictionary *_cui_optionsForCurrentState;
@property (nonatomic, readonly) double _currentScreenScale;
@property (nonatomic, readonly) long long _lfld_count;
@property (nonatomic, readonly) NSString *_lfld_currentLayoutMethodName;
@property (nonatomic, readonly) NSMutableArray *_lfld_geometryChangeRecords;
@property (nonatomic, readonly) NSMutableSet *_lfld_setNeedsLayoutCallStacks;
@property (nonatomic, readonly) NSMutableArray *_lfld_variableChangeRecords;
@property (atomic, readonly) BOOL _managesOpenGLDrawable;
@property (atomic, readonly) long long _presentationState;
@property (setter=_setSurface:, atomic, readwrite, retain) NSSurface *_surface;
@property (setter=_setSurfaceColorSpace:, atomic, readwrite, retain) NSColorSpace *_surfaceColorSpace;
@property (setter=_setViewController:, atomic, readwrite) NSViewController *_viewController;
@property (atomic, readonly) BOOL _wantsUnderTitlebarView;
@property (atomic, readwrite) BOOL acceptsTouchEvents;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property (atomic, readwrite, copy) NSArray *accessibilityAllowedValues;
@property (getter=isAccessibilityAlternateUIVisible, atomic, readwrite) BOOL accessibilityAlternateUIVisible;
@property (atomic, readwrite, retain) id accessibilityApplicationFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityCancelButton;
@property (atomic, readwrite, copy) NSArray *accessibilityChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityChildrenInNavigationOrder;
@property (atomic, readwrite, retain) id accessibilityClearButton;
@property (atomic, readwrite, retain) id accessibilityCloseButton;
@property (atomic, readwrite) long long accessibilityColumnCount;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityColumnIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityColumnTitles;
@property (atomic, readwrite, copy) NSArray *accessibilityColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityContents;
@property (atomic, readwrite, retain) id accessibilityCriticalValue;
@property (atomic, readwrite, copy) NSArray *accessibilityCustomActions;
@property (atomic, readwrite, copy) NSArray *accessibilityCustomRotors;
@property (atomic, readwrite, retain) id accessibilityDecrementButton;
@property (atomic, readwrite, retain) id accessibilityDefaultButton;
@property (getter=isAccessibilityDisclosed, atomic, readwrite) BOOL accessibilityDisclosed;
@property (atomic, readwrite) id accessibilityDisclosedByRow;
@property (atomic, readwrite, retain) id accessibilityDisclosedRows;
@property (atomic, readwrite) long long accessibilityDisclosureLevel;
@property (atomic, readwrite, copy) NSString *accessibilityDocument;
@property (getter=isAccessibilityEdited, atomic, readwrite) BOOL accessibilityEdited;
@property (getter=isAccessibilityElement, atomic, readwrite) BOOL accessibilityElement;
@property (getter=isAccessibilityEnabled, atomic, readwrite) BOOL accessibilityEnabled;
@property (getter=isAccessibilityExpanded, atomic, readwrite) BOOL accessibilityExpanded;
@property (atomic, readwrite) id accessibilityExtrasMenuBar;
@property (atomic, readwrite, copy) NSString *accessibilityFilename;
@property (getter=isAccessibilityFocused, atomic, readwrite) BOOL accessibilityFocused;
@property (atomic, readonly) id accessibilityFocusedUIElement;
@property (atomic, readwrite, retain) id accessibilityFocusedWindow;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property (getter=isAccessibilityFrontmost, atomic, readwrite) BOOL accessibilityFrontmost;
@property (atomic, readwrite, retain) id accessibilityFullScreenButton;
@property (atomic, readwrite, retain) id accessibilityGrowArea;
@property (atomic, readwrite, copy) NSArray *accessibilityHandles;
@property (atomic, readwrite, retain) id accessibilityHeader;
@property (atomic, readwrite, copy) NSString *accessibilityHelp;
@property (getter=isAccessibilityHidden, atomic, readwrite) BOOL accessibilityHidden;
@property (atomic, readwrite, retain) id accessibilityHorizontalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityHorizontalUnitDescription;
@property (atomic, readwrite) long long accessibilityHorizontalUnits;
@property (atomic, readwrite, copy) NSString *accessibilityIdentifier;
@property (atomic, readwrite, retain) id accessibilityIncrementButton;
@property (atomic, readwrite) long long accessibilityIndex;
@property (atomic, readwrite) long long accessibilityInsertionPointLineNumber;
@property (atomic, readwrite, copy) NSString *accessibilityLabel;
@property (atomic, readwrite, copy) NSArray *accessibilityLabelUIElements;
@property (atomic, readwrite) float accessibilityLabelValue;
@property (atomic, readwrite, copy) NSArray *accessibilityLinkedUIElements;
@property (getter=isAccessibilityMain, atomic, readwrite) BOOL accessibilityMain;
@property (atomic, readwrite, retain) id accessibilityMainWindow;
@property (atomic, readwrite, retain) id accessibilityMarkerGroupUIElement;
@property (atomic, readwrite, copy) NSString *accessibilityMarkerTypeDescription;
@property (atomic, readwrite, copy) NSArray *accessibilityMarkerUIElements;
@property (atomic, readwrite, retain) id accessibilityMarkerValues;
@property (atomic, readwrite, retain) id accessibilityMaxValue;
@property (atomic, readwrite) id accessibilityMenuBar;
@property (atomic, readwrite, retain) id accessibilityMinValue;
@property (atomic, readwrite, retain) id accessibilityMinimizeButton;
@property (getter=isAccessibilityMinimized, atomic, readwrite) BOOL accessibilityMinimized;
@property (getter=isAccessibilityModal, atomic, readwrite) BOOL accessibilityModal;
@property (atomic, readwrite, copy) NSArray *accessibilityNextContents;
@property (atomic, readwrite) long long accessibilityNumberOfCharacters;
@property (getter=isAccessibilityOrderedByRow, atomic, readwrite) BOOL accessibilityOrderedByRow;
@property (atomic, readwrite) long long accessibilityOrientation;
@property (atomic, readwrite, retain) id accessibilityOverflowButton;
@property (atomic, readwrite) id accessibilityParent;
@property (atomic, readwrite, copy) NSString *accessibilityPlaceholderValue;
@property (atomic, readwrite, copy) NSArray *accessibilityPreviousContents;
@property (getter=isAccessibilityProtectedContent, atomic, readwrite) BOOL accessibilityProtectedContent;
@property (atomic, readwrite, retain) id accessibilityProxy;
@property (getter=isAccessibilityRequired, atomic, readwrite) BOOL accessibilityRequired;
@property (atomic, readwrite, copy) NSString *accessibilityRole;
@property (atomic, readwrite, copy) NSString *accessibilityRoleDescription;
@property (atomic, readwrite) long long accessibilityRowCount;
@property (atomic, readwrite, copy) NSArray *accessibilityRowHeaderUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityRowIndexRange;
@property (atomic, readwrite, copy) NSArray *accessibilityRows;
@property (atomic, readwrite) long long accessibilityRulerMarkerType;
@property (atomic, readwrite, retain) id accessibilitySearchButton;
@property (atomic, readwrite, retain) id accessibilitySearchMenu;
@property (getter=isAccessibilitySelected, atomic, readwrite) BOOL accessibilitySelected;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedCells;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedChildren;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedColumns;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedRows;
@property (atomic, readwrite, copy) NSString *accessibilitySelectedText;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySelectedTextRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySelectedTextRanges;
@property (atomic, readwrite, copy) NSArray *accessibilityServesAsTitleForUIElements;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilitySharedCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedFocusElements;
@property (atomic, readwrite, copy) NSArray *accessibilitySharedTextUIElements;
@property (atomic, readwrite, retain) id accessibilityShownMenu;
@property (atomic, readwrite) long long accessibilitySortDirection;
@property (atomic, readwrite, copy) NSArray *accessibilitySplitters;
@property (atomic, readwrite, copy) NSString *accessibilitySubrole;
@property (atomic, readwrite, copy) NSArray *accessibilityTabs;
@property (atomic, readwrite, copy) NSString *accessibilityTitle;
@property (atomic, readwrite) id accessibilityTitleUIElement;
@property (atomic, readwrite, retain) id accessibilityToolbarButton;
@property (atomic, readwrite) id accessibilityTopLevelUIElement;
@property (atomic, readwrite, copy) NSURL *accessibilityURL;
@property (atomic, readwrite, copy) NSString *accessibilityUnitDescription;
@property (atomic, readwrite) long long accessibilityUnits;
@property (atomic, readwrite, retain) id accessibilityValue;
@property (atomic, readwrite, copy) NSString *accessibilityValueDescription;
@property (atomic, readwrite, retain) id accessibilityVerticalScrollBar;
@property (atomic, readwrite, copy) NSString *accessibilityVerticalUnitDescription;
@property (atomic, readwrite) long long accessibilityVerticalUnits;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleCells;
@property (atomic, readwrite) struct _NSRange { unsigned long long x1; unsigned long long x2; } accessibilityVisibleCharacterRange;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleChildren;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleColumns;
@property (atomic, readwrite, copy) NSArray *accessibilityVisibleRows;
@property (atomic, readwrite, retain) id accessibilityWarningValue;
@property (atomic, readwrite) id accessibilityWindow;
@property (atomic, readwrite, copy) NSArray *accessibilityWindows;
@property (atomic, readwrite, retain) id accessibilityZoomButton;
@property (atomic, readonly) NSLayoutRect *alignmentLayoutRect;
@property (atomic, readonly) BOOL allowsVibrancy;
@property (atomic, readwrite) double alphaValue;
@property (atomic, readwrite, copy) NSDictionary *animations;
@property (atomic, readwrite, retain) NSAppearance *appearance;
@property (atomic, readwrite) BOOL autoresizesSubviews;
@property (atomic, readwrite) unsigned long long autoresizingMask;
@property (atomic, readwrite, copy) NSArray *backgroundFilters;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } borderFrame;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (atomic, readwrite) double boundsRotation;
@property (atomic, readonly) BOOL canDraw;
@property (atomic, readwrite) BOOL canDrawConcurrently;
@property (atomic, readwrite) BOOL canDrawSubviewsIntoLayer;
@property (atomic, readonly) NSCandidateListTouchBarItem *candidateListTouchBarItem;
@property (atomic, readwrite, retain) CIFilter *compositingFilter;
@property (atomic, readwrite, copy) NSArray *contentFilters;
@property (atomic, readwrite) unsigned long long currentPage;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (getter=isDrawingFindIndicator, atomic, readonly) BOOL drawingFindIndicator;
@property (atomic, readonly) NSAppearance *effectiveAppearance;
@property (atomic, readonly) NSMenuItem *enclosingMenuItem;
@property (atomic, readonly) NSScrollView *enclosingScrollView;
@property (getter=isFlipped, atomic, readonly) BOOL flipped;
@property (atomic, readwrite, copy) NSColor *fontSmoothingBackgroundColor;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (atomic, readwrite) double frameCenterRotation;
@property (atomic, readwrite) double frameRotation;
@property (atomic, readonly) NSFunctionRow *functionRow;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isHidden, atomic, readwrite) BOOL hidden;
@property (getter=isHiddenOrHasHiddenAncestor, atomic, readonly) BOOL hiddenOrHasHiddenAncestor;
@property (atomic, readwrite, copy) NSString *identifier;
@property (getter=isInFullScreenMode, atomic, readonly) BOOL inFullScreenMode;
@property (atomic, readonly) BOOL inLiveResize;
@property (getter=isInTouchBar, atomic, readonly) BOOL inTouchBar;
@property (atomic, readonly) NSTextInputContext *inputContext;
@property (atomic, readwrite) int inputFocusType;
@property (atomic, readwrite, retain) CALayer *layer;
@property (atomic, readwrite) long long layerContentsPlacement;
@property (atomic, readwrite) long long layerContentsRedrawPolicy;
@property (atomic, readwrite) BOOL layerUsesCoreImageFilters;
@property (atomic, readonly, copy) NSArray *layoutGuides;
@property (atomic, readonly) BOOL mouseDownCanMoveWindow;
@property (atomic, readwrite) BOOL needsDisplay;
@property (atomic, readonly) BOOL needsPanelToBecomeKey;
@property (getter=isOpaque, atomic, readonly) BOOL opaque;
@property (atomic, readonly) NSView *opaqueAncestor;
@property (atomic, readwrite) BOOL postsBoundsChangedNotifications;
@property (atomic, readwrite) BOOL postsFrameChangedNotifications;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } preparedContentRect;
@property (atomic, readonly) BOOL preservesContentDuringLiveResize;
@property (atomic, readwrite, retain) NSPressureConfiguration *pressureConfiguration;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } quickLookFrame;
@property (atomic, readonly) CALayer *quickLookLayer;
@property (atomic, readonly) NSView *quickLookView;
@property (atomic, readonly) NSViewController *quickLookViewController;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } rectPreservedDuringLiveResize;
@property (atomic, readonly, copy) NSArray *registeredDraggedTypes;
@property (atomic, readonly) NSResponder *responder;
@property (getter=isRotatedFromBase, atomic, readonly) BOOL rotatedFromBase;
@property (getter=isRotatedOrScaledFromBase, atomic, readonly) BOOL rotatedOrScaledFromBase;
@property (atomic, readwrite, copy) NSShadow *shadow;
@property (atomic, readonly) NSDictionary *sizingConstraints;
@property (atomic, readwrite, copy) NSArray *subviews;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) NSView *superview;
@property (atomic, readonly) long long tag;
@property (atomic, readwrite, copy) NSString *toolTip;
@property (atomic, readonly) struct NSEdgeInsets { double x1; double x2; double x3; double x4; } touchBarHitTestInsets;
@property (atomic, readonly, copy) NSArray *trackingAreas;
@property (atomic, readwrite) long long userInterfaceLayoutDirection;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleRect;
@property (atomic, readonly) BOOL wantsDefaultClipping;
@property (atomic, readwrite) BOOL wantsExtendedDynamicRangeOpenGLSurface;
@property (atomic, readwrite) BOOL wantsLayer;
@property (atomic, readwrite) BOOL wantsRestingTouches;
@property (atomic, readonly) BOOL wantsUpdateLayer;
@property (atomic, readonly) NSWindow *window;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)_debug_clearLayoutFrameChangeCount;
+ (void)_debug_incrementLayoutFrameChangeCount;
+ (int)_debug_layoutFrameChangeCount;
+ (BOOL)_debug_layoutFrameChangeFlag;
+ (void)_debug_setLayoutFrameChangeFlag:(BOOL)arg1;
+ (BOOL)_debug_shouldReportUnnecessaryLayoutCalls;
+ (void)_disableLockFocusFlush;
+ (Class)_dynamicToolTipManagerClass;
+ (void)_enableLockFocusFlush;
+ (id)_findFirstKeyViewInDirection:(unsigned long long)arg1 forKeyLoopGroupingView:(id)arg2;
+ (void)_performWithoutAnimation:(id)arg1;
+ (BOOL)automaticallyNotifiesObserversOfWantsLayer;
+ (id)defaultAnimationForKey:(id)arg1;
+ (unsigned long long)defaultFocusRingType;
+ (id)defaultMenu;
+ (id)focusView;
+ (void)initialize;
+ (BOOL)isCompatibleWithResponsiveScrolling;
+ (BOOL)isLockFocusFlushEnabled;
+ (id)new;

- (void)_abortEditingIfFirstResponderIsASubview;
- (id)_accessibilityUIElementSpecifier;
- (void)_addLayerToLayerTree;
- (void)_addRevealoverIfNecessaryForCell:(id)arg1 cellRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_addSubview:(id)arg1;
- (void)_addToOrphanList;
- (long long)_addToolTipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 displayDelegate:(id)arg2 displayInfo:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_allowRoundingToChangeSize;
- (BOOL)_allowsContextMenus;
- (Class)_animatorClass;
- (BOOL)_autoDrawConcurrently;
- (void)_autoSizeView:(BOOL)arg1 :(unsigned long long)arg2 :(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 :(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 :(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5;
- (BOOL)_automaticFocusRingDisabled;
- (void)_autoscrollForDraggingInfo:(id)arg1 timeDelta:(double)arg2;
- (double)_backingScaleFactorForDrawing;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_backingTransform;
- (double)_baseScaleFactor;
- (void)_betterCacheDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toBitmapImageRep:(id)arg2;
- (id)_bindingAdaptor;
- (id)_bitmapImageRepForCachingDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 colorSpace:(id)arg2;
- (id)_bitmapImageRepForCachingDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 colorSpace:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsForAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_buildLayerTreeFromRoot;
- (BOOL)_canCopyOnScroll;
- (BOOL)_canShowExpansionTooltips;
- (void)_checkForOverriddenIsFlipped;
- (Class)_classToCheckForWantsUpdateLayer;
- (void)_clearHasBeenCommittedIfNeeded;
- (void)_clearRememberedEditingFirstResponder;
- (id)_clipViewAncestor;
- (void)_collectDescendantsNeedingLayout:(id)arg1;
- (void)_collectDescendantsNeedingUpdateConstraints:(id)arg1;
- (id)_collectedViewsWaitingForConstraintsFinished;
- (void)_commonAwake;
- (void)_computeBounds;
- (void)_concludeDefaultKeyLoopComputation;
- (id)_contextForLockFocus:(BOOL)arg1;
- (id)_contextMenuTargetForEvent:(id)arg1;
- (struct CGPoint { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromAncestor:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 toAncestor:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertPointFromIntegralizationSpace:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)_convertPointFromSuperview:(struct CGPoint { double x1; double x2; }*)arg1 test:(BOOL)arg2;
- (struct CGPoint { double x1; double x2; })_convertPointToIntegralizationSpace:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_convertPointToSuperview:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromAncestor:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toAncestor:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromIntegralizationSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromSuperview:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 test:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectToIntegralizationSpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectToSuperview:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_convertSizeFromIntegralizationSpace:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_convertSizeToIntegralizationSpace:(struct CGSize { double x1; double x2; })arg1;
- (void)_copySubviewsArray;
- (id)_crackPoint:(struct CGPoint { double x1; double x2; }*)arg1;
- (id)_crackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (id)_crackSize:(struct CGSize { double x1; double x2; }*)arg1;
- (struct CGPoint { double x1; double x2; })_currentScrollVelocity;
- (long long)_defaultLayerContentsRedrawPolicy;
- (void)_delayedEnableRevealoverComputationAfterScrollWheel:(id)arg1;
- (void)_didChangeAutoSetWantsLayer:(BOOL)arg1;
- (void)_didEndMagnifying;
- (void)_didEndScrolling;
- (void)_didMagnify;
- (void)_didRemoveLayer;
- (void)_dirtyAutomaticInclusiveLayersForRectsBeingDrawn;
- (void)_dirtyAutomaticInclusiveLayersInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_dirtyRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_dirtyRectIvar;
- (id)_dirtyRegionIvar;
- (void)_disableTrackingRectsIfHidden;
- (void)_displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3;
- (BOOL)_displayingAllDirty;
- (void)_doCrossFadeFromView:(id)arg1 toView:(id)arg2;
- (BOOL)_doIdlePrefetch;
- (void)_doLayout;
- (void)_doSlideAnimation:(unsigned long long)arg1 fromView:(id)arg2 toView:(id)arg3;
- (BOOL)_drawAsMultiClippedContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_drawDelegate;
- (void)_drawExpansionToolTipInView:(id)arg1 usingCell:(id)arg2;
- (void)_drawFocusRingDebugAroundRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawOverlayRectSet:(id)arg1;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 clip:(BOOL)arg2;
- (BOOL)_drawRectIfEmpty;
- (BOOL)_drawRectIfEmptyWhenSubviewsCoverDirtyRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawScrollViewFocusRing:(id)arg1 clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 needsFullDisplay:(BOOL)arg3;
- (BOOL)_drawView:(id)arg1;
- (BOOL)_drawnByAncestor;
- (BOOL)_drawsOwnDescendants;
- (id)_dynamicToolTipManager;
- (id)_editingFirstResponderIfIsASubview;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_effectiveLayerBoundsForTransforms;
- (int)_effectiveSemanticContext;
- (BOOL)_effectiveShouldUsePointIntegralizationForLayout;
- (void)_enableTrackingRectsIfNotHidden;
- (id)_enclosingScrollViewIfDocumentView;
- (void)_endEditingIfFirstResponderIsASubview;
- (void)_endLiveResize;
- (void)_endLiveResizeAsTopLevel;
- (void)_ensureSubviewNextKeyViewsAreSubviews;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_expandAndConstrainRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 byAmount:(struct CGSize { double x1; double x2; })arg2;
- (void)_finalize;
- (id)_findLastViewInKeyViewLoop;
- (id)_findLastViewInKeyViewLoopStartingAtView:(id)arg1;
- (void)_finishedMakingConnections;
- (BOOL)_focusFromView:(id)arg1 withContext:(id)arg2;
- (id)_focusInto:(id)arg1 withClip:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_focusRingVisibleRect;
- (id)_gatherFocusStateInto:(id)arg1 upTo:(id)arg2 withContext:(id)arg3;
- (id)_gestureRecognizers;
- (id)_getDrawMatrix;
- (id)_getNextResizeEventFromMask:(unsigned long long)arg1 invalidatingLiveResizeCacheIfNecessary:(id)arg2;
- (id)_getNextResizeEventInvalidatingLiveResizeCacheIfNecessary:(id)arg1;
- (BOOL)_hasAutoCanDrawSubviewsIntoLayer;
- (BOOL)_hasAutoSetWantsLayer;
- (BOOL)_hasCanDrawSubviewsIntoLayerAncestor;
- (BOOL)_hasCanDrawSubviewsIntoLayerOrAncestor;
- (BOOL)_hasDrawMatrix;
- (BOOL)_hasEverHadInvalidRestorableState;
- (BOOL)_hasInvalidRestorableState;
- (BOOL)_hasLegacyExternalFocusRingThatWasNormallyDrawnManually;
- (BOOL)_hasToolTip;
- (id)_highlightColorForCell:(id)arg1;
- (id)_hitTestToBlockWindowResizing:(struct CGPoint { double x1; double x2; })arg1 forResizeDirection:(long long)arg2;
- (BOOL)_ignoreForKeyViewLoop;
- (BOOL)_inLiveResize;
- (BOOL)_includeSubviewsInCacheDisplayInRect;
- (void)_informContainerThatSubviewsNeedLayout;
- (void)_informContainerThatSubviewsNeedUpdateConstraints;
- (void)_insertMissingSubviewLayers;
- (void)_installPrefetchIdleTimerIfNecessary;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_integralizationSpaceAlignedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_interactiveBounds;
- (void)_internalSetAppearance:(id)arg1;
- (void)_invalidateAllRevealovers;
- (void)_invalidateFocus;
- (id)_invalidateGStatesForTree;
- (void)_invalidatePreparedContentRect;
- (void)_invalidateTextLayersIfNeeded;
- (BOOL)_invalidateTextLayersInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_isAncestorOf:(id)arg1;
- (BOOL)_isAncestorOfViewIdenticalTo:(void*)arg1;
- (BOOL)_isDrawingMultiClippedContentAtIndex:(long long)arg1;
- (BOOL)_isFirstResponder;
- (BOOL)_isKeyLoopGroup;
- (BOOL)_isLayingOut;
- (BOOL)_isMagnifying;
- (BOOL)_isPixelAlignedInWindow;
- (BOOL)_isScrolling;
- (BOOL)_isUserInterfaceLayoutDirectionExplicitlySet;
- (id)_kitAppearance;
- (id)_layerSurface;
- (void)_layoutAtSubtreeLevelIfNeeded;
- (void)_layoutAtWindowLevelIfNeeded;
- (BOOL)_layoutDescendsToSubviewsOnAllFrameSizeChanges;
- (void)_layoutSubtreeIfNeededAndAllowTemporaryEngine:(BOOL)arg1;
- (void)_layoutSubtreeIfNeededNoEngineCreation;
- (void)_layoutSubtreeWithOldSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_legacySetNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_lightWeightRecursiveDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_lockFocusFlush;
- (void)_lockFocusOnLayer;
- (void)_logViewsThatNeedLayoutOrUpdateConstraints;
- (id)_makeAndStoreDrawMatrix;
- (void)_makeDirtyRegionIvar;
- (void)_makeRememberedOrNewEditingSubviewBecomeFirstResponder;
- (void)_markRememberedEditingFirstResponderIfIsASubview;
- (void)_maybeCheckForAmbiguityForItem:(id)arg1;
- (struct CGSize { double x1; double x2; })_minimumFrameSize;
- (id)_multiClipDrawingHelper;
- (id)_nearestAncestorOfClass:(Class)arg1;
- (BOOL)_needsLayoutEngine;
- (BOOL)_needsLayoutForAnimation;
- (BOOL)_needsLockFocusFlush;
- (id)_nextResponderForEvent:(id)arg1;
- (void)_notePreferredAppearanceDidChange;
- (void)_nsib_setUsesPointIntegralizationForLayout:(BOOL)arg1;
- (BOOL)_nsib_usesPointIntegralizationForLayout;
- (void)_oldDisplayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3;
- (void)_omitFalsePositiveKeyViewCandidates:(id)arg1;
- (void)_orderFrontSurfacesIfNotHidden;
- (void)_orderOutTheSurfaceIfHidden;
- (void)_performAnimatedAction:(id)arg1;
- (BOOL)_performKeyEquivalent:(id)arg1 conditionally:(BOOL)arg2;
- (void)_performWorkOnTilesFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 renderedContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 maximumRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 scrollVelocity:(struct CGPoint { double x1; double x2; })arg4 handler:(id)arg5;
- (void)_postBoundsChangeNotification;
- (void)_postFrameChangeNotification;
- (id)_preferredAppearance;
- (void)_prepareContentInRectIfNeeded:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_prepareForDefaultKeyLoopComputation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_primitiveBackingAlignedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2 useIntegralizationSpace:(BOOL)arg3;
- (struct CGPoint { double x1; double x2; })_primitiveConvertPointFromBacking:(struct CGPoint { double x1; double x2; })arg1 useIntegralizationSpace:(BOOL)arg2;
- (struct CGPoint { double x1; double x2; })_primitiveConvertPointToBacking:(struct CGPoint { double x1; double x2; })arg1 useIntegralizationSpace:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_primitiveConvertRectFromBacking:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 useIntegralizationSpace:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_primitiveConvertRectToBacking:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 useIntegralizationSpace:(BOOL)arg2;
- (struct CGSize { double x1; double x2; })_primitiveConvertSizeFromBacking:(struct CGSize { double x1; double x2; })arg1 useIntegralizationSpace:(BOOL)arg2;
- (struct CGSize { double x1; double x2; })_primitiveConvertSizeToBacking:(struct CGSize { double x1; double x2; })arg1 useIntegralizationSpace:(BOOL)arg2;
- (void)_primitiveSetDefaultNextKeyView:(id)arg1;
- (void)_primitiveSetNextKeyView:(id)arg1;
- (void)_primitiveSetPreviousKeyView:(id)arg1;
- (void)_propagateDirtyRectsToOpaqueAncestors;
- (void)_propagateDownNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_pullInExtraTilesForOverdraw;
- (BOOL)_reallyCanDrawConcurrently;
- (BOOL)_recacheEffectiveAppearance;
- (id)_rectsForMultiClippedContentDrawing;
- (void)_recurseSublayersLookingForViewsWithDirtyRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_recursiveBreakKeyViewLoop;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)arg1 visRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_recursiveDisplayDescendantsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3 topView:(BOOL)arg4;
- (void)_recursiveDisplaySelfAndDescendantsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_recursiveEnsureSubviewNextKeyViewsAreSubviewsOf:(id)arg1;
- (id)_recursiveFindDefaultButtonCell;
- (void)_recursiveGainedDescendantThatOverridesNeedsDisplay;
- (void)_recursiveGainedHiddenAncestor;
- (void)_recursiveGainedHiddenAncestorDuringUnarchiving;
- (void)_recursiveGatherAllKeyViewCandidatesInArray:(id)arg1;
- (void)_recursiveLostHiddenAncestor;
- (void)_recursiveMarkInclusiveLayerDirtyInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_recursiveOrderFrontSurfacesForNonHiddenViews;
- (void)_recursiveSendViewDidChangeAppearance:(id)arg1;
- (id)_recursiveSetDefaultKeyViewLoop;
- (void)_recursiveTickleNeedsDisplay;
- (void)_recursiveUpdateSemanticContextExplicitSomewhereInChain:(BOOL)arg1;
- (void)_recursiveViewDidAppearBecauseUnhidden;
- (void)_recursiveViewDidDisappearBecauseHidden;
- (void)_recursiveViewWillAppearBecauseUnhidden;
- (void)_recursiveViewWillDisappearBecauseHidden;
- (void)_recursiveWindowDidEnableToolTipCreationAndDisplay;
- (id)_regionDrawnInto;
- (struct CGSRegionObject { }*)_regionForOpaqueDescendants:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forMove:(BOOL)arg2;
- (struct CGSRegionObject { }*)_regionForOpaqueDescendants:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forMove:(BOOL)arg2 forUnderTitlebar:(BOOL)arg3;
- (id)_regionInvalidatedDuringDisplay;
- (void)_releaseBindingAdaptor;
- (void)_removeAllRevealovers;
- (void)_removeFromKeyViewLoop;
- (void)_removeIdleTimer;
- (void)_removeLayerFromSuperlayer;
- (void)_removeLayerIfOwnedByAppKit;
- (void)_removeNextPointersToMe;
- (void)_removePreviousPointersToMe;
- (void)_removeSubview:(id)arg1;
- (void)_removeTrackingRectTag:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_renderedContentRect;
- (void)_replaceSubview:(id)arg1 with:(id)arg2 rememberAndResetEditingFirstResponder:(BOOL)arg3 abortEditingIfNecessary:(BOOL)arg4;
- (void)_requestExtraUpdateConstraints;
- (void)_requestUpdateConstraintsFinishedForView:(id)arg1;
- (id)_resetCursorRects;
- (void)_resetThePreparedContentRectKeepingAsMuchOverdrawAsPossible;
- (void)_resetThePreparedContentRectToTheVisibleRect;
- (id)_revealoverInfoForCell:(id)arg1 cellRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_rootLayerBackWindowIfNeeded;
- (void)_scrollPoint:(const struct CGPoint { double x1; double x2; }*)arg1 fromView:(id)arg2;
- (BOOL)_scrollRectToVisible:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 fromView:(id)arg2;
- (void)_scrollViewDidScrollBounds;
- (int)_semanticContext;
- (BOOL)_semanticContextExplicitSomewhereInChain;
- (void)_sendSurfaceSyncNotificationAndFlushSurfacesWithRegionToDisplay:(id)arg1;
- (void)_sendViewWillDrawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 clipRootView:(id)arg2;
- (void)_setAncestorLayerNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setAutomaticFocusRingDisabled:(BOOL)arg1;
- (void)_setBindingAdaptor:(id)arg1;
- (void)_setDefaultKeyViewLoop;
- (void)_setDirtyRectIvar:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setDrawDelegate:(id)arg1;
- (void)_setDrawsOwnDescendants:(BOOL)arg1;
- (void)_setHasAutoSetWantsLayer:(BOOL)arg1 inclusive:(BOOL)arg2;
- (void)_setHasInvalidRestorableState:(BOOL)arg1;
- (void)_setHasToolTip:(BOOL)arg1;
- (void)_setHidden:(BOOL)arg1;
- (void)_setIgnoreForKeyViewLoop:(BOOL)arg1;
- (void)_setKeyboardFocusRingNeedsDisplayAroundPerimeter;
- (void)_setKeyboardFocusRingNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 force:(BOOL)arg2;
- (void)_setLayoutIsClean:(BOOL)arg1;
- (void)_setLiveResize:(BOOL)arg1;
- (void)_setRegionDrawnInto:(id)arg1;
- (void)_setRegionInvalidatedDuringDisplay:(id)arg1;
- (void)_setRevealoversDirty:(BOOL)arg1;
- (void)_setRotatedFromBase:(BOOL)arg1;
- (void)_setRotatedOrScaledFromBase:(BOOL)arg1;
- (void)_setSemanticContext:(int)arg1;
- (void)_setShouldDoLayerPerformanceUpdates:(BOOL)arg1;
- (void)_setSuperview:(id)arg1;
- (id)_setUpViewBackingSurface;
- (void)_setWantsRevealovers:(BOOL)arg1;
- (void)_setWindow:(id)arg1;
- (void)_setupCrossFadeFromView:(id)arg1 toView:(id)arg2;
- (void)_setupSlideAnimation:(unsigned long long)arg1 fromView:(id)arg2 toView:(id)arg3;
- (BOOL)_shouldAutoscrollForDraggingInfo:(id)arg1;
- (BOOL)_shouldBeTreatedAsInkEventInInactiveWindow:(id)arg1;
- (BOOL)_shouldComputeRevealovers;
- (BOOL)_shouldDetermineOpaqueRegionForMoves;
- (BOOL)_shouldDirtyTheWindowOnLayerInvalidation;
- (BOOL)_shouldDoLayerGeometryConversions;
- (BOOL)_shouldDoLayerPerformanceUpdates;
- (BOOL)_shouldDoLockFocusForLayerBacking;
- (BOOL)_shouldKeepTrackOfRectsBeingDrawn;
- (void)_showKeyboardUILoop;
- (BOOL)_showMenuForEvent:(id)arg1;
- (BOOL)_showingFocusRingAroundEnclosingScrollView:(id)arg1;
- (void)_startLiveResize;
- (void)_startLiveResizeAsTopLevel;
- (void)_startLiveResizeCacheOK:(BOOL)arg1;
- (id)_startingWindowForSendAction:(SEL)arg1;
- (id)_subviews;
- (void)_syncAndDisplaySurfaceIfNecessary:(id)arg1;
- (void)_toolTipManagerWillRecomputeToolTipsByRemoving:(BOOL)arg1 adding:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_toolTipRectForCell:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformFromView:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformToBackingUsingIntegralizationSpace:(BOOL)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformToView:(id)arg1;
- (void)_unlockFocusOnLayer;
- (void)_updateConstraintsFinished;
- (BOOL)_updateConstraintsForLayoutCheckingDirtyBits:(BOOL)arg1 creatingEngine:(BOOL)arg2;
- (void)_updateConstraintsForSubtreeIfNeededCollectingViewsWithInvalidBaselines:(id*)arg1;
- (void)_updateDrawDelegateForAlphaValue;
- (void)_updateLayerBackedness;
- (void)_updateLayerBackgroundColorFromView;
- (void)_updateLayerContentsGravityFromView;
- (void)_updateLayerCornerRadiusFromView;
- (void)_updateLayerMasksToBoundsFromView;
- (void)_updateLayoutDependentMetricsIfNeeded;
- (void)_updateOpenGLViewport;
- (void)_updateSuggestedContentRect;
- (void)_updateSuggestedContentRectForVisibleRectChange;
- (void)_updateSuggestedContentRectToValue:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_useCARenderInContext;
- (BOOL)_usingAlternateHighlightColorForCell:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_validRememberedEditingFirstResponder;
- (void)_verifyConstraintsForCurrentFrame;
- (void)_viewDidChangeAppearance:(id)arg1;
- (id)_viewWithLayerToLockFocusOn;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectIgnoringViewsAbove:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectInWindowDisregardingHiddenViews;
- (BOOL)_wantsHeartBeat;
- (BOOL)_wantsPrepareContentRect;
- (BOOL)_wantsRevealovers;
- (BOOL)_wantsToPrefetchContent;
- (void)_willBeginMagnifying;
- (void)_willBeginScrolling;
- (BOOL)_willDrawFocusRingAroundEnclosingScrollView;
- (void)_windowChangedKeyState;
- (void)dealloc;
- (void)lockFocus;
- (BOOL)lockFocusIfCanDraw;
- (BOOL)lockFocusIfCanDrawInContext:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nsis_frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nsis_frameInEngine:(id)arg1 forLayoutGuide:(id)arg2 withRounding:(BOOL)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nsis_rawAlignmentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nsis_unroundedFrame;
- (void)unlockFocus;

// NSView (ArtworkMetricsExtensions)

- (id)_cui_artworkMetrics;
- (id)_cui_availableMetrics;
- (double)_cui_floatValueMetricForKey:(id)arg1 defaultValue:(double)arg2;
- (struct CGSize { double x1; double x2; })_cui_sizeValueMetricForKey:(id)arg1 defaultValue:(struct CGSize { double x1; double x2; })arg2;

// NSView (CoreUIDefinition)

+ (id)_cui_keyPathsAffectingValuesForCurrentState;

- (void)_cui_invalidateCurrentState;
- (id)_cui_optionsForCurrentState;

// NSView (Legacy)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_desiredLayerBounds;
- (void)_drawRectAsLayerTree:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_forceUpdateLayerTreeRenderer;
- (struct _CAView { }*)_layerTreeRenderer;
- (id)_screenAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setLayerTreeRenderer:(struct _CAView { }*)arg1;

// NSView (NSAlignmentLayoutRect_ProposedAPI)

- (id)nsli_layoutRect;

// NSView (NSAppearanceHierarchy)

- (id)_appearanceBearingParent;

// NSView (NSAutomaticInclusiveLayer)

- (BOOL)_allowImplicitInclusiveLayeringForResponsiveScrolling;
- (BOOL)_canSubtreeUseInclusiveLayersAutomatically;

// NSView (NSCollectionViewReusable)

- (BOOL)_arePreferredAttributesValid;
- (id)_collectionViewLayoutAttributes;
- (unsigned long long)_collectionViewReusableViewFlags;
- (void)_invalidatePreferredAttributes;
- (BOOL)_isHiddenForReuse;
- (void)_markAsDequeued;
- (id)_preferredLayoutAttributesFittingAttributes:(id)arg1;
- (void)_setBaseCollectionViewLayoutAttributes:(id)arg1;
- (void)_setCollectionViewLayoutAttributes:(id)arg1;
- (void)_setCollectionViewReusableViewFlags:(unsigned long long)arg1;
- (void)_setHiddenForReuse:(BOOL)arg1;
- (void)_setReuseIdentifier:(id)arg1;
- (BOOL)_wasDequeued;

// NSView (NSConstraintBasedLayout)

+ (BOOL)requiresConstraintBasedLayout;

- (void)_adjustLayoutForResolutionChangeToRetina:(BOOL)arg1;
- (BOOL)_allowAutoresizingMaskFixupDueToSuperOverridingResizeSubviews;
- (BOOL)_allowsEngineHostPreferredSizeConstraints;
- (id)_autolayoutTrace;
- (id)_autoresizingConstraints;
- (struct CGSize { double x1; double x2; })_calculateEngineHostPreferredSize;
- (void)_calculateSubviewAlignmentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 superviewAlignmentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 forAutoresizingMask:(unsigned long long)arg3;
- (id)_constraintsArray;
- (id)_constraintsEquivalentToAutoresizingMask;
- (id)_constraintsReferencingItem:(id)arg1;
- (void)_constraints_snipDangliesWithForce:(BOOL)arg1;
- (void)_constraints_subviewDidChangeSuperview:(id)arg1;
- (void)_constraints_subviewWillChangeSuperview:(id)arg1;
- (void)_constraints_viewGeometryDidChange;
- (struct CGSize { double x1; double x2; })_contentCompressionResistancePriorities;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth;
- (struct CGSize { double x1; double x2; })_contentHuggingPriorities;
- (id)_contentSizeConstraints;
- (struct CGSize { double x1; double x2; })_defaultContentCompressionResistancePriorities;
- (struct CGSize { double x1; double x2; })_defaultContentHuggingPriorities;
- (id)_defaultLayoutDescription;
- (id)_descendantWithAmbiguousLayout;
- (id)_descriptionForLayoutTrace;
- (void)_didChangeHostsAutolayoutEngineTo:(BOOL)arg1;
- (void)_discardEngine:(id)arg1;
- (unsigned long long)_effectiveAutoresizingMask;
- (void)_effectiveAutoresizingMask_autoresizesSubviewsChanged;
- (double)_effectiveBackingScaleFactorForLayout;
- (BOOL)_encapsulatesSubtreeLayout;
- (void)_engageAutolayout;
- (id)_engineHostConstraints;
- (BOOL)_engineHostingPreferredSizeConstraintsNeedUpdating;
- (id)_engineHostingView;
- (id)_findControlWithStringValuePrefix:(id)arg1;
- (id)_findViewPassingTest:(id)arg1;
- (id)_generateContentSizeConstraints;
- (id)_heightVariable;
- (id)_hostedLayoutEngineOverride;
- (BOOL)_hostsAutolayoutEngine;
- (struct CGSize { double x1; double x2; })_intrinsicContentFrameSize;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)arg1;
- (void)_invalidateAutoresizingConstraints;
- (void)_invalidateEngineHostConstraints;
- (void)_invalidateEngineHostingPreferredSizeConstraints;
- (BOOL)_isResizingFromLayout;
- (id)_layoutDebuggingIdentifier;
- (id)_layoutDescriptionIfDifferentFromDefault;
- (id)_layoutEngine;
- (BOOL)_layoutEngine_didAddLayoutConstraint:(id)arg1 integralizationAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (void)_layoutEngine_willRemoveLayoutConstraint:(id)arg1;
- (void)_layoutEngine_windowDidChange;
- (id)_layoutVariablesWithAmbiguousValue;
- (id)_makeEngineHostConstraints;
- (id)_minXVariable;
- (id)_minYVariable;
- (id)_parentalLayoutEngine;
- (void)_parentalLayoutEngineDidChangeTo:(id)arg1;
- (void)_populateEngineWithConstraintsForViewSubtree:(id)arg1 forComputingFittingSizeOfView:(id)arg2;
- (BOOL)_potentiallyHasDanglyConstraints;
- (struct CGSize { double x1; double x2; })_preferredAutolayoutEngineToUserScalingCoefficients;
- (id)_primitiveContentCompressionResistancePrioritiesValue;
- (id)_primitiveContentHuggingPrioritiesValue;
- (void)_rebuildLayoutFromScratch;
- (id)_recursiveAutolayoutTraceAtLevel:(long long)arg1;
- (id)_referencingConstraints;
- (void)_removeIBGeneratedPrototypingConstraints;
- (id)_replacementConstraintForConstraint:(id)arg1 whenReplacingView:(id)arg2 withView:(id)arg3;
- (id)_rootView;
- (void)_setAllowsEngineHostPreferredSizeConstraints:(BOOL)arg1;
- (void)_setBaselineOffsetFromBottomMayBeReferenced:(BOOL)arg1;
- (void)_setContentCompressionResistancePriorities:(struct CGSize { double x1; double x2; })arg1;
- (void)_setContentHuggingPriorities:(struct CGSize { double x1; double x2; })arg1;
- (void)_setContentSizeConstraints:(id)arg1;
- (void)_setEngineHostConstraints:(id)arg1;
- (void)_setHostsAutolayoutEngine:(BOOL)arg1;
- (void)_setLayoutEngine:(id)arg1;
- (void)_setPotentiallyHasDanglyConstraints:(BOOL)arg1;
- (void)_setPrimitiveContentCompressionResistancePrioritiesValue:(id)arg1;
- (void)_setPrimitiveContentHuggingPrioritiesValue:(id)arg1;
- (void)_setWantsToHostAutolayoutEngine:(BOOL)arg1;
- (BOOL)_shouldFixupChildAutoresizingMaskOnResizeSubviewsOverride;
- (void)_snipConstraintsToAnchor:(id)arg1;
- (void)_subview:(id)arg1 valueOfVariable:(id)arg2 didChangeInEngine:(id)arg3;
- (BOOL)_tryToAddConstraint:(id)arg1 integralizationAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (BOOL)_tryToAddConstraint:(id)arg1 mutuallyExclusiveConstraints:(id*)arg2;
- (BOOL)_tryToAddConstraint:(id)arg1 roundingAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (BOOL)_tryToEncapsulateSubtreeLayout;
- (void)_updateAutoresizingConstraints;
- (void)_updateConstraintsAtWindowLevelIfNeeded;
- (void)_updateContentSizeConstraints;
- (void)_updateEngineHostConstraints;
- (void)_updateEngineHostPreferredSizeConstraintsIfNeeded;
- (void)_updateExistingEngineHostConstraints;
- (void)_updateHostedAutolayoutEngineForPossiblyNewEngineScalingCoefficients;
- (void)_updateSimpleAutoresizingConstraintsInPlace:(id)arg1 forAutoresizingMask:(unsigned long long)arg2;
- (BOOL)_usesEngineHostingConstraints;
- (void)_viewWillBePiercedByConstraint:(id)arg1;
- (BOOL)_wantsPreferredSizeConstraintsWhenEngineHosting;
- (BOOL)_wantsToHostAutolayoutEngine;
- (id)_widthVariable;
- (void)_willChangeHostsAutolayoutEngineTo:(BOOL)arg1;
- (void)_withAutomaticEngineOptimizationDisabled:(id)arg1;
- (id)nsis_descriptionOfVariable:(id)arg1;
- (BOOL)nsis_shouldIntegralizeVariable:(id)arg1;
- (void)nsis_valueOfVariable:(id)arg1 didChangeInEngine:(id)arg2;
- (BOOL)nsis_valueOfVariableIsUserObservable:(id)arg1;
- (void)nsli_addConstraint:(id)arg1;
- (void)nsli_addConstraint:(id)arg1 mutuallyExclusiveConstraints:(id*)arg2;
- (id)nsli_ancestorSharedWithItem:(id)arg1;
- (unsigned long long)nsli_autoresizingMask;
- (BOOL)nsli_canHostIndependentVariableAnchor;
- (struct CGSize { double x1; double x2; })nsli_convertSizeFromEngineSpace:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })nsli_convertSizeToEngineSpace:(struct CGSize { double x1; double x2; })arg1;
- (id)nsli_description;
- (BOOL)nsli_descriptionIncludesPointer;
- (struct CGSize { double x1; double x2; })nsli_engineToUserScalingCoefficients;
- (struct CGSize { double x1; double x2; })nsli_engineToUserScalingCoefficientsInEngine:(id)arg1;
- (id)nsli_heightVariable;
- (id)nsli_installedConstraints;
- (BOOL)nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:(id)arg1;
- (BOOL)nsli_isFlipped;
- (BOOL)nsli_isRTL;
- (id)nsli_itemDescribingLayoutDirectionForConstraint:(id)arg1 toItem:(id)arg2;
- (id)nsli_layoutAnchorForAttribute:(long long)arg1;
- (id)nsli_layoutEngine;
- (BOOL)nsli_lowerAttribute:(int)arg1 intoExpression:(id)arg2 withCoefficient:(double)arg3 container:(id)arg4;
- (BOOL)nsli_lowerAttribute:(int)arg1 intoExpression:(id)arg2 withCoefficient:(double)arg3 forConstraint:(id)arg4;
- (BOOL)nsli_lowerAttribute:(int)arg1 intoExpression:(id)arg2 withCoefficient:(double)arg3 forConstraint:(id)arg4 onBehalfOfLayoutGuide:(id)arg5;
- (BOOL)nsli_lowersExpressionRelativeToConstraintContainer;
- (id)nsli_minXVariable;
- (id)nsli_minYVariable;
- (unsigned long long)nsli_piercingToken;
- (BOOL)nsli_removeConstraint:(id)arg1;
- (BOOL)nsli_resolvedValue:(double*)arg1 forSymbolicConstant:(id)arg2 inConstraint:(id)arg3 error:(id*)arg4;
- (void)nsli_setPiercingToken:(unsigned long long)arg1;
- (id)nsli_superitem;
- (void)nsli_swapContainerForOutgoingConstraint:(id)arg1 toIncomingConstraint:(id)arg2;
- (id)nsli_widthVariable;

// NSView (NSConstraintDebugging)

- (void)_populateRecursiveConstraintIdentifiersWithMapping:(id)arg1;
- (id)_recursiveConstraintsWithDepth:(long long)arg1;
- (long long)_recursiveSubConstraintsCountIncludeEncapsulated:(BOOL)arg1;

// NSView (NSDeclarativeConstraintCreation)

+ (id)keyPathsForValuesAffectingAlignmentRectInsets;
+ (id)keyPathsForValuesInvalidatingConstraints;
+ (id)keyPathsForValuesInvalidatingDisplay;
+ (id)keyPathsForValuesInvalidatingIntrinsicContentSize;
+ (id)keyPathsForValuesInvalidatingLayout;

- (void)_addChildRuleNode:(id)arg1;
- (id)_childRuleNodes;
- (void)_complainAboutImproperDeclaredConstraintInvalidation;
- (id)_declaredConstraints;
- (void)_noteDeclaredConstraintWasManuallyRemoved:(id)arg1;
- (void)_removeChildRuleNode:(id)arg1;
- (void)_setDeclaredConstraints:(id)arg1;
- (void)_setupViewLayoutInvalidatorIfNecessary;
- (void)_updateDeclaredConstraints;
- (void)_updateDeclaredRules;

// NSView (NSDrag)

- (id)_dragTypes;
- (id)_hitTest:(struct CGPoint { double x1; double x2; }*)arg1 dragTypes:(id)arg2;
- (BOOL)_treeHasDragTypes;

// NSView (NSDragInternal)

- (void)_registerForDraggedTypes:(id)arg1 later:(BOOL)arg2;

// NSView (NSFunctionRow)

+ (id)keyPathsForValuesAffectingFunctionRow;

// NSView (NSGestureSorting)

- (long long)_depthFirstCompare:(id)arg1;

// NSView (NSInternal)

- (BOOL)_NSView_isWebClipView;
- (long long)_addTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 owner:(id)arg2 userData:(void*)arg3 assumeInside:(BOOL)arg4 useTrackingNum:(long long)arg5;
- (void)_addTrackingRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 owner:(id)arg2 userDataList:(void**)arg3 assumeInsideList:(BOOL*)arg4 trackingNums:(long long*)arg5 count:(long long)arg6;
- (void)_addTrackingTag:(long long)arg1;
- (void)_addWindowBackdropIfNeededForVibrancy:(BOOL)arg1;
- (void)_allocAuxiliary;
- (BOOL)_allowDynamicContentSizeChangesWhileScrolling;
- (id)_ancestorForStartOfDisplayRecursion;
- (BOOL)_animatingFrameSize;
- (BOOL)_appkitManagesLayer;
- (BOOL)_attemptConcurrentViewDrawingForSelfAndDescendants;
- (struct CGPoint { double x1; double x2; })_autoscrollAmountForEvent:(id)arg1;
- (struct CGPoint { double x1; double x2; })_autoscrollAmountForTouch:(id)arg1;
- (struct CGPoint { double x1; double x2; })_autoscrollAmountForWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_autoscrollScreenEdgeFactorFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_backgroundColorForFontSmoothing;
- (void)_beginAnimatingFrame;
- (BOOL)_canDisableBaseVibrancy;
- (BOOL)_canDrawWindowGrowBox;
- (void)_clearDirtyRectsForLockedTree;
- (void)_clearDirtyRectsForTree;
- (void)_clearDirtyRectsForTreeInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_compositeHiddenViewHighlight;
- (id)_containingBackdropView;
- (id)_copySubviewsInOrderOfDisplay;
- (void)_createLayerAndInitialize;
- (void)_createLayerIfNeeded;
- (id)_descendantsPassingTest:(id)arg1;
- (id)_dirtyRegion;
- (void)_disableNeedsDisplayInRectNotifications;
- (void)_disableTrackingArea:(id)arg1;
- (void)_dismissGestureRecognizers;
- (BOOL)_dontSuppressLayerAnimation;
- (void)_drawSurroundingOutline;
- (BOOL)_drawsNothing;
- (unsigned long long)_effectiveFocusRingType;
- (void)_enableNeedsDisplayInRectNotifications;
- (void)_enableOrDisableTrackingArea:(id)arg1;
- (void)_enableOrDisableTrackingAreas;
- (void)_enableTrackingArea:(id)arg1;
- (void)_endAnimatingFrame;
- (void)_endLiveAnimation;
- (BOOL)_enumerateVisibleDescendantsThatOverlapRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inFrontOfSubview:(id)arg2 recurseUp:(BOOL)arg3 usingBlock:(id)arg4;
- (long long)_frameAnimationCount;
- (void)_gainedDescendantThatCanDrawConcurrently;
- (void)_getDirtyRects:(struct CGRect {}**)arg1 clippedToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 count:(unsigned long long*)arg3 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (void)_handleBoundsChangeForSubview:(id)arg1;
- (void)_handleFrameChangeForSubview:(id)arg1;
- (BOOL)_hasCachedContainingBackdropView;
- (BOOL)_hasRectangularFocusRingAroundFrame;
- (BOOL)_impactsWindowMoving;
- (void)_installTrackingArea:(id)arg1;
- (void)_installTrackingAreas:(id)arg1;
- (void)_invalidateCursorRects;
- (void)_invalidateShouldAutoFlattenLayerTree;
- (void)_invalidateShouldAutoFlattenLayerTreeRecursively;
- (void)_invalidateViewAreasThatOverlapRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inFrontOfSubview:(id)arg2;
- (BOOL)_isInclusiveLayerBacked;
- (BOOL)_isLayerBacked;
- (BOOL)_layerDrawingNeedsLinearMaskOverlayForFontSmoothing;
- (BOOL)_mayHaveVisibleDescendantsThatOverlapRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inFrontOfSubview:(id)arg2;
- (void)_mergeRegionInvalidatedDuringDisplayIntoDirtyRegion;
- (BOOL)_needsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)_needsRedisplayOnFrameChange;
- (BOOL)_needsVibrancy;
- (BOOL)_needsViewWillDraw;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_opaqueRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_opaqueRectForWindowMoveWhenInTitlebar;
- (void)_performAnimated:(BOOL)arg1 actions:(id)arg2;
- (id)_pressureConfigurationTrackingAreaCreateIfNeeded:(BOOL)arg1;
- (BOOL)_reallyNeedsDisplayForBounds;
- (void)_recursive:(BOOL)arg1 displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(id)arg3 shouldChangeFontReferenceColor:(BOOL)arg4;
- (void)_recursive:(BOOL)arg1 displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inGraphicsContext:(id)arg3 shouldChangeFontReferenceColor:(BOOL)arg4;
- (void)_recursiveSetTrackingAreasDirty:(long long)arg1;
- (void)_recursivelyNoteBackdropViewChanged;
- (void)_recursivelyUnregisterWithBackdropView;
- (void)_recursivelyUpdateVibrancy;
- (void)_registerWithBackdropView;
- (void)_removeInWindowVibrancyFilter;
- (void)_removeTrackingRects:(long long*)arg1 count:(long long)arg2;
- (void)_renderLayerInContext:(id)arg1;
- (void)_resetSupportsDirectLayerContentsCache;
- (id)_revertGestureRecognizerPressureConfigurationForEvent:(id)arg1;
- (id)_rootmostLayerTreeHostAncestor;
- (void)_sendViewWillDraw;
- (void)_sendViewWillDrawAndRecurse:(BOOL)arg1;
- (void)_setAnimatingFrameSize:(BOOL)arg1;
- (void)_setContainingBackdropView:(id)arg1;
- (void)_setDontSuppressLayerAnimation:(BOOL)arg1;
- (void)_setHidden:(BOOL)arg1 setNeedsDisplay:(BOOL)arg2;
- (void)_setImpactsWindowMoving:(BOOL)arg1;
- (void)_setLayerNeedsDisplayInViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setSupportsDirectLayerContentsCache:(BOOL)arg1;
- (void)_setTrackingAreasDirty:(int)arg1;
- (void)_setWindowNeedsDisplayInViewsDrawableRect;
- (void)_setupFocusStateForDrawing;
- (BOOL)_setupFontSmoothingForLayerDrawingIntoContext:(struct CGContext { }*)arg1 previousColor:(struct CGColor {}**)arg2 previousFlag:(BOOL*)arg3;
- (BOOL)_shouldAutoFlattenLayerTree;
- (BOOL)_shouldAutoscrollForEvent:(id)arg1;
- (BOOL)_shouldPrintByCallingDrawRect;
- (BOOL)_shouldUseTrackingAreasForToolTips;
- (void)_startLiveAnimation;
- (id)_subviewsExcludingHiddenViews;
- (int)_supportsDirectLayerContentsCache;
- (void)_synchronizeEffectivePressureConfiguration;
- (int)_trackingAreasDirty;
- (void)_trimRegionInvalidatedDuringDisplayToRectsJustDrawn;
- (BOOL)_uncachedShouldUseTrackingAreasForToolTips;
- (void)_uninstallRemovedTrackingAreas;
- (void)_uninstallTrackingArea:(id)arg1;
- (void)_uninstallTrackingAreas;
- (void)_unregisterWithBackdropViewIfNeeded;
- (void)_updateAllLayerPropertiesFromView;
- (void)_updateDragRegionForHiddenStateChange;
- (void)_updateDrawsNothing;
- (BOOL)_updateGrowBoxForWindowFrameChange;
- (void)_updateInWindowNonVibrancyFilter;
- (void)_updateInWindowVibrancyFilter;
- (void)_updateInclusiveLayerSublayerViewPositions;
- (void)_updateLayerGeometryFromView;
- (void)_updateSurfaceWhenInAnInclusiveLayer;
- (void)_updateTrackingAreas;
- (void)_updateTrackingAreasWithInvalidCursorRects:(BOOL)arg1;
- (void)_updateTrackingLocation:(id)arg1;
- (void)_updateVibrancy;
- (void)_updateVibrancyIfNeededForHiddenStateChange;
- (BOOL)_useCoreAnimationFrameChanges;
- (BOOL)_useCoreAnimationFrameOriginChanges;
- (int)_vibrancyBlendMode;
- (long long)_vibrancyBlendingMode;
- (id)_vibrancyFilter;
- (BOOL)_viewDying;
- (BOOL)_wantsLayerBasedVibrancy;
- (BOOL)_wantsTouchesForEvent:(id)arg1;
- (void)_windowDidOrderOffScreen;
- (void)_windowDidOrderOnScreen;
- (void)_windowWillOrderOffScreen;
- (void)_windowWillOrderOnScreen;

// NSView (NSLayerKitGlue)

- (void)_drawViewBackingLayer:(id)arg1 inContext:(struct CGContext { }*)arg2 drawingHandler:(id)arg3;
- (id)_dumpLayer;
- (void)_dumpLayerToFilename:(const char *)arg1;
- (BOOL)_layerCoordinatesEqualViewCoordinates;
- (void)_layoutSublayersOfLayer:(id)arg1;
- (id)_parentSuperviewWithLayer;
- (void)_updateContentsGravityBasedOnFlippedChange;
- (void)_updateGeometryFlippedOnLayer;
- (void)_updateGeometryFlippedOnSelfAndSubviews;
- (void)_updateLayerBackgroundFiltersFromView;
- (void)_updateLayerCanDrawConcurrentlyFromView;
- (void)_updateLayerCompositingFilterFromView;
- (void)_updateLayerFiltersFromView;
- (void)_updateLayerHiddenStateFromView;
- (void)_updateLayerMaskFromView;
- (void)_updateLayerOpacityFromView;
- (void)_updateLayerShadowFromView;
- (void)_view:(id)arg1 shouldSaveDirtyRectIfNecessary:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_viewDidDrawInLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;

// NSView (NSOldNIBLoadingSupport)

- (void)_setUsesSpecialArchiving:(BOOL)arg1;

// NSView (NSOpenGLContextAssociation)

- (id)_layerBackedOpenGLContext;
- (id)_openGLContext;
- (id)_openGLContextForCurrentLayerBackingState;
- (void)_setLayerBackedOpenGLContext:(id)arg1;
- (void)_setOpenGLContext:(id)arg1;
- (void)_setSurfaceBackedOpenGLContext:(id)arg1;
- (id)_surfaceBackedOpenGLContext;

// NSView (NSOpenGLInternal)

- (BOOL)_managesOpenGLDrawable;

// NSView (NSPersistentUISupport)

- (id)_copyPersistentUIChildren;
- (id)_persistentUIIdentifier;
- (id)_persistentUIWindow;

// NSView (NSPopoverClosing)

- (BOOL)_hasActiveDragTypes;

// NSView (NSPopoverVisibleRect)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentBoundsForPopover;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectForPopover;

// NSView (NSPrinting2)

- (void)_calcHeightsWithMargin:(const struct CGSize { double x1; double x2; }*)arg1 operation:(id)arg2;
- (double)_calcMarginSize:(struct CGSize { double x1; double x2; }*)arg1 operation:(id)arg2;
- (void)_calcWidthsWithMargin:(const struct CGSize { double x1; double x2; }*)arg1 operation:(id)arg2;
- (void)_getPageHeaderRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 pageFooterRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 forBorderSize:(struct CGSize { double x1; double x2; })arg3;
- (BOOL)_knowsPagesFirst:(long long*)arg1 last:(long long*)arg2;
- (id)_pageHeaderAndFooterTextAttributes;
- (double)_provideTotalScaleFactorForPrintOperation:(id)arg1;

// NSView (NSPrintingInternal)

- (BOOL)_copyForCurrentOperation;
- (void)_previewCurrentPageForPrintOperation:(id)arg1;
- (BOOL)_printForCurrentOperation;
- (void)_renderCurrentPageForPrintOperation:(id)arg1;

// NSView (NSPrivateClipPath)

- (id)_clipPath;
- (BOOL)_needsDisplayOnClipPathChange;
- (void)_setClipPath:(id)arg1;

// NSView (NSPrivateFocusRingSupport)

- (BOOL)_clipViewShouldClipFocusRing;
- (id)_focusRingBleedRegion;
- (id)_focusRingClipAncestor;

// NSView (NSPrivateHLTBSupport)

- (BOOL)_boundToHIView;
- (BOOL)_drawingByHIView;
- (void)_setHIViewIsDrawing:(BOOL)arg1;

// NSView (NSPrivateIBSupport)

+ (id)_hiddenViewsTint;
+ (void)_setHiddenViewsTint:(id)arg1;

- (BOOL)_drawsWithTintWhenHidden;
- (void)_setDrawsWithTintWhenHidden:(BOOL)arg1;

// NSView (NSPrivateJavaSupport)

- (void)_clipViewAncestorDidScroll:(id)arg1;
- (void)_clipViewAncestorWillScroll:(id)arg1;

// NSView (NSPrivateLayerSupport)

- (unsigned int)_CAViewFlags;
- (id)_createLayer;
- (void)_recursiveFreezeLayersBeforeTransplant;
- (void)_recursiveThawLayersAfterTransplant;
- (void)_safeSubviewEnumerationWithHandler:(id)arg1;

// NSView (NSPrivateSurfaceColorSpaceSupport)

- (void)_setSurfaceColorSpace:(id)arg1;
- (id)_surfaceColorSpace;

// NSView (NSStandardWindowButtons)

- (id)_buttonOfClass:(Class)arg1 action:(SEL)arg2;

// NSView (NSSurface)

- (void)_clearPostponedSurfaceSync;
- (double)_desiredSurfaceResolution;
- (BOOL)_isSurfaceBacked;
- (void)_setEffectiveSurfaceColorSpace:(id)arg1;
- (void)_setNeedsPostponedSurfaceSync;
- (void)_setSurface:(id)arg1;
- (void)_setSurfaceBacked:(BOOL)arg1;
- (id)_surface;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_surfaceBounds;
- (BOOL)_surfaceInheritsWindowOpaqueShape;
- (void)_surfaceMoved:(id)arg1;
- (void)_surfaceResized:(id)arg1;
- (void)_syncSurfaceIfPostponed;
- (BOOL)_updateInheritedSurfaceColorSpace;
- (void)_updateSurfaceResolution;
- (void)_viewSurfaceDidComeBack:(id)arg1;
- (void)_viewSurfaceWillGoAway:(id)arg1;

// NSView (NSTabBarUtilites)

- (void)_sortSubviewsUsingComparator:(id)arg1;

// NSView (NSTableViewDragSupport)

- (id)_generateDraggingImageComponentWithKey:(id)arg1 withMainDragView:(id)arg2;

// NSView (NSTextFinderConvenience)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectExcludingTitlebarInCoordinateSystemForView:(id)arg1;

// NSView (NSThemeFrame_Private)

- (void)_addCornerDirtyRectForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 list:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 count:(long long*)arg3;

// NSView (NSUIActivityProvider)

- (void)_didRestoreUserActivity:(id)arg1;

// NSView (NSUnderTitlebarView)

- (BOOL)_wantsUnderTitlebarView;

// NSView (NSViewAccessibility)

- (id)_accessibilityBasicHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)_accessibilityEnclosingTableRow;
- (id)_accessibilityEnclosingTableView;
- (BOOL)_accessibilityIsTableViewDescendant;
- (id)_accessibilityParentForSubview:(id)arg1;
- (void)_accessibilityShowMenu:(id)arg1;
- (id)_classSetToIgnoreForAuditing;
- (BOOL)_ignoreAudit;
- (BOOL)_isLeafNodeWithPotentialAccessibilityChildren;
- (id)_singleCell;

// NSView (NSViewControllerSupport)

- (void)_setViewController:(id)arg1;
- (id)_viewController;

// NSView (NSViewDebugDescriptions)

- (id)_briefDescription;
- (id)_briefDescriptionForLogging:(BOOL)arg1;
- (id)_layerTreeDescription;
- (id)_subtreeDescription;
- (id)_subtreeDescriptionForLogging:(BOOL)arg1;
- (id)_subtreeDescriptionWithDepth:(long long)arg1 forLogging:(BOOL)arg2;

// NSView (NSViewDebugMetricsOverlay)

+ (void)_initializeMetricsOverlayDebugging;

- (void)_debug_drawMetricsOverlays;
- (void)_debug_updateLayerMetricsOverlays;
- (void)_drawMetricsOverlays;
- (void)_updateLayerMetricsOverlays;

// NSView (NSViewDebugMetricsOverlay_ForIB)

+ (void)_setShowsAlignmentRects:(BOOL)arg1;
+ (void)_setShowsAllViews:(BOOL)arg1;

// NSView (NSViewDebugShowAllDrawing)

+ (void)_initializeShowAllDrawingDebugging;
+ (BOOL)_showsAllDrawing;

- (void)_debug_showAllDrawingDrawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_showAllDrawingDrawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// NSView (NSViewDebugShowAllDrawing_ForIB)

+ (void)_setShowsAllDrawing:(BOOL)arg1;

// NSView (NSViewEnclosingMenuItem)

- (id)_enclosingMenuItem;
- (BOOL)_isContainedInMenu;

// NSView (NSViewInsetVisibleRect)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_insetVisibleRect;

// NSView (NSViewMinSizeMeasurement)

- (void)_didMeasureMinSizeForFullscreen;
- (void)_willMeasureMinSizeForFullscreen;

// NSView (NSViewPresentationState)

- (long long)_presentationState;

// NSView (NSVisualEffectView)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_behindWindowVisualEffectLayoutRect;

// NSView (NSVisualEffectViewStuff)

+ (void)beginFreezingInWindow:(id)arg1;
+ (void)endFreezingInWindow:(id)arg1;

- (id)_proxyLayer;
- (void)_setProxyLayer:(id)arg1;
- (void)_setWindowBackdrop:(id)arg1;
- (id)_windowBackdrop;

// NSView (NSWindowBorderView)

- (struct CGSRegionObject { }*)_copyDragRegion;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_draggableFrame;

// NSView (RecommendedDrawableSize)

+ (BOOL)automaticallyNotifiesObserversOf_recommendedDrawableSize;

- (struct CGSize { double x1; double x2; })_recommendedDrawableSize;

// NSView (StandardArtworkMetrics)

- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_cui_alignmentRectInsets;
- (struct CGSize { double x1; double x2; })_cui_intrinsicContentSize;

// NSView (_NSTouchBarLoggingExtentions)

- (id)_descriptionForTouchBarLogging;
- (id)_subtreeDescriptionForTouchBarLogging;
- (id)_subtreeDescriptionForTouchBarLoggingWithDepth:(long long)arg1;

// NSView (_UIViewLayoutFeedbackDebuggingSupport)

- (void)_lfld_addGeometryChangeRecordWithPropertyName:(id)arg1 value:(id)arg2;
- (void)_lfld_addSetNeedsLayoutCallStack:(id)arg1;
- (void)_lfld_addVariableChangeRecordForVariable:(id)arg1 inLayoutEngine:(id)arg2;
- (long long)_lfld_count;
- (id)_lfld_currentLayoutMethodName;
- (id)_lfld_description;
- (void)_lfld_discardLastCurrentLayoutMethodName;
- (id)_lfld_geometryChangeRecords;
- (void)_lfld_incrementCount;
- (id)_lfld_minimalDescription;
- (void)_lfld_prepareToResetCountIfNecessary;
- (void)_lfld_pushCurrentLayoutMethodName:(id)arg1;
- (void)_lfld_resetCount;
- (id)_lfld_setNeedsLayoutCallStacks;
- (id)_lfld_variableChangeRecords;

// NSView (__NSTextViewCompatibility)

- (BOOL)_isDiagonallyRotatedOrScaledFromBase;

// NSView (extension)

- (id)_visibleDescendants;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSView (DebugHierarchyAdditions)

- (id)debugHierarchyAdditionalGroupingIDs;
- (id)debugHierarchyChildGroupingID;
- (id)debugHierarchyObjectsInGroupWithID:(id)arg1 outOptions:(id*)arg2;
- (id)debugHierarchyPropertyDescriptions;
- (id)debugHierarchyValueForPropertyWithName:(id)arg1;

// NSView (DebugHierarchyHelpers)

- (id)__dbg_accessibilityChildren;
- (id)__dbg_accessibilityLabel;
- (unsigned long long)__dbg_ambiguityStatusMask;
- (id)__dbg_constraintsAffectingLayoutForOrientation:(long long)arg1;
- (double)__dbg_firstBaselineOffsetFromTop;
- (id)__dbg_formattedDisplayName;
- (id)__dbg_formattedDisplayNameForButtonCell:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })__dbg_frameAlignmentRect;
- (BOOL)__dbg_hasAccessibilityAttribute:(id)arg1;
- (BOOL)__dbg_isAccessibilityElement;
- (double)__dbg_lastBaselineOffsetFromBottom;
- (id)__dbg_snapshotImage;
- (id)__dbg_snapshotImageUsingOldWayWithViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)__dbg_viewController;
- (id)__dbg_viewSnapshotMethod;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)NS_canDrawLayer:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (BOOL)acceptsTouchEvents;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAuditContrast;
- (id)accessibilityAuditHierarchy;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityAuditLabel;
- (id)accessibilityAuditParent;
- (id)accessibilityAuditPotentialChildren;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityHelpAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)accessibilityHorizontalUnitDescriptionAttribute;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsHelpAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsParentAttributeSettable;
- (BOOL)accessibilityIsPositionAttributeSettable;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (BOOL)accessibilityIsSizeAttributeSettable;
- (BOOL)accessibilityIsTopLevelUIElementAttributeSettable;
- (BOOL)accessibilityIsWindowAttributeSettable;
- (id)accessibilityParent;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (void)accessibilityPopUpMenuClosed:(id)arg1 accessibilityParent:(id)arg2;
- (void)accessibilityPopUpMenuCreated:(id)arg1 forSubview:(id)arg2 returningAccessibilityParent:(id*)arg3;
- (void)accessibilityPopUpMenuCreated:(id)arg1 returningAccessibilityParent:(id*)arg2;
- (id)accessibilityPopUpMenuParent:(id)arg1;
- (id)accessibilityPositionAttribute;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (id)accessibilitySectionsAttribute;
- (void)accessibilitySetFocusedAttribute:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityShouldSendNotification:(id)arg1;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilitySizeAttribute;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityTopLevelUIElementAttribute;
- (id)accessibilityVerticalUnitDescriptionAttribute;
- (double)accessibilityVisibleArea;
- (id)accessibilityWindowAttribute;
- (struct CGPoint { double x1; double x2; })accessibilityWindowPointForShowMenu;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })activeDrawingRect;
- (void)addConstraint:(id)arg1;
- (void)addConstraints:(id)arg1;
- (void)addCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cursor:(id)arg2;
- (void)addGestureRecognizer:(id)arg1;
- (void)addLayoutGuide:(id)arg1;
- (void)addSubview:(id)arg1;
- (void)addSubview:(id)arg1 positioned:(long long)arg2 relativeTo:(id)arg3;
- (void)addToPageSetup;
- (long long)addToolTipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 owner:(id)arg2 userData:(void*)arg3;
- (void)addTrackingArea:(id)arg1;
- (long long)addTrackingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 owner:(id)arg2 userData:(void*)arg3 assumeInside:(BOOL)arg4;
- (void)adjustPageHeightNew:(double*)arg1 top:(double)arg2 bottom:(double)arg3 limit:(double)arg4;
- (void)adjustPageWidthNew:(double*)arg1 left:(double)arg2 right:(double)arg3 limit:(double)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustScroll:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)alignmentLayoutRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRectForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (void)allocateGState;
- (unsigned long long)allowedTouchTypes;
- (BOOL)allowsVibrancy;
- (double)alphaValue;
- (id)ancestorSharedWithView:(id)arg1;
- (id)animationForKey:(id)arg1;
- (id)animations;
- (id)animator;
- (id)appearance;
- (BOOL)autoresizesSubviews;
- (unsigned long long)autoresizingMask;
- (BOOL)autoscroll:(id)arg1;
- (id)backgroundColor;
- (id)backgroundFilters;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })backingAlignedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2;
- (double)backingScaleFactor;
- (double)baselineOffsetFromBottom;
- (void)beginDocument;
- (id)beginDraggingSessionWithItems:(id)arg1 event:(id)arg2 source:(id)arg3;
- (void)beginPage:(long long)arg1 label:(id)arg2 bBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 fonts:(id)arg4;
- (void)beginPageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 atPlacement:(struct CGPoint { double x1; double x2; })arg2;
- (void)beginPageSetupRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 placement:(struct CGPoint { double x1; double x2; })arg2;
- (void)beginPrologueBBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 creationDate:(id)arg2 createdBy:(id)arg3 fonts:(id)arg4 forWhom:(id)arg5 pages:(long long)arg6 title:(id)arg7;
- (void)beginSetup;
- (void)beginTrailer;
- (id)bitmapImageRepForCachingDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)bottomAnchor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct CGPoint { double x1; double x2; })boundsOrigin;
- (double)boundsRotation;
- (struct CGSize { double x1; double x2; })boundsSize;
- (void)buildLayerTree;
- (id)buildLayerTreeWithOwnLayerRequirement:(BOOL)arg1 someAncestorWantsLayer:(BOOL)arg2 canJoinInclusiveLayer:(BOOL)arg3 containingLayer:(id)arg4;
- (void)cacheDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toBitmapImageRep:(id)arg2;
- (void)cacheDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toBitmapImageRep:(id)arg2 includeSubviews:(BOOL)arg3;
- (BOOL)canBecomeKeyView;
- (BOOL)canDraw;
- (BOOL)canDrawConcurrently;
- (BOOL)canDrawSubviewsIntoLayer;
- (BOOL)canSmoothFontsInLayer;
- (id)candidateListTouchBarItem;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })centerScanRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)centerXAnchor;
- (id)centerYAnchor;
- (BOOL)clipsToBounds;
- (id)colorSpace;
- (long long)compareGeometry:(id)arg1;
- (id)compositingFilter;
- (unsigned long long)compositingOperation;
- (void)concludeDragOperation:(id)arg1;
- (id)constraintForIdentifier:(id)arg1;
- (id)constraints;
- (id)constraintsAffectingLayoutForOrientation:(long long)arg1;
- (id)constraintsAffectingLayoutForOrientation:(long long)arg1 ofItem:(id)arg2;
- (void)constraintsDidChangeInEngine:(id)arg1;
- (float)contentCompressionResistancePriorityForOrientation:(long long)arg1;
- (id)contentFilters;
- (float)contentHuggingPriorityForOrientation:(long long)arg1;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromView:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toView:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPointFromBacking:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointFromBase:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointFromLayer:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointFromOpenGLSurface:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToBacking:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToBase:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToLayer:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToOpenGLSurface:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromBacking:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromBase:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromLayer:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromOpenGLSurface:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToBacking:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToBase:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToLayer:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToOpenGLSurface:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSize:(struct CGSize { double x1; double x2; })arg1 fromView:(id)arg2;
- (struct CGSize { double x1; double x2; })convertSize:(struct CGSize { double x1; double x2; })arg1 toView:(id)arg2;
- (struct CGSize { double x1; double x2; })convertSizeFromBacking:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeFromBase:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeFromLayer:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeFromOpenGLSurface:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeToBacking:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeToBase:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeToLayer:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })convertSizeToOpenGLSurface:(struct CGSize { double x1; double x2; })arg1;
- (double)cornerRadius;
- (void)cursorUpdate:(id)arg1;
- (id)dataWithEPSInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)dataWithPDFInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)declaredLayoutConstraints;
- (id)declaredLayoutRules;
- (id)designatedFocusRingView;
- (void)didAddSubview:(id)arg1;
- (void)didBecomeActiveFirstResponder;
- (void)didChangeValueForKey:(id)arg1;
- (void)didCloseMenu:(id)arg1 withEvent:(id)arg2;
- (void)didResignActiveFirstResponder;
- (void)disableGeometryInWindowDidChangeNotification;
- (void)disableLayoutFlushing;
- (void)discardCursorRects;
- (void)display;
- (void)displayIfNeeded;
- (void)displayIfNeededIgnoringOpacity;
- (void)displayIfNeededInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)displayIfNeededInRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)displayIgnoringOpacity;
- (void)displayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(id)arg2;
- (BOOL)dragFile:(id)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 slideBack:(BOOL)arg3 event:(id)arg4;
- (void)dragImage:(id)arg1 at:(struct CGPoint { double x1; double x2; })arg2 offset:(struct CGSize { double x1; double x2; })arg3 event:(id)arg4 pasteboard:(id)arg5 source:(id)arg6 slideBack:(BOOL)arg7;
- (BOOL)dragPromisedFilesOfTypes:(id)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 source:(id)arg3 slideBack:(BOOL)arg4 event:(id)arg5;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)drawFocusRingMask;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (void)drawOverlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawPageBorderWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawSheetBorderWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)effectiveAppearance;
- (void)enableGeometryInWindowDidChangeNotification;
- (void)enableLayoutFlushing;
- (id)enclosingMenuItem;
- (id)enclosingScrollView;
- (void)encodeWithCoder:(id)arg1;
- (void)endDocument;
- (void)endHeaderComments;
- (void)endPage;
- (void)endPageSetup;
- (void)endPrologue;
- (void)endSetup;
- (void)endTrailer;
- (id)engine:(id)arg1 markerForConstraintToBreakAmongConstraints:(id)arg2;
- (void)engine:(id)arg1 willBreakConstraint:(id)arg2 dueToMutuallyExclusiveConstraints:(id)arg3;
- (BOOL)enterFullScreenMode:(id)arg1 withOptions:(id)arg2;
- (void)exerciseAmbiguityInLayout;
- (void)exitFullScreenModeWithOptions:(id)arg1;
- (id)firstBaselineAnchor;
- (double)firstBaselineOffsetFromTop;
- (struct CGSize { double x1; double x2; })fittingSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBounds;
- (unsigned long long)focusRingType;
- (id)fontSmoothingBackgroundColor;
- (id)fontSmoothingBackgroundColorForTextLayer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (double)frameCenterRotation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })frameOrigin;
- (double)frameRotation;
- (struct CGSize { double x1; double x2; })frameSize;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })frameTransform;
- (id)functionRow;
- (long long)gState;
- (void)geometryInWindowDidChange;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureRecognizers;
- (BOOL)gesturesEnabled;
- (void)getRectsBeingDrawn:(const struct CGRect {}**)arg1 count:(long long*)arg2;
- (void)getRectsExposedDuringLiveResize:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 count:(long long*)arg2;
- (BOOL)hasAmbiguousLayout;
- (void)heartBeat:(struct { double x1; double x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 31; } x4; }*)arg1;
- (double)heightAdjustLimit;
- (id)heightAnchor;
- (void)helpRequested:(id)arg1;
- (void)hideActiveFirstResponderIndication;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)identifier;
- (BOOL)ignoreHitTest;
- (id)imageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)inLiveResize;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)inputContext;
- (void)interpretKeyEvents:(id)arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)invalidate:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)invalidateConstraints;
- (void)invalidateIntrinsicContentSize;
- (void)invalidateIntrinsicContentSizeForCell:(id)arg1;
- (BOOL)isDescendantOf:(id)arg1;
- (BOOL)isDrawingFindIndicator;
- (BOOL)isFlipped;
- (BOOL)isHidden;
- (BOOL)isHiddenOrHasHiddenAncestor;
- (BOOL)isInFullScreenMode;
- (BOOL)isInTouchBar;
- (BOOL)isOpaque;
- (BOOL)isRotatedFromBase;
- (BOOL)isRotatedOrScaledFromBase;
- (BOOL)knowsPageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1;
- (BOOL)knowsPagesFirst:(long long*)arg1 last:(long long*)arg2;
- (id)lastBaselineAnchor;
- (double)lastBaselineOffsetFromBottom;
- (id)layer;
- (long long)layerContentsPlacement;
- (long long)layerContentsRedrawPolicy;
- (BOOL)layerUsesCoreImageFilters;
- (void)layout;
- (id)layoutGuides;
- (id)layoutRect;
- (void)layoutSubtreeIfNeeded;
- (id)leadingAnchor;
- (id)leftAnchor;
- (struct CGPoint { double x1; double x2; })locationOfPrintRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)lockFocusIfCanDrawInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 flipped:(BOOL)arg2 clip:(BOOL)arg3;
- (id)loggingDescription;
- (id)makeBackingLayer;
- (id)menu;
- (id)menuForEvent:(id)arg1;
- (BOOL)mouse:(struct CGPoint { double x1; double x2; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (BOOL)mouseDownCanMoveWindow;
- (BOOL)needsDisplay;
- (BOOL)needsLayout;
- (BOOL)needsPanelToBecomeKey;
- (BOOL)needsToDrawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)needsUpdateConstraints;
- (id)nextKeyView;
- (id)nextValidKeyView;
- (void)noteFocusRingMaskChanged;
- (id)ns_containerWidgetType;
- (id)ns_widgetType;
- (id)opaqueAncestor;
- (struct CGSize { double x1; double x2; })openGLSurfaceSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overlayBounds;
- (id)pageFooter;
- (id)pageHeader;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (BOOL)performMnemonic:(id)arg1;
- (BOOL)postsBoundsChangedNotifications;
- (BOOL)postsFrameChangedNotifications;
- (id)preferredLayoutAttributesFittingAttributes:(id)arg1;
- (void)prepareContentInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)prepareForMenu:(id)arg1 withEvent:(id)arg2;
- (void)prepareForReuse;
- (void)prepareMenu:(id)arg1 withEvent:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })preparedContentRect;
- (BOOL)preservesContentDuringLiveResize;
- (id)pressureConfiguration;
- (id)previousKeyView;
- (id)previousValidKeyView;
- (void)print:(id)arg1;
- (id)printJobTitle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForPage:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForSmartMagnificationAtPoint:(struct CGPoint { double x1; double x2; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectPreservedDuringLiveResize;
- (id)recursiveConstraintDescription;
- (id)recursiveConstraintIdentifierDescription;
- (void)registerForDraggedTypes:(id)arg1;
- (id)registeredDraggedTypes;
- (oneway void)releaseGState;
- (void)removeAllGestureRecognizers;
- (void)removeAllToolTips;
- (void)removeConstraint:(id)arg1;
- (void)removeConstraintWithIdentifier:(id)arg1;
- (void)removeConstraints:(id)arg1;
- (void)removeCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cursor:(id)arg2;
- (void)removeFromSuperview;
- (void)removeFromSuperviewWithoutNeedingDisplay;
- (void)removeGestureRecognizer:(id)arg1;
- (void)removeLayoutGuide:(id)arg1;
- (void)removeToolTip:(long long)arg1;
- (void)removeTrackingArea:(id)arg1;
- (void)removeTrackingRect:(long long)arg1;
- (void)renewGState;
- (void)replaceSubview:(id)arg1 with:(id)arg2;
- (void)replaceSubview:(id)arg1 with:(id)arg2 options:(unsigned long long)arg3 completionHandler:(id)arg4;
- (void)resetCursorRects;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x1; double x2; })arg1;
- (void)resizeWithOldSuperviewSize:(struct CGSize { double x1; double x2; })arg1;
- (id)reuseIdentifier;
- (id)rightAnchor;
- (void)rightMouseDown:(id)arg1;
- (void)rotateByAngle:(double)arg1;
- (void)scaleUnitSquareToSize:(struct CGSize { double x1; double x2; })arg1;
- (void)scrollPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)scrollPoint:(const struct CGPoint { double x1; double x2; }*)arg1 fromView:(id)arg2;
- (void)scrollRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 by:(struct CGSize { double x1; double x2; })arg2;
- (BOOL)scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)scrollRectToVisible:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 fromView:(id)arg2;
- (void)scrollWheel:(id)arg1;
- (void)setAcceptsTouchEvents:(BOOL)arg1;
- (void)setAllowedTouchTypes:(unsigned long long)arg1;
- (void)setAllowsVibrancy:(BOOL)arg1;
- (void)setAlphaValue:(double)arg1;
- (void)setAnimations:(id)arg1;
- (void)setAppearance:(id)arg1;
- (void)setAutoresizesSubviews:(BOOL)arg1;
- (void)setAutoresizingMask:(unsigned long long)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundFilters:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBoundsOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBoundsRotation:(double)arg1;
- (void)setBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCanDrawConcurrently:(BOOL)arg1;
- (void)setCanDrawSubviewsIntoLayer:(BOOL)arg1;
- (void)setClipsToBounds:(BOOL)arg1;
- (void)setCompositingFilter:(id)arg1;
- (void)setCompositingOperation:(unsigned long long)arg1;
- (void)setContentCompressionResistancePriority:(float)arg1 forOrientation:(long long)arg2;
- (void)setContentFilters:(id)arg1;
- (void)setContentHuggingPriority:(float)arg1 forOrientation:(long long)arg2;
- (void)setCornerRadius:(double)arg1;
- (void)setFlipped:(BOOL)arg1;
- (void)setFocusRingType:(unsigned long long)arg1;
- (void)setFontSmoothingBackgroundColor:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrameCenterRotation:(double)arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameRotation:(double)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setFrameTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setGestureRecognizers:(id)arg1;
- (void)setGesturesEnabled:(BOOL)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIgnoreHitTest:(BOOL)arg1;
- (void)setKeyboardFocusRingNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLayer:(id)arg1;
- (void)setLayerContentsPlacement:(long long)arg1;
- (void)setLayerContentsRedrawPolicy:(long long)arg1;
- (void)setLayerUsesCoreImageFilters:(BOOL)arg1;
- (void)setMenu:(id)arg1;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNeedsLayout:(BOOL)arg1;
- (void)setNeedsUpdateConstraints:(BOOL)arg1;
- (void)setNextKeyView:(id)arg1;
- (void)setNextResponder:(id)arg1;
- (void)setOpaque:(BOOL)arg1;
- (void)setPostsBoundsChangedNotifications:(BOOL)arg1;
- (void)setPostsFrameChangedNotifications:(BOOL)arg1;
- (void)setPreparedContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPressureConfiguration:(id)arg1;
- (void)setShadow:(id)arg1;
- (void)setShouldBeArchived:(BOOL)arg1;
- (void)setSubviews:(id)arg1;
- (void)setToolTip:(id)arg1;
- (void)setTranslatesAutoresizingMaskIntoConstraints:(BOOL)arg1;
- (void)setUpGState;
- (void)setUpdateLayerHandler:(id)arg1;
- (void)setUserInterfaceItemIdentifier:(id)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (void)setUsesConstraintsInsteadOfAutoresizing:(BOOL)arg1;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)setWantsBestResolutionOpenGLSurface:(BOOL)arg1;
- (void)setWantsExtendedDynamicRangeOpenGLSurface:(BOOL)arg1;
- (void)setWantsLayer:(BOOL)arg1;
- (void)setWantsRestingTouches:(BOOL)arg1;
- (id)shadow;
- (BOOL)shouldBeArchived;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)arg1;
- (BOOL)shouldDrawColor;
- (BOOL)shouldSetFontSmoothingBackgroundColor;
- (void)showActiveFirstResponderIndication;
- (void)showDefinitionForAttributedString:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)showDefinitionForAttributedString:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 options:(id)arg3 baselineOriginProvider:(id)arg4;
- (void)solutionDidChangeInEngine:(id)arg1;
- (void)sortSubviewsUsingFunction:(int (*)arg1 context:(void*)arg2;
- (id)subviews;
- (id)superview;
- (long long)tag;
- (BOOL)textLayerCanUseLinearMaskOverlay:(id)arg1;
- (BOOL)textLayerShouldDoSubpixelAntialiasing:(id)arg1;
- (id)toolTip;
- (id)topAnchor;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })touchBarHitTestInsets;
- (id)trackingAreas;
- (id)trailingAnchor;
- (void)translateOriginToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)translateRectsNeedingDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 by:(struct CGSize { double x1; double x2; })arg2;
- (BOOL)translatesAutoresizingMaskIntoConstraints;
- (void)unregisterDraggedTypes;
- (void)updateConstraints;
- (void)updateConstraintsForSubtreeIfNeeded;
- (void)updateLayer;
- (id)updateLayerHandler;
- (void)updateTrackingAreas;
- (id)userInterfaceItemIdentifier;
- (long long)userInterfaceLayoutDirection;
- (BOOL)usesConstraintsInsteadOfAutoresizing;
- (void)view:(id)arg1 customToolTip:(long long)arg2 drawInView:(id)arg3 displayInfo:(id)arg4;
- (BOOL)view:(id)arg1 customToolTip:(long long)arg2 fadeOutAllowedForToolTipWithDisplayInfo:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })view:(id)arg1 customToolTip:(long long)arg2 frameForToolTipWithDisplayInfo:(id)arg3;
- (void)viewDidChangeBackingProperties;
- (void)viewDidChangeBackingProperties:(id)arg1;
- (void)viewDidEndLiveResize;
- (void)viewDidHide;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)viewDidUnhide;
- (void)viewWillDraw;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewWillStartLiveResize;
- (id)viewWithTag:(long long)arg1;
- (id)visibleAccessibleOrLeafSubviews;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (BOOL)wantsBestResolutionOpenGLSurface;
- (BOOL)wantsDefaultClipping;
- (BOOL)wantsExtendedDynamicRangeOpenGLSurface;
- (BOOL)wantsLayer;
- (BOOL)wantsRestingTouches;
- (BOOL)wantsUpdateLayer;
- (double)widthAdjustLimit;
- (id)widthAnchor;
- (void)willOpenMenu:(id)arg1 withEvent:(id)arg2;
- (void)willRemoveSubview:(id)arg1;
- (void)willSendMenuNeedsUpdate:(id)arg1 withEvent:(id)arg2;
- (id)window;
- (BOOL)worksWhenModal;
- (void)writeEPSInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toPasteboard:(id)arg2;
- (void)writePDFInsideRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toPasteboard:(id)arg2;

// Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit

// NSView (AVTrimViewAdditions)

- (id)enclosingTrimView;

// Image: /System/Library/Frameworks/AddressBook.framework/Versions/A/AddressBook

// NSView (ABViewAdditions)

- (id)_ab_ancestralViewOfClass:(Class)arg1;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// NSView (MKAdditions)

- (double)_currentScreenScale;
- (id)_mapKit_mapView;
- (struct CGPoint { double x1; double x2; })_mapkit_center;
- (void)_mapkit_insertSubview:(id)arg1 atIndex:(long long)arg2;

// NSView (MKCrossPlatformOperations)

+ (void)_mapkit_animateFromCurrentStateWithDuration:(double)arg1 animations:(id)arg2 completion:(id)arg3;
+ (void)_mapkit_animateWithDuration:(double)arg1 animations:(id)arg2 completion:(id)arg3;
+ (void)_maps_setDoesNotTranslateAutoresizingConstraintsForViewsDictionary:(id)arg1;

- (void)_mapKit_setNeedsDisplay;
- (BOOL)_mapkit_YCoordinate:(double)arg1 liesInDirection:(long long)arg2 startingFromYCoordinate:(double)arg3;
- (double)_mapkit_YCoordinateAtDistance:(double)arg1 inDirection:(long long)arg2 fromEdge:(long long)arg3;
- (double)_mapkit_YCoordinateAtDistance:(double)arg1 inDirection:(long long)arg2 fromYCoordinate:(double)arg3;
- (id)_mapkit_constraintsPinningSubviewToBounds:(id)arg1;
- (float)_mapkit_contentCompressionResistancePriorityForAxis:(long long)arg1;
- (float)_mapkit_contentHuggingPriorityForAxis:(long long)arg1;
- (struct CGSize { double x1; double x2; })_mapkit_fittingSize;
- (void)_mapkit_insertSubviewAboveAllOtherSubviews:(id)arg1;
- (void)_mapkit_insertSubviewBelowAllOtherSubviews:(id)arg1;
- (BOOL)_mapkit_isDescendantOfView:(id)arg1;
- (void)_mapkit_layoutIfNeeded;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })_mapkit_layoutMargins;
- (void)_mapkit_layoutMarginsDidChange;
- (id)_mapkit_layoutMarginsGuide;
- (BOOL)_mapkit_preservesSuperviewLayoutMargins;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_mapkit_rectWithSize:(struct CGSize { double x1; double x2; })arg1 XCoordinate:(double)arg2 atDistance:(double)arg3 inDirection:(long long)arg4 fromEdge:(long long)arg5;
- (void)_mapkit_setBackgroundColor:(id)arg1;
- (void)_mapkit_setContentCompressionResistancePriority:(float)arg1 forAxis:(long long)arg2;
- (void)_mapkit_setContentHuggingPriority:(float)arg1 forAxis:(long long)arg2;
- (void)_mapkit_setNeedsLayout;
- (void)_mapkit_setNeedsUpdateConstraints;
- (struct CGSize { double x1; double x2; })_mapkit_sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)_mapkit_sizeToFit;
- (void)_mapkit_tintColorDidChange;
- (void)set_mapkit_layoutMargins:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)set_mapkit_preservesSuperviewLayoutMargins:(BOOL)arg1;

// NSView (MKInfoCardThemeListener)

- (void)_mapkit_tintColorDidChange;
- (void)infoCardThemeChanged:(id)arg1;

// NSView (MapKitAccessoryButtonAdditions)

- (id)_mapkit_accessoryControlToExtendWithCallout;

// NSView (MapKitExtras)

- (unsigned long long)_mapkit_countOfSet:(id)arg1 minusSubset:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_mapkit_doubleFrame;

// Image: /System/Library/Frameworks/QTKit.framework/Versions/A/QTKit

// NSView (QTHUDBackgroundTint)

- (unsigned long long)QTHUD_backgroundTintForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// NSView (QTHUDCellFocusRing)

- (void)QTHUD_setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit

// NSView (DelayedHide)

- (void)_ikHide;
- (void)_ikUnhide;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/PDFKit

// NSView (ViewExtensions)

- (id)PDFKitEnclosingScrollView;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI

// NSView (QLDisplayableAddition)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })quickLookFrame;
- (id)quickLookLayer;
- (id)quickLookView;
- (id)quickLookViewController;
- (void)setQuickLookFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// NSView (QuickLookAiddtions)

- (struct CGPoint { double x1; double x2; })_ql_convertLayerPointToViewPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_ql_convertLayerRectToViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })_ql_convertViewPointToLayerPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_ql_convertViewRectToLayerRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore

// NSView (WebCoreView)

- (id)_webcore_effectiveFirstResponder;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy

// NSView (WebExtras)

- (id)_webView;
- (unsigned long long)_web_dragOperationForDraggingInfo:(id)arg1;
- (BOOL)_web_dragShouldBeginFromMouseDown:(id)arg1 withExpiration:(id)arg2;
- (BOOL)_web_dragShouldBeginFromMouseDown:(id)arg1 withExpiration:(id)arg2 xHysteresis:(float)arg3 yHysteresis:(float)arg4;
- (BOOL)_web_firstResponderIsSelfOrDescendantView;
- (id)_web_parentWebFrameView;
- (id)_web_superviewOfClass:(Class)arg1;

// NSView (WebHTMLViewFileInternal)

- (void)_web_addDescendantWebHTMLViewsToArray:(id)arg1;

// NSView (WebSetNeedsDisplayInRect)

- (void)_web_setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/PrivateFrameworks/ToneKit.framework/Versions/A/ToneKit

// NSView (TKConstraintBasedLayout)

- (id)_tk_autolayoutTrace;
- (id)_tk_recursiveAutolayoutTraceAtLevel:(long long)arg1 anyDescendantHasAmbiguousLayout:(BOOL*)arg2;
- (unsigned long long)_tl_depth;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToConstant:(double)arg2;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofItem:(id)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofItem:(id)arg3 withMultiplier:(double)arg4;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofItem:(id)arg3 withOffset:(double)arg4;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToValueOfItem:(id)arg2;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToValueOfItem:(id)arg2 withMultiplier:(double)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToValueOfItem:(id)arg2 withOffset:(double)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asLessThanOrEqualToValueOfItem:(id)arg2 withOffset:(double)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 relatedBy:(long long)arg2 toItem:(id)arg3 attribute:(long long)arg4 multiplier:(double)arg5 constant:(double)arg6;
- (id)tk_addedConstraintFotLayoutAttribute:(long long)arg1 asGreaterThanOrEqualToValueOfItem:(id)arg2 withOffset:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToConstant:(double)arg2;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofItem:(id)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofItem:(id)arg3 withMultiplier:(double)arg4;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofItem:(id)arg3 withOffset:(double)arg4;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToValueOfItem:(id)arg2;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToValueOfItem:(id)arg2 withMultiplier:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToValueOfItem:(id)arg2 withOffset:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asGreaterThanOrEqualToValueOfItem:(id)arg2 withOffset:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asLessThanOrEqualToValueOfItem:(id)arg2 withOffset:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 relatedBy:(long long)arg2 toItem:(id)arg3 attribute:(long long)arg4 multiplier:(double)arg5 constant:(double)arg6;
- (id)tk_firstCommonAncestorWithView:(id)arg1;

// Image: /System/Library/PrivateFrameworks/ViewBridge.framework/Versions/A/ViewBridge

// NSView (NSServiceViewController)

- (BOOL)respondsToAction:(SEL)arg1 fromTask:(struct { unsigned int x1[8]; })arg2;

@end
