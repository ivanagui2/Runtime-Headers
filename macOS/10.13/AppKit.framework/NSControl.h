/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSControl : NSView <DebugHierarchyObject> {
    NSControlAuxiliary * _aux;
    id  _cell;
    struct __conFlags { 
        unsigned int enabled : 1; 
        unsigned int ignoreMultiClick : 1; 
        unsigned int calcSize : 1; 
        unsigned int drawingAncestor : 1; 
        unsigned int ibReserved : 1; 
        unsigned int updateCellFocus : 1; 
        unsigned int allowsLogicalLayoutDirection : 1; 
        unsigned int asmlwidth : 1; 
        unsigned int hsmlwidth : 1; 
        unsigned int dontValidate : 1; 
        unsigned int reserved : 22; 
    }  _conFlags;
}

@property (atomic, readwrite) SEL action;
@property (atomic, readwrite, copy) NSAttributedString *attributedStringValue;
@property (getter=isContinuous, atomic, readwrite) BOOL continuous;
@property (atomic, readwrite) unsigned long long controlSize;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite) double doubleValue;
@property (getter=isEnabled, atomic, readwrite) BOOL enabled;
@property (atomic, readwrite) float floatValue;
@property (atomic, readwrite, retain) NSFormatter *formatter;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isHighlighted, atomic, readwrite) BOOL highlighted;
@property (atomic, readwrite) BOOL ignoresMultiClick;
@property (atomic, readwrite) int intValue;
@property (atomic, readwrite) long long integerValue;
@property (atomic, readwrite, copy) id objectValue;
@property (atomic, readwrite) BOOL refusesFirstResponder;
@property (atomic, readwrite, copy) NSString *stringValue;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) long long tag;
@property (atomic, readwrite) id target;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (BOOL)_controlTargetsAreWeak;
+ (BOOL)_prefersCellUserInterfaceLayoutDirection;
+ (Class)cellClass;
+ (unsigned long long)defaultFocusRingType;
+ (void)initialize;
+ (void)setCellClass:(Class)arg1;

- (BOOL)_autoCancelIfTouchTooLong:(id*)arg1;
- (id)_backgroundColorForFontSmoothing;
- (BOOL)_canShowExpansionTooltips;
- (void)_clearMouseTrackingForCell:(id)arg1;
- (void)_commonControlInit;
- (void)_commonEarlyInit;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (void)_continueBeginTouch:(id)arg1;
- (void)_didRemoveLayer;
- (id)_findCurrentEditor;
- (void)_finishedMakingConnections;
- (BOOL)_hasEditableCell;
- (BOOL)_hasExtra10_11BordersInToolbars;
- (BOOL)_hasSetMaxLayoutWidth;
- (id)_insetMitigationTreatment;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_opaqueRectForWindowMoveWhenInTitlebar;
- (BOOL)_performKeyEquivalent:(id)arg1 conditionally:(BOOL)arg2;
- (void)_removeAllCellMouseTracking;
- (BOOL)_resetIncrementalSearchOnFailure;
- (void)_resetMaxLayoutWidthAtNextLayout;
- (id)_restingMitigationTreatment;
- (void)_rightMouseUpOrDown:(id)arg1;
- (void)_setControlTextDelegateFromOld:(id)arg1 toNew:(id)arg2;
- (void)_setHasSetMaxLayoutWidth:(BOOL)arg1;
- (void)_setMouseTrackingForCell:(id)arg1;
- (void)_setSetsMaxLayoutWidthAtFirstLayout:(BOOL)arg1;
- (void)_setWindow:(id)arg1;
- (BOOL)_setsMaxLayoutWidthAtFirstLayout;
- (BOOL)_shouldAutoflipUnarchivedProperties;
- (BOOL)_shouldDelegateTargetActionForSelector:(SEL)arg1;
- (BOOL)_shouldRerouteCellAPIs;
- (BOOL)_shouldShowFirstResponderForCell:(id)arg1;
- (BOOL)_shouldTrackWithNonEditableCell;
- (BOOL)_shouldUseCellUserInterfaceLayoutDirection;
- (id)_stringSearchParametersForListingViews;
- (void)_touchCancelled:(id)arg1;
- (void)_touchEnded:(id)arg1;
- (void)_updateCellImage:(id)arg1;
- (void)_validateEditing:(id)arg1;
- (id)_vibrancyFilter;
- (void)_viewDidChangeAppearance:(id)arg1;
- (BOOL)_wantsHeartBeat;
- (void)_windowChangedKeyState;
- (void)dealloc;

// NSControl (NSControlAccessibilityAdditions)

+ (BOOL)accessibilityIsSingleCelled;

// NSControl (_NSTouchBarLoggingExtentions)

- (id)_descriptionForTouchBarLogging;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSControl (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)abortEditing;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsEnabledAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityPopUpMenuParent:(id)arg1;
- (id)accessibilityPositionOfChild:(id)arg1;
- (void)accessibilityPostNotification:(id)arg1 context:(id)arg2;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetFocus:(id)arg1 forChild:(id)arg2;
- (id)accessibilitySizeOfChild:(id)arg1;
- (SEL)action;
- (unsigned long long)alignment;
- (BOOL)allowsExpansionToolTips;
- (BOOL)allowsLogicalLayoutDirection;
- (BOOL)allowsVibrancy;
- (id)attributedStringValue;
- (long long)baseWritingDirection;
- (BOOL)becomeFirstResponder;
- (void)becomeKeyWindow;
- (void)calcSize;
- (BOOL)canSmoothFontsInLayer;
- (id)cell;
- (unsigned long long)controlSize;
- (id)currentEditor;
- (void)didBecomeActiveFirstResponder;
- (double)doubleValue;
- (void)drawCell:(id)arg1;
- (void)drawCellInside:(id)arg1;
- (void)drawFocusRingMask;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawWithExpansionFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)editWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 editor:(id)arg2 delegate:(id)arg3 event:(id)arg4;
- (void)encodeWithCoder:(id)arg1;
- (void)endEditing:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })expansionFrameWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)firstBaselineOffsetFromTop;
- (float)floatValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBounds;
- (unsigned long long)focusRingType;
- (id)font;
- (id)formatter;
- (void)heartBeat:(struct { double x1; double x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 31; } x4; }*)arg1;
- (BOOL)ignoresMultiClick;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (int)intValue;
- (long long)integerValue;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)invalidateIntrinsicContentSizeForCell:(id)arg1;
- (BOOL)isContinuous;
- (BOOL)isEnabled;
- (BOOL)isHighlighted;
- (BOOL)isOpaque;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (void)layout;
- (unsigned long long)lineBreakMode;
- (id)menuForEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (long long)mouseDownFlags;
- (BOOL)needsPanelToBecomeKey;
- (id)objectValue;
- (void)performClick:(id)arg1;
- (BOOL)refusesFirstResponder;
- (id)representedObject;
- (void)resetCursorRects;
- (BOOL)resignFirstResponder;
- (void)resignKeyWindow;
- (void)rightMouseDown:(id)arg1;
- (void)selectCell:(id)arg1;
- (void)selectWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 editor:(id)arg2 delegate:(id)arg3 start:(long long)arg4 length:(long long)arg5;
- (id)selectedCell;
- (long long)selectedTag;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2;
- (long long)sendActionOn:(unsigned long long)arg1;
- (void)setAction:(SEL)arg1;
- (void)setAlignment:(unsigned long long)arg1;
- (void)setAllowsExpansionToolTips:(BOOL)arg1;
- (void)setAllowsLogicalLayoutDirection:(BOOL)arg1;
- (void)setAttributedStringValue:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1;
- (void)setCell:(id)arg1;
- (void)setContinuous:(BOOL)arg1;
- (void)setControlSize:(unsigned long long)arg1;
- (void)setDoubleValue:(double)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFloatValue:(float)arg1;
- (void)setFloatingPointFormat:(BOOL)arg1 left:(unsigned long long)arg2 right:(unsigned long long)arg3;
- (void)setFocusRingType:(unsigned long long)arg1;
- (void)setFont:(id)arg1;
- (void)setFormatter:(id)arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setIgnoresMultiClick:(BOOL)arg1;
- (void)setIntValue:(int)arg1;
- (void)setIntegerValue:(long long)arg1;
- (void)setLineBreakMode:(unsigned long long)arg1;
- (void)setNeedsDisplay;
- (void)setObjectValue:(id)arg1;
- (void)setRefusesFirstResponder:(BOOL)arg1;
- (void)setRepresentedObject:(id)arg1;
- (void)setSkipEditValidation:(BOOL)arg1;
- (void)setStringValue:(id)arg1;
- (void)setTag:(long long)arg1;
- (void)setTarget:(id)arg1;
- (void)setTouchBarInsetMitigation:(long long)arg1;
- (void)setTouchBarRestingMitigation:(long long)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (void)setUsesSingleLineMode:(BOOL)arg1;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)sizeToFit;
- (BOOL)skipEditValidation;
- (id)stringValue;
- (long long)tag;
- (void)takeDoubleValueFrom:(id)arg1;
- (void)takeFloatValueFrom:(id)arg1;
- (void)takeIntValueFrom:(id)arg1;
- (void)takeIntegerValueFrom:(id)arg1;
- (void)takeObjectValueFrom:(id)arg1;
- (void)takeStringValueFrom:(id)arg1;
- (id)target;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textView:(id)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 toCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)textViewDidChangeSelection:(id)arg1;
- (long long)touchBarInsetMitigation;
- (long long)touchBarRestingMitigation;
- (void)touchesBeganWithEvent:(id)arg1;
- (void)touchesCancelledWithEvent:(id)arg1;
- (void)touchesEndedWithEvent:(id)arg1;
- (void)touchesMovedWithEvent:(id)arg1;
- (void)updateCell:(id)arg1;
- (void)updateCellInside:(id)arg1;
- (void)updateLayer;
- (void)updateTrackingAreas;
- (long long)userInterfaceLayoutDirection;
- (BOOL)usesSingleLineMode;
- (void)validateEditing;
- (BOOL)wantsUpdateLayer;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// NSControl (MKCrossPlatformOperations)

- (void)_mapkit_setTarget:(id)arg1 action:(SEL)arg2;

// Image: /System/Library/Frameworks/QTKit.framework/Versions/A/QTKit

// NSControl (QTCMTimeAdditions)

- (struct { long long x1; int x2; unsigned int x3; long long x4; })CMTimeValue;
- (void)setCMTimeValue:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)takeCMTimeValueFrom:(id)arg1;

// NSControl (QTHUDCellUpdating)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })QTHUD_frameForCell:(id)arg1;
- (void)QTHUD_updateCell:(id)arg1 forAction:(void*)arg2;
- (void)QTHUD_updateCellInside:(id)arg1 forAction:(void*)arg2;

// NSControl (QTTimeAdditions)

- (struct { long long x1; long long x2; long long x3; })QTTimeValue;
- (void)setQTTimeValue:(struct { long long x1; long long x2; long long x3; })arg1;
- (void)takeQTTimeValueFrom:(id)arg1;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy

// NSControl (WebExtras)

- (void)sizeToFitAndAdjustWindowHeight;

@end
