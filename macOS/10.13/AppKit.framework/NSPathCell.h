/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSPathCell : NSActionCell <NSOpenSavePanelDelegate> {
    NSArray * _allowedTypes;
    NSAnimation * _animation;
    id  _aux;
    NSColor * _backgroundColor;
    NSMutableArray * _borderColors;
    NSMutableArray * _cells;
    NSPathComponentCell * _clickedCell;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentRect;
    <NSPathCellDelegate> * _delegate;
    SEL  _doubleAction;
    NSPathComponentCell * _hoveredCell;
    long long  _pathStyle;
    struct { 
        unsigned int cbs : 4; 
        unsigned int reserved : 28; 
    }  _piFlags;
    NSPopUpButtonCell * _popUpButtonCell;
}

@property (atomic, readwrite, copy) NSURL *URL;
@property (atomic, readwrite, copy) NSArray *allowedTypes;
@property (atomic, readwrite, copy) NSColor *backgroundColor;
@property (atomic, readonly) NSPathComponentCell *clickedPathComponentCell;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <NSPathCellDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite) SEL doubleAction;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite, copy) NSArray *pathComponentCells;
@property (atomic, readwrite) long long pathStyle;
@property (atomic, readwrite, copy) NSAttributedString *placeholderAttributedString;
@property (atomic, readwrite, copy) NSString *placeholderString;
@property (atomic, readonly) Class superclass;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (Class)pathComponentCellClass;
+ (BOOL)prefersTrackingUntilMouseUp;

- (void).cxx_destruct;
- (id)_activeBackgroundColor;
- (void)_autoUpdateCellContents;
- (id)_borderColors;
- (void)_changeContentsToPath:(id)arg1;
- (void)_createHoverChangeAnimation;
- (void)_drawBorderWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_hoveredCell;
- (struct CGSize { double x1; double x2; })_iconSize;
- (id)_inActiveBackgroundColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_insetFrameForBorder:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_legacyDrawFocusRingInCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_menuDidEndTracking:(id)arg1;
- (void)_menuItemClick:(id)arg1;
- (void)_otherItemClick:(id)arg1;
- (id)_popUpButtonCell;
- (id)_popUpMenu;
- (id)_realPlaceHolderAttributedString;
- (void)_resetClickedCell;
- (id)_scaleImage:(id)arg1 forSize:(struct CGSize { double x1; double x2; })arg2 lockFocusOK:(BOOL)arg3;
- (BOOL)_sendActionOrDoubleAction:(BOOL)arg1;
- (void)_setClickedPathComponentCell:(id)arg1;
- (void)_setHoveredCell:(id)arg1;
- (void)_setNeedsSizeUpdate;
- (void)_setPopUpButtonCell:(id)arg1;
- (void)_setupPopUpButtonCellWithResizedImages:(BOOL)arg1;
- (BOOL)_shouldDrawRTL;
- (void)_stopAnimation;
- (id)_titleAttributes;
- (void)_updateCell;
- (void)_updateSizesForInteriorFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_updateTrackingRects;
- (id)_valueAsFilePath;
- (BOOL)_wantsToUseFocusRingMask;
- (void)_willDisplayOpenPanel:(id)arg1;
- (void)dealloc;

// NSPathCell (NSPathCellAccessibility)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityScreenRectForPathComponent:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (id)URL;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityDescriptionAttribute;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsDescriptionAttributeSettable;
- (BOOL)accessibilityIsOrientationAttributeSettable;
- (BOOL)accessibilityIsSelectedChildrenAttributeSettable;
- (BOOL)accessibilityIsVisibleChildrenAttributeSettable;
- (id)accessibilityOrientationAttribute;
- (void)accessibilityPerformAction:(id)arg1 forChild:(id)arg2;
- (id)accessibilityPositionOfChild:(id)arg1;
- (id)accessibilityRoleAttribute;
- (id)accessibilitySelectedChildrenAttribute;
- (void)accessibilitySetFocus:(id)arg1 forChild:(id)arg2;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilityVisibleChildrenAttribute;
- (struct CGPoint { double x1; double x2; })accessibilityWindowPointForShowMenu;
- (void)addPathComponentCell:(id)arg1;
- (id)allowedTypes;
- (void)animation:(id)arg1 didReachProgressMark:(float)arg2;
- (void)animationDidEnd:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (id)backgroundColor;
- (unsigned long long)bezelStyle;
- (id)borderColorForEdge:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)clickedPathComponentCell;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)delegate;
- (SEL)doubleAction;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)editWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)encodeWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })expansionFrameWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)insertPathComponentCell:(id)arg1 atIndex:(long long)arg2;
- (BOOL)isOpaque;
- (id)menuForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (void)mouseEntered:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)mouseExited:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (id)pathComponentCellAtPoint:(struct CGPoint { double x1; double x2; })arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (id)pathComponentCells;
- (long long)pathStyle;
- (void)performClick:(id)arg1;
- (id)placeholderAttributedString;
- (id)placeholderString;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectOfPathComponentCell:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inView:(id)arg3;
- (void)removePathComponentCellAtIndex:(long long)arg1;
- (void)resetCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)selectWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)setAllowedTypes:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1;
- (void)setBezelStyle:(unsigned long long)arg1;
- (void)setBorderColor:(id)arg1;
- (void)setBorderColor:(id)arg1 forEdge:(unsigned long long)arg2;
- (void)setBordered:(BOOL)arg1;
- (void)setControlSize:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleAction:(SEL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setObjectValue:(id)arg1;
- (void)setPathComponentCells:(id)arg1;
- (void)setPathStyle:(long long)arg1;
- (void)setPlaceholderAttributedString:(id)arg1;
- (void)setPlaceholderString:(id)arg1;
- (void)setURL:(id)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (BOOL)validateMenuItem:(id)arg1;

@end
