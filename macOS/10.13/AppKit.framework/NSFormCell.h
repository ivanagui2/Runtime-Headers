/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSFormCell : NSActionCell {
    double  _preferredTextFieldWidth;
    id  _titleCell;
    double  _titleEndPoint;
    double  _titleWidth;
}

@property (getter=isOpaque, atomic, readonly) BOOL opaque;
@property (atomic, readwrite, copy) NSAttributedString *placeholderAttributedString;
@property (atomic, readwrite, copy) NSString *placeholderString;
@property (atomic, readwrite) double preferredTextFieldWidth;
@property (atomic, readwrite, copy) NSString *title;
@property (atomic, readwrite) unsigned long long titleAlignment;
@property (atomic, readwrite) long long titleBaseWritingDirection;
@property (atomic, readwrite, retain) NSFont *titleFont;
@property (atomic, readwrite) double titleWidth;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (void)initialize;

- (void)_drawLiveResizeHighlightWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_layoutTitleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 interiorChromeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 interiorTextRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 inView:(id)arg5;
- (id)_selectOrEdit:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 inView:(id)arg2 target:(id)arg3 editor:(id)arg4 event:(id)arg5 start:(long long)arg6 end:(long long)arg7;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_titleRectForCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_updateFormAlignmentForUserInterfaceLayoutDirection;
- (void)dealloc;

// NSFormCell (NSFormCellAccessibility)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessibilityTitleRect;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsPlaceholderValueAttributeSettable;
- (BOOL)accessibilityIsTitleUIElementAttributeSettable;
- (id)accessibilityParameterizedAttributeNames;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPlaceholderValueAttribute;
- (id)accessibilityPositionOfChild:(id)arg1;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilityTitleUIElementAttribute;
- (id)attributedTitle;
- (struct CGSize { double x1; double x2; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)initTextCell:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)isOpaque;
- (id)placeholderAttributedString;
- (id)placeholderString;
- (double)preferredTextFieldWidth;
- (void)resetCursorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)setAttributedTitle:(id)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setPlaceholderAttributedString:(id)arg1;
- (void)setPlaceholderString:(id)arg1;
- (void)setPreferredTextFieldWidth:(double)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleAlignment:(unsigned long long)arg1;
- (void)setTitleBaseWritingDirection:(long long)arg1;
- (void)setTitleFont:(id)arg1;
- (void)setTitleWidth:(double)arg1;
- (void)setTitleWithMnemonic:(id)arg1;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (id)title;
- (unsigned long long)titleAlignment;
- (long long)titleBaseWritingDirection;
- (id)titleFont;
- (double)titleWidth;
- (double)titleWidth:(struct CGSize { double x1; double x2; })arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;

@end
