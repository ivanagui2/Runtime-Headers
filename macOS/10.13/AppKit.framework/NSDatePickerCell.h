/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSDatePickerCell : NSActionCell {
    NSColor * _backgroundColor;
    NSCalendar * _calendar;
    struct __dateCellFlags { 
        unsigned int elements : 16; 
        unsigned int controlStyle : 3; 
        unsigned int controlMode : 2; 
        unsigned int trackingHand : 2; 
        unsigned int reserved2 : 4; 
        unsigned int drawsBackground : 1; 
        unsigned int digitsEntered : 2; 
        unsigned int forcesLeadingZeroes : 1; 
        unsigned int wrapsDateComponentArithmetic : 1; 
    }  _dcFlags;
    <NSDatePickerCellDelegate> * _delegate;
    int  _indexOfSelectedSubfield;
    NSLocale * _locale;
    NSDate * _maxDate;
    NSDate * _minDate;
    int  _reserved0;
    id  _reserved1;
    id  _reserved2;
    id  _reserved3;
    id  _reserved4;
    NSColor * _textColor;
    double  _timeInterval;
    NSTimeZone * _timeZone;
}

@property (atomic, readwrite, copy) NSColor *backgroundColor;
@property (atomic, readwrite, copy) NSCalendar *calendar;
@property (atomic, readwrite) unsigned long long datePickerElements;
@property (atomic, readwrite) unsigned long long datePickerMode;
@property (atomic, readwrite) unsigned long long datePickerStyle;
@property (atomic, readwrite, copy) NSDate *dateValue;
@property (atomic, readwrite) <NSDatePickerCellDelegate> *delegate;
@property (atomic, readwrite) BOOL drawsBackground;
@property (atomic, readwrite, copy) NSLocale *locale;
@property (atomic, readwrite, copy) NSDate *maxDate;
@property (atomic, readwrite, copy) NSDate *minDate;
@property (atomic, readwrite, copy) NSColor *textColor;
@property (atomic, readwrite) double timeInterval;
@property (atomic, readwrite, copy) NSTimeZone *timeZone;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (id)_sharedDateFormatter;
+ (void)initialize;

- (void).cxx_destruct;
- (void)dealloc;

// NSDatePickerCell (NSAnalogClockDatePickerInternal)

- (BOOL)_analogClockTrackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)_drawAnalogClockWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;

// NSDatePickerCell (NSClockAndCalendarDatePickerInternal)

+ (id)_calendarHeaderFont;
+ (id)_calendarHeaderFontOfSize:(double)arg1;
+ (double)_calendarHeaderFontSize;
+ (id)_calendarWeekDayHeaderFont;

- (void)_autoAdvanceCalendar:(id)arg1;
- (id)_calendarContentAttributedStringWithSelectedDayCells:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_calendarDateComponentsForPoint:(struct CGPoint { double x1; double x2; })arg1 inCalendarRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_calendarDateComponentsOfFirstDayOfDisplayedMonthOffset:(long long)arg1;
- (id)_calendarDayNamesStringForFirstWeekday:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_calendarDaysFrameForDatePickerCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_calendarFirstDayOfDisplayedMonthDateComponents;
- (long long)_calendarFirstWeekday;
- (BOOL)_calendarIsRTL;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_calendarRangeOfAllDaysForDisplayedMonth;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_calendarRangeOfAllDaysForDisplayedMonthOffset:(long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_calendarRangeOfSelectedDaysForDisplayedMonthOffset:(long long)arg1;
- (void)_clockAndCalendarAdvanceMonth;
- (id)_clockAndCalendarAdvanceMonthCell;
- (struct CGSize { double x1; double x2; })_clockAndCalendarCellSize;
- (BOOL)_clockAndCalendarContinueTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (void)_clockAndCalendarFillDayCell:(long long)arg1 withColor:(id)arg2 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 inView:(id)arg4;
- (void)_clockAndCalendarFillDayCellRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withColor:(id)arg2 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 inView:(id)arg4;
- (void)_clockAndCalendarGetClockFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 calendarFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 retreatMonthCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 advanceMonthCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 returnToHomeMonthButtonCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5 forDatePickerCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6;
- (BOOL)_clockAndCalendarIsTargetMonthLeapMonth:(id)arg1 offset:(long long)arg2;
- (BOOL)_clockAndCalendarKeyDown:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (void)_clockAndCalendarLeftArrowClicked:(id)arg1;
- (void)_clockAndCalendarRetreatMonth;
- (id)_clockAndCalendarRetreatMonthCell;
- (void)_clockAndCalendarReturnToHomeMonth:(id)arg1;
- (id)_clockAndCalendarReturnToHomeMonthButtonCell;
- (void)_clockAndCalendarRightArrowClicked:(id)arg1;
- (BOOL)_clockAndCalendarStartTrackingAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)_clockAndCalendarStopTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (void)_clockAndCalendarTakeDisplayedMonthFromDateValue;
- (void)_clockAndCalendarTakeDisplayedMonthFromTodaysDate;
- (BOOL)_clockAndCalendarTrackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)_drawClockAndCalendarWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (unsigned long long)_hitTestClockAndCalendar:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;

// NSDatePickerCell (NSDatePickerCellChineseSetting)

- (id)_formatGregorianYearWithDate:(id)arg1;
- (BOOL)_useChineseSetting;

// NSDatePickerCell (NSDatePreferencesChanges)

- (void)_datePreferencesDidChange:(id)arg1;
- (void)_registerForDatePreferencesChanges;
- (void)_unregisterForDatePreferencesChanges;

// NSDatePickerCell (NSInternal)

- (id)_adjustDate:(id)arg1 byEras:(long long)arg2 years:(long long)arg3 months:(long long)arg4 days:(long long)arg5 hours:(long long)arg6 minutes:(long long)arg7 seconds:(long long)arg8;
- (void)_adjustDatePickerElement:(int)arg1 by:(long long)arg2 returnCalendarToHomeMonth:(BOOL)arg3;
- (BOOL)_allocateDatePickerCellExtraIvars;
- (id)_calenderHeaderTextColorBasedOnEnabledState;
- (id)_calenderWeekdayHeaderTextColorBasedOnEnabledState;
- (void)_clampDayToValidRangeInDateComponents:(id)arg1;
- (id)_componentsOfInterestToDatePickerFromDate:(id)arg1;
- (BOOL)_constrainAndSetDateValue:(id)arg1 timeInterval:(double)arg2 sendActionIfChanged:(BOOL)arg3 beepIfNoChange:(BOOL)arg4 returnCalendarToHomeMonth:(BOOL)arg5 preserveFractionalSeconds:(BOOL)arg6;
- (id)_constrainDateValue:(id)arg1 timeInterval:(double*)arg2;
- (id)_dateFormatter;
- (id)_dateFromComponents:(id)arg1;
- (BOOL)_dateIsAM:(id)arg1;
- (long long)_dayOfWeekForDate:(id)arg1;
- (long long)_digitForLocalizedDigitCharacter:(unsigned short)arg1;
- (id)_effectiveCalendar;
- (id)_effectiveLocale;
- (void)_finishPendingEdit;
- (BOOL)_fixUpDatePickerElementFlags;
- (void)_invalidateDateFormatter;
- (BOOL)_localeIsRTL;
- (id)_numberFormatter;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfDaysForMonth:(long long)arg1 year:(long long)arg2;
- (id)_textColorBasedOnEnabledState;
- (void)_toggleAMPM;

// NSDatePickerCell (NSPrivate)

- (id)_disabledTextColor;
- (BOOL)_forcesLeadingZeroes;
- (void)_setDisabledTextColor:(id)arg1;
- (void)_setForcesLeadingZeroes:(BOOL)arg1;
- (void)_setWrapsDateComponentArithmetic:(BOOL)arg1;
- (BOOL)_wrapsDateComponentArithmetic;

// NSDatePickerCell (NSTextFieldWithStepperDatePickerInternal)

- (void)_addEditableSubfieldForElement:(int)arg1 dateFormat:(id)arg2;
- (void)_addStaticSubfieldWithString:(id)arg1;
- (void)_addSubfieldForElement:(int)arg1 withDateFormat:(id)arg2 referenceStrings:(id)arg3;
- (void)_cancelSubfieldFieldChanges;
- (void)_cancelUserEditTimer;
- (void)_commitSubfieldFieldChanges;
- (id)_concoctUnholyAbominationOfADateFormatThatMakesAMockeryOfLocalization;
- (void)_createSubfields;
- (void)_decrementSelectedSubfield;
- (void)_deleteDigit;
- (struct CGSize { double x1; double x2; })_desiredTextAreaSize;
- (void)_drawTextFieldWithStepperWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)_getTextAreaFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 stepperCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 forDatePickerCellFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (BOOL)_hasFocusRingInView:(id)arg1;
- (unsigned long long)_hitTestTextFieldWithStepper:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (void)_incrementSelectedSubfield;
- (long long)_indexOfSelectedSubfield;
- (long long)_indexOfSubfieldAtPoint:(struct CGPoint { double x1; double x2; })arg1 inTextAreaFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_insertDigit:(long long)arg1;
- (void)_makeSubfieldsWithHandler:(id)arg1;
- (void)_notifyDelegateIndexOfSelectedSubfieldDidChange;
- (id)_referenceDatesForElement:(int)arg1;
- (void)_resetUserEditTimer;
- (void)_selectFirstSubfield;
- (void)_selectLastSubfield;
- (void)_selectNextSubfield;
- (void)_selectPreviousSubfield;
- (void)_setPM:(BOOL)arg1;
- (void)_setStepper:(id)arg1;
- (BOOL)_shouldShowFocusRingInView:(id)arg1;
- (id)_stepper;
- (id)_stepperCell;
- (double)_stepperCellTopAndBottomTrim;
- (void)_stepperCellValueChanged:(id)arg1;
- (BOOL)_stepperIsRTL;
- (id)_stringForDatePickerElement:(int)arg1 usingDateFormat:(id)arg2;
- (double)_subfieldOffsetForTextAreaFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_subfields;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_subfieldsFrame;
- (unsigned long long)_textFieldAlignment;
- (struct CGSize { double x1; double x2; })_textFieldCellSize;
- (struct CGSize { double x1; double x2; })_textFieldWithStepperCellSize;
- (BOOL)_textFieldWithStepperKeyDown:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (BOOL)_textFieldWithStepperTrackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)_updateSubfieldStringsForDateChange;
- (void)_userEditExpired:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/usr/lib/libMainThreadChecker.dylib

- (id)accessibilityAttributeNames;
- (id)accessibilityDateTimeComponentsAttribute;
- (BOOL)accessibilityIsDateTimeComponentsAttributeSettable;
- (BOOL)accessibilityIsMaxValueAttributeSettable;
- (BOOL)accessibilityIsMinValueAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (id)accessibilityMaxValueAttribute;
- (id)accessibilityMinValueAttribute;
- (id)accessibilityRoleAttribute;
- (void)accessibilitySetValueAttribute:(id)arg1;
- (id)accessibilityValueAttribute;
- (id)backgroundColor;
- (id)calendar;
- (struct CGSize { double x1; double x2; })cellSize;
- (BOOL)continueTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)datePickerElements;
- (unsigned long long)datePickerMode;
- (unsigned long long)datePickerStyle;
- (id)dateValue;
- (id)delegate;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (BOOL)drawsBackground;
- (void)encodeWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)init;
- (id)initTextCell:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (BOOL)keyDown:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3;
- (id)locale;
- (id)maxDate;
- (id)minDate;
- (void)setBackgroundColor:(id)arg1;
- (void)setCalendar:(id)arg1;
- (void)setDatePickerElements:(unsigned long long)arg1;
- (void)setDatePickerMode:(unsigned long long)arg1;
- (void)setDatePickerStyle:(unsigned long long)arg1;
- (void)setDateValue:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDrawsBackground:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setLocale:(id)arg1;
- (void)setMaxDate:(id)arg1;
- (void)setMinDate:(id)arg1;
- (void)setObjectValue:(id)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTimeInterval:(double)arg1;
- (void)setTimeZone:(id)arg1;
- (BOOL)startTrackingAt:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)stopTracking:(struct CGPoint { double x1; double x2; })arg1 at:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (id)textColor;
- (double)timeInterval;
- (id)timeZone;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;

@end
