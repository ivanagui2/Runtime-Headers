/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSImage : NSObject <DebugHierarchyValue, MKArtworkImageSource, NSCoding, NSCopying, NSPasteboardReading, NSPasteboardWriting, NSSecureCoding> {
    struct __imageFlags { 
        unsigned int scalable : 1; 
        unsigned int dataRetained : 1; 
        unsigned int uniqueWindow : 1; 
        unsigned int sizeWasExplicitlySet : 1; 
        unsigned int builtIn : 1; 
        unsigned int needsToExpand : 1; 
        unsigned int useEPSOnResolutionMismatch : 1; 
        unsigned int matchesOnlyOnBestFittingAxis : 1; 
        unsigned int colorMatchPreferred : 1; 
        unsigned int multipleResolutionMatching : 1; 
        unsigned int focusedWhilePrinting : 1; 
        unsigned int archiveByName : 1; 
        unsigned int unboundedCacheDepth : 1; 
        unsigned int flipped : 1; 
        unsigned int aliased : 1; 
        unsigned int dirtied : 1; 
        unsigned int cacheMode : 2; 
        unsigned int sampleMode : 3; 
        unsigned int resMatchPreferred : 1; 
        unsigned int isTemplate : 1; 
        unsigned int failedToExpand : 1; 
        unsigned int reserved1 : 8; 
    }  _flags;
    _NSImageAuxiliary * _imageAuxiliary;
    NSString * _name;
    id  _reps;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
}

@property (atomic, readonly) NSData *TIFFRepresentation;
@property (setter=_setReps:, atomic, readwrite, retain) id _reps;
@property (atomic, readwrite, copy) NSString *accessibilityDescription;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentRect;
@property (atomic, readwrite, copy) NSColor *backgroundColor;
@property (atomic, readwrite) unsigned long long cacheMode;
@property (atomic, readwrite) struct NSEdgeInsets { double x1; double x2; double x3; double x4; } capInsets;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) <NSImageDelegate> *delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite, copy) NSString *ikProfilePictureAttributedImageName;
@property (nonatomic, readwrite, retain) NSURL *ik_fullResolutionFileURL;
@property (atomic, readwrite) BOOL matchesOnMultipleResolution;
@property (atomic, readwrite) BOOL matchesOnlyOnBestFittingAxis;
@property (atomic, readwrite) BOOL prefersColorMatch;
@property (atomic, readonly, copy) NSArray *representations;
@property (atomic, readwrite) long long resizingMode;
@property (nonatomic, readonly) BOOL shouldHighlight;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } size;
@property (atomic, readonly) Class superclass;
@property (getter=isTemplate, atomic, readwrite) BOOL template;
@property (atomic, readwrite) BOOL usesEPSOnResolutionMismatch;
@property (getter=isValid, atomic, readonly) BOOL valid;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

+ (id)_allNames;
+ (BOOL)_canInitWithPasteboard:(id)arg1 allowMultipleFiles:(BOOL)arg2;
+ (id)_catalogIconImageWithName:(id)arg1 bundle:(id)arg2;
+ (id)_catalogImageWithName:(id)arg1 bundle:(id)arg2;
+ (id)_coreUIImageWithName:(id)arg1;
+ (id)_imageNamed:(id)arg1;
+ (void)_invalidateImageTypeCaches;
+ (BOOL)_requireDefaultEndianPremultipliedLastForTIFFDataFromSnapshotReps;
+ (id)_searchForImageNamed:(id)arg1;
+ (id)_searchForSystemImageNamed:(id)arg1;
+ (id)_touchBarSiriCompositeImage;
+ (BOOL)canInitWithPasteboard:(id)arg1;
+ (id)imageFileTypes;
+ (id)imageNamed:(id)arg1;
+ (id)imagePasteboardTypes;
+ (id)imageTypes;
+ (id)imageUnfilteredFileTypes;
+ (id)imageUnfilteredPasteboardTypes;
+ (id)imageUnfilteredTypes;
+ (id)imageWithImageRep:(id)arg1;
+ (id)imageWithSize:(struct CGSize { double x1; double x2; })arg1 drawHandler:(id)arg2;
+ (id)imageWithSize:(struct CGSize { double x1; double x2; })arg1 drawingIsFlipped:(BOOL)arg2 drawHandler:(id)arg3;
+ (id)imageWithSize:(struct CGSize { double x1; double x2; })arg1 flipped:(BOOL)arg2 drawingHandler:(id)arg3;
+ (void)initialize;
+ (id)readableTypesForPasteboard:(id)arg1;
+ (BOOL)supportsSecureCoding;

- (struct CGImage { }*)CGImageForProposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 context:(id)arg2 hints:(id)arg3;
- (id)TIFFRepresentation;
- (id)TIFFRepresentationUsingCompression:(unsigned long long)arg1 factor:(float)arg2;
- (id)_accessibilityDescriptionBacking;
- (id)_accessibilityDescriptionBackingForArchiving;
- (id)_accessibilityDescriptionBackingForCopying;
- (void)_addRepresentations:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentRectInNormalizedCoordinates;
- (void)_allocAuxiliaryStorage;
- (BOOL)_antialiased;
- (void)_cacheSnapshotRep:(id)arg1;
- (void*)_createPatternForContext:(id)arg1;
- (void)_deallocAuxiliaryStorage;
- (id)_defaultAccessibilityDescription;
- (id)_defaultImageHintsAndOnlyIfAvailable:(BOOL)arg1;
- (void)_dispatchImageDidNotDraw:(id)arg1;
- (void)_drawMappingAlignmentRectToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withState:(unsigned long long)arg2 backgroundStyle:(int)arg3 operation:(unsigned long long)arg4 fraction:(double)arg5 flip:(BOOL)arg6 hints:(id)arg7;
- (BOOL)_drawRepresentation:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withScaling:(BOOL)arg3;
- (void)_dumpFullImageInfo;
- (void)_failsafeAllocAuxiliaryStorage;
- (BOOL)_hasCacheRep;
- (BOOL)_hasMultipleStates;
- (id)_imageByBadgingWithImage:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_imageDidNotDrawHandlerRep;
- (unsigned long long)_imageInterpolation;
- (id)_imageLevel_backgroundColor;
- (void)_imageLevel_setBackgroundColor:(id)arg1;
- (id)_initWithData:(id)arg1 fileType:(id)arg2 hfsType:(id)arg3;
- (id)_initWithIconRef:(void*)arg1 includeThumbnail:(BOOL)arg2;
- (BOOL)_isCachedToRep:(id)arg1;
- (BOOL)_legacyAddRepresentationsForIconNamed:(id)arg1 fromIconSectionInAppBinary:(id)arg2;
- (void)_lockFocusOnRepresentation:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 hints:(id)arg4 flipped:(BOOL)arg5;
- (id)_newSnapshotRepForCGImage:(struct CGImage { }*)arg1 drawingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 applicableForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 context:(id)arg4 processedHints:(id)arg5;
- (id)_newSnapshotRepForRep:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 processedHints:(id)arg4;
- (BOOL)_prefersResolutionMatch;
- (id)_processedHintsForHints:(id)arg1 includeOnlyIfAvailable:(BOOL)arg2;
- (id)_providedAccessibilityDescription;
- (void)_replaceRepsWithRep:(id)arg1;
- (id)_reps;
- (void)_setAccessibilityDescriptionBacking:(id)arg1;
- (void)_setAlignmentRectInNormalizedCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setAntialiased:(BOOL)arg1;
- (void)_setCacheRep:(id)arg1;
- (void)_setDefaultAccessibilityDescription:(id)arg1;
- (void)_setImageInterpolation:(unsigned long long)arg1;
- (void)_setPrefersResolutionMatch:(BOOL)arg1;
- (void)_setRepProvider:(id)arg1;
- (void)_setRepProviderWithIconRef:(struct OpaqueIconRef { }*)arg1 includeThumbnail:(BOOL)arg2;
- (void)_setRepProviderWithReferencingURL:(id)arg1;
- (void)_setRepProviderWithReferencingURLs:(id)arg1;
- (void)_setRepProviderWithRepresentationsArray:(id)arg1;
- (void)_setReps:(id)arg1;
- (BOOL)_shouldCacheWhenDrawingRep:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 processedHints:(id)arg4;
- (id)_snapshotRepForRep:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 processedHints:(id)arg4;
- (void)_usingBestRepresentationAmongRepresentations:(id)arg1 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 hints:(id)arg4 body:(id)arg5;
- (void)_usingBestRepresentationForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(id)arg2 hints:(id)arg3 body:(id)arg4;
- (void)_usingCacheRepPerformBlock:(id)arg1;
- (void)_usingRepProviderPerformBlock:(id)arg1;
- (void)_usingRepresentationsPerformBlock:(id)arg1;
- (BOOL)_whenDrawn:(id)arg1 fills:(const struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (id)accessibilityDescription;
- (void)addRepresentation:(id)arg1;
- (void)addRepresentations:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRect;
- (id)awakeAfterUsingCoder:(id)arg1;
- (id)backgroundColor;
- (id)bestRepresentationAmongRepresentations:(id)arg1 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 hints:(id)arg4;
- (id)bestRepresentationForDevice:(id)arg1;
- (id)bestRepresentationForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(id)arg2 hints:(id)arg3;
- (unsigned long long)cacheMode;
- (void)cancelIncrementalLoad;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })capInsets;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3 fraction:(double)arg4;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3 fraction:(double)arg4;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3 fraction:(double)arg4 hints:(id)arg5;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3 fraction:(double)arg4 respectFlipped:(BOOL)arg5 hints:(id)arg6;
- (BOOL)drawRepresentation:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)hasAlpha;
- (BOOL)hitTestPoint:(struct CGPoint { double x1; double x2; })arg1 withImageDestinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 hints:(id)arg4;
- (BOOL)hitTestRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withImageDestinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 hints:(id)arg4;
- (BOOL)hitTestRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withImageDestinationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(id)arg3 hints:(id)arg4 flipped:(BOOL)arg5;
- (unsigned long long)imageInterpolation;
- (id)init;
- (id)initByReferencingFile:(id)arg1;
- (id)initByReferencingURL:(id)arg1;
- (id)initByReferencingURLs:(id)arg1;
- (id)initFromImage:(id)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)initWithCGImage:(struct CGImage { }*)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)initWithDataIgnoringOrientation:(id)arg1;
- (id)initWithIconRef:(struct OpaqueIconRef { }*)arg1;
- (id)initWithImageRep:(id)arg1;
- (id)initWithPasteboard:(id)arg1;
- (id)initWithPasteboardPropertyList:(id)arg1 ofType:(id)arg2;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1;
- (BOOL)isTemplate;
- (BOOL)isValid;
- (id)layerContentsForContentsScale:(double)arg1;
- (void)lockFocus;
- (void)lockFocusFlipped:(BOOL)arg1;
- (void)lockFocusWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(id)arg2 hints:(id)arg3 flipped:(BOOL)arg4;
- (BOOL)matchesOnMultipleResolution;
- (BOOL)matchesOnlyOnBestFittingAxis;
- (id)name;
- (id)pasteboardPropertyListForType:(id)arg1;
- (BOOL)prefersColorMatch;
- (void)recache;
- (double)recommendedLayerContentsScale:(double)arg1;
- (void)removeRepresentation:(id)arg1;
- (id)representations;
- (long long)resizingMode;
- (void)setAccessibilityDescription:(id)arg1;
- (void)setAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setCacheMode:(unsigned long long)arg1;
- (void)setCapInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setImageInterpolation:(unsigned long long)arg1;
- (void)setMatchesOnMultipleResolution:(BOOL)arg1;
- (void)setMatchesOnlyOnBestFittingAxis:(BOOL)arg1;
- (BOOL)setName:(id)arg1;
- (void)setPrefersColorMatch:(BOOL)arg1;
- (void)setResizingMode:(long long)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTemplate:(BOOL)arg1;
- (void)setUsesEPSOnResolutionMismatch:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })size;
- (void)unlockFocus;
- (BOOL)usesEPSOnResolutionMismatch;
- (id)writableTypesForPasteboard:(id)arg1;

// NSImage (CALayerSupport)

- (void*)CA_copyRenderValue;
- (void)CA_prepareRenderValue;
- (BOOL)NS_needsRecommitOnDefaultContentsScaleChange;
- (id)replacementObjectForCoder:(id)arg1;

// NSImage (NSDeprecated)

- (BOOL)_composite:(long long)arg1 delta:(double)arg2 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 toPoint:(struct CGPoint { double x1; double x2; })arg4;
- (void)_compositeFlipped:(BOOL)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 operation:(unsigned long long)arg4 fraction:(double)arg5;
- (void)_compositeFlipped:(BOOL)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 operation:(unsigned long long)arg4 fraction:(double)arg5;
- (void)_compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3 fraction:(double)arg4;
- (void)_compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 operation:(unsigned long long)arg2 fraction:(double)arg3;
- (BOOL)cacheDepthMatchesImageDepth;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 operation:(unsigned long long)arg3 fraction:(double)arg4;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 operation:(unsigned long long)arg2;
- (void)compositeToPoint:(struct CGPoint { double x1; double x2; })arg1 operation:(unsigned long long)arg2 fraction:(double)arg3;
- (void)dissolveToPoint:(struct CGPoint { double x1; double x2; })arg1 fraction:(double)arg2;
- (void)dissolveToPoint:(struct CGPoint { double x1; double x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fraction:(double)arg3;
- (BOOL)isCachedSeparately;
- (BOOL)isDataRetained;
- (BOOL)isFlipped;
- (void)lockFocusOnRepresentation:(id)arg1;
- (BOOL)scalesWhenResized;
- (void)setCacheDepthMatchesImageDepth:(BOOL)arg1;
- (void)setCachedSeparately:(BOOL)arg1;
- (void)setDataRetained:(BOOL)arg1;
- (void)setFlipped:(BOOL)arg1;
- (void)setScalesWhenResized:(BOOL)arg1;

// NSImage (NSDraggingPrivate)

+ (id)_emblemForCount:(long long)arg1;

// NSImage (NSTabBarExtras)

- (id)_flatImageWithColor:(id)arg1;
- (id)_imageByApplyingShadowForDragging;
- (id)_imageByScalingToSize:(struct CGSize { double x1; double x2; })arg1 withImageInterpolation:(unsigned long long)arg2;
- (id)_imageByScalingToSize:(struct CGSize { double x1; double x2; })arg1 withImageInterpolation:(unsigned long long)arg2 imageScaling:(unsigned long long)arg3;
- (id)_safari_imageWithBackgroundColor:(id)arg1 compositingOperation:(unsigned long long)arg2;

// NSImage (NSTemplatizing)

+ (id)_templateImageWithImage:(id)arg1;

// NSImage (_NSTableViewActionButtonTintSupport)

- (id)tv_tintedImageWithTintColor:(id)arg1;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// NSImage (DebugHierarchyAdditions)

- (id)debugHierarchyValue;

// Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit

// NSImage (AVAdditions)

+ (id)AV_imageNamed:(id)arg1;
+ (id)imageNamed:(id)arg1 color:(id)arg2;
+ (id)imageNamed:(id)arg1 height:(double)arg2 color:(id)arg3;
+ (id)imageNamed:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)imageNamed:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 color:(id)arg3;
+ (id)imageNamed:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 color:(id)arg3 shadowColor:(id)arg4 shadowSize:(double)arg5;

- (id)imageWithColor:(id)arg1;
- (id)imageWithInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg1;

// Image: /System/Library/Frameworks/AddressBook.framework/Versions/A/AddressBook

// NSImage (ABImageAdditions)

+ (id)abImageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)abImageNamed:(id)arg1 inBundle:(id)arg2 tintedWithColor:(id)arg3;

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })abBounds;
- (id)abCroppedImageWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)abDetectedFaces;
- (id)abImageByFlippingRTLIfNeeded;
- (id)abImageCroppedToAspectRatio:(double)arg1 centerSquareRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 translatedCenterRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (id)abImageScaledBy:(double)arg1;
- (id)abImageTintedWithColor:(id)arg1;
- (id)abImageTintedWithGradient:(id)arg1;
- (id)abImageWithCircleBackground:(id)arg1;
- (id)abJPEGImageDataWithCompressionFactor:(id)arg1;
- (id)abJPEGImageDataWithMaximumLength:(unsigned long long)arg1 minimumQuality:(double)arg2;
- (id)abReflection;
- (id)abReflectionWithInitialAlpha:(double)arg1 height:(double)arg2;
- (void)abRunWithLockedFocus:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })abSuggestedCroppingRect;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// NSImage (ArtworkImageSource)

- (id)badgeImageToDisplayWithScreenScale:(double)arg1;
- (id)imageToDisplayWithScreenScale:(double)arg1;

// NSImage (MKTransitArtworkExtras)

+ (id)_mapkit_imageFromBlockGetVKImageWithScale:(id)arg1;
+ (id)_mapkit_transitArtworkImageWithDataSource:(id)arg1 size:(long long)arg2 scale:(double)arg3;
+ (id)_mapkit_transitArtworkImageWithDataSource:(id)arg1 size:(long long)arg2 scale:(double)arg3 withWidthPaddingMultiple:(double)arg4;

// NSImage (MapKit)

+ (id)mapkit_imageNamed:(id)arg1;

- (double)_mapkit_calculateMeanBrightness;
- (struct CGImage { }*)mapkit_CGImageWithScale:(double)arg1;

// NSImage (MapKitExtras)

+ (id)_mapkit_imageNamed:(id)arg1;
+ (id)_mapkit_imageNamed:(id)arg1 inBundle:(id)arg2;
+ (id)_mapkit_imageWithLoDPIData:(id)arg1 hiDPIData:(id)arg2;
+ (id)_mapkit_imageWithLoDPIImage:(struct CGImage { }*)arg1 hiDPIImage:(struct CGImage { }*)arg2;

- (id)_mapkit_horizontallyFlippedImage;
- (id)_mapkit_templateImageWithTintColor:(id)arg1;
- (id)initWithCGImage:(struct CGImage { }*)arg1;

// Image: /System/Library/Frameworks/QTKit.framework/Versions/A/QTKit

// NSImage (QTHUDImageCGLayer)

- (struct CGLayer { }*)QTHUD_CGLayerForProposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 context:(id)arg2 hints:(id)arg3;

// NSImage (QTHUDImageContent)

- (void*)QTHUD_contentForProposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 context:(id)arg2 hints:(id)arg3;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit

// NSImage (IKAdditions)

+ (id)IKNSImageAdditionalPossibleExtensions;

- (id)IKAnimatedRepresentation;
- (BOOL)IKFixDPI;
- (struct CGSize { double x1; double x2; })IKSize;
- (id)IK_GIFRepresentation;
- (id)IK_JPEGRepresentationWithCompressionFactor:(float)arg1;
- (id)IK_PNGRepresentationWithCompressionFactor:(float)arg1;
- (id)IK_TIFFRepresentationWithCompressionFactor:(float)arg1;
- (id)ikDetectedFaces;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })ikFaceRect;
- (id)ikSquareThumbnailOfSize:(double)arg1 scaleMode:(long long)arg2;
- (id)ikSquareThumbnailOfSize:(double)arg1 scaleMode:(long long)arg2 makeOpaque:(BOOL)arg3 ignoreBackingScaleFactor:(BOOL)arg4;

// NSImage (IKAdvancedScanner)

+ (id)ikImageNamed:(id)arg1;

// NSImage (IKPTImporterController_Extensions)

- (id)ik_fullResolutionFileURL;
- (void)setIk_fullResolutionFileURL:(id)arg1;

// NSImage (IKPictureTakerAdditions)

- (id)IKIPDataWithMaxSize:(double)arg1 type:(unsigned long long)arg2 compression:(double)arg3;
- (void)IKIPDrawNicelyScaledInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 operation:(unsigned long long)arg3 fraction:(float)arg4;
- (void)IKIPDrawNicelyScaledInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 operation:(unsigned long long)arg2 fraction:(float)arg3;
- (id)IKIPImageWithMaxSize:(int)arg1;
- (id)IKIPImageWithMaxSize:(int)arg1 withLeftPad:(int)arg2;
- (id)IKIPJPEGDataWithMaxSize:(double)arg1 compression:(float)arg2;
- (struct CGSize { double x1; double x2; })IKIPLargestRepSize;
- (id)IKIPPNGDataWithMaxSize:(double)arg1 compression:(double)arg2;

// NSImage (IKProfilePictureViewAdditions)

- (id)ikProfilePictureAttributedImageName;
- (void)setIkProfilePictureAttributedImageName:(id)arg1;

// NSImage (IKScan)

+ (id)ikImageNamed:(id)arg1;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer

// NSImage (QCSCN_Addition)

- (BOOL)QCSCN_FixDPI;
- (struct CGSize { double x1; double x2; })QCSCN_Size;

// Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI

// NSImage (QuickLookAdditions)

- (id)_ql_tintedImageWithColor:(id)arg1 withSize:(struct CGSize { double x1; double x2; })arg2 rescale:(BOOL)arg3;

// Image: /System/Library/Frameworks/SceneKit.framework/Versions/A/SceneKit

// NSImage (SCNAddition)

- (struct CGSize { double x1; double x2; })NSSize;
- (BOOL)SCNFixDPI;

// Image: /System/Library/Frameworks/SecurityInterface.framework/Versions/A/SecurityInterface

// NSImage (SFIconViewAdditions)

+ (id)applicationIcon;
+ (id)securityLockIcon;

// NSImage (SFResizableImages)

- (id)resizeTo:(double)arg1;

// NSImage (TintedImage)

- (id)tintedImageWithColor:(id)arg1 operation:(unsigned long long)arg2;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy

// NSImage (WebExtras)

- (void)_web_dissolveToFraction:(float)arg1;
- (void)_web_scaleToMaxSize:(struct CGSize { double x1; double x2; })arg1;

@end
