/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface NSTabViewItem : NSObject <NSCoding> {
    NSColor * __color;
    NSView * __initialFirstResponder;
    NSString * __label;
    id  _auxiliaryStorage;
    id  _identifier;
    struct CGSize { 
        double width; 
        double height; 
    }  _labelSize;
    NSView * _lastKeyView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _tabRect;
    unsigned long long  _tabState;
    long long  _tabToolTipTag;
    NSTabView * _tabView;
    struct __tviFlags { 
        unsigned int hasCustomColor : 1; 
        unsigned int labelSizeIsValid : 1; 
        unsigned int autoGeneratedIFR : 1; 
        unsigned int isTabDisabled : 1; 
        unsigned int isActive : 1; 
        unsigned int RESERVED : 27; 
    }  _tviFlags;
    NSView * _view;
}

@property (atomic, readwrite, copy) NSColor *_color;
@property (atomic, readwrite) NSView *_initialFirstResponder;
@property (atomic, readwrite, copy) NSString *_label;
@property (atomic, readwrite, retain) NSView *_view;
@property (atomic, readwrite, copy) NSColor *color;
@property (atomic, readwrite, retain) id identifier;
@property (atomic, readwrite, retain) NSImage *image;
@property (atomic, readwrite) NSView *initialFirstResponder;
@property (atomic, readwrite, copy) NSString *label;
@property (atomic, readonly) unsigned long long tabState;
@property (atomic, readonly) NSTabView *tabView;
@property (atomic, readwrite, copy) NSString *toolTip;
@property (atomic, readwrite, retain) NSView *view;
@property (atomic, readwrite, retain) NSViewController *viewController;

+ (id)_labelCell;
+ (id)tabViewItemWithViewController:(id)arg1;

- (void).cxx_destruct;
- (long long)_addToolTipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_allocAuxiliaryStorage;
- (BOOL)_canAutoGenerateKeyboardLoops;
- (void)_clearInitialFirstResponderAndLastKeyViewIfAutoGenerated;
- (id)_color;
- (void)_commonInit;
- (struct CGSize { double x1; double x2; })_computeDisplayedSizeOfString:(id)arg1;
- (id)_computeMinimumDisplayedLabelForWidth:(double)arg1;
- (struct CGSize { double x1; double x2; })_computeMinimumDisplayedLabelSize;
- (struct CGSize { double x1; double x2; })_computeNominalDisplayedLabelSize;
- (void)_deallocAuxiliaryStorage;
- (void)_drawKeyViewOutline:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawOrientedLabel:(BOOL)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_finishedWiringNibConnections;
- (id)_fullLabel;
- (BOOL)_hasCustomColor;
- (id)_initialFirstResponder;
- (BOOL)_initialFirstResponderIsAutoGenerated;
- (void)_invalidLabelSize;
- (BOOL)_isReallyPressed;
- (BOOL)_isTabEnabled;
- (id)_label;
- (id)_labelColor;
- (id)_lastKeyView;
- (void)_old_encodeWithCoder_NSTabViewItem:(id)arg1;
- (void)_old_initWithCoder_NSTabViewItem:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfPrefixOfString:(id)arg1 fittingWidth:(double)arg2 withFont:(id)arg3;
- (void)_removeToolTip;
- (void)_resetToolTipIfNecessary;
- (BOOL)_rotateCoordsForDrawLabelInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setActive:(BOOL)arg1;
- (void)_setAutoGeneratedInitialFirstResponder:(id)arg1;
- (void)_setDefaultKeyViewLoopAndInitialFirstResponder;
- (void)_setInitialFirstResponder:(id)arg1 autoGenerated:(BOOL)arg2;
- (void)_setSpringLoadingHighlight:(long long)arg1;
- (void)_setTabEnabled:(BOOL)arg1;
- (void)_setTabRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setTabState:(unsigned long long)arg1;
- (void)_setTabView:(id)arg1;
- (long long)_springLoadingHighlight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_tabRect;
- (void)_tabViewWillRemoveFromSuperview;
- (void)_updateWithViewController:(id)arg1;
- (void)_validateViewIsInViewHeirarchy:(id*)arg1;
- (id)_view;
- (id)alternateImage;
- (id)color;
- (void)dealloc;
- (id)description;
- (void)drawLabel:(BOOL)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)identifier;
- (id)image;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)initialFirstResponder;
- (long long)interiorBackgroundStyle;
- (id)label;
- (id)menu;
- (void)setAlternateImage:(id)arg1;
- (void)setColor:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setInitialFirstResponder:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setMenu:(id)arg1;
- (void)setToolTip:(id)arg1;
- (void)setView:(id)arg1;
- (void)setViewController:(id)arg1;
- (void)set_color:(id)arg1;
- (void)set_initialFirstResponder:(id)arg1;
- (void)set_label:(id)arg1;
- (void)set_view:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeOfLabel:(BOOL)arg1;
- (unsigned long long)tabState;
- (id)tabView;
- (id)toolTip;
- (id)view;
- (id)viewController;

// NSTabViewItem (NSTabViewItemAccessibility)

- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityEnabledAttribute;
- (id)accessibilityFocusedAttribute;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHelpAttribute;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (BOOL)accessibilityIsEnabledAttributeSettable;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (BOOL)accessibilityIsHelpAttributeSettable;
- (BOOL)accessibilityIsIgnored;
- (BOOL)accessibilityIsParentAttributeSettable;
- (BOOL)accessibilityIsPositionAttributeSettable;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (BOOL)accessibilityIsSizeAttributeSettable;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (BOOL)accessibilityIsTopLevelUIElementAttributeSettable;
- (BOOL)accessibilityIsValueAttributeSettable;
- (BOOL)accessibilityIsWindowAttributeSettable;
- (id)accessibilityParentAttribute;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityPositionAttribute;
- (id)accessibilityRoleAttribute;
- (id)accessibilityRoleDescriptionAttribute;
- (void)accessibilitySetFocusedAttribute:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (id)accessibilitySizeAttribute;
- (id)accessibilitySubroleAttribute;
- (id)accessibilityTitleAttribute;
- (id)accessibilityTopLevelUIElementAttribute;
- (id)accessibilityValueAttribute;
- (id)accessibilityWindowAttribute;

@end
