/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
 */

@interface _NSCGSWindowBackingStore : NSCGSWindowBackingStore {
    unsigned int  _attached;
    NSCGSWindowBuffer * _backBuffer;
    unsigned long long  _backBufferByteCount;
    void * _backBufferBytes;
    struct CGSRegionObject { } * _backBufferDefinedShape;
    struct CGSRegionObject { } * _backBufferDirtyShape;
    struct CGSRegionObject { } * _backBufferFlushShape;
    unsigned int  _backBufferIsPurgeable;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _backBufferMutex;
    NSObject<OS_dispatch_source> * _backBufferPurgeableTimer;
    unsigned int  _backBufferPurgeableTimerIsArmed;
    struct CGColorSpace { } * _colorSpace;
    unsigned int  _depth;
    void * _deviceID;
    unsigned char  _flags;
    unsigned int  _flushOnUnlock;
    unsigned int  _keepsExcessAllocation;
    unsigned int  _opaque;
    double  _scale;
    unsigned int  _windowID;
    struct CGColorSpace { } * _workingColorSpace;
    unsigned int  _workingDepth;
}

- (id)backBuffer;
- (struct CGColorSpace { }*)colorSpace;
- (void)dealloc;
- (void)defineBackBufferInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)defineBackBufferInRegion:(struct CGSRegionObject { }*)arg1;
- (unsigned int)depth;
- (void)dirtyBackBufferInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dirtyBackBufferInRegion:(struct CGSRegionObject { }*)arg1;
- (void)flushBackBufferInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)flushBackBufferInRegion:(struct CGSRegionObject { }*)arg1;
- (struct CGImage { }*)imageInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithWindowID:(unsigned int)arg1;
- (void)invalidateAlphaShape;
- (BOOL)isAttached;
- (BOOL)isOpaque;
- (BOOL)keepsExcessAllocation;
- (void)lockBackBuffer;
- (struct CGContext { }*)makeDrawingContext;
- (double)scale;
- (void)setAttached:(BOOL)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setDepth:(unsigned int)arg1;
- (void)setKeepsExcessAllocation:(BOOL)arg1;
- (void)setOpaque:(BOOL)arg1;
- (void)setScale:(double)arg1;
- (void)setWorkingColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setWorkingDepth:(unsigned int)arg1;
- (struct CGSize { double x1; double x2; })size;
- (void)unlockBackBuffer;
- (struct CGColorSpace { }*)workingColorSpace;
- (unsigned int)workingDepth;

@end
