/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ViewBridge.framework/Versions/A/ViewBridge
 */

@interface NSServiceViewController : NSViewController {
    NSServiceViewControllerAuxiliary * _aux;
}

@property (atomic, readonly) BOOL adjustLayoutInProgress;
@property (atomic, readonly) BOOL allowsImplicitResizeRequests;
@property (atomic, readonly) BOOL allowsWindowFrameOriginChanges;
@property (atomic, readonly) NSViewServiceBridge *bridge;
@property (atomic, readonly) unsigned int callsToSetViewCount;
@property (atomic, readonly) unsigned int hostSDKVersion;
@property (atomic, readonly) BOOL makesExplicitResizeRequests;
@property (atomic, readwrite) NSViewServiceMarshal *marshal;
@property (atomic, readonly) BOOL mostRecentCallToSetViewWasNonNil;
@property (atomic, readonly) NSString *remoteViewIdentifier;
@property (atomic, readonly) struct CGSize { double x1; double x2; } remoteViewSize;
@property (atomic, readonly) NSWindow *serviceWindow;
@property (atomic, readonly) struct CGSize { double x1; double x2; } sizeHint;
@property (atomic, readonly) BOOL valid;

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (BOOL)currentAppIsViewService;
+ (void)deferBlockOntoMainThread:(id)arg1;
+ (id)hostAppDescription:(int)arg1;
+ (id)listenerEndpoint;
+ (struct __CFString { }*)privateRunLoopMode;
+ (id)serviceBundle;
+ (id)serviceViewControllerForWindow:(id)arg1;
+ (BOOL)setAccessibilityParent:(long long)arg1 forWindow:(id)arg2;
+ (void)withHostProcessIdentifier:(int)arg1 invoke:(id)arg2;

- (void)_animateLayout:(id)arg1 forWindow:(id)arg2 withNewFittingSize:(struct CGSize { double x1; double x2; })arg3 completion:(id)arg4;
- (void)_didAssociateWithHostWindow;
- (void)_didDisassociateFromHostWindow;
- (void)_endPrivateEventLoop;
- (BOOL)_explicitSizeRequestInhibitsImplicitSizeRequests;
- (void)_invalidateRendezvousWindowControllers;
- (id)_requestResize:(struct CGSize { double x1; double x2; })arg1 hostShouldAnimate:(BOOL)arg2 animation:(id)arg3 completion:(id)arg4;
- (void)_retainMarshal;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_serviceWindowFrameForRemoteViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setHostSDKVersion:(unsigned int)arg1;
- (BOOL)_shouldNormalizeAppearance;
- (void)_windowFrameDidChange;
- (void)_windowFrameWillChange;
- (unsigned long long)acceptableStyleMask;
- (void)adjustLayout:(id)arg1 animation:(id)arg2 completion:(id)arg3;
- (BOOL)adjustLayoutInProgress;
- (void)advanceToRunPhase;
- (BOOL)allowsImplicitResizeRequests;
- (BOOL)allowsWindowFrameOriginChanges;
- (void)associateMouseAndMouseCursorPosition:(BOOL)arg1 completion:(id)arg2;
- (unsigned long long)awakeFromRemoteView;
- (id)bridge;
- (unsigned int)callsToSetViewCount;
- (void)childWindowDidInvalidate:(id)arg1 dueToError:(id)arg2;
- (void)dealloc;
- (void)deallocOnAppKitThread;
- (void)defaultResizeBehavior;
- (void)deferBlockOntoMainThread:(id)arg1;
- (void)errorOccurred:(id)arg1;
- (id)exportedInterface;
- (id)exportedObject;
- (unsigned long long)filterStyleMask:(unsigned long long)arg1;
- (void)forgetAccessoryView;
- (unsigned int)hostSDKVersion;
- (void)hostWindowReceivedEventType:(unsigned long long)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithWindow:(id)arg1;
- (BOOL)invalid;
- (void)invalidate;
- (BOOL)isLayerCentric;
- (id)leastRecentError;
- (BOOL)makesExplicitResizeRequests;
- (id)marshal;
- (BOOL)mostRecentCallToSetViewWasNonNil;
- (id)nibBundle;
- (id)nibName;
- (id)remoteViewControllerInterface;
- (id)remoteViewControllerProxy;
- (id)remoteViewControllerProxyWithErrorHandler:(id)arg1;
- (id)remoteViewIdentifier;
- (struct CGSize { double x1; double x2; })remoteViewSize;
- (BOOL)remoteViewSizeChanged:(struct CGSize { double x1; double x2; })arg1 transaction:(id)arg2;
- (BOOL)remoteViewSizeChanged:(struct CGSize { double x1; double x2; })arg1 transactions:(id)arg2;
- (id)requestResize:(struct CGSize { double x1; double x2; })arg1 animation:(id)arg2 completion:(id)arg3;
- (BOOL)respondsToAction:(SEL)arg1 forTarget:(id)arg2;
- (void)retreatToConfigPhase;
- (id)serviceWindow;
- (void)setAccessoryViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMarshal:(id)arg1;
- (void)setView:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeHint;
- (BOOL)valid;
- (void)whileMouseIsDisassociatedFromMouseCursorPosition:(id)arg1;
- (void)withHostContextInvoke:(id)arg1;

// NSServiceViewController (Introspector)

+ (unsigned int)_windowForContextID:(unsigned int)arg1 fromViewService:(int)arg2 error:(id*)arg3;

// NSServiceViewController (QuickLook)

+ (unsigned int)declinedEventMask;

- (unsigned int)declinedEventMask;

@end
