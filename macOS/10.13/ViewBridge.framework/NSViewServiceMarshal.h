/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ViewBridge.framework/Versions/A/ViewBridge
 */

@interface NSViewServiceMarshal : NSView <AuxiliaryCallsService, NSVBXPCConnectionClient, NSViewServiceMarshal, NSXPCConnectionDelegate, NSXPCListenerDelegate> {
    NSDictionary * _accessoryAccessibilityChildren;
    unsigned int  _accessoryViewContainsFirstResponder;
    <NSObject> * _activity;
    struct NSEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _alignmentRectInsets;
    NSString * _appearanceName;
    NSXPCConnection * _auxiliaryServiceConnection;
    NSViewBridge * _bridge;
    unsigned char  _bridgePhase;
    NSXPCInterface * _clientExportedInterface;
    NSVB_ViewServiceBehaviorProxy * _clientExportedObject;
    unsigned int  _didOverrideStyleMask;
    unsigned int  _didSetView;
    NSColor * _fontSmoothingBackgroundColor;
    unsigned int  _hadAccessibilityParent;
    unsigned int  _hasActivatedTSM;
    NSAccessibilityRemoteUIElement * _hostAccessibilityParent;
    unsigned int  _hostWindow;
    unsigned int  _hostWindowIsFunctionRow;
    unsigned int  _hostWindowIsKey;
    unsigned int  _hostWindowKeynessChangeInProgress;
    id  _hostWindowKeynessReactionPending;
    unsigned int  _invalid;
    NSLayoutConstraint * _layoutConstraintHeight;
    NSLayoutConstraint * _layoutConstraintWidth;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _mostRecentlyReportedAccessoryViewFrame;
    struct CGSize { 
        double width; 
        double height; 
    }  _mostRecentlyReportedContentMaxSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _mostRecentlyReportedContentMinSize;
    unsigned int  _mostRecentlyReportedWindowContextID;
    NSArray * _mostRecentlySentTouchBarsDescription;
    unsigned int  _notificationsRegistered;
    unsigned int  _remoteAccessoryViewCanBecomeKeyView;
    unsigned int  _remoteFirstResponderChangeInProgress;
    double  _remoteViewBackingScaleFactor;
    NSProxy<NSXPCProxyCreating> * _remoteViewControllerProxy;
    unsigned int  _remoteViewDidMoveInProgress;
    id  _remoteViewFirstResponderReactionPending;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _remoteViewFrameInScreenCoords;
    unsigned int  _remoteViewGeometryChangeInProgress;
    NSString * _remoteViewIdentifier;
    unsigned int  _remoteViewIsContentView;
    unsigned int  _remoteViewIsFirstResponder;
    NSXPCConnection * _remoteViewMarshalConnection;
    unsigned long long  _reportControllerWindow;
    unsigned int  _reportedLackOfAccessibilityParent;
    unsigned int  _resizeRequestCompletionInProgress;
    unsigned long long  _serviceFlags;
    unsigned int  _setStyleMaskInProgress;
    unsigned int  _shouldReportConstraintsOfWindowMinMaxSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _sizeHint;
    unsigned long long  _styleMask;
    NSResponder * _suspendedFirstResponder;
    NSCFRunLoopObserver * _touchBarsObserver;
    unsigned int  _transactionBegun;
    NSVB_ViewServiceBehaviorProxy * _uiBehaviorProxy;
    NSServiceViewController * _viewController;
    struct CGSRegionObject { } * _visibleRegion;
    unsigned int  _willReportConstraintsOfWindowMinMaxSize;
    unsigned int  _willUpdateAccessibilityChildren;
    struct CGSRegionObject { } * _windowResizingRegion;
}

@property (atomic, readonly) NSString *_debuggingHint;
@property (atomic, readwrite, retain) NSDictionary *accessoryAccessibilityChildren;
@property (atomic, readonly) struct NSEdgeInsets { double x1; double x2; double x3; double x4; } alignmentRectInsets;
@property (atomic, readonly) NSString *appearanceName;
@property (atomic, readonly) NSViewBridge *bridge;
@property (atomic, readwrite) unsigned char bridgePhase;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite) BOOL hadAccessibilityParent;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite, retain) NSAccessibilityRemoteUIElement *hostAccessibilityParent;
@property (atomic, readonly) unsigned int hostWindow;
@property (atomic, readonly) BOOL hostWindowIsFunctionRow;
@property (atomic, readonly) BOOL invalid;
@property (atomic, readonly) BOOL isAssociatedWithRemoteWindow;
@property (atomic, readonly) BOOL isValid;
@property (atomic, readwrite, retain) NSArray *mostRecentlySentTouchBarsDescription;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } remoteViewFrameInScreenCoords;
@property (atomic, readonly) NSString *remoteViewIdentifier;
@property (atomic, readonly) BOOL remoteViewIsContentView;
@property (atomic, readonly) struct CGSize { double x1; double x2; } remoteViewSize;
@property (atomic, readwrite) BOOL reportedLackOfAccessibilityParent;
@property (atomic, readonly) unsigned long long serviceFlags;
@property (atomic, readonly) struct CGSize { double x1; double x2; } sizeHint;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite, retain) NSVB_ViewServiceBehaviorProxy *uiBehaviorProxy;
@property (atomic, readonly) NSServiceViewController *viewController;

+ (id)_findFirstKeyViewInDirection:(unsigned long long)arg1 forKeyLoopGroupingView:(id)arg2;
+ (BOOL)allowSetObjectForKey:(id)arg1 bridge:(id)arg2 bridgePhase:(unsigned char)arg3 withReply:(id)arg4;
+ (void)choseNotToPromote:(id)arg1 because:(const char *)arg2;
+ (BOOL)considerWindowForPromotionToRendezvousChild:(id)arg1;
+ (void)demoteWindowFromRendezvousChild:(id)arg1;
+ (void)informHostsOfConnectionToService:(int)arg1;
+ (void)logIfFirstRepsonderOf:(id)arg1 isNot:(id)arg2;
+ (long long)parentWindowNumber:(id)arg1;
+ (id)rendezvousParent:(id)arg1;
+ (BOOL)responder:(id)arg1 isFieldEditorFor:(id)arg2;
+ (id)serviceMarshalForAppModalSession;
+ (id)serviceMarshalForAppModalSessionExcluding:(id)arg1;
+ (id)serviceMarshalForHostWindow:(unsigned int)arg1;
+ (id)serviceMarshalForRemoteViewIdentifier:(id)arg1;
+ (id)serviceMarshalForServiceWindow:(id)arg1;
+ (id)serviceMarshalForTouchBarChanges;
+ (BOOL)serviceWindowWouldActivate:(id)arg1;
+ (BOOL)window:(id)arg1 wouldBeGoodParentTo:(id)arg2;
+ (BOOL)window:(id)arg1 wouldLoopIfMadeChildOf:(id)arg2;
+ (BOOL)windowClassBlacklistedForPromotionToRendezvousChild:(id)arg1;
+ (BOOL)windowClassWhitelistedForPromotionToRendezvousChild:(id)arg1;
+ (void)windowDidOrderOnScreenAndFinishAnimating:(id)arg1;
+ (BOOL)windowWasPromotedToRendezvousChild:(id)arg1;

- (id)_bootstrap:(struct { double x1; id x2; id x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; BOOL x5; BOOL x6; BOOL x7; id x8; id x9; BOOL x10; })arg1 replyData:(/* Warning: unhandled struct encoding: '{?=I{CGSize=dd}{CGSize=dd}QQ{CGSize=dd}{CGSize=dd}I{CGPoint=dd}@}' */ struct { unsigned int x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; unsigned long long x4; unsigned long long x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; struct CGSize { double x_7_1_1; double x_7_1_2; } x7; unsigned int x8; struct CGPoint { double x_9_1_1; double x_9_1_2; } x9; id x10; }*)arg2;
- (id)_debuggingHint;
- (BOOL)_ignoreBadFirstResponders;
- (void)_invokeBlockOnCurrentFenceIfAny:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_remoteViewGeometryDidChange:(id)arg1 serviceWindowSize:(struct CGSize { double x1; double x2; }*)arg2;
- (void)_runCommandEquivalentEventLoop;
- (void)_serviceWindowDidBecomeKey:(id)arg1;
- (void)_serviceWindowDidResignKey:(id)arg1;
- (void)_serviceWindowDidResize:(id)arg1;
- (void)_willBecomeAssociatedWithHostWindow:(unsigned int)arg1 atLevel:(long long)arg2 isFunctionRow:(BOOL)arg3;
- (id)accessibilityTokenForFocusedUIElement;
- (void)accessibilityTokenForFocusedUIElement:(id)arg1;
- (id)accessoryAccessibilityChildren;
- (BOOL)accessoryViewCanBecomeKeyView;
- (id)accessoryViewForWindow:(id)arg1;
- (void)accessoryViewFrameMayHaveChanged:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 relativeToWindow:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessoryViewFrameRelativeToWindow:(id)arg1;
- (void)acquireKeyAppearanceBecauseHostWindow:(const char *)arg1;
- (void)acquireKeyFocus:(const char *)arg1;
- (BOOL)activateTSM:(const char *)arg1;
- (void)actualFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 differsFromSpecifiedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 oldFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 ofWindow:(id)arg4;
- (void)addChildWindow:(id)arg1 ordered:(long long)arg2 toParent:(id)arg3;
- (void)adjustWindowContext;
- (BOOL)advanceToRunPhase;
- (void)advanceToRunPhase:(id)arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (void)allowAppNap:(BOOL)arg1;
- (id)appearanceName;
- (void)associateMouseAndMouseCursorPosition:(BOOL)arg1 completion:(id)arg2;
- (struct { unsigned int x1[8]; })auditToken;
- (double)backingScaleFactor:(id)arg1;
- (void)becomeKeyBecause:(const char *)arg1;
- (void)beginHostModalSession:(id)arg1 title:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3 withReply:(id)arg4;
- (BOOL)beginRemoteSheet:(id)arg1 isCritical:(BOOL)arg2;
- (void)bootstrap:(struct { double x1; id x2; id x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; BOOL x5; BOOL x6; BOOL x7; id x8; id x9; BOOL x10; })arg1 withReply:(id)arg2;
- (id)bridge;
- (unsigned char)bridgePhase;
- (BOOL)canBecomeKeyView;
- (BOOL)cancelActionHitRemoteView;
- (void)cancelActionHitRemoteView:(id)arg1;
- (void)completeWithError:(id)arg1 andRequestedSize:(struct CGSize { double x1; double x2; })arg2 withRemoteViewSize:(struct CGSize { double x1; double x2; })arg3 andWindow:(id)arg4;
- (void)connectToAuxiliaryService:(id)arg1 window:(unsigned int)arg2;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(BOOL)arg3;
- (void)constrainContentViewSize:(struct CGSize { double x1; double x2; })arg1 ofWindow:(id)arg2;
- (BOOL)deactivateTSM:(const char *)arg1;
- (void)dealloc;
- (void)deallocOnAppKitThread;
- (void)defaultResizeBehavior;
- (void)defaultResizeBehaviorBeforeFuji;
- (void)didBecomeAssociatedWithHostWindow:(unsigned int)arg1 withKeyness:(BOOL)arg2 isFirstResponder:(BOOL)arg3 inActiveApp:(BOOL)arg4;
- (void)didSetView;
- (void)discloseAccessoryView:(BOOL)arg1 andAnimationState:(int)arg2 andDuration:(double)arg3;
- (void)disengageFromAllWindows;
- (BOOL)dragWindow:(id)arg1 relativeToMouseDown:(struct CGPoint { double x1; double x2; })arg2;
- (void)endHostModalSession:(id)arg1;
- (void)endPrivateEventLoop;
- (BOOL)ensureClientExportedInterface;
- (BOOL)ensureClientExportedObject;
- (BOOL)ensureWindowHasCorrectOrigin:(id)arg1;
- (BOOL)eventResizingRegionContainsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)exchangeAccessibilityTokens:(id)arg1 enhancedUserInterface:(id)arg2;
- (void)exchangeAccessibilityTokens:(id)arg1 enhancedUserInterface:(id)arg2 withReply:(id)arg3;
- (void)failedImplicitResize:(struct CGSize { double x1; double x2; })arg1 ofWindow:(id)arg2 withError:(id)arg3;
- (id)fakeMenuItemForTarget:(id)arg1 withAction:(SEL)arg2;
- (/* Warning: unhandled struct encoding: '{?=@:@}' */ struct { id x1; id x2; })findTargetAndAction:(id)arg1;
- (void)forgetAccessoryView;
- (void)forgetConstraints;
- (void)forgetViewController:(id)arg1;
- (void)forwardActionUpHostResponderChain:(SEL)arg1;
- (void)forwardPotentialCommandEquivalentToAuxService:(id)arg1 eventDeliveredByAppKit:(BOOL)arg2 reply:(id)arg3;
- (BOOL)hadAccessibilityParent;
- (void)handlePotentialCommandEquivalent:(id)arg1 eventOwner:(unsigned int)arg2 reply:(id)arg3;
- (BOOL)hasRendezvousChildController:(id)arg1;
- (void)hasTouchBars:(id)arg1;
- (void)hideTouchBarPopover:(id)arg1;
- (void)hierarchyDidChangeInView:(id)arg1;
- (id)hostAccessibilityParent;
- (void)hostAppIsActive:(BOOL)arg1 withApparentKeyWindow:(id)arg2;
- (unsigned int)hostWindow;
- (void)hostWindowBecameKeyInActiveApp:(BOOL)arg1 firstResponderState:(unsigned char)arg2 isContentView:(BOOL)arg3;
- (void)hostWindowChangedKeyness:(id)arg1;
- (BOOL)hostWindowIsFunctionRow;
- (BOOL)hostWindowIsKey:(id)arg1;
- (void)hostWindowLevelDidChange:(long long)arg1;
- (void)hostWindowReceivedEventType:(unsigned long long)arg1;
- (void)hostWindowReceivedMouseEventType:(unsigned long long)arg1;
- (void)hostWindowResignedKey:(BOOL)arg1;
- (void)hostWindowResignedKeyFocus:(BOOL)arg1 inActiveApp:(BOOL)arg2 isContentView:(BOOL)arg3;
- (void)implicitResize:(struct CGSize { double x1; double x2; })arg1 ofWindow:(id)arg2;
- (void)informHostOfChangeToFirstResponder:(id)arg1 forWindow:(id)arg2 inDirection:(unsigned long long)arg3;
- (void)informHostOfConnectionToService:(int)arg1;
- (id)initWithConnection:(id)arg1;
- (BOOL)invalid;
- (void)invalidate;
- (void)invalidateAccessoryView;
- (void)invalidateAndReleaseConnectionOnMainThread;
- (void)invokeBlockOnCurrentFenceIfAny:(id)arg1;
- (BOOL)isAssociatedWithRemoteWindow;
- (BOOL)isValid;
- (void)maintainNotificationsForWindow:(BOOL)arg1;
- (BOOL)makeFirstResponder:(id)arg1 ofWindow:(id)arg2;
- (id)mostRecentlySentTouchBarsDescription;
- (void)observeValueForAccessoryView:(id)arg1;
- (void)observeValueForContentMaxSize:(id)arg1;
- (void)observeValueForContentMinSize:(id)arg1;
- (void)observeValueForContentView:(id)arg1;
- (void)observeValueForFirstResponder:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)observeValueForWindow:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)obtainFirstResponderState:(id)arg1;
- (BOOL)orderWindow:(id)arg1 mode:(long long)arg2 relativeTo:(long long)arg3;
- (id)orderedDrawerAndWindowKeyLoopGroupingViews:(id)arg1;
- (void)orderingWindow:(id)arg1;
- (void)performAction:(id)arg1 forTarget:(id)arg2;
- (void)prepareToHandleKeyEvent:(id)arg1;
- (void)prepareWindow:(id)arg1;
- (int)processIdentifier;
- (void)refreshAccessoryViewBitmap:(id)arg1;
- (void)refreshAccessoryViewBitmap:(id)arg1 completion:(id)arg2;
- (void)registerBridgeKey:(id)arg1 defaultObject:(id)arg2 owner:(unsigned char)arg3;
- (oneway void)release;
- (void)releaseKeyFocus:(const char *)arg1;
- (void)remoteViewBackingScaleFactorDidChange:(double)arg1;
- (void)remoteViewBecameFirstResponder:(unsigned long long)arg1 forWindowWithKey:(BOOL)arg2 inActiveApp:(BOOL)arg3 inVisibleWindow:(BOOL)arg4 reply:(id)arg5;
- (unsigned char)remoteViewBecameFirstResponder:(unsigned long long)arg1 ignoreDirection:(BOOL)arg2 forWindowWithKey:(BOOL)arg3 inVisibleWindow:(BOOL)arg4;
- (void)remoteViewCaresAboutTouchBars:(BOOL)arg1;
- (void)remoteViewChangedFirstResponder:(id)arg1;
- (void)remoteViewContainingWindowOcclusionStateDidChange:(unsigned long long)arg1;
- (id)remoteViewControllerProxyWithErrorHandler:(id)arg1;
- (void)remoteViewDidChangeState:(unsigned char)arg1 ofPopoverBar:(id)arg2 forItem:(id)arg3;
- (void)remoteViewDidEndLiveResize;
- (void)remoteViewDidMove:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })remoteViewFrameInScreenCoords;
- (void)remoteViewGeometryDidChange:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 transactions:(id)arg2 withReply:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })remoteViewGeometryDidChangeInProgress:(id)arg1 serviceWindowSize:(struct CGSize { double x1; double x2; }*)arg2;
- (id)remoteViewIdentifier;
- (BOOL)remoteViewIsContentView;
- (void)remoteViewIsContentView:(BOOL)arg1;
- (id)remoteViewMarshal:(const char *)arg1;
- (id)remoteViewMarshal:(const char *)arg1 withErrorHandler:(id)arg2;
- (void)remoteViewReceivedLeftMouseDown;
- (void)remoteViewResignedFirstResponderInActiveApp:(BOOL)arg1 inFavorOf:(unsigned char)arg2;
- (void)remoteViewResignedFirstResponderInFavorOfAccessoryView:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })remoteViewSize;
- (void)remoteViewWillStartLiveResizeWithReply:(id)arg1;
- (void)removeChildWindow:(id)arg1;
- (BOOL)reportedLackOfAccessibilityParent;
- (void)reportingControllerWindow:(id)arg1;
- (void)requestResize:(struct CGSize { double x1; double x2; })arg1 transaction:(id)arg2 animate:(BOOL)arg3 completion:(id)arg4;
- (void)resignFirstResponderIfNecessary;
- (BOOL)responder:(id)arg1 isAccessoryViewOf:(id)arg2;
- (void)retreatToConfigPhase;
- (void)runCommandEquivalentEventLoop;
- (id)semaphoreForViewBridgePrivateMode;
- (BOOL)sendEvent:(id)arg1 to:(id)arg2;
- (void)sendMinMaxWindowSizesToHostIfNeeded:(id)arg1;
- (void)sendMinMaxWindowSizesToHostIfNeeded:(id)arg1 now:(BOOL)arg2;
- (void)serviceAccessoryViewBecameFirstResponder:(BOOL)arg1;
- (unsigned long long)serviceFlags;
- (void)serviceViewControllerProxy:(id)arg1;
- (void)serviceWindowDidBecomeKey;
- (void)serviceWindowDidResignKey;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })serviceWindowFrameForRemoteViewFrame;
- (void)serviceWindowWouldActivate;
- (void)setAccessibilityParent:(id)arg1;
- (void)setAccessoryAccessibilityChildren:(id)arg1;
- (void)setAccessoryViewSize:(struct CGSize { double x1; double x2; })arg1 alignmentRectInsets:(struct NSEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)setAppearance:(id)arg1 withReply:(id)arg2;
- (void)setAppearanceBasedOnCachedName:(id)arg1;
- (void)setBridgePhase:(unsigned char)arg1;
- (void)setEnhancedUserInterfaceAttribute:(id)arg1;
- (void)setEventMaskBasedOnWindow:(id)arg1;
- (unsigned char)setFirstResponderForRemoteView:(unsigned long long)arg1;
- (void)setFontSmoothingBackgroundColor:(id)arg1;
- (void)setFontSmoothingBackgroundColorIfNeeded;
- (void)setFontSmoothingBackgroundColorIfNeeded:(id)arg1;
- (void)setHadAccessibilityParent:(BOOL)arg1;
- (void)setHostAccessibilityParent:(id)arg1;
- (void)setHostTouchBar:(id)arg1 description:(id)arg2;
- (void)setHostTouchBar:(id)arg1 escapeKeyReplacementItem:(id)arg2;
- (void)setHostTouchBar:(id)arg1 principalItemIdentifier:(id)arg2;
- (void)setHostTouchBarItem:(id)arg1 itemPosition:(id)arg2;
- (void)setMostRecentlySentTouchBarsDescription:(id)arg1;
- (void)setRemoteAccessoryViewCanBecomeKeyView:(BOOL)arg1;
- (void)setRemoteObject:(id)arg1 forKey:(id)arg2;
- (void)setRemoteViewFrameInScreenCoords:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setReportedLackOfAccessibilityParent:(BOOL)arg1;
- (void)setServiceObject:(id)arg1 forKey:(id)arg2 withReply:(id)arg3;
- (void)setUiBehaviorProxy:(id)arg1;
- (BOOL)setWindow:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 display:(BOOL)arg3 stashSize:(BOOL)arg4;
- (void)setWindow:(id)arg1 styleMask:(unsigned long long)arg2;
- (void)shakeWindow:(id)arg1;
- (BOOL)shouldAllowAnimationForDefaultResizeBehavior;
- (BOOL)shouldDrawSubviewsIntoLayer;
- (void)showTouchBarPopover:(id)arg1 fromItem:(id)arg2 withOverlayIdentifier:(id)arg3 withCloseButton:(BOOL)arg4 withControlStrip:(BOOL)arg5 withOptions:(id)arg6;
- (struct CGSize { double x1; double x2; })sizeHint;
- (void)snapshot:(id)arg1;
- (BOOL)stopCommandEquivalentEventLoop;
- (void)subvertedWindowMovedEvent:(id)arg1 forWindow:(id)arg2;
- (void)thwartingSetOrigin:(struct CGPoint { double x1; double x2; })arg1 ofWindow:(id)arg2;
- (id)uiBehaviorProxy;
- (id)updateAccessoryViewAccessibility:(id)arg1;
- (id)updateAccessoryViewAccessibility:(id)arg1 enhancedUserInterface:(id)arg2;
- (void)updateAccessoryViewAccessibility:(id)arg1 enhancedUserInterface:(id)arg2 withReply:(id)arg3;
- (void)validateAction:(id)arg1 withReply:(id)arg2;
- (BOOL)validateTargetAndAction:(/* Warning: unhandled struct encoding: '{?=@:@}' */ struct { id x1; id x2; }*)arg1 validateMenuItem:(struct { BOOL x1; BOOL x2; }*)arg2 validateUserInterfaceItem:(struct { BOOL x1; BOOL x2; }*)arg3;
- (id)viewBridgeAuxiliaryProxy;
- (id)viewBridgeAuxiliaryProxyWithErrorHandler:(id)arg1;
- (id)viewController;
- (id)viewControllerWindow;
- (void)whileFilteringResponderChain:(id)arg1;
- (void)willBecomeAssociatedWithHostWindow:(unsigned int)arg1 atLevel:(long long)arg2 isFunctionRow:(BOOL)arg3;
- (void)willNotRequestResize:(struct CGSize { double x1; double x2; })arg1 ofWindow:(id)arg2 because:(const char *)arg3;
- (id)window;
- (void)windowForContextID:(unsigned int)arg1 reply:(id)arg2;
- (void)windowReceivedLeftMouseDown:(id)arg1;
- (void)windowReceivedScrollWheel:(id)arg1;
- (void)wrap:(id)arg1 sendEvent:(id)arg2;
- (void)wrap:(id)arg1 swizzledSetFrameCommon:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 display:(BOOL)arg3 stashSize:(BOOL)arg4;

// NSViewServiceMarshal (NSTouchBar)

- (void)_remoteViewDidChangeState:(unsigned char)arg1 ofPopoverBar:(id)arg2 forItem:(id)arg3;

@end
