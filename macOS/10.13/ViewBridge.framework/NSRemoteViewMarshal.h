/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ViewBridge.framework/Versions/A/ViewBridge
 */

@interface NSRemoteViewMarshal : NSObject <NSRemoteViewMarshal, NSVBDeallocOnAppKitThread, NSVBRedactedProtocol> {
    NSAccessibilityRemoteUIElement * _accessoryViewAccessibilityParent;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _accessoryViewFrame;
    NSVBAccessoryWindow * _accessoryWindow;
    struct _NSModalSession { } * _appModalSession;
    int  _appNapState;
    unsigned int  _associated;
    NSXPCConnection * _auxiliaryServiceConnection;
    unsigned int  _avoidReleasingClientExportedObject;
    unsigned int  _beganSheet;
    NSViewRemoteBridge * _bridge;
    unsigned char  _bridgePhase;
    NSMutableArray * _childWindowQueue;
    NSXPCInterface * _clientExportedInterface;
    NSObject * _clientExportedObject;
    unsigned int  _connectionConfiguredWithServiceViewControllerClientInterface;
    unsigned long long  _containingWindowNotifications;
    NSMutableArray * _deferredSheets;
    struct NSObject { Class x1; } * _delegate;
    unsigned int  _disabledSuddenTermination;
    NSFakeServiceResponder * _fakeServiceResponder;
    unsigned int  _fencingCurrentTransaction;
    NSMutableSet * _friendlyKeyFocusThieves;
    unsigned int  _hasSheetsBeginning;
    unsigned int  _hostWindowIsKnownToBeKey;
    id  _hostWindowLocalEventMonitor;
    NSString * _identifier;
    unsigned int  _ignoreFontSmoothingBackgroundColor;
    unsigned char  _inhibitFirstResponderCache;
    struct CGSize { 
        double width; 
        double height; 
    }  _intrinsicContentSize;
    unsigned int  _invalid;
    NSCFRunLoopSemaphore * _invalidationSemaphore;
    unsigned int  _isSettingViewFrame;
    unsigned int  _isSettingWindowStyleMask;
    unsigned int  _isSheetBeginning;
    unsigned int  _knownToBeContentView;
    unsigned int  _lastKnownKeyTestWindowID;
    CALayerHost * _layerHost;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _mostRecentFrameInScreenCoords;
    NSData * _mostRecentlyReportedAccessibilityParentToken;
    double  _mostRecentlyReportedScaleFactor;
    unsigned int  _mouseDisassociatedFromMouseCursor;
    int  _privateEventLoopKind;
    id  _processNotificationEventMonitor;
    unsigned int  _refuseFirstResponder;
    unsigned int  _registeredForAppNotifications;
    unsigned int  _registeredForAppWideNotifications;
    NSDictionary * _remoteAccessibilityChildren;
    NSSet * _rendezvousWindowBridgeKeys;
    NSMutableSet * _resizeTransactionsInProgress;
    unsigned int  _serviceConnectionID;
    unsigned int  _serviceDisclosedAccessoryView;
    NSXPCListenerEndpoint * _serviceListenerEndpoint;
    NSXPCConnection * _serviceMarshalConnection;
    NSString * _serviceName;
    NSString * _serviceSubclassIdentifier;
    NSString * _serviceSubclassName;
    NSProxy<NSXPCProxyCreating> * _serviceViewControllerProxyWithAnimationSyncInterface;
    NSProxy<NSXPCProxyCreating> * _serviceViewControllerProxyWithClientInterface;
    struct CGSize { 
        double width; 
        double height; 
    }  _serviceWindowFrameSizeAtBootstrap;
    unsigned int  _serviceWindowIsKey;
    unsigned int  _serviceWindowKeynessChangeInProgress;
    unsigned long long  _serviceWindowStyleMask;
    unsigned int  _settingAccessoryViewFrame;
    unsigned char  _shouldMaskToBounds;
    unsigned int  _singleTouchBar;
    NSRemoteView * _spawnedBy;
    unsigned int  _synchronizesImplicitAnimations;
    unsigned long long  _touchBarCount;
    NSArray * _touchBarsDescription;
    NSTrackingArea * _trackingArea;
    unsigned int  _trustsServiceKeyEvents;
    NSRemoteView * _view;
    unsigned int  _wantsAggressiveKeyboardFocusTheftCancellation;
    unsigned int  _warnedAboutAbsentBridge;
    struct CGSize { 
        double width; 
        double height; 
    }  _windowContentMaxSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _windowContentMinSize;
    unsigned long long  _wrappedModifySubviewsInProgress;
}

@property (atomic, readonly) NSViewBridge *bridge;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readwrite, copy) NSDictionary *remoteAccessibilityChildren;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite, retain) NSArray *touchBarsDescription;
@property (atomic, readonly) NSRemoteView *view;

+ (id)nsxpcInterface;

- (void)_deallocOnAppKitThread;
- (void)_superDealloc;
- (BOOL)_topmostAppModalSessionHasRendezvousWindowIdentifier:(id)arg1;
- (void)addChildWindow:(id)arg1 privateEventLoopKind:(int)arg2 windowBase:(unsigned char)arg3 ordered:(long long)arg4 content:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 reply:(id)arg6;
- (void)associateMouseAndMouseCursorPosition:(BOOL)arg1 completion:(id)arg2;
- (void)beginModalSession:(id)arg1 title:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3 withReply:(id)arg4;
- (void)beginSheet:(id)arg1 modalForWindow:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3 isCritical:(BOOL)arg4 withReply:(id)arg5;
- (id)bridge;
- (void)dealloc;
- (void)discloseAccessoryView:(BOOL)arg1 andAnimationState:(int)arg2 andDuration:(double)arg3;
- (void)dragWindowRelativeToMouseDown:(struct CGPoint { double x1; double x2; })arg1;
- (void)endModalSession:(id)arg1;
- (void)enqueueChildWindow:(id)arg1 privateEventLoopKind:(int)arg2 windowBase:(unsigned char)arg3 ordered:(long long)arg4 content:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 reply:(id)arg6;
- (void)exceptionSafeSetRemoteObject:(id)arg1 forKey:(id)arg2 withReply:(id)arg3;
- (void)forgetAccessoryView;
- (void)forwardActionUpResponderChain:(id)arg1;
- (void)hasValidKeyViewInDirection:(unsigned long long)arg1 withReply:(id)arg2;
- (void)hideTouchBarPopover:(id)arg1;
- (id)initWithView:(id)arg1;
- (void)lastCallImpliedByAdvancingToPhase:(unsigned char)arg1;
- (void)orderWindow:(unsigned int)arg1 mode:(long long)arg2 relativeTo:(unsigned int)arg3 withReply:(id)arg4;
- (void)realizeChildQueueElement:(id)arg1;
- (void)registerBridgeKey:(id)arg1 defaultObject:(id)arg2 owner:(unsigned char)arg3 withReply:(id)arg4;
- (id)remoteAccessibilityChildren;
- (void)remoteViewControllerProxy:(id)arg1;
- (void)retreatToConfigPhase;
- (void)serviceAccessoryViewBecameFirstResponder:(unsigned long long)arg1;
- (void)serviceAccessoryViewResignedFirstResponder;
- (void)serviceHasFirstResponder:(int)arg1 inDirection:(unsigned long long)arg2 withReply:(id)arg3;
- (void)serviceHasService:(int)arg1;
- (void)serviceHasTouchBars:(id)arg1;
- (void)serviceRequestsResize:(struct CGSize { double x1; double x2; })arg1 animate:(BOOL)arg2 transaction:(id)arg3 completion:(id)arg4;
- (void)serviceViewReceivedLeftMouseDown;
- (void)serviceWindowDidBecomeKey;
- (void)serviceWindowDidResignKey;
- (void)serviceWindowReceivedScrollWheel:(id)arg1 eventOwner:(unsigned int)arg2;
- (void)serviceWindowWouldActivate;
- (void)setAccessoryViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRemoteAccessibilityChildren:(id)arg1;
- (void)setRemoteObject:(id)arg1 forKey:(id)arg2 withReply:(id)arg3;
- (void)setServiceContextID:(unsigned int)arg1;
- (void)setServiceWindowEventMask:(unsigned long long)arg1;
- (void)setServiceWindowStyleMask:(unsigned long long)arg1;
- (void)setTouchBar:(id)arg1 description:(id)arg2;
- (void)setTouchBar:(id)arg1 escapeKeyReplacementItem:(id)arg2;
- (void)setTouchBar:(id)arg1 principalItemIdentifier:(id)arg2;
- (void)setTouchBarItem:(id)arg1 itemPosition:(id)arg2;
- (void)setTouchBarsDescription:(id)arg1;
- (void)shakeWindow;
- (void)showTouchBarPopover:(id)arg1 fromItem:(id)arg2 withOverlayIdentifier:(id)arg3 withCloseButton:(BOOL)arg4 withControlStrip:(BOOL)arg5 withOptions:(id)arg6;
- (id)touchBarsDescription;
- (void)updateAccessibilityChildren:(id)arg1;
- (void)updateContentMinSize:(struct CGSize { double x1; double x2; })arg1 maxSize:(struct CGSize { double x1; double x2; })arg2;
- (id)view;
- (void)waitForHostKeysToRegister:(id)arg1;

@end
