/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup
 */

@interface BU_TBackupView : NSView {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _pixelBounds;
    struct TNSRef<BU_TBUStarfieldShadowLayer *, void> { 
        BU_TBUStarfieldShadowLayer *fRef; 
    }  _shadowLayer;
    unsigned long long  fAnimating;
    CABackdropLayer * fBackdropLayer;
    bool  fBackgroundAnimation;
    double  fBackgroundAnimationEndY;
    double  fBackgroundAnimationStartY;
    CALayer * fBackgroundLayer;
    CALayer * fBaseLayer;
    struct TNSRef<BU_ButtonController *, void> { 
        BU_ButtonController *fRef; 
    }  fButtonController;
    NSButton * fCancelButton;
    bool  fCollapsed;
    struct TBackupController { struct TTimeMachineTargetList { struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_1_1_1; struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_1_1_2; struct __compressed_pair<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > *, std::__1::allocator<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > > > { struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_3_2_1; } x_1_1_3; } x1; struct TNSRef<BU_TBackupWindow *, void> { id x_2_1_1; /* Warning: unhandled struct encoding: '{TNSRef<BU_TBackupView *, void>=@}{TNSRef<NSMutableDictionary *, void>=@}}' */ struct TNSRef<BU_TBackupView *, void> { id x_2_2_1; struct TNSRef<NSMutableDictionary *, void> { id x_2_3_1; } x_2_2_2; } x_2_1_2; } x2; } * fController;
    CALayer * fControlsLayer;
    BU_DateText * fDateText;
    struct TNSRef<NSArray *, void> { 
        NSArray *fRef; 
    }  fDesktopFilters;
    CALayer * fDesktopPictureLayer;
    CALayer * fDesktopTintLayer;
    CAMediaTimingFunction * fEaseInEaseOut;
    struct OpaqueEventHandlerRef { } * fEventMonitorHandler;
    bool  fExiting;
    bool  fFadeWindowLayer;
    bool  fFinderIsClient;
    bool  fFullBackupUI;
    double  fHorizon;
    CALayer * fHotSpotLayer;
    double  fLastCompletion;
    BU_TMTimeline * fLastHitControl;
    struct CGPoint { 
        double x; 
        double y; 
    }  fLiveWindowPosition;
    NSButton * fNextButton;
    NSButton * fPreviousButton;
    struct TNSRef<BU_DPRemoteDesktopPicture *, void> { 
        BU_DPRemoteDesktopPicture *fRef; 
    }  fRemoteDesktopPicture;
    long long  fRequestedSnapshot;
    bool  fRestorableLocation;
    NSButton * fRestoreButton;
    NSMutableArray * fRestoreLayers;
    CALayer * fRevealLayer;
    struct vector<CGRect, std::__1::allocator<CGRect> > { 
        struct CGRect {} *__begin_; 
        struct CGRect {} *__end_; 
        struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { 
            struct CGRect {} *__first_; 
        } __end_cap_; 
    }  fScaledBounds;
    NSMutableArray * fSnapshotLayers;
    unsigned long long  fSnapshotsToShow;
    BU_TMFloatParameterController * fStarsZOffset;
    struct CGPoint { 
        double x; 
        double y; 
    }  fStartPosition;
    BU_TMTimeline * fTimelineControl;
    BU_TTimelineOverlay * fTimelineOverlay;
    unsigned long long  fTopSnapshot;
    long long  fWarpPosition;
    struct TFCGImage { struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef> > { struct CGImage {} *x_1_1_1; } x1; } * fWindowHighlightImage;
    CALayer * fWindowLayer;
}

@property (atomic, readwrite) unsigned long long isAnimating;

+ (id)createBackupViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inWindow:(id)arg2;
+ (double)fadeBackAlphaForSnapshotIndex:(unsigned long long)arg1 numberShown:(unsigned long long)arg2;
+ (void)initInterpolators;
+ (struct CGImage { }*)invalidSnapshotImageWithSize:(struct CGSize { double x1; double x2; })arg1 imageScalingContext:(struct CGContext { }*)arg2 drawContext:(struct CGContext { }*)arg3 needsLoad:(bool)arg4;

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)acceptsFirstMouse;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsIgnored;
- (void)activateTopSnapshot;
- (void)addLayer:(struct CGImage { }*)arg1 forTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg2;
- (void)animationComplete;
- (id)animationParametersForLayer:(id)arg1 atIndex:(long long)arg2;
- (id)animationParametersForLayer:(id)arg1 fromIndex:(long long)arg2 toIndex:(long long)arg3;
- (double)backgroundOpacityForSnapshotIndex:(unsigned long long)arg1;
- (struct CGPoint { double x1; double x2; })bigArrowsLocationForWindowBounds:(const struct CGPoint { double x1; double x2; }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caRendererBounds;
- (double)calculateExposureForSnapshotIndex:(unsigned long long)arg1;
- (double)calculateInputIntensityForSnapshotIndex:(unsigned long long)arg1;
- (void)calculateLayerBounds:(unsigned long long)arg1 baseBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withSunRaised:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })calculateLayerBoundsAtNormalizedZ:(double)arg1 withBaseBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withTargetY:(double)arg3;
- (double)calculateNextStartTime:(int)arg1;
- (double)calculateNextStartTime:(int)arg1 withDivisor:(double)arg2;
- (struct CGColor { }*)calculateShadingFilterColorForSnapshotIndex:(unsigned long long)arg1;
- (void)cancelPressed:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cgScaledViewBounds;
- (void)collapseOrExpand:(bool)arg1 startTime:(double)arg2;
- (void)configureLayer:(id)arg1 forInvalidState:(bool)arg2;
- (struct CGPoint { double x1; double x2; })convertPointToControlsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToViewPoint:(struct CGPoint { double x1; double x2; })arg1;
- (int)currentSnapshotIndex;
- (void)dealloc;
- (id)desktopPictureLayerForDisplay:(int)arg1;
- (double)divisorFor:(unsigned long long)arg1;
- (void)finishAllAnimations;
- (void)finishResizingWindow:(const struct CGPoint { double x1; double x2; }*)arg1;
- (void)flushFrameToDisplay;
- (void)gotoSnapshot:(unsigned long long)arg1;
- (void)gotoTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg1;
- (void)hideTopSnapshot;
- (void)hideTopSnapshotComplete:(id)arg1;
- (void)hideTopSnapshotNow;
- (void)initAnimationConstants;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 window:(id)arg2;
- (void)invalidateSnapshotImageFor:(id)arg1;
- (unsigned long long)isAnimating;
- (bool)isFinderClient;
- (void)keyDown:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layerBoundsAtPosition:(long long)arg1;
- (id)layerForSnapshot:(struct TSnapshot { int (**x1)(); int x2; struct TFENode { struct OpaqueNodeRef {} *x_3_1_1; } x3; struct TDate { double x_4_1_1; } x4; struct TDate { double x_5_1_1; } x5; struct TFENode { struct OpaqueNodeRef {} *x_6_1_1; } x6; unsigned long long x7; bool x8; bool x9; bool x10; bool x11; }*)arg1;
- (id)layerForUrl:(const struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_1_1; } x1; }*)arg1;
- (struct TBackupLayerList { struct TNSRef<BU_TBackupLayer *, void> {} *x1; struct TNSRef<BU_TBackupLayer *, void> {} *x2; struct __compressed_pair<TNSRef<BU_TBackupLayer *, void> *, std::__1::allocator<TNSRef<BU_TBackupLayer *, void> > > { struct TNSRef<BU_TBackupLayer *, void> {} *x_3_1_1; } x3; })layersForTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseUp:(id)arg1;
- (id)newAnimationCompleteDelegate:(int)arg1 forKey:(id)arg2;
- (id)newAnimationCompleteDelegate:(int)arg1 forKey:(id)arg2 withLayer:(id)arg3;
- (void)nextPressed:(id)arg1;
- (double)nextStartTime;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pixelBounds;
- (void)positionButtonsForWindowBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)prepareToHide:(bool)arg1 windowCenterPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)prepareToReveal:(bool)arg1;
- (void)prepareToRevealInAnimationComplete:(id)arg1;
- (void)previousPressed:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })projectedBoundsAtZPosition:(double)arg1 forCameraPosition:(struct CGPoint { double x1; double x2; })arg2 withUnscaledBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)promoteDemoteSnapshot:(id)arg1;
- (void)promoteDemoteSnapshotAnimationComplete:(id)arg1 withNewTopSnapshot:(id)arg2;
- (void)removeAllSnapshotLayers;
- (void)requestSnapshotImageFor:(id)arg1;
- (void)restoreAllPressed:(id)arg1;
- (void)restorePressed:(id)arg1;
- (void)retargetLayer:(unsigned long long)arg1 forTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg2;
- (void)revealInAnimationComplete:(id)arg1;
- (void)revealOutAnimationComplete:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (void)selectTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg1;
- (void)setController:(struct TBackupController { struct TTimeMachineTargetList { struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_1_1_1; struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_1_1_2; struct __compressed_pair<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > *, std::__1::allocator<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > > > { struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_3_2_1; } x_1_1_3; } x1; struct TNSRef<BU_TBackupWindow *, void> { id x_2_1_1; /* Warning: unhandled struct encoding: '{TNSRef<BU_TBackupView *, void>=@}{TNSRef<NSMutableDictionary *, void>=@}}' */ struct TNSRef<BU_TBackupView *, void> { id x_2_2_1; struct TNSRef<NSMutableDictionary *, void> { id x_2_3_1; } x_2_2_2; } x_2_1_2; } x2; }*)arg1;
- (void)setIsAnimating:(unsigned long long)arg1;
- (void)setIsFinderClient:(bool)arg1;
- (void)setMaxLayerCount:(unsigned long long)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setRestoreAnimationInfo:(id)arg1;
- (void)setRevealImages:(struct CGPoint { double x1; double x2; })arg1 window:(struct CGImage { }*)arg2 reveal:(struct CGImage { }*)arg3;
- (void)setShadowInfo:(struct CGImage { }*)arg1 shadowImageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 contentImageBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)setSunAnimationStart:(unsigned long long)arg1;
- (void)setTargets:(const struct TTimeMachineTargetList { struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x1; struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x2; struct __compressed_pair<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > *, std::__1::allocator<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > > > { struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {} *x_3_1_1; } x3; }*)arg1;
- (void)setTopSnapshotOpacity:(double)arg1;
- (void)setupEventMonitor;
- (void)showHideRevealAnimation:(bool)arg1;
- (void)showHideRevealAnimationCompleted:(bool)arg1;
- (void)showRestoreAnimationStartingAt:(double)arg1 withDuration:(double)arg2;
- (void)showRestoreLayersNow;
- (void)showRevealLayerNow;
- (void)showTopSnapshot;
- (void)showTopSnapshotComplete:(id)arg1;
- (void)showTopSnapshotNow;
- (void)shutDownEventMonitor;
- (void)snapshotsChanged:(bool)arg1 forceRefresh:(bool)arg2;
- (void)spacingCurveChanged;
- (void)stabilizeForExitWithNowImage:(struct CGImage { }*)arg1;
- (void)startResizingWindow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })topBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })topScreenLocalBounds;
- (void)triggerSnapshotWarp:(unsigned long long)arg1 duration:(double)arg2 warpForward:(bool)arg3;
- (void)triggerSunriseAnimationFromY:(double)arg1 toY:(double)arg2 duration:(double)arg3;
- (void)updateAnimationEnd:(unsigned long long)arg1;
- (void)updateButtonsEnableStateForSelection:(unsigned long long)arg1;
- (void)updateButtonsEnableStateForTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg1;
- (void)updateButtonsEnableStateForTargetIndex:(long long)arg1;
- (void)updateLayers:(const struct TBackupLayerList { struct TNSRef<BU_TBackupLayer *, void> {} *x1; struct TNSRef<BU_TBackupLayer *, void> {} *x2; struct __compressed_pair<TNSRef<BU_TBackupLayer *, void> *, std::__1::allocator<TNSRef<BU_TBackupLayer *, void> > > { struct TNSRef<BU_TBackupLayer *, void> {} *x_3_1_1; } x3; }*)arg1 forImage:(struct CGImage { }*)arg2;
- (void)updateLayers:(struct CGImage { }*)arg1 forTarget:(/* Warning: unhandled struct encoding: '{TTimeMachineTarget=^^?iB{TFENode=^{OpaqueNodeRef}}{TString={TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >=^{__CFString}}}{TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> >=^{TSnapshot}}{TRef<const void *, TRetainReleasePolicy<CFTypeRef> >=^v}{TNSRef<id<BUStarfieldTimelineItem>, void>=@}}' */ struct TTimeMachineTarget { int (**x1)(); int x2; bool x3; struct TFENode { struct OpaqueNodeRef {} *x_4_1_1; } x4; struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_2_1; } x_5_1_1; } x5; struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *> > { struct TSnapshot {} *x_6_1_1; } x6; struct TRef<const void *, TRetainReleasePolicy<CFTypeRef> > { void *x_7_1_1; } x7; struct TNSRef<id<BUStarfieldTimelineItem>, void> { id x_8_1_1; } x8; }*)arg2;
- (void)updateProxyImage:(struct CGImage { }*)arg1 requestNewImages:(bool)arg2;
- (void)validateSnapshot:(struct TSnapshot { int (**x1)(); int x2; struct TFENode { struct OpaqueNodeRef {} *x_3_1_1; } x3; struct TDate { double x_4_1_1; } x4; struct TDate { double x_5_1_1; } x5; struct TFENode { struct OpaqueNodeRef {} *x_6_1_1; } x6; unsigned long long x7; bool x8; bool x9; bool x10; bool x11; }*)arg1 forTargetURL:(const struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_1_1; } x1; }*)arg2 forTarget:(struct TFENode { struct OpaqueNodeRef {} *x1; })arg3;
- (void)validateTargetForURL:(const struct TString { struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > { struct __CFString {} *x_1_1_1; } x1; }*)arg1 withRevisionID:(void*)arg2;
- (void)viewDidMoveToWindow;

@end
