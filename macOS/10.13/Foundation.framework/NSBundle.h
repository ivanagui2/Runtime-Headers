/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
 */

@interface NSBundle : NSObject {
    id  _cfBundle;
    unsigned long long  _flags;
    id  _initialPath;
    id  _lock;
    Class  _principalClass;
    unsigned long long  _reserved2;
    id  _reserved3;
    id  _resolvedPath;
}

@property (atomic, readonly, copy) NSURL *appStoreReceiptURL;
@property (atomic, readonly, copy) NSString *builtInPlugInsPath;
@property (atomic, readonly, copy) NSURL *builtInPlugInsURL;
@property (atomic, readonly, copy) NSString *bundleIdentifier;
@property (atomic, readonly, copy) NSString *bundlePath;
@property (atomic, readonly, copy) NSURL *bundleURL;
@property (atomic, readonly, copy) NSString *developmentLocalization;
@property (atomic, readonly, copy) NSArray *executableArchitectures;
@property (atomic, readonly, copy) NSString *executablePath;
@property (atomic, readonly, copy) NSURL *executableURL;
@property (atomic, readonly, copy) NSDictionary *infoDictionary;
@property (getter=isLoaded, atomic, readonly) BOOL loaded;
@property (atomic, readonly, copy) NSArray *localizations;
@property (atomic, readonly, copy) NSDictionary *localizedInfoDictionary;
@property (atomic, readonly, copy) NSArray *preferredLocalizations;
@property (atomic, readonly) Class principalClass;
@property (atomic, readonly, copy) NSString *privateFrameworksPath;
@property (atomic, readonly, copy) NSURL *privateFrameworksURL;
@property (atomic, readonly, copy) NSString *resourcePath;
@property (atomic, readonly, copy) NSURL *resourceURL;
@property (atomic, readonly, copy) NSString *sharedFrameworksPath;
@property (atomic, readonly, copy) NSURL *sharedFrameworksURL;
@property (atomic, readonly, copy) NSString *sharedSupportPath;
@property (atomic, readonly, copy) NSURL *sharedSupportURL;

// Image: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation

+ (id)URLForResource:(id)arg1 withExtension:(id)arg2 subdirectory:(id)arg3 inBundleWithURL:(id)arg4;
+ (id)URLsForResourcesWithExtension:(id)arg1 subdirectory:(id)arg2 inBundleWithURL:(id)arg3;
+ (id)allBundles;
+ (id)allFrameworks;
+ (id)bundleForClass:(Class)arg1;
+ (id)bundleWithIdentifier:(id)arg1;
+ (id)bundleWithPath:(id)arg1;
+ (id)bundleWithURL:(id)arg1;
+ (id)debugDescription;
+ (id)findBundleResourceURLsCallingMethod:(SEL)arg1 baseURL:(id)arg2 passingTest:(id)arg3;
+ (id)findBundleResources:(id)arg1 callingMethod:(SEL)arg2 directory:(id)arg3 languages:(id)arg4 name:(id)arg5 types:(id)arg6 limit:(unsigned long long)arg7;
+ (id)loadedBundles;
+ (id)mainBundle;
+ (id)pathForResource:(id)arg1 ofType:(id)arg2 inDirectory:(id)arg3;
+ (id)pathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2;
+ (id)preferredLocalizationsFromArray:(id)arg1;
+ (id)preferredLocalizationsFromArray:(id)arg1 forPreferences:(id)arg2;
+ (void)setSystemLanguages:(id)arg1;

- (id)URLForAuxiliaryExecutable:(id)arg1;
- (id)URLForResource:(id)arg1 withExtension:(id)arg2;
- (id)URLForResource:(id)arg1 withExtension:(id)arg2 subdirectory:(id)arg3;
- (id)URLForResource:(id)arg1 withExtension:(id)arg2 subdirectory:(id)arg3 localization:(id)arg4;
- (id)URLsForResourcesWithExtension:(id)arg1 subdirectory:(id)arg2;
- (id)URLsForResourcesWithExtension:(id)arg1 subdirectory:(id)arg2 localization:(id)arg3;
- (void)__static;
- (struct __CFBundle { }*)_cfBundle;
- (struct __CFBundle { }*)_cfBundleIfPresent;
- (id)_pathForResource:(id)arg1 ofType:(id)arg2 inDirectory:(id)arg3 forRegion:(id)arg4;
- (id)_pathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2 forRegion:(id)arg3;
- (id)_regionsArray;
- (id)appStoreReceiptURL;
- (id)builtInPlugInsPath;
- (id)builtInPlugInsURL;
- (id)bundleIdentifier;
- (id)bundleLanguages;
- (id)bundlePath;
- (id)bundleURL;
- (Class)classNamed:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)developmentLocalization;
- (id)executableArchitectures;
- (id)executablePath;
- (id)executableURL;
- (id)findBundleResourceURLsCallingMethod:(SEL)arg1 passingTest:(id)arg2;
- (id)infoDictionary;
- (id)initWithPath:(id)arg1;
- (id)initWithURL:(id)arg1;
- (void)invalidateResourceCache;
- (BOOL)isLoaded;
- (BOOL)load;
- (BOOL)loadAndReturnError:(id*)arg1;
- (id)localizations;
- (id)localizedInfoDictionary;
- (id)localizedStringForKey:(id)arg1 value:(id)arg2 table:(id)arg3;
- (id)objectForInfoDictionaryKey:(id)arg1;
- (id)pathForAuxiliaryExecutable:(id)arg1;
- (id)pathForResource:(id)arg1 ofType:(id)arg2;
- (id)pathForResource:(id)arg1 ofType:(id)arg2 inDirectory:(id)arg3;
- (id)pathForResource:(id)arg1 ofType:(id)arg2 inDirectory:(id)arg3 forLanguage:(id)arg4;
- (id)pathForResource:(id)arg1 ofType:(id)arg2 inDirectory:(id)arg3 forLocalization:(id)arg4;
- (id)pathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2;
- (id)pathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2 forLanguage:(id)arg3;
- (id)pathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2 forLocalization:(id)arg3;
- (id)preferredLocalizations;
- (BOOL)preflightAndReturnError:(id*)arg1;
- (Class)principalClass;
- (id)privateFrameworksPath;
- (id)privateFrameworksURL;
- (id)resourcePath;
- (id)resourceURL;
- (id)sharedFrameworksPath;
- (id)sharedFrameworksURL;
- (id)sharedSupportPath;
- (id)sharedSupportURL;
- (BOOL)unload;
- (unsigned long long)versionNumber;

// Image: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit

// NSBundle (AVAdditions)

- (id)URLForMovieResource:(id)arg1;
- (id)imageForResource:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;

// Image: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit

// NSBundle (NSBundleHelpExtension)

- (id)contextHelpForKey:(id)arg1;

// NSBundle (NSBundleImageExtension)

- (id)URLForImageResource:(id)arg1;
- (id)URLsForImageResource:(id)arg1;
- (id)_newImageForResourceWithProspectiveName:(id*)arg1 imageClass:(Class)arg2;
- (id)imageForResource:(id)arg1;
- (id)pathForImageResource:(id)arg1;

// NSBundle (NSBundleSoundExtensions)

- (id)pathForSoundResource:(id)arg1;

// NSBundle (NSNibLoading)

+ (BOOL)_loadNibFile:(id)arg1 nameTable:(id)arg2 options:(id)arg3 withZone:(struct _NSZone { }*)arg4 ownerBundle:(id)arg5;
+ (BOOL)loadNibFile:(id)arg1 externalNameTable:(id)arg2 withZone:(struct _NSZone { }*)arg3;
+ (BOOL)loadNibNamed:(id)arg1 owner:(id)arg2;

- (BOOL)loadNibFile:(id)arg1 externalNameTable:(id)arg2 withZone:(struct _NSZone { }*)arg3;
- (BOOL)loadNibNamed:(id)arg1 owner:(id)arg2 topLevelObjects:(id*)arg3;

// NSBundle (NSNibLoadingInternal)

+ (BOOL)_loadNibFile:(id)arg1 externalNameTable:(id)arg2 options:(id)arg3 withZone:(struct _NSZone { }*)arg4;
+ (id)_nibFileToLoadFromListOfFiles:(id)arg1 atNibPath:(id)arg2 isKeyed:(BOOL*)arg3;
+ (id)currentNibLoadingBundle;
+ (id)currentNibLocalizedStringsBundle;
+ (id)currentNibPath;
+ (id)currentStringsTableName;
+ (void)popNibLoadingBundle;
+ (void)popNibLocalizedStringsBundle;
+ (void)popNibPath;
+ (void)pushNibLoadingBundle:(id)arg1;
+ (void)pushNibLocalizedStringsBundle:(id)arg1;
+ (void)pushNibPath:(id)arg1;

- (BOOL)_safeLoadNibNamed:(id)arg1 owner:(id)arg2 topLevelObjects:(id*)arg3;
- (BOOL)loadNibFile:(id)arg1 externalNameTable:(id)arg2 options:(id)arg3 withZone:(struct _NSZone { }*)arg4;

// Image: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit

// NSBundle (MKAdditions)

+ (id)_mapkitBundle;

- (id)_mapkit_localizedStringForKey:(id)arg1 value:(id)arg2 table:(id)arg3;

// Image: /System/Library/Frameworks/MediaPlayer.framework/Versions/A/MediaPlayer

// NSBundle (MPAdditions)

+ (id)mediaPlayerBundle;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/Versions/A/GeoServices

// NSBundle (GeoServicesBundle)

+ (id)__geoBundle;

// Image: /System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices

// NSBundle (IconServicesAdditions)

+ (id)__IS__frameworkBundle;
+ (id)__IS__frameworkLocalizedString:(id)arg1;
+ (id)__IS__iconsetResourceBundle;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Versions/A/Navigation

// NSBundle (MNExtras)

+ (id)_navigationBundle;
+ (BOOL)_navigation_isRunningInSiri;

- (id)_navigation_localizedStringForKey:(id)arg1 value:(id)arg2 table:(id)arg3;

// Image: /System/Library/PrivateFrameworks/VectorKit.framework/Versions/A/VectorKit

// NSBundle (VKBundle)

+ (id)__vkBundle;

@end
