/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation
 */

@interface CAKeyUsageExtension : NSObject {
    int  _caCertAuthorityKeyUsageExtensionCRLSigning;
    int  _caCertAuthorityKeyUsageExtensionCertSigning;
    int  _caCertAuthorityKeyUsageExtensionDataEncipherment;
    int  _caCertAuthorityKeyUsageExtensionDecipherOnly;
    int  _caCertAuthorityKeyUsageExtensionEncipherOnly;
    int  _caCertAuthorityKeyUsageExtensionIsCritical;
    int  _caCertAuthorityKeyUsageExtensionIsEnabled;
    int  _caCertAuthorityKeyUsageExtensionKeyAgreement;
    int  _caCertAuthorityKeyUsageExtensionKeyEncipherment;
    int  _caCertAuthorityKeyUsageExtensionNonRepudiation;
    int  _caCertAuthorityKeyUsageExtensionSignature;
    BOOL  _caDoneCAKeyUsageExts;
    int  _caKeyUsageExtensionCRLSigning;
    int  _caKeyUsageExtensionCertSigning;
    int  _caKeyUsageExtensionDataEncipherment;
    int  _caKeyUsageExtensionDecipherOnly;
    int  _caKeyUsageExtensionEncipherOnly;
    int  _caKeyUsageExtensionIsCritical;
    int  _caKeyUsageExtensionIsEnabled;
    int  _caKeyUsageExtensionKeyAgreement;
    int  _caKeyUsageExtensionKeyEncipherment;
    int  _caKeyUsageExtensionNonRepudiation;
    int  _caKeyUsageExtensionSignature;
    int  _caUserKeyUsageExtensionCRLSigning;
    int  _caUserKeyUsageExtensionCertSigning;
    int  _caUserKeyUsageExtensionDataEncipherment;
    int  _caUserKeyUsageExtensionDecipherOnly;
    int  _caUserKeyUsageExtensionEncipherOnly;
    int  _caUserKeyUsageExtensionIsCritical;
    int  _caUserKeyUsageExtensionIsEnabled;
    int  _caUserKeyUsageExtensionKeyAgreement;
    int  _caUserKeyUsageExtensionKeyEncipherment;
    int  _caUserKeyUsageExtensionNonRepudiation;
    int  _caUserKeyUsageExtensionSignature;
}

- (int)_certSigningUsage;
- (int)_crlSigningUsage;
- (int)_dataEnciphermentUsage;
- (int)_decipherOnlyUsage;
- (BOOL)_doneCAKeyUsageExt;
- (int)_encipherOnlyUsage;
- (void)_fillInValuesInExtension:(struct __CE_DataAndType { int x1; union { struct __CE_AuthorityKeyID { int x_1_2_1; struct cssm_data { unsigned long long x_2_3_1; char *x_2_3_2; } x_1_2_2; int x_1_2_3; struct __CE_GeneralNames {} *x_1_2_4; int x_1_2_5; struct cssm_data { unsigned long long x_6_3_1; char *x_6_3_2; } x_1_2_6; } x_2_1_1; struct cssm_data { unsigned long long x_2_2_1; char *x_2_2_2; } x_2_1_2; unsigned short x_2_1_3; struct __CE_GeneralNames { unsigned int x_4_2_1; struct __CE_GeneralName {} *x_4_2_2; } x_2_1_4; struct __CE_GeneralNames { unsigned int x_5_2_1; struct __CE_GeneralName {} *x_5_2_2; } x_2_1_5; struct __CE_ExtendedKeyUsage { unsigned int x_6_2_1; struct cssm_data {} *x_6_2_2; } x_2_1_6; struct __CE_BasicConstraints { int x_7_2_1; int x_7_2_2; unsigned int x_7_2_3; } x_2_1_7; struct __CE_CertPolicies { unsigned int x_8_2_1; struct __CE_PolicyInformation {} *x_8_2_2; } x_2_1_8; unsigned short x_2_1_9; unsigned int x_2_1_10; unsigned int x_2_1_11; unsigned int x_2_1_12; struct __CE_CRLDistPointsSyntax { unsigned int x_13_2_1; struct __CE_CRLDistributionPoint {} *x_13_2_2; } x_2_1_13; } x2; }*)arg1 isCACertBeingCreated:(BOOL)arg2 extensionIsPresent:(BOOL*)arg3;
- (int)_isCritical;
- (int)_isEnabled;
- (int)_keyAgreementUsage;
- (int)_keyEnciphermentUsage;
- (int)_nonRepudiationUsage;
- (void)_saveCAKeyUsageExtPanelValues;
- (void)_saveUserKeyUsageExtPanelValues;
- (void)_setCRLSigningUsage:(id)arg1;
- (void)_setCertAuthorityCertSigning:(BOOL)arg1;
- (void)_setCertAuthorityIsEnabled:(BOOL)arg1;
- (void)_setCertAuthoritySignature:(BOOL)arg1;
- (void)_setCertSigningUsage:(id)arg1;
- (void)_setDataEnciphermentUsage:(id)arg1;
- (void)_setDecipherOnlyUsage:(id)arg1;
- (void)_setDoneCAKeyUsageExt:(BOOL)arg1;
- (void)_setEnabledCriticalDigitalSignature;
- (void)_setEncipherOnlyUsage:(id)arg1;
- (void)_setIsCritical:(id)arg1;
- (void)_setIsEnabled:(id)arg1;
- (void)_setKeyAgreementUsage:(id)arg1;
- (void)_setKeyEnciphermentUsage:(id)arg1;
- (void)_setNonRepudiationUsage:(id)arg1;
- (void)_setSignatureUsage:(id)arg1;
- (void)_setToCodeSigning;
- (void)_setToDefaults;
- (void)_setToSMIME;
- (void)_setToSSLClient;
- (void)_setToSSLServer;
- (void)_setToVPNClient;
- (void)_setToVPNServer;
- (void)_setUserSignature:(BOOL)arg1;
- (int)_signatureUsage;
- (void)_updateKeyUsageExtPanelToCAValues;
- (void)_updateKeyUsageExtPanelToUserValues;
- (BOOL)_validate;

@end
