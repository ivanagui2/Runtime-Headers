/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices
 */

@interface FSNode : NSObject <NSCopying, NSSecureCoding> {
    unsigned long long  _cacheExpiration;
    unsigned int  _canUseFileCache;
    unsigned int  _hasReferringAliasNode;
    unsigned int  _isDirectory;
    unsigned int  _isInitialized;
    NSURL * _url;
}

@property (nonatomic, readonly) NSURL *URL;
@property (getter=isAliasFile, nonatomic, readonly) BOOL aliasFile;
@property (getter=isBusyDirectory, nonatomic, readonly) BOOL busyDirectory;
@property (getter=isDirectory, nonatomic, readonly) BOOL directory;
@property (getter=isExecutable, nonatomic, readonly) BOOL executable;
@property (nonatomic, readonly) BOOL hasHiddenExtension;
@property (nonatomic, readonly) BOOL hasPackageBit;
@property (getter=isHidden, nonatomic, readonly) BOOL hidden;
@property (getter=isInTrash, atomic, readonly) BOOL inTrash;
@property (getter=isInternetLocatorFile, atomic, readonly) BOOL internetLocatorFile;
@property (getter=isMountTrigger, atomic, readonly) BOOL mountTrigger;
@property (getter=isOnDiskImage, atomic, readonly) BOOL onDiskImage;
@property (getter=isOnLocalVolume, atomic, readonly) BOOL onLocalVolume;
@property (nonatomic, readwrite, copy) FSNode *referringAliasNode;
@property (getter=isRegularFile, nonatomic, readonly) BOOL regularFile;
@property (getter=isResolvable, nonatomic, readonly) BOOL resolvable;
@property (getter=isSymbolicLink, nonatomic, readonly) BOOL symbolicLink;
@property (getter=isTrashFolder, atomic, readonly) BOOL trashFolder;
@property (getter=isVolume, atomic, readonly) BOOL volume;

+ (BOOL)supportsSecureCoding;

- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithURL:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (BOOL)isEqual:(id)arg1;
- (void)prepareForReuse;

// FSNode (AppleEvents)

- (id)appleEventDescriptorWithOptions:(unsigned long long)arg1 error:(id*)arg2;
- (id)initWithAppleEventDescriptor:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;

// FSNode (BookmarkData)

+ (id)bookmarkDataPropertiesToInclude;
+ (unsigned int)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2;
+ (BOOL)getCreationDate:(double*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3;
+ (BOOL)getFileIdentifier:(unsigned long long*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3;
+ (BOOL)getVolumeIdentifier:(unsigned long long*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3;
+ (BOOL)isBookmarkDataInTrash:(id)arg1;
+ (id)nameForBookmarkData:(id)arg1 error:(id*)arg2;
+ (id)pathForBookmarkData:(id)arg1 error:(id*)arg2;

- (id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id*)arg3;
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(BOOL*)arg4 error:(id*)arg5;

// FSNode (Bundles)

- (struct __CFBundle { }*)CFBundleWithError:(id*)arg1;
- (id)bundleInfoDictionaryWithError:(id*)arg1;

// FSNode (Construction)

- (id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned int)arg2 fileDescriptor:(int*)arg3 error:(id*)arg4;
- (id)initWithConfigurationString:(int)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(BOOL)arg4 flags:(unsigned int)arg5 error:(id*)arg6;
- (id)initWithFileSystemRepresentation:(const char *)arg1 flags:(unsigned int)arg2 error:(id*)arg3;

// FSNode (ExtendedAttributes)

- (id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id*)arg3;
- (BOOL)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id*)arg4;

// FSNode (FSRefs)

+ (BOOL)getFSRef:(struct FSRef { unsigned char x1[80]; }*)arg1 fromURL:(id)arg2 reason:(unsigned long long)arg3 error:(id*)arg4;
+ (BOOL)shimFSRef:(const struct FSRef { unsigned char x1[80]; }*)arg1 reason:(unsigned long long)arg2 error:(id*)arg3 block:(id)arg4;
+ (BOOL)shimFSRefs:(const struct FSRef { unsigned char x1[80]; }*)arg1 count:(long long)arg2 reason:(unsigned long long)arg3 error:(id*)arg4 block:(id)arg5;
+ (void)warnAboutFSRefUsageWithReason:(unsigned long long)arg1;

- (BOOL)getFSRef:(struct FSRef { unsigned char x1[80]; }*)arg1 reason:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithFSRef:(const struct FSRef { unsigned char x1[80]; }*)arg1 reason:(unsigned long long)arg2 flags:(unsigned int)arg3 error:(id*)arg4;

// FSNode (Identifiers)

- (BOOL)getDeviceNumber:(int*)arg1 error:(id*)arg2;
- (BOOL)getFileIdentifier:(unsigned long long*)arg1 error:(id*)arg2;
- (BOOL)getInodeNumber:(unsigned long long*)arg1 error:(id*)arg2;

// FSNode (InternetLocatorFiles)

+ (id)validURLSchemesForInternetLocatorFileExtension:(id)arg1;

- (id)URLFromInternetLocatorFileWithError:(id*)arg1;
- (BOOL)getMapIndex:(int*)arg1 forExtension:(id)arg2 fileType:(unsigned int)arg3;
- (BOOL)isInternetLocatorFile;
- (id)resolveDataForkInternetLocatorFile;
- (id)resolveInternetLocatorFileToNetworkVolumeURL;
- (id)resolveResourceForkInternetLocatorFile;
- (id)resolveWindowsURLFileToURL;

// FSNode (MiscellaneousProperties)

- (BOOL)getContentModificationDate:(double*)arg1 error:(id*)arg2;
- (BOOL)getCreationDate:(double*)arg1 error:(id*)arg2;
- (BOOL)getDate:(double*)arg1 forKey:(id)arg2 error:(id*)arg3;
- (BOOL)getFinderInfo:(union { unsigned char x1[32]; struct { struct FileInfo { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned short x_1_2_3; struct Point { short x_4_3_1; short x_4_3_2; } x_1_2_4; unsigned short x_1_2_5; } x_2_1_1; struct ExtendedFileInfo { short x_2_2_1[4]; unsigned short x_2_2_2; short x_2_2_3; int x_2_2_4; } x_2_1_2; } x2; struct { struct FolderInfo { struct Rect { short x_1_3_1; short x_1_3_2; short x_1_3_3; short x_1_3_4; } x_1_2_1; unsigned short x_1_2_2; struct Point { short x_3_3_1; short x_3_3_2; } x_1_2_3; unsigned short x_1_2_4; } x_3_1_1; struct ExtendedFolderInfo { struct Point { short x_1_3_1; short x_1_3_2; } x_2_2_1; int x_2_2_2; unsigned short x_2_2_3; short x_2_2_4; int x_2_2_5; } x_3_1_2; } x3; }*)arg1 error:(id*)arg2;
- (BOOL)getHFSType:(unsigned int*)arg1 creator:(unsigned int*)arg2 error:(id*)arg3;
- (BOOL)getLength:(unsigned long long*)arg1 error:(id*)arg2;
- (BOOL)getOwnerUID:(unsigned int*)arg1 GID:(unsigned int*)arg2 error:(id*)arg3;
- (BOOL)getWriterBundleIdentifier:(id*)arg1 error:(id*)arg2;

// FSNode (PathAndName)

- (id)canonical:(BOOL)arg1 pathWithError:(id*)arg2;
- (id)canonicalPathWithError:(id*)arg1;
- (id)extensionWithError:(id*)arg1;
- (BOOL)getFileSystemRepresentation:(BOOL)arg1 error:(id*)arg2;
- (id)nameWithError:(id*)arg1;
- (id)pathWithError:(id*)arg1;

// FSNode (RelatedNodes)

+ (id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
+ (id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;

- (id)childNodeWithRelativePath:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (id)diskImageURLWithFlags:(unsigned int)arg1 error:(id*)arg2;
- (id)referringAliasNode;
- (id)resolvedNodeWithFlags:(unsigned int)arg1 error:(id*)arg2;
- (void)setReferringAliasNode:(id)arg1;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)arg1 error:(id*)arg2;
- (id)volumeNodeWithFlags:(unsigned int)arg1 error:(id*)arg2;

// FSNode (ResourceFork)

+ (void)warnAboutResourceForkUsageWithReason:(unsigned long long)arg1;

- (void)closeResourceFile:(struct OpaqueResourceFileRef { }*)arg1 reason:(unsigned long long)arg2;
- (BOOL)getHasCarbon:(BOOL*)arg1 andCFMResources:(BOOL*)arg2 propertyList:(id*)arg3 fromResourceFile:(struct OpaqueResourceFileRef { }*)arg4 reason:(unsigned long long)arg5 error:(id*)arg6;
- (struct OpaqueResourceFileRef { }*)openResourceFileForReadingWithReason:(unsigned long long)arg1 error:(id*)arg2;

// FSNode (SandboxChecks)

+ (BOOL)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2 operation:(const char *)arg3;
+ (BOOL)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2;
+ (BOOL)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2;
+ (BOOL)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2;

- (BOOL)canReadFromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg1;
- (BOOL)canReadMetadataFromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg1;
- (BOOL)canWriteFromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg1;

// FSNode (Trash)

+ (BOOL)looksLikeTrashFolderName:(id)arg1;

- (BOOL)isInTrash;
- (BOOL)isTrashFolder;
- (id)trashNodeWithError:(id*)arg1;

// FSNode (URLAndPropertyCache)

- (id)URL;
- (void)clearURLPropertyCacheIfStale;
- (BOOL)getResourceValue:(id*)arg1 forKey:(id)arg2 options:(unsigned int)arg3 error:(id*)arg4;
- (BOOL)getTemporaryResourceValue:(id*)arg1 forKey:(id)arg2;
- (BOOL)getValue:(id*)arg1 forResourcePropertyKeyAndDirectoryFlag:(id)arg2;
- (void)setDirectoryFlagForResourcePropertyKey:(id)arg1 value:(id)arg2;
- (BOOL)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned int)arg3 error:(id*)arg4;
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;

// FSNode (Volumes)

+ (id)rootVolumeNode;

- (BOOL)getVolumeIdentifier:(unsigned long long*)arg1 error:(id*)arg2;
- (BOOL)isMountTrigger;
- (BOOL)isOnDiskImage;
- (BOOL)isOnLocalVolume;
- (BOOL)isVolume;

// FSNode (WhatAmI)

- (BOOL)getIsDirectory_NoIO:(BOOL*)arg1;
- (BOOL)hasHiddenExtension;
- (BOOL)hasPackageBit;
- (BOOL)isAliasFile;
- (BOOL)isBusyDirectory;
- (BOOL)isDirectory;
- (BOOL)isExecutable;
- (BOOL)isHidden;
- (BOOL)isRegularFile;
- (BOOL)isResolvable;
- (BOOL)isSymbolicLink;

@end
