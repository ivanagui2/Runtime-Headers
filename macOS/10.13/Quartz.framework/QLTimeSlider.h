/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI
 */

@interface QLTimeSlider : NSView <QLAccessibilityUIElementDelegate, QLMediaUIScrubberDelegate> {
    BOOL  _autoUpdates;
    NSObject<QLTimeSliderDataSource> * _dataSource;
    double  _duration;
    double  _lastDrawPercentage;
    NSString * _lastTimeString;
    double  _negativeTextWidth;
    double  _positiveTextWidth;
    NSTimer * _refreshTimer;
    QLMediaUIScrubber * _scrubber;
    double  _textHeight;
    struct __CFDictionary { } * _timeAttributes;
    NSDictionary * _uiElements;
    BOOL  _wasPlayingBeforeTracking;
    BOOL  _willAutoplay;
    BOOL  _willHide;
}

@property (atomic, readwrite) BOOL autoUpdates;
@property (atomic, readonly) NSObject<QLTimeSliderDataSource> *dataSource;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) BOOL optimizedDrawing;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) BOOL willAutoplay;
@property (nonatomic, readwrite) BOOL willHide;

+ (struct CGSize { double x1; double x2; })buttonSize;
+ (double)buttonsInterspace;
+ (double)controlHeight;
+ (void)initialize;
+ (Class)mediaUIScrubber;
+ (id)pauseImage;
+ (id)playImage;
+ (id)soundOffImage;
+ (id)soundOnImage;
+ (id)timeStringFromTimeInterval:(double)arg1 longForm:(BOOL)arg2;

- (unsigned int)_CAViewFlags;
- (id)_addButtonWithTag:(long long)arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (id)_buttonTitleForTag:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_buttonsRect;
- (void)_setupButtons;
- (void)_setupUIElements;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_timeRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_timebarRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_trackRect;
- (void)_updateButtons;
- (void)_updateRefreshTimer;
- (void)_updateScrubber;
- (id)accessibilityActionNamesForUIElementWithIdentifier:(id)arg1;
- (id)accessibilityAdditionalAttributeNamesForUIElementWithIdentifier:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (BOOL)accessibilityIsIgnored;
- (void)accessibilityPerformAction:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2 forUIElementWithIdentifier:(id)arg3;
- (BOOL)autoUpdates;
- (void)buttonClicked:(id)arg1;
- (id)dataSource;
- (void)dealloc;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForUIElementWithIdentifier:(id)arg1;
- (void)getTimeColorGrayComponents:(double*)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseUp:(id)arg1;
- (id)newButtonWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 tag:(long long)arg2 title:(id)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (BOOL)optimizedDrawing;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x1; double x2; })arg1;
- (double)scrubber:(id)arg1 willChangeValue:(double)arg2;
- (void)scrubberDidStopTracking:(id)arg1;
- (void)scrubberFrameDidChange:(id)arg1;
- (void)scrubberWillStartTracking:(id)arg1;
- (void)setAutoUpdates:(BOOL)arg1;
- (void)setNeedsUpdate:(BOOL)arg1;
- (void)setWillAutoplay:(BOOL)arg1;
- (void)setWillHide:(BOOL)arg1;
- (void)startControlWithDataSource:(id)arg1;
- (void)stopControl;
- (BOOL)willAutoplay;
- (BOOL)willHide;

@end
