/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/PDFKit
 */

@interface PDFAccessibilityNode : NSAccessibilityElement <NSCopying, PDFAccessibilityNodeParent> {
    PDFAccessibilityNodePrivate * _private2;
}

@property (nonatomic, readwrite, retain) NSString *altText;
@property (nonatomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readonly) NSArray *children;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readonly) struct CGPDFNode { }*nodeRef;
@property (nonatomic, readonly) id nodeValue;
@property (nonatomic, readwrite) PDFPage *page;
@property (nonatomic, readonly) <PDFAccessibilityNodeParent> *parent;
@property (atomic, readonly) Class superclass;
@property (nonatomic, readwrite) long long type;

+ (id)_accessibilityElementForNode:(id)arg1;
+ (void)_buildPDFAnnotationNodes:(id)arg1;
+ (void)_findClosestLineNodeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withRootNode:(id)arg2 withDistanceBetterThan:(double*)arg3 parentOut:(id*)arg4 childOut:(id*)arg5;
+ (void)_findClosestWordNodeForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withLineNode:(id)arg2 withDistanceBetterThan:(double*)arg3 childOut:(id*)arg4;
+ (Class)_nodeClassForNode:(struct CGPDFNode { }*)arg1;
+ (long long)_typeForCGPDFNode:(struct CGPDFNode { }*)arg1;
+ (void)addPDFAnnotation:(id)arg1 toPDFAccessibilityNode:(id)arg2;
+ (id)createPDFAccessibilityRootNode:(id)arg1;

- (void).cxx_destruct;
- (id)_descendantNodeWithClass:(Class)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 reverseSearch:(BOOL)arg3;
- (id)_documentContainer;
- (id)_nextNodeWithClass:(Class)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)_nodeLanguage;
- (id)_previousNodeWithClass:(Class)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_print:(id)arg1 isTail:(BOOL)arg2;
- (id)_sortedAnnotationNodesByTextRange;
- (id)_stringForType;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityChildren;
- (id)accessibilityCustomRotors;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityLabel;
- (id)accessibilityLanguage;
- (id)accessibilityParent;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityRole;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilityValue;
- (void)addChild:(id)arg1;
- (id)altText;
- (void)annotate:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (void)buildAccessibilityHierarchy;
- (id)children;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToAccessibilitySpace:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)descendantNodeWithHash:(unsigned long long)arg1;
- (id)descendantNodeWithNodeRef:(struct CGPDFNode { }*)arg1;
- (id)description;
- (id)document;
- (BOOL)hasEquivalentTextNodeRepresentation;
- (id)initWithParent:(id)arg1 nodeRef:(struct CGPDFNode { }*)arg2;
- (BOOL)isValidAccessibilityElement;
- (id)layerController;
- (id)nextNodeWithAnnotationType:(id)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)nextNodeWithClass:(Class)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (struct CGPDFNode { }*)nodeRef;
- (id)nodeValue;
- (id)page;
- (id)pageContainerNode;
- (id)pageView;
- (id)parent;
- (id)previousNodeWithAnnotationType:(id)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)previousNodeWithClass:(Class)arg1 fromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)print;
- (void)scrollToVisible;
- (void)setAccessibilityValue:(id)arg1;
- (void)setAltText:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNodeValue:(id)arg1;
- (void)setPage:(id)arg1;
- (void)setParent:(id)arg1;
- (void)setType:(long long)arg1;
- (id)spokenDescription;
- (BOOL)supportsAppKitControls;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textRange;
- (long long)type;

@end
