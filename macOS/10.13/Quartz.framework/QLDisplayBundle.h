/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI
 */

@interface QLDisplayBundle : NSObject <NSPasteboardWriting, QLAccessibilityUIElementDelegate, QLDisplayable, QLPreviewPageNavigationDataSource, QLTimeSliderDataSource> {
    NSMutableArray * _accessoryControllers;
    int  _activation;
    int  _activationCount;
    NSArray * _invalidModes;
    BOOL  _isObservingOwner;
    NSUUID * _operationUUID;
    <QLDisplayBundleOwner> * _owner;
    struct __QLPreview { } * _previewRef;
    QLDisplayBundleViewController * _qlViewController;
    int  _visibility;
}

@property (atomic, readonly) NSURL *URL;
@property (atomic, readonly) id accessibilityFocusedUIElement;
@property (atomic, readonly) NSDictionary *accessibilityUIElements;
@property (atomic, readonly) BOOL activated;
@property (atomic, readonly) int activationState;
@property (atomic, readonly) int additionalDisplayFlags;
@property (atomic, readonly) BOOL allowsAlerts;
@property (atomic, readonly) BOOL allowsFileAccess;
@property (atomic, readonly) BOOL allowsJavascript;
@property (atomic, readonly) BOOL allowsNetworkAccess;
@property (atomic, readonly) BOOL allowsOpeningFileURLs;
@property (atomic, readonly) BOOL allowsPlugIns;
@property (atomic, readwrite) BOOL autoZooms;
@property (atomic, readonly) BOOL autoplay;
@property (atomic, readonly) int backgroundStyle;
@property (atomic, readonly) double backingScaleFactor;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } borderFrame;
@property (atomic, readonly) BOOL canBeReused;
@property (atomic, readonly) BOOL canShowOpenButton;
@property (atomic, readonly) BOOL canShowTitleInBubble;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrame;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrameForSeamlessOpening;
@property (atomic, readonly) CALayer *contentLayer;
@property (atomic, readonly) NSView *contentView;
@property (atomic, readwrite) double currentHorizontalScroll;
@property (atomic, readwrite) unsigned long long currentPage;
@property (atomic, readwrite) double currentScroll;
@property (atomic, readwrite) double currentTime;
@property (atomic, readonly) NSString *customDisplayName;
@property (atomic, readonly) BOOL deactivated;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly) double defaultPageThumbnailRatio;
@property (atomic, readonly) BOOL delegatesControls;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) int disabledDisplayFlags;
@property (atomic, readonly) NSString *displayBundleID;
@property (atomic, readonly) int displayFlags;
@property (atomic, readonly) NSString *displayNameComplement;
@property (atomic, readwrite, retain) id displayState;
@property (atomic, readonly) double duration;
@property (atomic, readonly) int flavor;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } focusPoint;
@property (atomic, readwrite) unsigned long long focusedOccurrenceIndex;
@property (atomic, readonly) BOOL fullyLoaded;
@property (atomic, readonly) BOOL hasAudio;
@property (atomic, readonly) BOOL hasHorizontalScroller;
@property (atomic, readonly) BOOL hasPages;
@property (atomic, readonly) BOOL hasScrolling;
@property (atomic, readonly) BOOL hasTime;
@property (atomic, readonly) BOOL hasZooming;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) BOOL hidePlayControl;
@property (atomic, readwrite) BOOL highlighted;
@property (atomic, readwrite, retain) NSArray *highlightedOccurrences;
@property (atomic, readwrite) int inputFocusType;
@property (atomic, readwrite, retain) NSArray *invalidModes;
@property (atomic, readonly) BOOL isDisplayingError;
@property (atomic, readonly) BOOL isLoaded;
@property (atomic, readonly) BOOL isRemote;
@property (atomic, readonly) BOOL isWindowKey;
@property (atomic, readonly) BOOL keepThumbnailUnderInlinePreview;
@property (atomic, readonly) NSURL *launchURL;
@property (atomic, readonly) double maxZoomFactor;
@property (atomic, readonly) int mode;
@property (atomic, readwrite) BOOL muted;
@property (atomic, readonly) int navigationControls;
@property (atomic, readonly) BOOL needsVolumeControl;
@property (atomic, readonly) unsigned long long numberOfPages;
@property (atomic, readonly) unsigned long long observedEvents;
@property (atomic, readonly) BOOL opaque;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } opaqueFrame;
@property (atomic, readonly) NSDictionary *openingApplicationInfo;
@property (atomic, readwrite, retain) NSUUID *operationUUID;
@property (atomic, readonly) unsigned long long overlayVisibilityOptions;
@property (atomic, readwrite, retain) <QLDisplayBundleOwner> *owner;
@property (atomic, readonly) int pageDisplay;
@property (atomic, readonly) BOOL pathBarShouldOverlay;
@property (atomic, readonly) BOOL playedToTheEnd;
@property (atomic, readwrite) BOOL playing;
@property (atomic, readonly) BOOL prefersLocalEventLoop;
@property (atomic, readwrite) struct __QLPreview { }*preview;
@property (atomic, readonly, retain) <QLPreviewItem> *previewItem;
@property (atomic, readwrite, retain) QLDisplayBundleViewController *qlViewController;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } quickLookFrame;
@property (atomic, readonly) CALayer *quickLookLayer;
@property (atomic, readonly) NSView *quickLookView;
@property (atomic, readonly) NSViewController *quickLookViewController;
@property (atomic, readonly) NSResponder *responder;
@property (atomic, readonly) BOOL scalable;
@property (atomic, readwrite) double seekTolerance;
@property (atomic, readonly) BOOL shouldDrawBubbleBackground;
@property (atomic, readonly) BOOL shouldPreserveAspectRatioWhenResizing;
@property (atomic, readonly) BOOL shouldShowInlinePreviewContent;
@property (atomic, readonly) BOOL shouldShowInlinePreviewControls;
@property (atomic, readwrite) BOOL showRemainingTime;
@property (atomic, readonly) BOOL showScrollerToChangePages;
@property (atomic, readonly) NSDictionary *sizingConstraints;
@property (atomic, readonly) Class superclass;
@property (atomic, readonly) double totalHorizontalScroll;
@property (atomic, readonly) double totalScroll;
@property (atomic, readonly) NSTouchBar *touchBar;
@property (atomic, readwrite) BOOL tracksMouseMovements;
@property (atomic, readonly) BOOL viewUsesLayer;
@property (nonatomic, readwrite) int visibility;
@property (atomic, readwrite) float volume;
@property (atomic, readwrite) double zoomFactor;
@property (atomic, readonly) double zoomFactorToFitWidth;

+ (id)_pathOfScreenshotWithKey:(id)arg1;
+ (BOOL)generateThumbnail:(struct __QLThumbnailRequest { }*)arg1 withData:(id)arg2 contentTypeUTI:(id)arg3 previewProperties:(id)arg4 properties:(id)arg5;
+ (BOOL)generateThumbnail:(struct __QLThumbnailRequest { }*)arg1 withURL:(id)arg2 contentTypeUTI:(id)arg3 previewProperties:(id)arg4 properties:(id)arg5;
+ (id)imageForScreenshotKey:(id)arg1;
+ (id)keyPathsForValuesAffectingBorderFrame;
+ (id)keyPathsForValuesAffectingContentFrame;
+ (id)keyPathsForValuesAffectingContentFrameForSeamlessOpening;
+ (id)keyPathsForValuesAffectingDisplayState;
+ (id)keyPathsForValuesAffectingHasScrolling;
+ (id)keyPathsForValuesAffectingHasTime;
+ (id)keyPathsForValuesAffectingHasZooming;
+ (id)keyPathsForValuesAffectingIsWindowKey;
+ (id)keyPathsForValuesAffectingPlayedToTheEnd;
+ (id)newPreviewDocumentDisplayBundleForPreview:(struct __QLPreview { }*)arg1;
+ (id)potentialExpectedDisplayBundleIDsForPreview:(struct __QLPreview { }*)arg1;

- (id)URL;
- (void)_bindedWindowWillClose:(id)arg1;
- (void)_discardBoundWindowControllers;
- (BOOL)_dispatchEvent:(id)arg1 selector:(SEL)arg2;
- (void)_saveScreenshotWithKey:(id)arg1;
- (void)_startObservingOwner;
- (void)_stopObservingOwner;
- (void)_unbindWindowController:(id)arg1;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)activate;
- (BOOL)activated;
- (int)activationState;
- (int)additionalDisplayFlags;
- (BOOL)allowsAlerts;
- (BOOL)allowsFileAccess;
- (BOOL)allowsJavascript;
- (BOOL)allowsNetworkAccess;
- (BOOL)allowsOpeningFileURLs;
- (BOOL)allowsPlugIns;
- (unsigned long long)ariadneDisplayBundleID;
- (BOOL)autoZooms;
- (BOOL)autoplay;
- (int)backgroundStyle;
- (double)backingScaleFactor;
- (void)backingScaleFactorDidChange;
- (BOOL)beginGestureWithEvent:(id)arg1;
- (void)beginOperation:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })borderFrame;
- (BOOL)canBeReused;
- (BOOL)canSelectText;
- (BOOL)canShowOpenButton;
- (BOOL)canShowTitleInBubble;
- (void)cancelLoading;
- (void)cleanup;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrameForSeamlessOpening;
- (id)contentLayer;
- (id)contentView;
- (void)copy:(id)arg1;
- (struct CGImage { }*)copyImageRepresentationWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (double)currentHorizontalScroll;
- (unsigned long long)currentPage;
- (double)currentScroll;
- (double)currentTime;
- (BOOL)cursorUpdate:(id)arg1;
- (id)customDisplayName;
- (id)customDisplayNameWithLongForm:(BOOL)arg1;
- (void)customTitleUpdated;
- (void)deactivate;
- (BOOL)deactivated;
- (void)dealloc;
- (void)debugPreview:(id)arg1;
- (double)defaultPageThumbnailRatio;
- (BOOL)delegatesControls;
- (id)description;
- (void)didDesistRemoteWithExpectedDisplayBundleID:(id)arg1;
- (void)didFailLoadingWithError:(id)arg1;
- (void)didHide;
- (void)didLoad;
- (void)didMismatchLoadingWithHints:(id)arg1 expectedDisplayBundleID:(id)arg2;
- (void)didOpen;
- (void)didShow;
- (int)disabledDisplayFlags;
- (void)discard;
- (void)discardAccessoryControllers;
- (id)displayBundleID;
- (int)displayFlags;
- (id)displayNameComplement;
- (id)displayState;
- (void)drawBubbleBackgroundInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 contentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)drawFlavorInBackgroundLayer:(id)arg1 foregroundLayer:(id)arg2 contentSize:(struct CGSize { double x1; double x2; })arg3 maxSize:(struct CGSize { double x1; double x2; })arg4 parts:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5;
- (void)drawHighlights:(id)arg1 inContext:(struct CGContext { }*)arg2 style:(int)arg3;
- (BOOL)drawPage:(unsigned long long)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 context:(struct CGContext { }*)arg3;
- (double)duration;
- (BOOL)endGestureWithEvent:(id)arg1;
- (void)endOperation:(id)arg1;
- (id)findOccurrencesOfString:(id)arg1 inPage:(unsigned long long)arg2 withOptions:(unsigned long long)arg3;
- (int)flavor;
- (struct CGPoint { double x1; double x2; })focusPoint;
- (unsigned long long)focusedOccurrenceIndex;
- (BOOL)fullyLoaded;
- (BOOL)generateThumbnailForPage:(unsigned long long)arg1 maxSize:(struct CGSize { double x1; double x2; })arg2 completionBlock:(id)arg3;
- (void)getImageRepresentationWithSuggestedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 completion:(id)arg2;
- (BOOL)hasAudio;
- (BOOL)hasDisplayFlag:(int)arg1;
- (BOOL)hasHorizontalScroller;
- (BOOL)hasPages;
- (BOOL)hasScrolling;
- (BOOL)hasTime;
- (BOOL)hasZooming;
- (BOOL)highlighted;
- (id)highlightedOccurrences;
- (void)hostedInWindowServerDidChange;
- (id)initWithPreview:(struct __QLPreview { }*)arg1 owner:(id)arg2;
- (id)invalidModes;
- (BOOL)isClickablePoint:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)isDisplayingError;
- (BOOL)isLoaded;
- (BOOL)isRemote;
- (BOOL)isSafe;
- (BOOL)isValidInPreviewMode:(int)arg1;
- (BOOL)isWindowKey;
- (BOOL)keepThumbnailUnderInlinePreview;
- (BOOL)keyDown:(id)arg1;
- (id)launchURL;
- (void)layoutSublayersOfLayer:(id)arg1;
- (int)loadWithHints:(id)arg1;
- (struct CGPoint { double x1; double x2; })locationForEvent:(id)arg1;
- (BOOL)magnifyWithEvent:(id)arg1;
- (void)markOperationFileSize:(id)arg1;
- (double)maxZoomFactor;
- (int)mode;
- (void)modeDidChange;
- (BOOL)mouseDown:(id)arg1;
- (BOOL)mouseDragged:(id)arg1;
- (BOOL)mouseMoved:(id)arg1;
- (BOOL)mouseUp:(id)arg1;
- (BOOL)mustHandleDoubleClickAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)mustHandleDragAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)mustHandleEvent:(id)arg1;
- (BOOL)muted;
- (int)navigationControls;
- (unsigned long long)numberOfPages;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (unsigned long long)observedEvents;
- (BOOL)opaque;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })opaqueFrame;
- (void)openExternalURL:(id)arg1;
- (id)openingApplicationInfo;
- (id)operationName;
- (id)operationUUID;
- (unsigned long long)overlayVisibilityOptions;
- (id)owner;
- (int)pageDisplay;
- (id)pasteboardPropertyListForType:(id)arg1;
- (BOOL)pathBarShouldOverlay;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3;
- (BOOL)playedToTheEnd;
- (BOOL)playing;
- (BOOL)prefersLocalEventLoop;
- (BOOL)prefersLocalEventLoopForEvent:(id)arg1;
- (struct __QLPreview { }*)preview;
- (id)previewItem;
- (id)qlViewController;
- (id)quickLookContentView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })quickLookFrame;
- (id)quickLookLayer;
- (id)quickLookView;
- (id)quickLookViewController;
- (id)rectsForStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inPage:(unsigned long long)arg2;
- (void)refreshSynchronously;
- (void)reloadAndFallbackWithError:(id)arg1;
- (id)responder;
- (BOOL)responder:(id)arg1 shouldHandleEvent:(id)arg2;
- (BOOL)rotateWithEvent:(id)arg1;
- (BOOL)scalable;
- (BOOL)scrollWheel:(id)arg1;
- (double)seekTolerance;
- (void)selectAll:(id)arg1;
- (void)setAutoZooms:(BOOL)arg1;
- (void)setCurrentHorizontalScroll:(double)arg1;
- (void)setCurrentPage:(unsigned long long)arg1;
- (void)setCurrentScroll:(double)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setDisplayState:(id)arg1;
- (void)setFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFocusedOccurrenceIndex:(unsigned long long)arg1;
- (void)setFocusedOccurrenceIndex:(unsigned long long)arg1 inPage:(unsigned long long)arg2;
- (void)setHighlighted:(BOOL)arg1;
- (void)setHighlightedOccurrences:(id)arg1;
- (void)setInvalidModes:(id)arg1;
- (void)setMuted:(BOOL)arg1;
- (void)setOperationUUID:(id)arg1;
- (void)setOverlayControlOverlayFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rollOverFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setOwner:(id)arg1;
- (void)setPlaying:(BOOL)arg1;
- (void)setPreview:(struct __QLPreview { }*)arg1;
- (void)setQlViewController:(id)arg1;
- (void)setQuickLookFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSeekTolerance:(double)arg1;
- (void)setTracksMouseMovements:(BOOL)arg1;
- (void)setVisibility:(int)arg1;
- (void)setVolume:(float)arg1;
- (void)setZoomFactor:(double)arg1;
- (BOOL)shouldDrawBubbleBackground;
- (BOOL)shouldOpenExternalURL:(id)arg1;
- (BOOL)shouldPreserveAspectRatioWhenResizing;
- (BOOL)shouldShowInlinePreviewContent;
- (BOOL)shouldShowInlinePreviewControls;
- (BOOL)shouldShowPagesOnLeft;
- (BOOL)showAccessoryController:(id)arg1;
- (void)showOverlayControls:(BOOL)arg1 withOverlayController:(id)arg2;
- (BOOL)showScrollerToChangePages;
- (id)sizingConstraints;
- (void)sizingUpdated;
- (BOOL)smartMagnifyWithEvent:(id)arg1;
- (id)stringForPage:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })stringRangeForPage:(unsigned long long)arg1;
- (double)thumbnailAspectRatioForPage:(unsigned long long)arg1;
- (double)totalHorizontalScroll;
- (double)totalScroll;
- (id)touchBar;
- (BOOL)tracksMouseMovements;
- (void)updateProperties:(id)arg1;
- (BOOL)validateURLSecureAccess:(id)arg1;
- (id)viewForEvent:(id)arg1;
- (id)viewForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)viewUsesLayer;
- (int)visibility;
- (float)volume;
- (void)willHide;
- (void)willOpen;
- (void)willShow;
- (void)willTimeOut;
- (void)windowKeyDidChange;
- (id)writableTypesForPasteboard:(id)arg1;
- (unsigned long long)writingOptionsForType:(id)arg1 pasteboard:(id)arg2;
- (double)zoomFactor;
- (double)zoomFactorToFitWidth;

// QLDisplayBundle (Accessibility)

- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (id)accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityUIElements;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForUIElementWithIdentifier:(id)arg1;

// QLDisplayBundle (navigation)

+ (id)keyPathsForValuesAffectingHidePlayControl;
+ (id)keyPathsForValuesAffectingNeedsVolumeControl;

- (BOOL)hidePlayControl;
- (BOOL)needsVolumeControl;
- (void)setShowRemainingTime:(BOOL)arg1;
- (BOOL)showRemainingTime;

@end
