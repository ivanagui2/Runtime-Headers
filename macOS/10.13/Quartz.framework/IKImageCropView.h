/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKImageCropView : NSView {
    BOOL  _acceptsDrop;
    BOOL  _allowEdit;
    BOOL  _allowRotations;
    NSColor * _alphaFrameColor;
    NSTimer * _animatedGifsTimer;
    BOOL  _animates;
    NSColor * _backgroundColor;
    NSColor * _borderColor;
    int  _borderType;
    IKSFCropElement * _cameraElement;
    BOOL  _centeredVerticalAlignment;
    NSMutableArray * _ciEffects;
    struct CGImage { } * _ciInputCache;
    int  _clockwiseRotation;
    int  _constraintMode;
    CIContext * _context;
    NSColor * _cropBackgroundColor;
    float  _cropFrameZoomValue;
    IKImageCropPRS * _cropPRS;
    struct CGSize { 
        double width; 
        double height; 
    }  _cropSize;
    int  _cropZoneBehavior;
    int  _currentAnimatedImageFrame;
    BOOL  _datasourceStable;
    BOOL  _defaultCropIsZoomToFit;
    id  _delegate;
    NSColor * _dimmedLayerColor;
    float  _dragCurrentRotation;
    IKImageCropPRS * _dragInitialCropPRS;
    float  _dragLastRotation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dragOrigin;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dragOriginGizmoPosition;
    float  _dragOriginRotation;
    IKImageCropViewEffect * _draggedGizmo;
    BOOL  _drawContent;
    struct CGPoint { 
        double x; 
        double y; 
    }  _focus;
    BOOL  _focusValid;
    IKSFCropElement * _imageAffineRotation;
    IKSFCropElement * _imageAffineTransform;
    BOOL  _inCameraMode;
    BOOL  _inImageDrag;
    NSAttributedString * _informationalAttributedString;
    NSString * _informationalString;
    BOOL  _isDirty;
    BOOL  _keepFocusMode;
    CIImage * _lastRenderedCIImage;
    IKMipmapImage * _mipmap;
    BOOL  _mouseInside;
    BOOL  _nicestDrawPosted;
    BOOL  _nicestDrawingMode;
    struct CGSize { 
        double width; 
        double height; 
    }  _offscreeQCCacheSize;
    struct CGContext { } * _offscreenCGContext;
    QCRenderer * _offscreenQCRenderer;
    int  _onAnimatedImageTimerCount;
    IKImageWrapper * _originalImage;
    NSImage * _overlayMaskImage;
    BOOL  _preloadThreadLaunched;
    NSProgressIndicator * _progressIndicator;
    IKImageWrapper * _qcBuffer;
    IKImageCropViewEffect * _qcEffect;
    BOOL  _showValidateButton;
    BOOL  _showZoomMinMax;
    BOOL  _showZoomSlider;
    struct CGSize { 
        double width; 
        double height; 
    }  _sourceSize;
    long long  _trackingRect;
    NSUndoManager * _undoManager;
    BOOL  _useOverlayMask;
    BOOL  _usesCircularCrop;
    IKSFCropElement * _viewAffineTransform;
    float  _zoomFactorMaxResolution;
    float  _zoomFactorMinResolution;
    NSButton * _zoomMaxButton;
    NSButton * _zoomMinButton;
    IKImageCropViewSlider * _zoomSlider;
    float  _zoomValue;
}

- (void)_prepareCropPRSUndo:(id)arg1;
- (void)_prepareEffectsUndo:(id)arg1;
- (void)_prepareGizmoPositionUndo:(struct CGPoint { double x1; double x2; })arg1;
- (void)_resetTrackingRect;
- (void)_setImage:(id)arg1;
- (void)_undoableSetCropPRSWithDisplay:(id)arg1;
- (void)_undoableSetEffectsWithDisplay:(id)arg1;
- (void)_undoableSetGizmoPositionWithDisplay:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)acceptsFirstResponder;
- (id)alphaFrameColor;
- (BOOL)animates;
- (id)backgroundColor;
- (BOOL)becomeFirstResponder;
- (id)borderColor;
- (BOOL)centeredVerticalAlignment;
- (id)cropBackgroundColor;
- (void)cropElementDidLiveUpdate:(id)arg1;
- (id)cropInfo;
- (id)cropPRS;
- (id)cropParameters;
- (struct CGSize { double x1; double x2; })cropSize;
- (int)cropZoneBehavior;
- (id)croppedImage;
- (id)croppedImageWithSize:(struct CGSize { double x1; double x2; })arg1;
- (BOOL)currentImageIsAnimated;
- (void)dealloc;
- (BOOL)defaultCropIsZoomToFit;
- (id)delegate;
- (id)dimmedLayerColor;
- (void)editedImageDidChanged;
- (void)finalize;
- (void)grabCapture;
- (void)grabFocusIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageCroppedRect;
- (id)informationalAttributedString;
- (id)informationalString;
- (void)initComponent;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)inputImageIsModified;
- (BOOL)isDirty;
- (BOOL)isLiveCapturing;
- (BOOL)mouseDownCanMoveWindow;
- (void)onAnimatedImageTimer;
- (void)onResize:(id)arg1;
- (struct CGSize { double x1; double x2; })originalCropSize;
- (id)originalImage;
- (void)preload;
- (void)preloadThread;
- (void)resetCursorRects;
- (BOOL)resignFirstResponder;
- (void)resizeComponents;
- (void)setAlphaFrameColor:(id)arg1;
- (void)setAnimates:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBorderColor:(id)arg1;
- (void)setCenteredVerticalAlignment:(BOOL)arg1;
- (void)setCropBackgroundColor:(id)arg1;
- (void)setCropInfo:(id)arg1;
- (void)setCropPRS:(id)arg1;
- (void)setCropSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCropZoneBehavior:(int)arg1;
- (void)setDefaultCropIsZoomToFit:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDimmedLayerColor:(id)arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setImage:(id)arg1;
- (void)setInformationalAttributedString:(id)arg1;
- (void)setInformationalString:(id)arg1;
- (void)setRotation:(float)arg1;
- (void)setUndoManager:(id)arg1;
- (void)setUseOverlayMask:(BOOL)arg1;
- (void)setUsesCircularCrop:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })sourceSize;
- (void)startCapture;
- (void)stopCapture;
- (id)undoManager;
- (void)updateComponentState;
- (BOOL)usesCircularCrop;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)windowDidMiniaturize:(id)arg1;

// IKImageCropView (behaviors)

- (struct CGSize { double x1; double x2; })_originalImageBoundingBoxSizeIncludingRotation;
- (BOOL)acceptsDrop;
- (BOOL)allowEdit;
- (BOOL)allowRotations;
- (int)borderType;
- (void)checkBoundaries;
- (void)checkZoomBoundaries;
- (int)constrainMode;
- (struct CGSize { double x1; double x2; })keepAtLeastOnePixelZoomRange;
- (BOOL)keepFocusMode;
- (struct CGSize { double x1; double x2; })noHolesZoomRange;
- (void)setAcceptsDrop:(BOOL)arg1;
- (void)setAllowEdit:(BOOL)arg1;
- (void)setAllowRotations:(BOOL)arg1;
- (void)setBorderType:(int)arg1;
- (void)setConstrainMode:(int)arg1;
- (void)setKeepFocusMode:(BOOL)arg1;
- (void)setShowLoadingIndicator:(BOOL)arg1;
- (void)setShowValidateButton:(BOOL)arg1;
- (void)setShowZoomMinMax:(BOOL)arg1;
- (void)setShowZoomSlider:(BOOL)arg1;
- (BOOL)showLoadingIndicator;
- (BOOL)showValidateButton;
- (BOOL)showZoomMinMax;
- (BOOL)showZoomSlider;

// IKImageCropView (dragndrop)

- (unsigned long long)draggingEntered:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;

// IKImageCropView (drawing)

+ (id)imageFromContext:(struct CGContext { }*)arg1 withComposition:(id)arg2 fxCenter:(struct CGPoint { double x1; double x2; })arg3 qcRenderer:(id)arg4;

- (void)_nicestDraw;
- (void)_postNicestDraw;
- (void)_prepareNicestDraw:(id)arg1;
- (void)drawAlphaFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawBack:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawBorder:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (BOOL)drawContent;
- (void)drawEffectGizmo;
- (void)drawGizmo;
- (void)drawImage:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawInCell:(id)arg1 withRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inLiveResize:(BOOL)arg3;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRotationGizmo;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })gizmoBoundingBoxForRadius:(float)arg1;
- (struct CGContext { }*)initQCContextWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)keepLastRenderedCIImage:(id)arg1;
- (BOOL)needPostNicestDraw;
- (void)postNicestDraw;
- (void)renderImageWithCIPipeline:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (float)rotationGizmoRadius;
- (void)setDrawContent:(BOOL)arg1;

// IKImageCropView (effects)

- (void)_unlinkCIEffect:(id)arg1;
- (id)addEffectWithName:(id)arg1 type:(id)arg2 position:(struct CGPoint { double x1; double x2; })arg3;
- (id)context;
- (id)effects;
- (BOOL)hasEffect;
- (id)qcComposition;
- (void)reloadContext;
- (void)removeAllEffects;
- (void)removeEffect:(id)arg1;
- (void)setQCComposition:(id)arg1;

// IKImageCropView (events)

- (void)_mouseDragged:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_opaqueRect;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (id)gizmoHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (void)keyDown:(id)arg1;
- (void)keyUp:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseUp:(id)arg1;

// IKImageCropView (layout)

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectOfOrientedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rotation:(float)arg2 pivot:(struct CGPoint { double x1; double x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRectWithoutZoom;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageBoundingRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageRectWithoutRotations;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })roundSubRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })roundedImageRectWithoutRotations;
- (float)yTranslation;

// IKImageCropView (rotation)

- (float)rotationForEvent:(id)arg1;
- (float)snapRotation:(float)arg1;

// IKImageCropView (utils)

+ (id)cropPRSFromCropRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cropSize:(struct CGSize { double x1; double x2; })arg2 originalImageSize:(struct CGSize { double x1; double x2; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRegionBoundingRectForCropSize:(struct CGSize { double x1; double x2; })arg1 cropPRS:(id)arg2 originalImageSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)croppedImageFromOriginalImage:(id)arg1 cropInfo:(id)arg2 cropSize:(struct CGSize { double x1; double x2; })arg3 outputSize:(struct CGSize { double x1; double x2; })arg4 bgColor:(id)arg5;

- (struct CGPoint { double x1; double x2; })convertScreenPositionToPRSPosition:(struct CGPoint { double x1; double x2; })arg1;
- (id)resourceImageNamed:(id)arg1;

// IKImageCropView (zoom)

- (void)_setZoomValue:(float)arg1;
- (void)_setZoomValueWithDisplay:(float)arg1;
- (void)invalidateFocusPoint;
- (void)limitZoomToMinFactor:(float)arg1 maxFactor:(float)arg2;
- (void)onSliderMouseDown:(id)arg1 event:(id)arg2;
- (void)onSliderMouseUp:(id)arg1 event:(id)arg2;
- (void)privateSliderDidChanged:(id)arg1;
- (float)scaleValue;
- (void)setZoomValue:(float)arg1;
- (void)updateFocusPoint;
- (void)zoomMaxCallback:(id)arg1;
- (void)zoomMin:(float*)arg1 andMax:(float*)arg2;
- (void)zoomMinCallback:(id)arg1;
- (struct CGSize { double x1; double x2; })zoomRange;
- (float)zoomValue;
- (float)zoomValueRelativeToZoomRange;
- (float)zoomValueRelativeToZoomRange:(float)arg1;

@end
