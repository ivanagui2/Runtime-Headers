/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI
 */

@interface QLDynamicThumbnailLayer : CALayer {
    CALayer * _backLayer;
    NSString * _contentTypeUTIHint;
    CALayer * _frontLayer;
    BOOL  _hasSubthumbnailToRemove;
    BOOL  _hasSubthumbnailToShow;
    BOOL  _isPaused;
    BOOL  _loaded;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxThumbnailSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _minThumbnailSize;
    BOOL  _needsPlaceHolder;
    NSConditionLock * _pauseLock;
    <QLPreviewItem> * _previewItem;
    unsigned long long  _requestIndex;
    BOOL  _showPlaceholderAfterTimeout;
    BOOL  _subthumbnailNeedsDisplayRequested;
    struct __QLThumbnail { } * _thumbnail;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _thumbnailContentRect;
    NSURL * _url;
}

@property (atomic, readwrite, copy) NSURL *URL;
@property (atomic, readwrite, copy) NSString *contentTypeUTIHint;
@property (atomic, readonly) BOOL loaded;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } minThumbnailSize;
@property (atomic, readwrite, retain) <QLPreviewItem> *previewItem;
@property (atomic, readwrite) BOOL showPlaceholderAfterTimeout;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } thumbnailContentFrame;
@property (atomic, readonly) struct CGImage { }*thumbnailImage;
@property (atomic, readonly) struct CGSize { double x1; double x2; } thumbnailSize;

- (id)URL;
- (void)_appendSubThumbnail:(id)arg1;
- (void)_blockAndWaitIfNecessaryWithRequestIndex:(unsigned long long)arg1;
- (void)_computeFolderContentsThumbnailsContinuously:(struct __CFURL { }*)arg1 requestIndex:(unsigned long long)arg2;
- (void)_computeThumbnail:(struct __QLThumbnail { }*)arg1 forURL:(id)arg2 withUTIHint:(id)arg3 requestIndex:(unsigned long long)arg4;
- (void)_dispatchRequestInfo;
- (struct CGSize { double x1; double x2; })_optimalThumbnailSize;
- (void)_ql_layoutSublayers;
- (struct CGSize { double x1; double x2; })_realThumbnailSize;
- (void)_reallyRemoveOldestSubthumbnail;
- (void)_removeOldestSubthumbnail;
- (void)_setPlaceHolder;
- (void)_showNewestSubthumbnail;
- (id)_subthumbnailLayers;
- (void)_thumbnailDone:(id)arg1;
- (void)_updatePauseLock;
- (void)_updateSubthumbnails;
- (void)appendSubThumbnail:(struct CGImage { }*)arg1;
- (id)contentTypeUTIHint;
- (void)dealloc;
- (void)handleMouseDownAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)init;
- (BOOL)isPaused;
- (BOOL)loaded;
- (struct CGSize { double x1; double x2; })minThumbnailSize;
- (void)pause;
- (id)previewItem;
- (void)recomputeThumbnailIfNeeded;
- (void)resume;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentTypeUTIHint:(id)arg1;
- (void)setContentsScale:(double)arg1;
- (void)setMinThumbnailSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPreviewItem:(id)arg1;
- (void)setShowPlaceholderAfterTimeout:(BOOL)arg1;
- (void)setURL:(id)arg1;
- (BOOL)showPlaceholderAfterTimeout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbnailContentFrame;
- (struct CGImage { }*)thumbnailImage;
- (struct CGSize { double x1; double x2; })thumbnailSize;

@end
