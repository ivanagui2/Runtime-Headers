/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKImageLayer : CATiledLayer {
    BOOL  _animateTransition;
    CALayer * _backgroundLayer;
    BOOL  _badImage;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _cachedCTM;
    struct CGImage { } * _cachedImage;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedImageSize;
    BOOL  _canAnimateImage;
    struct CGImage { } * _cgImageRef;
    BOOL  _closingDown;
    IKComposer * _composer;
    struct CGSize { 
        double width; 
        double height; 
    }  _dpi;
    struct CGPoint { 
        double x; 
        double y; 
    }  _eventMouseDownLocation;
    CAKeyframeAnimation * _gifAnimation;
    BOOL  _handlingBoundsChanged;
    NSClipView * _ikClipView;
    IKImageView * _ikImageView;
    IKKnobLayer * _ikKnobLayer;
    NSScrollView * _ikScrollView;
    unsigned long long  _imageIndex;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _imageLayerLock;
    NSDictionary * _imageProperties;
    double  _imageRotation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _imageScalingUserScaled;
    double  _imageScalingX;
    double  _imageScalingY;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _imageTransform;
    BOOL  _isAnimatingImage;
    struct CGImageSource { } * _isr;
    NSString * _magnificationFilterName;
    NSString * _minificationFilterName;
    double  _nonSquareHeightFactor;
    BOOL  _nonSquarePixels;
    double  _nonSquareWidthFactor;
    int  _orientationTag;
    struct CGSize { 
        double width; 
        double height; 
    }  _originalImageSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _startBoundsRect;
    BOOL  _supportsSubsampling;
    NSURL * _url;
    BOOL  _userDefaultsOverwriteMagnificationFilter;
    BOOL  _userDefaultsOverwriteMinificationFilter;
    double  _userSpaceScaleFactor;
    BOOL  _waitingForResetAnchorPoint;
}

@property (atomic, readonly) struct CGImage { }*cachedImage;
@property (atomic, readwrite) BOOL canAnimateImage;
@property (atomic, readwrite) double imageRotation;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } imageScalingUserScaled;
@property (nonatomic, readwrite) double imageScalingX;
@property (nonatomic, readwrite) double imageScalingY;
@property (atomic, readwrite) BOOL isAnimatingImage;
@property (atomic, readwrite) BOOL isBadImage;
@property (atomic, readwrite, copy) NSString *magnificationFilterName;
@property (atomic, readwrite, copy) NSString *minificationFilterName;
@property (atomic, readwrite) double nonSquareHeightFactor;
@property (atomic, readwrite) BOOL nonSquarePixels;
@property (atomic, readwrite) double nonSquareWidthFactor;
@property (atomic, readwrite) int orientationTag;
@property (atomic, readwrite) struct CGSize { double x1; double x2; } originalImageSize;
@property (atomic, readwrite) BOOL userDefaultsOverwriteMagnificationFilter;
@property (atomic, readwrite) BOOL userDefaultsOverwriteMinificationFilter;
@property (nonatomic, readonly) double userSpaceScaleFactor;

+ (double)fadeDuration;
+ (BOOL)registerLayerWithView:(id)arg1;

- (void)_updateLayer:(id)arg1;
- (void)animateTransition:(id)arg1;
- (BOOL)animates;
- (void)autoResizeToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 allowZoomIn:(BOOL)arg2;
- (BOOL)badImage;
- (struct CGImage { }*)cachedImage;
- (BOOL)canAnimateImage;
- (void)centerImage;
- (struct CGImage { }*)cgImage;
- (id)ciImage;
- (void)cleanup;
- (void)clipViewBoundsChanged:(id)arg1;
- (void)closingDown;
- (struct CGImage { }*)createSquarePixelCopy:(struct CGImage { }*)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3;
- (void)createThumbnailWidth:(int)arg1 height:(int)arg2 level:(int)arg3;
- (void)dealloc;
- (void)doSetImage:(struct CGImage { }*)arg1 imageProperties:(id)arg2 imageState:(id)arg3 options:(id)arg4;
- (void)doSetImageWithState:(id)arg1 options:(id)arg2;
- (void)drawCachedImageInContext:(struct CGContext { }*)arg1;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)dumpCTM:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)dumpGeometry:(id)arg1;
- (void)finalize;
- (void)flipImageHorizontal:(id)arg1;
- (void)flipImageVertical:(id)arg1;
- (id)getMagnificationFilter;
- (id)getMinificationFilter;
- (void)ikLayerWasAddedToSuperlayer;
- (void)ikMouseDown:(id)arg1;
- (void)ikMouseDragged:(id)arg1;
- (void)ikMouseUp:(id)arg1;
- (id)imageProperties;
- (double)imageRotation;
- (struct CGPoint { double x1; double x2; })imageScalingUserScaled;
- (double)imageScalingX;
- (double)imageScalingY;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })imageTransform;
- (id)init;
- (void)invalidate;
- (void)invalidateCachedCTM;
- (BOOL)isAnimatingImage;
- (BOOL)isBadImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })limitRect;
- (id)magnificationFilterName;
- (id)minificationFilterName;
- (struct CGSize { double x1; double x2; })nonAutorotatedOriginalImageSize;
- (double)nonSquareHeightFactor;
- (BOOL)nonSquarePixels;
- (double)nonSquareWidthFactor;
- (id)optionsForCGImageSourceCreateImageAtIndex;
- (int)orientationTag;
- (struct CGSize { double x1; double x2; })originalImageSize;
- (void)releaseCGImage;
- (void)renderInContext:(struct CGContext { }*)arg1;
- (void)renderWithRotationsInContext:(struct CGContext { }*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)replaceImage:(struct CGImage { }*)arg1 imageProperties:(id)arg2 imageState:(id)arg3;
- (void)resetAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)resetTransforms;
- (void)rotateImageLeft:(id)arg1;
- (void)rotateImageRight:(id)arg1;
- (double)rotationAngle;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rotationTransform;
- (void)saveState:(id)arg1;
- (double)scalingFactor;
- (void)scrollToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)scrollToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAnchorPointAndKeepFrame:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAnimates:(BOOL)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCanAnimateImage:(BOOL)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setImage:(struct CGImage { }*)arg1 imageProperties:(id)arg2 imageState:(id)arg3 options:(id)arg4;
- (void)setImageRotation:(double)arg1;
- (void)setImageScalingUserScaled:(struct CGPoint { double x1; double x2; })arg1;
- (void)setImageScalingX:(double)arg1;
- (void)setImageScalingY:(double)arg1;
- (void)setImageWithURL:(id)arg1 imageState:(id)arg2 options:(id)arg3;
- (void)setImageZoomFactor:(double)arg1 centerPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setIsAnimatingImage:(BOOL)arg1;
- (void)setIsBadImage:(BOOL)arg1;
- (void)setKnobLayer:(id)arg1;
- (void)setMagnificationFilterName:(id)arg1;
- (void)setMinificationFilterName:(id)arg1;
- (void)setNonSquareHeightFactor:(double)arg1;
- (void)setNonSquarePixels:(BOOL)arg1;
- (void)setNonSquareWidthFactor:(double)arg1;
- (void)setOrientationTag:(int)arg1;
- (void)setOriginalImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRotation:(id)arg1;
- (void)setRotationAngle:(double)arg1;
- (void)setRotationAngle:(double)arg1 centerPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setScalingFactorX:(double)arg1 factorY:(double)arg2;
- (void)setScalingFactorX:(double)arg1 factorY:(double)arg2 visibleCenter:(struct CGPoint { double x1; double x2; })arg3;
- (void)setUserDefaultsOverwriteMagnificationFilter:(BOOL)arg1;
- (void)setUserDefaultsOverwriteMinificationFilter:(BOOL)arg1;
- (void)setVisibleCenterPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setup:(id)arg1;
- (BOOL)shouldCacheFullSizeImage;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformForOrientationAndDPI;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformForOrientationAndDPIWithScaledTranslation;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformForOrientationAndDPIWithTranslation;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformForOrientationAndDPIWithTranslationForWidth:(float)arg1 height:(float)arg2;
- (struct CGSize { double x1; double x2; })transformedOriginalImageSize;
- (struct CGSize { double x1; double x2; })transformedScaledImageSize;
- (void)updateClipViewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forVisibleCenter:(struct CGPoint { double x1; double x2; })arg2;
- (void)updateImageLayer;
- (void)updateOrientationTag:(int)arg1 animate:(BOOL)arg2 reCenter:(BOOL)arg3;
- (BOOL)userDefaultsOverwriteMagnificationFilter;
- (BOOL)userDefaultsOverwriteMinificationFilter;
- (double)userSpaceScaleFactor;
- (struct CGPoint { double x1; double x2; })visibleCenterPoint;
- (void)zoomActualSize:(id)arg1;
- (void)zoomImageToFit:(id)arg1;
- (void)zoomImageToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)zoomIn:(id)arg1;
- (void)zoomOut:(id)arg1;

@end
