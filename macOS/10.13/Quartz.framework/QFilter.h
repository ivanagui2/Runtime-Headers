/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzFilters.framework/Versions/A/QuartzFilters
 */

@interface QFilter : QFilterComponent {
    QFilterCell * mActionCell;
    NSMutableArray * mComponents;
    /* Warning: unhandled struct encoding: '{QFilterInfo="filter"@"options"^{QuartzFilterOptions}"optionsInfo"^{QuartzFilterOptionsInfo}"url"@"NSURL""comments"@"NSString""domains"@"NSMutableDictionary""readOnly"c"usedObjectTypes"[5c]"assignInfo"{AssignComponentInfo="aGrayNames"@"NSArray""aRGBNames"@"NSArray""aCMYKNames"@"NSArray""data"[12i]"object"[12i]"profile"[12q]"cellIDX"[4[5i]]}"defaultInfo"{DefaultComponentInfo="dGrayNames"@"NSArray""dRGBNames"@"NSArray""dCMYKNames"@"NSArray""data"[12i]"object"[12i]"profile"[12q]"cellIDX"[4[5i]]}"intermInfo"{IntermediateComponentInfo="midNames"@"NSArray""type"[16i]"data"[16i]"object"[16i]"profile"[16q]"index"[16[7i]]"cellIDX"[4[5i]]}"targetInfo"{TargetComponentInfo="targetNames"@"NSArray""data"[16i]"object"[16i]"profile"[16q]"cellIDX"[4[5i]]}"intentInfo"{RenderingIntentInfo="data"[16i]"object"[16i]"intent"[16I]}"dPDFXNames"@"NSArray"}' */ struct QFilterInfo { 
        id filter; 
    }  mInfo;
    QFilterOwner * mOwner;
}

+ (id)newWithName:(id)arg1 url:(id)arg2 filterData:(id)arg3 actions:(id*)arg4 domains:(id)arg5 comments:(id)arg6 readOnly:(BOOL)arg7 owner:(id)arg8;

- (id)actionCell;
- (id)addComponent:(id)arg1;
- (id)addComponentByID:(int)arg1;
- (void)addSubItem:(id)arg1;
- (void)cellNotification:(int)arg1 cell:(id)arg2;
- (void)componentAddNotification:(id)arg1;
- (void)componentRemoveNotification:(id)arg1;
- (void)componentUpdateNotification:(id)arg1;
- (void)dealloc;
- (struct QFilterInfo { id x1; struct QuartzFilterOptions {} x2; struct QuartzFilterOptionsInfo {} *x3; id x4; id x5; BOOL x6[5]; struct AssignComponentInfo { id x_7_1_1; id x_7_1_2; /* Warning: Unrecognized filer type: '1' using 'void*' */ void*x_7_1_3; void*x_7_1_4; int x_7_1_5; void*x_7_1_6; int x_7_1_7[12]; long long x_7_1_8[12]; int x_7_1_9[4][5]; } x7; struct DefaultComponentInfo { id x_8_1_1; id x_8_1_2; void*x_8_1_3; void*x_8_1_4; int x_8_1_5; void*x_8_1_6; int x_8_1_7[12]; long long x_8_1_8[12]; int x_8_1_9[4][5]; } x8; struct IntermediateComponentInfo { id x_9_1_1; void*x_9_1_2; void*x_9_1_3; int x_9_1_4; void*x_9_1_5; int x_9_1_6[16]; int x_9_1_7[16]; long long x_9_1_8[16]; int x_9_1_9[16][7]; int x_9_1_10[4][5]; } x9; struct TargetComponentInfo { id x_10_1_1; void*x_10_1_2; void*x_10_1_3; int x_10_1_4; void*x_10_1_5; int x_10_1_6[16]; long long x_10_1_7[16]; int x_10_1_8[4][5]; } x10; struct RenderingIntentInfo { int x_11_1_1[16]; int x_11_1_2[16]; unsigned int x_11_1_3[16]; } x11; id x12; }*)filterInfo;
- (id)findComponentByID:(int)arg1;
- (id)initWithName:(id)arg1 url:(id)arg2 filterData:(id)arg3 actions:(id*)arg4 domains:(id)arg5 comments:(id)arg6 readOnly:(BOOL)arg7 owner:(id)arg8;
- (void)initializeComponents;
- (id)name;
- (id)newComponentByID:(int)arg1;
- (id)owner;
- (void)release;
- (void)removeComponent:(id)arg1;
- (void)setName:(id)arg1;
- (void)updateUI;

@end
