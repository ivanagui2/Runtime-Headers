/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer
 */

@interface QCImageManager : NSObject {
    double  _GCReclaimResourcesTimestamp;
    double  _ageConfidence;
    struct _QCCacheProfileInfo { unsigned long long x1; unsigned long long x2; } * _cacheProfileInfo;
    struct __CFBag { } * _clients;
    QCCGLContext * _context;
    <QCCache> * _conversionCache;
    GFList * _converterCache;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _converterCacheMutex;
    unsigned long long  _converterCacheTimestamp;
    NSMutableDictionary * _convertersList;
    struct _opaque_pthread_cond_t { 
        long long __sig; 
        BOOL __opaque[40]; 
    }  _convertersListCondition;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _convertersListMutex;
    void * _cvTextureCache;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _exporterCacheMutex;
    unsigned long long  _exporterCacheTimestamp;
    NSMutableDictionary * _exporterClassCache;
    NSMutableDictionary * _exporterTypeCache;
    NSMutableDictionary * _exportersList;
    struct _opaque_pthread_cond_t { 
        long long __sig; 
        BOOL __opaque[40]; 
    }  _exportersListCondition;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _exportersListMutex;
    <QCCache> * _imageCache;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _managerMutex;
    double  _maximumAvailableRAM;
    double  _maximumAvailableVRAM;
    NSDictionary * _options;
    QCResourcePool * _pixelBufferPool;
    <QCCache> * _providerImageCache;
    double  _reclaimResourcesTimestamp;
    long long  _rendererID;
    <QCCache> * _representationCache;
    double  _requestedRAM;
    double  _requestedVRAM;
    <QCCache> * _sequenceCache;
    QCResourcePool * _textureBufferPool;
    QCResourcePool * _texturePool;
    void * _unused;
    NSMutableDictionary * _userInfo;
}

+ (double)_maximumAvailableMemoryForRendererID:(long long)arg1;
+ (id)createUniqueImageManagerForQCCGLContext:(id)arg1 options:(id)arg2;
+ (void)initialize;
+ (id)sharedSoftwareImageManager;

- (struct __CVOpenGLTextureCache { }*)CVOpenGLTextureCache;
- (id)QCCGLContext;
- (struct _QCCacheProfileInfo { unsigned long long x1; unsigned long long x2; }*)_cacheProfileInfo;
- (void)_finalize_QCImageManager;
- (void)_setProfileCache:(BOOL)arg1;
- (id)ageStatisticsForIndex:(unsigned long long)arg1;
- (double)availableMemoryForRequestedMemory:(double)arg1 ofType:(int)arg2 virtualScreen:(unsigned long long)arg3;
- (id)createFlattenedImage:(id)arg1 withFormat:(id)arg2 colorSpace:(struct CGColorSpace { }*)arg3 options:(id)arg4;
- (id)createImageWithSource:(id)arg1 options:(id)arg2;
- (id)createPixelBufferFromImageBuffer:(id)arg1 sourceBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3;
- (id)createPixelBufferFromImageBuffer:(id)arg1 withFormat:(id)arg2 transformation:(id)arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5 options:(id)arg6;
- (id)createPixelBufferFromProvider:(id)arg1 withFormat:(id)arg2 transformation:(id)arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5 options:(id)arg6;
- (id)createPixelBufferWithFormat:(id)arg1 pixelsWide:(unsigned long long)arg2 pixelsHigh:(unsigned long long)arg3 options:(id)arg4;
- (id)createRepresentationFromProvider:(id)arg1 ofType:(id)arg2 withOptions:(id)arg3;
- (id)createSurfaceBufferFromProvider:(id)arg1 withFormat:(id)arg2 transformation:(id)arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5 options:(id)arg6;
- (id)createSurfaceBufferWithFormat:(id)arg1 pixelsWide:(unsigned long long)arg2 pixelsHigh:(unsigned long long)arg3 options:(id)arg4;
- (id)createTextureBufferFromImageBuffer:(id)arg1 target:(unsigned int)arg2 sourceBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 options:(id)arg4;
- (id)createTextureBufferFromImageBuffer:(id)arg1 withFormat:(id)arg2 target:(unsigned int)arg3 transformation:(id)arg4 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 colorSpace:(struct CGColorSpace { }*)arg6 options:(id)arg7;
- (id)createTextureBufferFromProvider:(id)arg1 withFormat:(id)arg2 target:(unsigned int)arg3 transformation:(id)arg4 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 colorSpace:(struct CGColorSpace { }*)arg6 options:(id)arg7;
- (id)createTextureBufferWithFormat:(id)arg1 target:(unsigned int)arg2 pixelsWide:(unsigned long long)arg3 pixelsHigh:(unsigned long long)arg4 options:(id)arg5;
- (void)dealloc;
- (id)description;
- (void)finalize;
- (id)initWithOpenGLContext:(id)arg1 options:(id)arg2;
- (id)initWithQCCGLContext:(id)arg1 options:(id)arg2;
- (id)listResources;
- (id)openGLContext;
- (id)openGLContextForCurrentThread;
- (void)optimizeCaches;
- (id)options;
- (id)performanceCountersForVirtualScreen:(unsigned long long)arg1 purgeable:(BOOL)arg2;
- (void)purgeResources;
- (void)reclaimResources;
- (void)registerClient:(id)arg1;
- (id)registeredClients;
- (void)setUserInfo:(id)arg1 forKey:(id)arg2;
- (void)unregisterClient:(id)arg1;
- (id)userInfo;
- (id)userInfoForKey:(id)arg1;

// QCImageManager (BasicImageManipulation)

- (BOOL)copyPixelsFromImage:(id)arg1 toBaseAddress:(void*)arg2 withBytesPerRow:(unsigned int)arg3;

// QCImageManager (ConverterRegistry)

+ (id)imageBufferConverterClasses;
+ (float)priorityForBufferConverterClass:(Class)arg1;
+ (void)registerImageBufferConverterClass:(Class)arg1 priority:(float)arg2;
+ (id)unregisterBufferConverterClass:(Class)arg1;

// QCImageManager (Internal)

- (BOOL)_computeImageBufferParametersForProvider:(id)arg1 withFormat:(id)arg2 target:(unsigned int)arg3 colorSpace:(struct CGColorSpace { }*)arg4 outSrcFormat:(id*)arg5 outSrcTarget:(unsigned int*)arg6 outSrcColorSpace:(struct CGColorSpace {}**)arg7 outDstFormat:(id*)arg8 outDstTarget:(unsigned int*)arg9 outDstColorSpace:(struct CGColorSpace {}**)arg10 relaxedFormat:(BOOL)arg11 softwareOnly:(BOOL)arg12;
- (id)_convertersList;
- (struct _opaque_pthread_cond_t { long long x1; BOOL x2[40]; }*)_convertersListCondition;
- (struct _opaque_pthread_mutex_t { long long x1; BOOL x2[56]; }*)_convertersListMutex;
- (id)_createImageBufferFromImageBuffer:(id)arg1 withFormat:(id)arg2 target:(unsigned int)arg3 transformation:(id)arg4 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 colorSpace:(struct CGColorSpace { }*)arg6 options:(id)arg7;
- (id)_createImageBufferFromProvider:(id)arg1 withFormat:(id)arg2 target:(unsigned int)arg3 transformation:(id)arg4 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 colorSpace:(struct CGColorSpace { }*)arg6 options:(id)arg7;
- (id)_createPixelBufferFromImageBuffer:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 needsClipping:(BOOL)arg3 flippedState:(long long)arg4 options:(id)arg5;
- (id)_createTextureBufferFromImageBuffer:(id)arg1 target:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 needsClipping:(BOOL)arg4 flippedState:(long long)arg5 options:(id)arg6;
- (id)createPixelBufferFromPixelBuffer:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 flip:(BOOL)arg3 options:(id)arg4;
- (id)createPixelBufferFromTextureBuffer:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3;
- (id)createSurfaceBufferFromPixelBuffer:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 flip:(BOOL)arg3 options:(id)arg4;
- (id)createSurfaceBufferFromTextureBuffer:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3;
- (id)createTextureBufferFromPixelBuffer:(id)arg1 target:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 options:(id)arg4;
- (id)createTextureBufferFromTextureBuffer:(id)arg1 target:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 flip:(BOOL)arg4 options:(id)arg5;

// QCImageManager (QCProFX)

- (id)copyPixelBufferFromImageBuffer:(id)arg1 sourceBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 options:(id)arg3;

@end
