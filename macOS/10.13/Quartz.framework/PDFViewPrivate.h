/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/PDFKit
 */

@interface PDFViewPrivate : NSObject {
    PDFAKOverlayAdaptor * akOverlayAdaptor;
    bool  allowsDragging;
    unsigned long long  animateFlag;
    NSCursor * annotationCursor;
    bool  autoScale;
    double  blockingWaitDuration;
    PDFCoachMarkManager * coachMarkManager;
    PDFViewController * controller;
    unsigned long long  currentPageIndex;
    PDFSelection * currentSelection;
    PDFAnnotation * currentTextWidget;
    bool  debugDrawCGPDFNodeLayer;
    NSImmediateActionGestureRecognizer * deepPressRecognizer;
    <PDFViewDelegate> * delegate;
    bool  delegateOrdersPageDrawing;
    bool  delegateWillScale;
    NSMutableArray * destinationHistory;
    long long  displayDirection;
    long long  displayMode;
    bool  displaysAsBook;
    bool  displaysBookmarksForPages;
    bool  displaysPageBreaks;
    bool  displaysRTL;
    PDFDocument * document;
    bool  enableSelectionDrawing;
    bool  enableSwipeGestures;
    unsigned long long  firstVisiblePage;
    PDFPage * fromPage;
    NSColor * gutterColor;
    double  gutterWide;
    NSArray * highlights;
    long long  historyIndex;
    bool  inhibitAutoScroll;
    bool  isActivelyFluidSwiping;
    unsigned long long  lastHorizontalScrollDirection;
    unsigned long long  lastVerticalScrollDirection;
    unsigned long long  lastVisiblePage;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  originalCurrentPageViewFrames;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  originalTopPageViewFrames;
    struct NSEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  pageBreakMargins;
    PDFTimer * pageSyncTimer;
    PDFPasswordViewController * passwordViewController;
    NSObject<PDFViewPopupManager> * popupManager;
    PDFRenderingProperties * renderingProperties;
    RVItem * revealItem;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  revealItemRect;
    PDFSelection * revealItemSelection;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  rotatingPageOriginalFrame;
    PDFPageView * rotatingPageView;
    bool  scaling;
    unsigned long long  scrollEntry;
    PDFScrollView * scrollView;
    bool  scrollingChangesPages;
    bool  showsScrollIndicators;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  sourcePageFrames;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  targetPageFrames;
    NSTrackingArea * trackingArea;
    PDFViewLayout * viewLayout;
    bool  wantsForceUpdate;
    double  zoomIncrement;
}

- (void).cxx_destruct;

@end
