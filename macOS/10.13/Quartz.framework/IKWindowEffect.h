/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKWindowEffect : NSObject <NSAnimationDelegate> {
    unsigned int  _connectionID;
    double  _duration;
    double  _endAlpha;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _endTransform;
    double  _endWhite;
    BOOL  _equalRects;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceRect;
    double  _startAlpha;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _startTransform;
    double  _startWhite;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _targetRect;
    BOOL  _transtionIsLinear;
    NSView * _view;
    NSWindow * _window;
    int  _windowEffectType;
    long long  _windowNumber;
}

@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite, retain) NSWindow *window;

+ (id)newEffectForWindow:(id)arg1;

- (void)animationDidEnd:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (void)animationDone:(id)arg1;
- (id)initWithWindow:(id)arg1;
- (void)setStartAlpha:(double)arg1 endAlpha:(double)arg2 duration:(double)arg3;
- (void)setStartAlpha:(double)arg1 endAlpha:(double)arg2 view:(id)arg3 startRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 endRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 duration:(double)arg6;
- (void)setStartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 endRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 linear:(BOOL)arg3 duration:(double)arg4;
- (void)setStartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 endRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 startAlpha:(double)arg3 endAlpha:(double)arg4 duration:(double)arg5;
- (void)setStartRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 endRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 startWhite:(double)arg3 endWhite:(double)arg4 startAlpha:(double)arg5 endAlpha:(double)arg6 duration:(double)arg7;
- (void)setStartTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 endTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 startAlpha:(double)arg3 endAlpha:(double)arg4 duration:(double)arg5;
- (void)setSuckEffect:(float)arg1;
- (void)setWindow:(id)arg1;
- (void)start:(unsigned long long)arg1;
- (void)start:(unsigned long long)arg1 curve:(unsigned long long)arg2;
- (void)updateWindowForProgress:(float)arg1;
- (id)window;

@end
