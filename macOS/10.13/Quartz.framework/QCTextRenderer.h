/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer
 */

@interface QCTextRenderer : NSObject {
    int  _alignmentH;
    int  _alignmentV;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    double  _fontKerning;
    NSString * _fontName;
    double  _fontSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    void * _frameRef;
    void * _framesetterRef;
    double  _offset;
    NSString * _string;
}

+ (void)initialize;

- (void)_flushCache:(BOOL)arg1;
- (void)_updateCache;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (void)dealloc;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawInContext:(struct CGContext { }*)arg1 withColorRed:(double)arg2 green:(double)arg3 blue:(double)arg4 alpha:(double)arg5;
- (void)finalize;
- (id)fontName;
- (double)fontSize;
- (int)horizontalAlignment;
- (id)init;
- (double)kerningShift;
- (double)leadingOffset;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFontName:(id)arg1 size:(double)arg2;
- (void)setHorizontalAlignment:(int)arg1;
- (void)setKerningShift:(double)arg1;
- (void)setLeadingOffset:(double)arg1;
- (void)setString:(id)arg1;
- (void)setVerticalAlignment:(int)arg1;
- (id)string;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })typographicBounds;
- (int)verticalAlignment;
- (unsigned long long)visibleLineCount;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })visibleStringRange;

@end
