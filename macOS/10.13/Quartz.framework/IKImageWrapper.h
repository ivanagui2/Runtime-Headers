/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKImageWrapper : NSObject {
    unsigned int  _baseline;
    unsigned int  _baselineValid;
    unsigned int  _bitmapLocked;
    NSBitmapImageRep * _bitmapRepresentation;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedSize;
    NSData * _dataRepresentation;
    unsigned int  _generatedWithIconServices;
    unsigned int  _hasAlpha;
    unsigned int  _hasAlphaValid;
    <IKImageProxy> * _imageProxy;
    NSDictionary * _info;
    unsigned int  _invalid;
    unsigned int  _isReference;
    unsigned int  _quality;
    unsigned int  _toplineValid;
    unsigned int  _underlyingDataAreVolatile;
    NSURL * _url;
    union { 
        struct CGImage {} *_cgImage; 
        CIImage *_ciImage; 
        struct CGImageSource {} *_cgImageSource; 
        NSImage *_nsImage; 
        struct OpaqueIconRef {} *_icon; 
    }  _volatileRep;
    unsigned int  _volatileRepresentation;
}

+ (id)emptyImage;
+ (id)imageWithCGImage:(struct CGImage { }*)arg1;
+ (id)imageWithCGImageSource:(struct CGImageSource { }*)arg1;
+ (id)imageWithData:(id)arg1;
+ (id)imageWithDraggingItem:(id)arg1;
+ (id)imageWithIconRef:(struct OpaqueIconRef { }*)arg1;
+ (id)imageWithImageProxy:(id)arg1;
+ (id)imageWithNSBitmapImageRep:(id)arg1;
+ (id)imageWithNSImage:(id)arg1;
+ (id)imageWithObject:(id)arg1;
+ (id)imageWithObject:(id)arg1 scaleFactor:(double)arg2;
+ (id)imageWithPasteboard:(id)arg1;
+ (id)imageWithPath:(id)arg1;
+ (id)imageWithSize:(struct CGSize { double x1; double x2; })arg1;
+ (id)imageWithURL:(id)arg1;

- (id)GIFRepresentation;
- (id)IK_JPEGRepresentationWithCompressionFactor:(float)arg1;
- (id)TIFFRepresentation;
- (id)TIFFRepresentationUsingCompression:(unsigned long long)arg1 factor:(float)arg2;
- (id)__bitmapRepresentation;
- (struct CGImage { }*)_cgImage;
- (id)_createBitmapImageRepFromCGRepresentation;
- (id)_dataRepresentationFromBitmapRepresentation:(id)arg1;
- (id)_nsImage;
- (struct CGSize { double x1; double x2; })_size;
- (id)_sizeOfNSImage:(id)arg1;
- (id)_thumbnailWithSize:(struct CGSize { double x1; double x2; })arg1 antialiased:(BOOL)arg2 quality:(int)arg3;
- (void)_tryCreateBitmapFromVRamRepresentation;
- (id)_tryToCreateCGImageRepFromNonCGFile:(id)arg1;
- (void)_updateHasAlphaFlag:(id)arg1;
- (id)animatedGifsCache;
- (float)baseline;
- (BOOL)baselineIsCached;
- (id)bestImageForTargetScaleFactor:(double)arg1 sourceScaleFactor:(double*)arg2;
- (void)bindCGCache;
- (BOOL)bitmapIsUsedAsClientStorage;
- (id)bitmapRepresentation;
- (struct CGSize { double x1; double x2; })cachedSize;
- (struct CGContext { }*)cgContext;
- (struct CGImage { }*)cgImage;
- (struct CGImageSource { }*)cgImageSourceRef:(BOOL)arg1;
- (id)copy;
- (struct CGContext { }*)createCGContext;
- (id)dataRepresentation;
- (id)dataRepresentationFromCGRepresentationWithCompressionFactor:(float)arg1;
- (void)dealloc;
- (void)deleteTextureInContext:(struct _CGLContextObject { }*)arg1;
- (id)description;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 alpha:(float)arg3;
- (void)finalize;
- (unsigned short)flags;
- (void)freeCGCache;
- (void)freeCache;
- (void)freeRAMCache;
- (void)freeVRAMCache;
- (unsigned int)generateNewGLTextureID;
- (BOOL)hasAlpha;
- (BOOL)hasBitmapRepresentation;
- (BOOL)hasCGCache;
- (BOOL)hasDataRepresentation;
- (BOOL)hasRAMCache;
- (BOOL)hasVolatileCache;
- (struct OpaqueIconRef { }*)iconRef;
- (struct CGImage { }*)imageAtFrameIndex:(int)arg1;
- (int)imageFrameCount;
- (id)imageInPixelSpaceForTargetResolution:(double)arg1;
- (id)imageInPixelSpaceForViewResolution:(id)arg1;
- (id)imagePath;
- (id)imageProxy;
- (id)imageWithoutProxy;
- (id)info;
- (id)initEmptyImage;
- (id)initWithCGImage:(struct CGImage { }*)arg1;
- (id)initWithCGImageSource:(struct CGImageSource { }*)arg1;
- (id)initWithData:(id)arg1;
- (id)initWithIconRef:(struct OpaqueIconRef { }*)arg1;
- (id)initWithImageProxy:(id)arg1;
- (id)initWithNSBitmapImageRep:(id)arg1;
- (id)initWithNSImage:(id)arg1;
- (id)initWithOpenGLID:(unsigned int)arg1 size:(struct CGSize { double x1; double x2; })arg2 offset:(struct CGPoint { double x1; double x2; })arg3 premultiplied:(BOOL)arg4 deleteWhenDone:(BOOL)arg5;
- (id)initWithPasteboard:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithURL:(id)arg1;
- (void)integrateReferenceInstance:(id)arg1;
- (BOOL)isAnimatedGifs;
- (BOOL)isEmpty;
- (BOOL)isMarkedAsInvalid;
- (BOOL)isValid;
- (BOOL)isVectorial;
- (void)lockFocus;
- (int)loopCount;
- (void)mapIntoVRAM;
- (BOOL)mappedAndDecompressedIntoRAM;
- (BOOL)mappedIntoRAM;
- (BOOL)mappedIntoVRAM;
- (float)nextFrameDelayAtIndex:(int)arg1;
- (id)nsImage;
- (id)nsImage:(BOOL)arg1;
- (unsigned int)openGLTextureID;
- (BOOL)openGLTextureIsPremultiplied;
- (struct CGPoint { double x1; double x2; })openGLTextureOffset;
- (int)quality;
- (id)ramCopy;
- (id)referenceInstance;
- (void)referenceWillDie;
- (void)releaseBitmapCache;
- (void)releaseVolatileImageRep;
- (void)saveAsJPGAtPath:(id)arg1;
- (void)saveAsTIFFAtPath:(id)arg1;
- (void)setBitmapRepresentation:(id)arg1;
- (void)setCGImage:(struct CGImage { }*)arg1;
- (void)setCGImageSource:(struct CGImageSource { }*)arg1;
- (void)setDataRepresentation:(id)arg1;
- (void)setFlags:(unsigned short)arg1;
- (void)setIconRef:(struct OpaqueIconRef { }*)arg1;
- (void)setImageProxy:(id)arg1;
- (void)setInfo:(id)arg1;
- (void)setIsReference:(BOOL)arg1;
- (void)setIsThreadSafe:(BOOL)arg1;
- (void)setNSImage:(id)arg1;
- (void)setOpenGLTextureID:(unsigned int)arg1 withGLContext:(struct _CGLContextObject { }*)arg2;
- (void)setOpenGLTextureIsPremultiplied:(BOOL)arg1;
- (void)setOpenGLTextureOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPath:(id)arg1;
- (void)setQuality:(int)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSizeWithoutSavingContent:(struct CGSize { double x1; double x2; })arg1;
- (void)setURL:(id)arg1;
- (void)setUnderlyingDataAreVolatile:(BOOL)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setVolatileRepresentation:(int)arg1;
- (void)setWasGeneratedWithIconServices:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })size;
- (BOOL)textureIsPacked;
- (id)thumbnailWithSize:(struct CGSize { double x1; double x2; })arg1 antialiased:(BOOL)arg2 quality:(int)arg3;
- (id)thumbnailWithSize:(struct CGSize { double x1; double x2; })arg1 antialiased:(BOOL)arg2 qualityRequested:(int)arg3 qualityProduced:(int*)arg4;
- (float)topline;
- (BOOL)toplineIsCached;
- (BOOL)underlyingDataAreVolatile;
- (void)unlockFocus;
- (id)url;
- (id)valueForKey:(id)arg1;
- (int)volatileRepresentation;
- (BOOL)wasGeneratedWithIconServices;
- (id)writeToFileWithAutomaticFormat:(id)arg1;

@end
