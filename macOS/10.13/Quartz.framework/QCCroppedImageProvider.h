/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer
 */

@interface QCCroppedImageProvider : QCImageProvider {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _croppingRect;
    QCRegion * _domainOfDefinition;
    <QCImageProvider> * _originalProvider;
    NSAffineTransform * _transformation;
    void * _unused2;
}

- (struct CGColorSpace { }*)colorSpace;
- (id)createOptimizedProviderWithTransformation:(id)arg1 cropping:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)createPixelBufferForManager:(id)arg1 withFormat:(id)arg2 transformation:(id)arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5 options:(id)arg6;
- (id)createTextureBufferForManager:(id)arg1 withFormat:(id)arg2 target:(unsigned int)arg3 transformation:(id)arg4 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 colorSpace:(struct CGColorSpace { }*)arg6 options:(id)arg7;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })croppingRect;
- (void)dealloc;
- (id)domainOfDefinition;
- (BOOL)hasAlpha;
- (id)initWithProvider:(id)arg1 transformation:(id)arg2 croppingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)originalProvider;
- (id)supportedPixelBufferFormatsForManager:(id)arg1;
- (id)supportedTextureBufferFormatsForManager:(id)arg1;
- (id)supportedTextureBufferTargetsForManager:(id)arg1;
- (BOOL)supportsColorMatching;
- (BOOL)supportsCropping;
- (BOOL)supportsTransformation;
- (id)transformation;

@end
