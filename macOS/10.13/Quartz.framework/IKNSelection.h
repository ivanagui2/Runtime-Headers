/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKNSelection : NSObject {
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchor;
    struct CGPath { } * _clippedPath;
    CAShapeLayer * _dashedlayer;
    struct IKHandleInfo { 
        struct CGPoint { 
            double x; 
            double y; 
        } handle[10]; 
    }  _handleInfo;
    IKNImageViewHandler * _handler;
    struct CGPoint { 
        double x; 
        double y; 
    }  _inchPosition;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inchRect;
    CAShapeLayer * _layer;
    CALayer * _orientationOverlay;
    CALayer * _patch;
    CALayer * _patchOverlay;
    struct CGPath { } * _path;
    double  _percentDone;
    double  _rotationAngle;
    BOOL  _selected;
    long long  _selectionState;
    BOOL  _shouldClipToImageRect;
    struct CGPoint { 
        double x; 
        double y; 
    }  _startPosition;
    CAShapeLayer * _whitelayer;
}

@property (atomic, readwrite) struct CGPoint { double x1; double x2; } anchor;
@property (atomic, readonly) struct IKHandleInfo { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1[10]; } handleInfo;
@property (atomic, readwrite) IKNImageViewHandler *handler;
@property (nonatomic, readwrite) struct CGPoint { double x1; double x2; } inchPosition;
@property (nonatomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inchRect;
@property (atomic, readwrite) CAShapeLayer *layer;
@property (nonatomic, readwrite) double percentDone;
@property (nonatomic, readwrite) double rotationAngle;
@property (nonatomic, readwrite) BOOL selected;
@property (atomic, readwrite) long long selectionState;
@property (atomic, readwrite) BOOL shouldClipToImageRect;

- (struct CGPoint { double x1; double x2; })anchor;
- (void)applyDrag;
- (void)cancelDrag;
- (void)cleanup;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromUnit:(unsigned long long)arg2 toUnit:(unsigned long long)arg3;
- (struct CGImage { }*)copyPatchImage;
- (struct CGPath { }*)copyTransformedPath:(struct CGPath { }*)arg1 fromLayer:(id)arg2 toLayer:(id)arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4;
- (void)dealloc;
- (void)debugDump;
- (double)defaultLineWidth;
- (id)description;
- (void)doUpdateGeometry;
- (void)dragBy:(struct CGPoint { double x1; double x2; })arg1;
- (void)drawOrientationUI:(short)arg1;
- (void)exifRotate90:(BOOL)arg1;
- (void)forceSelectionInsideView;
- (struct IKHandleInfo { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1[10]; })handleInfo;
- (id)handler;
- (void)hide;
- (void)hilite;
- (struct CGPoint { double x1; double x2; })inchPosition;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inchRect;
- (id)initWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 position:(struct CGPoint { double x1; double x2; })arg2 anchor:(struct CGPoint { double x1; double x2; })arg3 handler:(id)arg4;
- (id)initWithSelection:(id)arg1;
- (void)installInLayer:(id)arg1;
- (void)installMarchingAntAnimation;
- (void)installPatch;
- (void)installPatchOverlay;
- (id)layer;
- (long long)layerType;
- (double)percentDone;
- (void)prepareDrag;
- (void)prepareResetSelectionWithOrientation;
- (void)prepareShowSelectionWithOrientation:(long long)arg1 forceInstallPatch:(BOOL)arg2;
- (void)removePatch;
- (void)removePatchLayer:(id)arg1;
- (void)resetSelectionWithOrientation;
- (long long)resizePoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 forKnob:(long long)arg3;
- (double)rotationAngle;
- (BOOL)selected;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRectNonClipped;
- (long long)selectionState;
- (void)setAnchor:(struct CGPoint { double x1; double x2; })arg1;
- (void)setHandler:(id)arg1;
- (void)setInchPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInchRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLayer:(id)arg1;
- (void)setPercentDone:(double)arg1;
- (void)setRotationAngle:(double)arg1;
- (void)setSelected:(BOOL)arg1;
- (void)setSelectionState:(long long)arg1;
- (void)setShouldClipToImageRect:(BOOL)arg1;
- (BOOL)shouldClipToImageRect;
- (void)show;
- (void)showSelectionWithOrientation:(long long)arg1;
- (void)unhilite;
- (void)updateGeometry;
- (void)updateHandleInfo;
- (void)updatePatchGeometry;
- (void)updatePatchOverlay;
- (void)updateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 rotationAngle:(double)arg2 alignTopLeft:(BOOL)arg3;

@end
