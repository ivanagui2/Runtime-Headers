/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKNImageView : NSView {
    NSColor * _backgroundColor;
    struct CGImage { } * _cgImage;
    id  _delegate;
    BOOL  _enabled;
    IKNImageLayer * _imageLayer;
    IKNImageViewHandler * _imageViewHandler;
    BOOL  _isDoubleClickEvent;
    double  _progress;
    IKNRootLayer * _rootLayer;
    double  _rotation;
    NSArray * _selections;
    IKStatusLayer * _statusLayer;
    long long  _trackingRectTag;
    BOOL  _wasAcceptingMouseEvents;
}

@property (atomic, readwrite) NSColor *backgroundColor;
@property (atomic, readwrite) id delegate;
@property (atomic, readwrite) BOOL enabled;
@property (atomic, readwrite) BOOL forceSelectionInsideView;
@property (atomic, readonly) IKNImageLayer *imageLayer;
@property (atomic, readonly) struct CGSize { double x1; double x2; } imageSize;
@property (atomic, readonly) IKNImageViewHandler *imageViewHandler;
@property (atomic, readwrite) double progress;
@property (atomic, readwrite) long long resolution;
@property (atomic, readonly) CALayer *rootLayer;
@property (atomic, readwrite) double rotation;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } selectionRect;
@property (atomic, readwrite) NSArray *selections;
@property (atomic, readwrite) BOOL selectionsCanBeModified;
@property (atomic, readwrite) BOOL selectionsCanRotate;
@property (atomic, readwrite) BOOL singleSelection;
@property (atomic, readwrite, copy) NSString *statusText;

+ (struct CGImage { }*)copyImageFromURL:(id)arg1 index:(long long)arg2;
+ (struct CGImage { }*)copyImageFromURL:(id)arg1 index:(long long)arg2 orientation:(long long*)arg3;

- (BOOL)acceptsFirstResponder;
- (void)addAutoDetectedItem:(id)arg1;
- (void)addScanArea:(id)arg1 withOverlay:(BOOL)arg2;
- (void)addSelection:(id)arg1;
- (void)adjustToViewFrame;
- (void)applyImageCorrection:(id)arg1;
- (id)autoDetectedItems;
- (id)backgroundColor;
- (struct CGPoint { double x1; double x2; })convertEventLocationInWindow:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (void)createImageLayer;
- (void)createRootLayer;
- (void)dealloc;
- (void)debugLayerTree:(id)arg1;
- (id)delegate;
- (void)deleteAllSelections;
- (void)deleteSelection:(id)arg1;
- (void)doSelectAll;
- (void)drawOrientationUI:(short)arg1;
- (void)dumpLayer:(id)arg1 prefix:(id)arg2;
- (void)dumpLayer:(id)arg1 prefix:(id)arg2 verbose:(BOOL)arg3;
- (BOOL)enabled;
- (void)flagsChanged:(id)arg1;
- (BOOL)forceSelectionInsideView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)getTemplateRects:(long long*)arg1;
- (void)hideAllSelections;
- (void)hiliteSelection:(id)arg1;
- (id)imageLayer;
- (struct CGSize { double x1; double x2; })imageSize;
- (id)imageViewHandler;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)installAlphaLayerWithGray:(double)arg1 alpha:(double)arg2;
- (void)installStatusLayer;
- (void)installTemplateRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 count:(long long)arg2;
- (void)keyDown:(id)arg1;
- (id)menuForEvent:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseUp:(id)arg1;
- (double)progress;
- (void)removeAllAutoDetectedItems;
- (void)removeAlphaLayer;
- (void)removeStatusLayer;
- (void)removeTemplateRects;
- (void)resetSelectionWithOrientation;
- (void)resizeStatusLayer;
- (long long)resolution;
- (id)rootLayer;
- (double)rotation;
- (void)selectAll:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (id)selections;
- (BOOL)selectionsCanBeModified;
- (BOOL)selectionsCanRotate;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCGImage:(struct CGImage { }*)arg1 properties:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setForceSelectionInsideView:(BOOL)arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setImage:(struct CGImage { }*)arg1 imageProperties:(id)arg2;
- (void)setImage:(struct CGImage { }*)arg1 imageProperties:(id)arg2 keepSelections:(BOOL)arg3;
- (void)setImageWithURL:(id)arg1;
- (void)setImageWithURL:(id)arg1 index:(long long)arg2;
- (void)setNoImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setOverlay:(id)arg1 forType:(id)arg2;
- (void)setProgress:(double)arg1;
- (void)setResolution:(long long)arg1;
- (void)setRotation:(double)arg1;
- (void)setSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSelections:(id)arg1;
- (void)setSelectionsCanBeModified:(BOOL)arg1;
- (void)setSelectionsCanRotate:(BOOL)arg1;
- (void)setSingleSelection:(BOOL)arg1;
- (void)setStatusText:(id)arg1;
- (void)showAllSelections;
- (void)showSelectionWithOrientation:(long long)arg1;
- (BOOL)singleSelection;
- (id)statusText;
- (void)unhiliteSelections;
- (double)userSpaceScalingFactor;
- (void)viewDidEndLiveResize;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewWillStartLiveResize;

@end
