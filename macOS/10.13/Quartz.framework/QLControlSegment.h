/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI
 */

@interface QLControlSegment : NSObject <QLControl> {
    SEL  _action;
    BOOL  _alternate;
    QLControlCommon * _common;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    NSString * _keyEquivalent;
    NSImage * _originalImage;
    unsigned long long  _segmentIndex;
    QLControlSegmentedControl * _segmentedControl;
    int  _segmentedStyle;
    BOOL  _sendActionOnMouseDown;
    BOOL  _shown;
    int  _style;
    id  _target;
    double  _tooltipMargin;
}

@property (atomic, readwrite) SEL action;
@property (atomic, readwrite) BOOL alternate;
@property (atomic, readwrite) double buttonWidth;
@property (atomic, readwrite) QLControlCommon *common;
@property (atomic, readonly) NSControl *control;
@property (atomic, readwrite, copy) NSString *controlIdentifier;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (getter=isEnabled, atomic, readwrite) BOOL enabled;
@property (atomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (atomic, readonly) unsigned long long hash;
@property (getter=isHidden, atomic, readwrite) BOOL hidden;
@property (atomic, readwrite, retain) NSImage *image;
@property (atomic, readwrite, copy) NSString *keyEquivalent;
@property (atomic, readwrite, copy) id menuProvider;
@property (atomic, readonly) NSImage *originalImage;
@property (atomic, readwrite) unsigned long long segmentIndex;
@property (atomic, readwrite, retain) QLControlSegmentedControl *segmentedControl;
@property (atomic, readwrite) int segmentedStyle;
@property (atomic, readwrite) BOOL sendActionOnMouseDown;
@property (getter=isShown, atomic, readwrite) BOOL shown;
@property (atomic, readwrite) int style;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) id target;
@property (atomic, readwrite, copy) NSString *title;
@property (atomic, readwrite, copy) NSString *toolTip;
@property (atomic, readwrite) double tooltipMargin;

- (void)_controlPressedWithSender:(id)arg1;
- (void)_updateStyle;
- (void)_updateTooltip;
- (SEL)action;
- (BOOL)alternate;
- (double)buttonWidth;
- (id)common;
- (id)control;
- (id)controlIdentifier;
- (void)dealloc;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)image;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 andSegmentedControl:(id)arg2;
- (BOOL)isEnabled;
- (BOOL)isHidden;
- (BOOL)isShown;
- (id)keyEquivalent;
- (id)menuProvider;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)originalImage;
- (unsigned long long)segmentIndex;
- (id)segmentedControl;
- (int)segmentedStyle;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2;
- (BOOL)sendActionOnMouseDown;
- (void)setAction:(SEL)arg1;
- (void)setAlternate:(BOOL)arg1;
- (void)setButtonWidth:(double)arg1;
- (void)setCommon:(id)arg1;
- (void)setControlIdentifier:(id)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setImage:(id)arg1;
- (void)setKeyEquivalent:(id)arg1;
- (void)setMenuProvider:(id)arg1;
- (void)setSegmentIndex:(unsigned long long)arg1;
- (void)setSegmentedControl:(id)arg1;
- (void)setSegmentedStyle:(int)arg1;
- (void)setSendActionOnMouseDown:(BOOL)arg1;
- (void)setShown:(BOOL)arg1;
- (void)setStyle:(int)arg1;
- (void)setTarget:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setToolTip:(id)arg1;
- (void)setTooltipMargin:(double)arg1;
- (int)style;
- (id)target;
- (id)title;
- (id)toolTip;
- (double)tooltipMargin;

@end
