/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer
 */

@interface QCPixelFormat : NSObject {
    void * _unused;
}

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (void)initialize;

- (unsigned int)CGBitmapInfo;
- (unsigned long long)CGBitsPerComponent;
- (unsigned long long)CGBitsPerPixel;
- (int)CIFormat;
- (struct _cl_image_format { unsigned int x1; unsigned int x2; })CLFormat;
- (unsigned int)QTPixelFormat;
- (unsigned long long)bitsPerBlock;
- (unsigned long long)compatibilities;
- (struct CGColorSpace { }*)defaultColorSpace;
- (id)description;
- (BOOL)isSupportedOnContext:(id)arg1;
- (BOOL)isValidColorSpace:(struct CGColorSpace { }*)arg1;
- (id)name;
- (unsigned int)openGLInternalFormat;
- (unsigned int)openGLPixelFormat;
- (unsigned int)openGLPixelType;
- (int)pixelAlpha;
- (unsigned long long)pixelBlockHeight;
- (unsigned long long)pixelBlockWidth;
- (int)pixelColorModel;
- (int)pixelType;

// QCPixelFormat (Extensions)

+ (id)defaultClosestPixelFormat:(id)arg1 withColorSpace:(struct CGColorSpace { }*)arg2;

- (BOOL)areValidBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)closestPixelFormat:(id)arg1 outDifference:(double*)arg2;
- (double)compareWithPixelFormat:(id)arg1;
- (BOOL)hasCompatibility:(unsigned long long)arg1;
- (BOOL)isValidHeight:(unsigned long long)arg1;
- (BOOL)isValidWidth:(unsigned long long)arg1;
- (unsigned long long)optimalBytesPerRowForWidth:(unsigned long long)arg1;
- (unsigned long long)packedBytesPerRowForWidth:(unsigned long long)arg1;
- (unsigned long long)pixelSamples;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })validateBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// QCPixelFormat (QCStreamExtensions)

+ (id)pixelFormatsForElementSize:(unsigned long long)arg1 type:(int)arg2;

- (unsigned long long)elementSize;
- (int)type;

// QCPixelFormat (Registry)

+ (id)allPixelFormats;
+ (id)findPixelFormat:(id)arg1 withColorSpace:(struct CGColorSpace { }*)arg2 closestToFormats:(id)arg3;
+ (id)pixelFormatWithName:(id)arg1;
+ (id)pixelFormatsWithCompatibilities:(unsigned long long)arg1 pixelColorModel:(int)arg2 pixelAlpha:(int)arg3 pixelType:(int)arg4;
+ (id)pixelFormatsWithCompatibility:(unsigned long long)arg1;
+ (void)registerPixelFormat:(id)arg1;

// QCPixelFormat (pixelFormat422YpCbCr8_601)

+ (id)pixelFormat422YpCbCr8_601;

// QCPixelFormat (pixelFormat422YpCbCr8_709)

+ (id)pixelFormat422YpCbCr8_709;

// QCPixelFormat (pixelFormatARGB8)

+ (id)pixelFormatARGB8;

// QCPixelFormat (pixelFormatBGRA8)

+ (id)pixelFormatBGRA8;

// QCPixelFormat (pixelFormatBGRX8)

+ (id)pixelFormatBGRX8;

// QCPixelFormat (pixelFormatCMYK16)

+ (id)pixelFormatCMYK16;

// QCPixelFormat (pixelFormatCMYK8)

+ (id)pixelFormatCMYK8;

// QCPixelFormat (pixelFormatCMYKf)

+ (id)pixelFormatCMYKf;

// QCPixelFormat (pixelFormatI16)

+ (id)pixelFormatI16;

// QCPixelFormat (pixelFormatI8)

+ (id)pixelFormatI8;

// QCPixelFormat (pixelFormatIf)

+ (id)pixelFormatIf;

// QCPixelFormat (pixelFormatIh)

+ (id)pixelFormatIh;

// QCPixelFormat (pixelFormatKYMC8)

+ (id)pixelFormatKYMC8;

// QCPixelFormat (pixelFormatM_I16)

+ (id)pixelFormatM_I16;

// QCPixelFormat (pixelFormatM_I8)

+ (id)pixelFormatM_I8;

// QCPixelFormat (pixelFormatM_If)

+ (id)pixelFormatM_If;

// QCPixelFormat (pixelFormatM_Ih)

+ (id)pixelFormatM_Ih;

// QCPixelFormat (pixelFormatRGB16)

+ (id)pixelFormatRGB16;

// QCPixelFormat (pixelFormatRGB8)

+ (id)pixelFormatRGB8;

// QCPixelFormat (pixelFormatRGBA16)

+ (id)pixelFormatRGBA16;

// QCPixelFormat (pixelFormatRGBA8)

+ (id)pixelFormatRGBA8;

// QCPixelFormat (pixelFormatRGBAf)

+ (id)pixelFormatRGBAf;

// QCPixelFormat (pixelFormatRGBAh)

+ (id)pixelFormatRGBAh;

// QCPixelFormat (pixelFormatRGBX8)

+ (id)pixelFormatRGBX8;

// QCPixelFormat (pixelFormatRGBf)

+ (id)pixelFormatRGBf;

// QCPixelFormat (pixelFormatRGBh)

+ (id)pixelFormatRGBh;

// QCPixelFormat (pixelFormatXRGB8)

+ (id)pixelFormatXRGB8;

// QCPixelFormat (pixelFormatYUVS)

+ (id)pixelFormatYUVS;

@end
