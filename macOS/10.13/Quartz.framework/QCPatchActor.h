/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer
 */

@interface QCPatchActor : GFNodeActor {
    QCInspector * _currentInspector;
    QCPatch * _currentPatch;
    NSTableColumn * _inputsKeyColumn;
    NSTableColumn * _outputsKeyColumn;
    void * _unused2;
    QCTableView * inputsTableView;
    NSView * noParametersView;
    NSView * noPublishingView;
    NSView * noSettingsView;
    NSView * notApplicableView;
    QCTableView * outputsTableView;
    NSView * publishingView;
}

+ (void)initialize;

- (id)_colorForNode:(id)arg1;
- (struct CGLayer { }*)_createPortRingWithColor:(struct CGColor { }*)arg1 inContext:(struct CGContext { }*)arg2 zoom:(double)arg3;
- (void)_drawBackgroundGradientLayerForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 reflectionHeight:(double)arg3 inContext:(struct CGContext { }*)arg4;
- (double)_drawBadgeForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (void)_drawHighLightForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (void)_drawNameForPort:(id)arg1 node:(id)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 inContext:(struct CGContext { }*)arg5;
- (void)_drawNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (double)_drawOrderForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (void)_drawOverlayForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 stroke:(BOOL)arg3 view:(id)arg4 inContext:(struct CGContext { }*)arg5;
- (void)_drawOverlayForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 view:(id)arg3 inContext:(struct CGContext { }*)arg4;
- (void)_drawPortColorsForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 view:(id)arg3 inContext:(struct CGContext { }*)arg4;
- (void)_drawPortsForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 view:(id)arg3 inContext:(struct CGContext { }*)arg4;
- (void)_drawSelectionForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (void)_drawString:(id)arg1 inContext:(struct CGContext { }*)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3 withAttributes:(id)arg4;
- (void)_drawTitle:(id)arg1 inContext:(struct CGContext { }*)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3 withAttributes:(id)arg4;
- (void)_drawTitleForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (void)_makeCGPathForNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (void)_makeSelectionPathForNode:(id)arg1 border:(float)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 inContext:(struct CGContext { }*)arg4;
- (struct CGColor { }*)_overlayColorForNode:(id)arg1 view:(id)arg2;
- (id)_patchTypeTextAttributesForNode:(id)arg1;
- (id)_portForPoint:(struct CGPoint { double x1; double x2; })arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 outBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (id)_portTextAttributesForNode:(id)arg1;
- (id)_titleTextAttributesForNode:(id)arg1;
- (void)dealloc;
- (BOOL)dragsOnPortForNode:(id)arg1;
- (void)drawNode:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 view:(id)arg3;
- (id)init;
- (struct { unsigned char x1[16]; }*)nodeMD5List:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 view:(id)arg3 zoom:(double)arg4 outCount:(unsigned long long*)arg5;
- (id)parametersViewForPatch:(id)arg1;
- (struct CGPoint { double x1; double x2; })pointForPort:(id)arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)portForPoint:(struct CGPoint { double x1; double x2; })arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGSize { double x1; double x2; })sizeForNode:(id)arg1;

// QCPatchActor (Interaction)

- (void)_explodeSubgraph:(id)arg1;
- (void)_external:(id)arg1;
- (void)_local:(id)arg1;
- (void)_parent:(id)arg1;
- (id)_portIsConnected:(id)arg1 view:(id)arg2;
- (void)_refactor:(id)arg1;
- (void)_setLayer:(id)arg1;
- (void)_updatedParameters:(id)arg1;
- (void)_updatedPorts:(id)arg1;
- (void)_updatedState:(id)arg1;
- (id)inspectorForPatch:(id)arg1;
- (id)menuForNode:(id)arg1 view:(id)arg2;
- (long long)numberOfRowsInTableView:(id)arg1;
- (id)parametersViewForPatch:(id)arg1;
- (BOOL)pointInConsumerOrderRect:(struct CGPoint { double x1; double x2; })arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (BOOL)pointInTitleRect:(struct CGPoint { double x1; double x2; })arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)resetInspectorViews;
- (void)setTitle:(id)arg1 forNode:(id)arg2;
- (id)setupInspectorViewsForNode:(id)arg1;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (id)tableView:(id)arg1 portForRow:(long long)arg2;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRows:(id)arg2 toPasteboard:(id)arg3;
- (BOOL)trackMouse:(id)arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 view:(id)arg4;

// QCPatchActor (Tooltip)

- (id)tooltipStringForPoint:(struct CGPoint { double x1; double x2; })arg1 inNode:(id)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 tooltipBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;

@end
