/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/PDFKit.framework/Versions/A/PDFKit
 */

@interface PDFAnnotation : NSObject <NSCoding, NSCopying> {
    PDFAnnotationPrivateVars * _private;
}

@property (nonatomic, readwrite, copy) NSURL *URL;
@property (nonatomic, readwrite, retain) PDFAction *action;
@property (nonatomic, readwrite) unsigned long long alignment;
@property (nonatomic, readwrite) BOOL allowsToggleToOff;
@property (nonatomic, readonly, copy) NSDictionary *annotationKeyValues;
@property (nonatomic, readwrite, copy) NSColor *backgroundColor;
@property (nonatomic, readwrite, retain) PDFBorder *border;
@property (nonatomic, readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readwrite) long long buttonWidgetState;
@property (nonatomic, readwrite, copy) NSString *buttonWidgetStateString;
@property (nonatomic, readwrite, copy) NSString *caption;
@property (nonatomic, readwrite, copy) NSArray *choices;
@property (nonatomic, readwrite, copy) NSColor *color;
@property (getter=hasComb, nonatomic, readwrite) BOOL comb;
@property (nonatomic, readwrite, copy) NSString *contents;
@property (nonatomic, readwrite, retain) PDFDestination *destination;
@property (nonatomic, readwrite) long long endLineStyle;
@property (nonatomic, readwrite) struct CGPoint { double x1; double x2; } endPoint;
@property (nonatomic, readwrite, copy) NSString *fieldName;
@property (nonatomic, readwrite, copy) NSFont *font;
@property (nonatomic, readwrite, copy) NSColor *fontColor;
@property (nonatomic, readonly) BOOL hasAppearanceStream;
@property (getter=isHighlighted, nonatomic, readwrite) BOOL highlighted;
@property (nonatomic, readwrite) long long iconType;
@property (nonatomic, readonly) BOOL isPasswordField;
@property (getter=isListChoice, nonatomic, readwrite) BOOL listChoice;
@property (nonatomic, readwrite) long long markupType;
@property (nonatomic, readwrite) long long maximumLength;
@property (nonatomic, readwrite, copy) NSDate *modificationDate;
@property (getter=isMultiline, nonatomic, readwrite) BOOL multiline;
@property (getter=isOpen, nonatomic, readwrite) BOOL open;
@property (nonatomic, readwrite) PDFPage *page;
@property (nonatomic, readonly) NSArray *paths;
@property (nonatomic, readwrite, retain) PDFAnnotationPopup *popup;
@property (nonatomic, readwrite, copy) NSArray *quadrilateralPoints;
@property (nonatomic, readwrite) BOOL radiosInUnison;
@property (getter=isReadOnly, nonatomic, readwrite) BOOL readOnly;
@property (nonatomic, readwrite) BOOL shouldDisplay;
@property (nonatomic, readwrite) BOOL shouldPrint;
@property (nonatomic, readwrite) long long startLineStyle;
@property (nonatomic, readwrite) struct CGPoint { double x1; double x2; } startPoint;
@property (nonatomic, readwrite, copy) NSString *type;
@property (nonatomic, readwrite, copy) NSString *userName;
@property (nonatomic, readwrite, copy) NSArray *values;
@property (nonatomic, readwrite) long long widgetControlType;
@property (nonatomic, readwrite, copy) NSString *widgetDefaultStringValue;
@property (nonatomic, readwrite, copy) NSString *widgetFieldType;
@property (nonatomic, readwrite, copy) NSString *widgetStringValue;

+ (Class)classForAnnotationDictionary:(struct CGPDFDictionary { }*)arg1;
+ (id)getProperNameStringFromString:(id)arg1;

- (void).cxx_destruct;
- (struct CGPDFAnnotation { }*)CGPDFAnnotation;
- (id)_accessibilityTypeString;
- (void)_addAKAnnotationToDictionary:(struct __CFDictionary { }*)arg1;
- (void)_addUnknownPropertiesToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (bool)_annotationAllowsCommenting:(id)arg1;
- (id)_createArrayForCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_createArrayForColor:(id)arg1;
- (void)_didRemoveValueForAnnotationKey:(id)arg1;
- (void)_didSetValue:(id)arg1 forAnnotationKey:(id)arg2;
- (void)_drawAnnotationWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2;
- (void)_generateFormFieldName;
- (BOOL)_isValidAnnotationKey:(id)arg1;
- (void)_printDictionary:(id)arg1 atDepth:(int)arg2;
- (void*)_sanitizeValue:(id)arg1 forKey:(id)arg2;
- (BOOL)_setArray:(id)arg1 forAnnotationKey:(id)arg2;
- (BOOL)_setDictionary:(id)arg1 forAnnotationKey:(id)arg2;
- (BOOL)_setInteger:(id)arg1 forAnnotationKey:(id)arg2;
- (BOOL)_setString:(id)arg1 forAnnotationKey:(id)arg2;
- (BOOL)_setVarious:(id)arg1 forAnnotationKey:(id)arg2;
- (BOOL)_shouldReadAppearanceStreams;
- (id)accessibilityNode;
- (id)action;
- (void)addActionToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addAdditionalActionsToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addAlternateFieldNameToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addAppearanceCharacteristicsToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addAppearanceForKey:(struct __CFString { }*)arg1 toDictionaryRef:(struct __CFDictionary { }*)arg2;
- (void)addBorderStyleToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addBorderToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addColor:(id)arg1 forKey:(struct __CFString { }*)arg2 toDictionaryRef:(struct __CFDictionary { }*)arg3;
- (void)addDefaultAppearanceDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addDefaultFieldValueToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (BOOL)addDestinationToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addFieldFlagsToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addFieldNameToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addFieldTypeToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addFieldValueToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addFlagsToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addHighlightingModeToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addInkListToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addLineEndingStylesToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addLineToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addMaxLenToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addModificationDateToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addNameToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addNormalAndDownAppearanceToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addNormalAndDownAppearanceWithStateToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addNormalAppearanceToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addNormalAppearanceWithStateToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addOpenToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addOptionsToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addPageReferenceToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addPopupToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addQuadPointsToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addQuaddingToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forKey:(struct __CFString { }*)arg2 toDictionaryRef:(struct __CFDictionary { }*)arg3;
- (void)addTextLabelToDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)addToPageView;
- (id)akAnnotationAdaptor;
- (id)annotationKeyValues;
- (struct CGPDFForm { }*)appearance:(int)arg1;
- (id)border;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct CGPath {}**)cgPathArray;
- (id)color;
- (id)colorFromAppearanceTokens:(id)arg1;
- (struct __CFDictionary { }*)commonCreateDictionaryRef;
- (void)commonInit;
- (id)contents;
- (id)control;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)createDefaultAppearanceStringWithFont:(id)arg1 fontColor:(id)arg2;
- (void)dealloc;
- (void)derotateContext:(struct CGContext { }*)arg1;
- (id)description;
- (struct __CFDictionary { }*)dictionaryRef;
- (struct __CFDictionary { }*)dictionaryRefExcludingParentOrPopup;
- (void)drawAppearance:(struct CGPDFForm { }*)arg1 withBox:(long long)arg2 inContext:(struct CGContext { }*)arg3;
- (void)drawAppearance:(struct CGPDFForm { }*)arg1 withBox:(long long)arg2 inContext:(struct CGContext { }*)arg3 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 scaleProportional:(BOOL)arg5;
- (void)drawAppearance:(struct CGPDFForm { }*)arg1 withBox:(long long)arg2 inContext:(struct CGContext { }*)arg3 scaleProportional:(BOOL)arg4;
- (void)drawWithBox:(long long)arg1;
- (void)drawWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)flags;
- (id)fontNameFromAppearanceTokens:(id)arg1;
- (BOOL)forExport;
- (id)formData;
- (struct __CFDictionary { }*)gcCreateAttributesForFont:(id)arg1 color:(id)arg2;
- (void)getAppearancesFromDictionary:(struct CGPDFDictionary { }*)arg1 ofType:(int)arg2;
- (id)getColorFromAppearanceNSString:(id)arg1;
- (id)getColorFromAppearanceString:(struct CGPDFString { }*)arg1;
- (id)getFontFromAppearanceNSString:(id)arg1;
- (id)getFontFromAppearanceString:(struct CGPDFString { }*)arg1;
- (id)getFullFieldNameFromDictionary:(struct CGPDFDictionary { }*)arg1;
- (id)getPDFKeyMappingDictionary;
- (BOOL)hasAppearanceStream;
- (id)init;
- (id)initCommonWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithAnnotationDictionary:(struct CGPDFDictionary { }*)arg1 forPage:(id)arg2;
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forType:(id)arg2 withProperties:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1 forPage:(id)arg2;
- (BOOL)isEditingTextWidget;
- (bool)isFullyConstructed;
- (BOOL)isHighlighted;
- (BOOL)isMarkupAnnotation;
- (BOOL)isMarkupAnnotationSubtype;
- (BOOL)isSelected;
- (BOOL)isSignature;
- (BOOL)isWidgetOrMarkupAnnotation;
- (id)modificationDate;
- (id)mouseDownAction;
- (id)mouseUpAction;
- (id)newUserControlWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)page;
- (id)parent;
- (id)pathLock;
- (id)pdfAnnotationUUID;
- (double)pointSizeFromAppearanceTokens:(id)arg1;
- (id)popup;
- (struct CGPDFDictionary { }*)popupDictionary;
- (BOOL)popupDrawsCloseWidget;
- (BOOL)popupDrawsText;
- (void)printDictionaryKeyValues;
- (void)releaseCGPathArray;
- (void)removeAKAnnotationAdaptor;
- (void)removeAllAppearanceStreams;
- (void)removeFromPageView;
- (void)removeValueForAnnotationKey:(id)arg1;
- (id)replaceTextWidgetWithString:(id)arg1;
- (BOOL)savesAppearanceStream;
- (double)scaleFactor;
- (void)secondaryInit;
- (void)setAccessibilityNode:(id)arg1;
- (void)setAction:(id)arg1;
- (void)setAppearance:(struct CGPDFForm { }*)arg1 forType:(int)arg2;
- (BOOL)setBoolean:(BOOL)arg1 forAnnotationKey:(id)arg2;
- (void)setBorder:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCGPDFAnnotation:(struct CGPDFAnnotation { }*)arg1;
- (void)setCGPathArray:(struct CGPath {}**)arg1;
- (void)setColor:(id)arg1;
- (void)setContents:(id)arg1;
- (void)setControl:(id)arg1;
- (void)setDictionaryRef:(struct __CFDictionary { }*)arg1;
- (void)setEditingTextWidget:(BOOL)arg1;
- (void)setForExport:(BOOL)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setIsFullyConstructed:(bool)arg1;
- (void)setIsSelected:(BOOL)arg1;
- (void)setIsSignature:(BOOL)arg1;
- (void)setModificationDate:(id)arg1;
- (void)setMouseDownAction:(id)arg1;
- (void)setMouseUpAction:(id)arg1;
- (void)setPDFAnnotationDictionary:(id)arg1;
- (void)setPage:(id)arg1;
- (void)setParent:(id)arg1;
- (void)setPopup:(id)arg1;
- (void)setPopupDrawsCloseWidget:(BOOL)arg1;
- (void)setPopupDrawsText:(BOOL)arg1;
- (void)setPopupInternal:(id)arg1 scanPage:(BOOL)arg2;
- (BOOL)setRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forAnnotationKey:(id)arg2;
- (void)setSavesAppearanceStream:(BOOL)arg1;
- (void)setScaleFactor:(double)arg1;
- (void)setShouldBurnIn:(BOOL)arg1;
- (void)setType:(id)arg1;
- (void)setUserName:(id)arg1;
- (BOOL)setValue:(id)arg1 forAnnotationKey:(id)arg2;
- (void)setWidgetOnStateString:(id)arg1;
- (void)setupAKAnnotationAdaptorIfNecessary;
- (BOOL)shouldBurnIn;
- (BOOL)shouldComb;
- (struct CGPDFDictionary { }*)sourceDictionary;
- (BOOL)supportsNSCoding;
- (id)tokenizeAppearanceString:(id)arg1;
- (id)toolTip;
- (id)type;
- (void)updateAnnotationEffect;
- (void)updateFormData;
- (BOOL)updatesBoundsFromUserControlBounds;
- (id)userName;
- (id)valueForAnnotationKey:(id)arg1;
- (id)widgetOnStateString;

// PDFAnnotation (PDFAnnotationUtilities)

+ (long long)lineStyleFromName:(id)arg1;
+ (id)nameForLineStyle:(long long)arg1;

- (id)URL;
- (bool)_boolValueForAnnotationFlag:(unsigned long long)arg1;
- (bool)_boolValueForWidgetFieldFlag:(unsigned long long)arg1;
- (void)_setBoolValue:(bool)arg1 forAnnotationFlag:(unsigned long long)arg2;
- (void)_setBoolValue:(bool)arg1 forWidgetFieldFlag:(unsigned long long)arg2;
- (id)_textForValue:(id)arg1;
- (void)addBezierPath:(id)arg1;
- (unsigned long long)alignment;
- (BOOL)allowsToggleToOff;
- (id)backgroundColor;
- (long long)buttonWidgetState;
- (id)buttonWidgetStateString;
- (id)caption;
- (id)choices;
- (BOOL)contentsLocked;
- (id)destination;
- (long long)endLineStyle;
- (struct CGPoint { double x1; double x2; })endPoint;
- (id)fieldName;
- (id)font;
- (id)fontColor;
- (BOOL)hasComb;
- (long long)iconType;
- (BOOL)isHidden;
- (BOOL)isInvisible;
- (BOOL)isListChoice;
- (BOOL)isLocked;
- (BOOL)isMultiline;
- (BOOL)isOpen;
- (BOOL)isPasswordField;
- (BOOL)isReadOnly;
- (BOOL)isReadOnlyAnnotation;
- (long long)markupType;
- (unsigned long long)maximumLength;
- (id)paths;
- (id)quadrilateralPoints;
- (BOOL)radiosInUnison;
- (void)removeBezierPath:(id)arg1;
- (void)setAlignment:(unsigned long long)arg1;
- (void)setAllowsToggleToOff:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setButtonWidgetState:(long long)arg1;
- (void)setButtonWidgetStateString:(id)arg1;
- (void)setCaption:(id)arg1;
- (void)setChoices:(id)arg1;
- (void)setComb:(BOOL)arg1;
- (void)setContentsLocked:(BOOL)arg1;
- (void)setDestination:(id)arg1;
- (void)setEndLineStyle:(long long)arg1;
- (void)setEndPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFieldName:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setFontColor:(id)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setIconType:(long long)arg1;
- (void)setInvisible:(BOOL)arg1;
- (void)setListChoice:(BOOL)arg1;
- (void)setLocked:(BOOL)arg1;
- (void)setMarkupType:(long long)arg1;
- (void)setMaximumLength:(unsigned long long)arg1;
- (void)setMultiline:(BOOL)arg1;
- (void)setOpen:(BOOL)arg1;
- (void)setQuadrilateralPoints:(id)arg1;
- (void)setRadiosInUnison:(BOOL)arg1;
- (void)setReadOnly:(BOOL)arg1;
- (void)setReadOnlyAnnotation:(BOOL)arg1;
- (void)setShouldDisplay:(BOOL)arg1;
- (void)setShouldNotRotate:(BOOL)arg1;
- (void)setShouldNotZoom:(BOOL)arg1;
- (void)setShouldPrint:(BOOL)arg1;
- (void)setShouldToggleNoView:(BOOL)arg1;
- (void)setStartLineStyle:(long long)arg1;
- (void)setStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setURL:(id)arg1;
- (void)setValues:(id)arg1;
- (void)setWidgetControlType:(long long)arg1;
- (void)setWidgetDefaultStringValue:(id)arg1;
- (void)setWidgetFieldType:(id)arg1;
- (void)setWidgetStringValue:(id)arg1;
- (BOOL)shouldDisplay;
- (BOOL)shouldNotRotate;
- (BOOL)shouldNotZoom;
- (BOOL)shouldPrint;
- (BOOL)shouldToggleNoView;
- (long long)startLineStyle;
- (struct CGPoint { double x1; double x2; })startPoint;
- (id)values;
- (long long)widgetControlType;
- (id)widgetDefaultStringValue;
- (id)widgetFieldType;
- (id)widgetStringValue;

@end
