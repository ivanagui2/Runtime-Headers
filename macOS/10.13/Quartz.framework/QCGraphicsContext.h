/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuartzComposer.framework/Versions/A/QuartzComposer
 */

@interface QCGraphicsContext : QCContext {
    int  _cachingMode;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cleanAperture;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cleanBounds;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cleanFrame;
    struct CGColorSpace { } * _colorspace;
    NSMutableDictionary * _defaultOptions;
    QCEventManager * _eventManager;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _fullBounds;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _fullFrame;
    QCImageManager * _imageManager;
    struct CGSize { 
        double width; 
        double height; 
    }  _pixelAspectRatio;
    int  _quality;
    QCStreamManager * _streamManager;
    void * _unused2;
}

+ (struct CGColorSpace { }*)defaultColorSpace;
+ (Class)renderStateClass;

- (void)_finalize_QCGraphicsContext;
- (void)_updateDimensions;
- (void)_updateOptions;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (int)cachingModeHint;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cleanAperture;
- (struct CGColorSpace { }*)colorSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromBoundsToFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromFrameToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)didPopRenderState:(id)arg1;
- (void)didPushRenderState:(id)arg1;
- (id)eventManager;
- (void)finalize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })fullBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })fullFrame;
- (id)imageManager;
- (id)imageManagerDefaultOptions;
- (id)initWithImageManager:(id)arg1 options:(id)arg2;
- (id)initWithOptions:(id)arg1;
- (void)invalidate;
- (BOOL)isValid;
- (double)nextExecutionTimeForPatch:(id)arg1 time:(double)arg2 arguments:(id)arg3;
- (void)pauseRenderingPatch:(id)arg1;
- (struct CGSize { double x1; double x2; })pixelAspectRatio;
- (BOOL)prerenderPatch:(id)arg1 time:(double)arg2 imageSizeHint:(struct CGSize { double x1; double x2; })arg3 arguments:(id)arg4;
- (int)qualityHint;
- (BOOL)renderPatch:(id)arg1 time:(double)arg2 arguments:(id)arg3;
- (void)resumeRenderingPatch:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCachingModeHint:(int)arg1;
- (void)setCleanAperture:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPixelAspectRatio:(struct CGSize { double x1; double x2; })arg1;
- (void)setQualityHint:(int)arg1;
- (BOOL)startRenderingPatch:(id)arg1 options:(id)arg2;
- (void)stopRenderingPatch:(id)arg1;
- (id)streamManager;
- (BOOL)willPushRenderState:(id)arg1;

@end
