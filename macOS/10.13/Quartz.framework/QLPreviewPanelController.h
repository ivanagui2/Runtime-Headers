/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI
 */

@interface QLPreviewPanelController : QLPreviewWindowController <NSSharingServiceDelegate, NSSharingServicePickerDelegate, QLControlsDelegate, QLIndexSheetDelegate, QLPathWatcherClient, QLPreviewSlideshowDelegate, QLPreviewTouchBarDelegate, QLPreviewViewDelegate, QLTimeSliderDataSource> {
    BOOL  _alternateMode;
    int  _anchorCorner;
    int  _anchorCornerForPositionNearPreviewItem;
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchorPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchorPointForPositionNearPreviewItem;
    NSTimer * _anchorResetTimer;
    long long  _anchorScreens;
    BOOL  _automaticallyManageVisibility;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentViewFrame;
    double  _cumulativeMagnification;
    long long  _currentPreviewItemIndex;
    struct CGSize { 
        double width; 
        double height; 
    }  _defaultPreviewSize;
    id  _delegate;
    id  _displayState;
    NSMutableSet * _documentsAddedToIPhoto;
    NSMutableSet * _documentsToAddToIPhoto;
    id  _eventMonitor;
    BOOL  _fakePlaying;
    int  _features;
    BOOL  _flushing;
    QLFullscreenController * _fullscreenController;
    BOOL  _hasCustomSize;
    BOOL  _hasMultipleItems;
    BOOL  _hasReloadedData;
    NSString * _iPhotoLibraryPath;
    BOOL  _ignoreCloseNotification;
    QLIndexSheetController * _indexSheetController;
    NSView * _internalView;
    BOOL  _isOpen;
    BOOL  _isOpening;
    struct CGSize { 
        double width; 
        double height; 
    }  _minWindowSize;
    QLPreviewNavigationController * _navigationController;
    BOOL  _needsToDoReloadData;
    BOOL  _needsToRefreshContentAfterOpeningTransition;
    double  _openTimestamp;
    NSDictionary * _openingApplicationInfo;
    BOOL  _openingOperationBeganMeasuring;
    BOOL  _preservesDisplayStateOnNextReloadData;
    NSView * _previewContainerView;
    NSView * _previewContentView;
    QLPanelPreviewView * _previewView;
    QLPreviewScroller * _scroller;
    BOOL  _setuped;
    QLPreviewView * _sharedPreviewView;
    BOOL  _sharingInProgress;
    BOOL  _shouldAdjustPanelFrameWhenExitingFullscreen;
    BOOL  _shouldCloseFullscreen;
    BOOL  _shouldSetup;
    BOOL  _showControls;
    QLPreviewSlideshow * _slideshow;
    BOOL  _startAtActivation;
    int  _status;
    NSWindow * _swipeContainerWindow;
    QLPreviewSwipeController * _swipeController;
    QLTimeSlider * _timeSlider;
    NSDate * _timeoutDate;
    double  _totalButtonWidth;
    QLPreviewPanelTouchBarController * _touchBarController;
    struct __CFRunLoopSource { } * _transmogrifySource;
    struct __CFMachPort { } * _transmogriphyPort;
    double  _visibleTimestamp;
}

@property (atomic, readwrite) BOOL automaticallyManageVisibility;
@property (atomic, readonly) BOOL autoplay;
@property (atomic, readonly) BOOL canShowNextItem;
@property (atomic, readonly) BOOL canShowPreviousItem;
@property (atomic, readonly) long long countOfPreviewItems;
@property (atomic, readonly) <QLPreviewItem> *currentPreviewItem;
@property (atomic, readwrite) long long currentPreviewItemIndex;
@property (atomic, readwrite) double currentTime;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readwrite) id delegate;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readwrite, retain) id displayState;
@property (atomic, readonly) <QLPreviewItem> *displayedPreviewItem;
@property (atomic, readonly) double duration;
@property (atomic, readwrite) BOOL fakePlaying;
@property (atomic, readwrite, retain) id forcedContentTypeUTI;
@property (atomic, readonly) int fullscreenStatus;
@property (atomic, readwrite) BOOL hasCustomSize;
@property (atomic, readwrite) BOOL hasMultipleItems;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) BOOL hidePlayControl;
@property (atomic, readonly) QLIndexSheetController *indexSheetController;
@property (atomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } indexSheetFrame;
@property (atomic, readonly) BOOL indexSheetHasDarkBackground;
@property (atomic, readonly) NSView *indexSheetHostingView;
@property (atomic, readonly) unsigned long long indexSheetMaxColumns;
@property (atomic, readonly) unsigned long long indexSheetMaxRows;
@property (atomic, readonly) BOOL indexSheetShowsControls;
@property (atomic, readonly) int indexSheetStatus;
@property (atomic, readonly) int inlineSlideshowStatus;
@property (atomic, readonly) BOOL isOpening;
@property (atomic, readwrite, copy) NSString *loadingTitle;
@property (atomic, readwrite, retain) id mandatoryServer;
@property (atomic, readwrite) BOOL muted;
@property (atomic, readwrite, retain) QLPreviewNavigationController *navigationController;
@property (atomic, readonly) BOOL needsVolumeControl;
@property (atomic, readwrite, copy) NSString *noItemsTitle;
@property (atomic, readonly) NSImage *openingApplicationIcon;
@property (atomic, readwrite, retain) NSDictionary *openingApplicationInfo;
@property (atomic, readonly) NSString *operationIDForPerfAnalysis;
@property (atomic, readonly) QLPreviewPanel *panel;
@property (atomic, readwrite) BOOL playing;
@property (atomic, readwrite) int previewFeatures;
@property (atomic, readonly) QLPreviewView *previewView;
@property (atomic, readwrite) double seekTolerance;
@property (atomic, readwrite, retain) QLPreviewView *sharedPreviewView;
@property (atomic, readwrite) BOOL showRemainingTime;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite, retain) QLPreviewPanelTouchBarController *touchBarController;
@property (atomic, readwrite) float volume;
@property (atomic, readonly) BOOL worksWhenModal;

+ (id)_defaultNoItemsTitle;
+ (id)keyPathsForValuesAffectingCanAddCurrentItemToiPhoto;
+ (id)keyPathsForValuesAffectingCanOpen;
+ (id)keyPathsForValuesAffectingCanShowNextItem;
+ (id)keyPathsForValuesAffectingCanShowPreviousItem;
+ (id)keyPathsForValuesAffectingCurrentTime;
+ (id)keyPathsForValuesAffectingDisplayablePlaying;
+ (id)keyPathsForValuesAffectingDuration;
+ (id)keyPathsForValuesAffectingEnableSharing;
+ (id)keyPathsForValuesAffectingFullscreenStatus;
+ (id)keyPathsForValuesAffectingHidePlayControl;
+ (id)keyPathsForValuesAffectingInlineSlideshowStatus;
+ (id)keyPathsForValuesAffectingIsCurrentItemIniPhoto;
+ (id)keyPathsForValuesAffectingMuted;
+ (id)keyPathsForValuesAffectingNeedsVolumeControl;
+ (id)keyPathsForValuesAffectingOpenButtonMenuProvider;
+ (id)keyPathsForValuesAffectingOpenButtonTightTitle;
+ (id)keyPathsForValuesAffectingOpenButtonTitle;
+ (id)keyPathsForValuesAffectingOpeningApplicationIcon;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingShowPlayControl;
+ (id)keyPathsForValuesAffectingShowRemainingTime;
+ (id)keyPathsForValuesAffectingTouchBar;
+ (id)keyPathsForValuesAffectingVolume;

- (void)_adjustPanelFrameWithAnimation:(BOOL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustedPanelFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 positionNearPreviewItem:(BOOL)arg2;
- (void)_applicationDidActivate:(id)arg1;
- (void)_applicationWillDeactivate:(id)arg1;
- (BOOL)_canOverrideUserAction:(int)arg1;
- (BOOL)_checkInTrash:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_clampedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onScreen:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_cleanupTransmogrification;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentFrameForPreviewView:(id)arg1;
- (id)_currentItemScreenForClosing:(BOOL)arg1;
- (id)_currentPreviewedURL;
- (int)_defaultUserActionForEvent:(id)arg1;
- (void)_doReloadDataIfNecessary;
- (void)_flushCaches;
- (void)_flushCurrentDisplayBundle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 onScreen:(id)arg2 toRemainUnoccluded:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)_fullPanelSetupIfNecessary;
- (id)_fullscreenParentView;
- (id)_fullscreenView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_fullscreenViewFrame;
- (BOOL)_isDocumentAddedToIPhoto:(id)arg1;
- (BOOL)_isEventInContentView:(id)arg1;
- (BOOL)_isEventInResizeHandleView:(id)arg1;
- (long long)_itemIndexWithDelta:(long long)arg1;
- (void)_magnifyBy:(double)arg1;
- (struct CGSize { double x1; double x2; })_maxSizeFromUsableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_openingOperationBegin;
- (void)_openingOperationCancelled;
- (void)_openingOperationMarkFile;
- (void)_openingOperationPossiblyEnded;
- (void)_performUserAction:(int)arg1 forEvent:(id)arg2;
- (BOOL)_prepareForTransmogrification;
- (id)_previewItemAtIndex:(long long)arg1;
- (void)_previewPanelDidBecomeKey:(id)arg1;
- (void)_previewPanelDidResignKey:(id)arg1;
- (void)_previewPanelFrameDidChange:(id)arg1;
- (id)_previewView;
- (void)_refreshLayoutAndContentBlocking:(BOOL)arg1;
- (void)_resetAnchor:(id)arg1;
- (void)_resetOpenButton;
- (void)_scheduleDoReloadData;
- (void)_setCurrentPreviewItem:(id)arg1 withTransition:(int)arg2 blocking:(BOOL)arg3;
- (void)_setCurrentPreviewItemIndex:(long long)arg1 withTransition:(int)arg2 blocking:(BOOL)arg3;
- (void)_setDisplayState:(id)arg1 updatePreviewView:(BOOL)arg2;
- (void)_setWidthAndHeightSizableConstraintsForView:(id)arg1 toMatchFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_setupControls;
- (void)_setupFullscreen;
- (void)_setupIndexSheet;
- (void)_setupInternalViews;
- (id)_shareItems;
- (id)_sharedPreviewViewForPreviewItem:(id)arg1;
- (id)_sharingPickerForItems:(id)arg1;
- (BOOL)_shouldHaveContinuousTransitionToSharedPreviewView:(id)arg1 withDocument:(id)arg2;
- (BOOL)_shouldOpenURL:(id)arg1 forPreviewItem:(id)arg2;
- (BOOL)_shouldRestoreSharedPreviewView:(id)arg1 withDocument:(id)arg2;
- (BOOL)_shouldStealSharedPreviewView:(id)arg1 forPreviewItem:(id)arg2;
- (BOOL)_shouldUpdateWindowFrame;
- (void)_startAnchorResetTimer;
- (void)_stopAnchorResetTimer;
- (void)_teardownControls;
- (void)_toggleInlineSlideshow;
- (void)_transmogrifyWithEvent:(id)arg1;
- (void)_updateEventMonitor;
- (void)_updateNavigationControls;
- (void)_updateOpaqueShape;
- (void)_updateOpenButton;
- (void)_updatePanelButtons;
- (void)_updatePanelFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animate:(BOOL)arg2;
- (void)_updatePanelTitle;
- (void)_updatePreloadedItems;
- (void)_updateProtectedCurrentDocumentURL;
- (void)_updateURLsToCache;
- (void)_updateWindowAnchor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_usableFrameForScreen:(id)arg1;
- (int)_userActionForEvent:(id)arg1;
- (void)activateIndexSheetWithAnimation:(BOOL)arg1;
- (void)actualSize:(id)arg1;
- (void)addDocumentWithURLToIPhoto:(id)arg1 commit:(BOOL)arg2;
- (void)addToIPhoto:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustedPanelFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ignoringCurrentFrame:(BOOL)arg2;
- (BOOL)automaticallyManageVisibility;
- (BOOL)canAddCurrentItemToiPhoto;
- (BOOL)canOpen;
- (BOOL)canShowNextItem;
- (BOOL)canShowPreviousItem;
- (void)cleanupReloadData;
- (void)close;
- (void)closeFullscreen:(id)arg1;
- (void)closeFullscreenWithEffect:(int)arg1;
- (void)commitAllAdditionsToIPhoto;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentViewFrame;
- (struct CGImage { }*)copyIndexSheetTransitionImageWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 transitionFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (long long)countOfPreviewItems;
- (id)currentPreviewItem;
- (long long)currentPreviewItemIndex;
- (double)currentTime;
- (void)deactivateIndexSheetWithAnimation:(BOOL)arg1;
- (void)dealloc;
- (id)delegate;
- (void)didClose;
- (void)didFinishOpeningTransition;
- (void)didOpen;
- (id)displayState;
- (BOOL)displayablePlaying;
- (id)displayedPreviewItem;
- (double)duration;
- (BOOL)enableSharing;
- (void)enterFullscreen:(id)arg1;
- (void)enterFullscreenAndStartSlideshow:(BOOL)arg1;
- (void)enterFullscreenWithEffect:(int)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fromPanel:(BOOL)arg3 startSlideshow:(BOOL)arg4;
- (void)exitFullscreen;
- (void)exitFullscreen:(id)arg1;
- (void)exitIndexSheet:(id)arg1;
- (BOOL)fakePlaying;
- (void)fitToScreen:(id)arg1;
- (id)forcedContentTypeUTI;
- (id)fullscreenController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })fullscreenFrame;
- (int)fullscreenStatus;
- (BOOL)handleEvent:(id)arg1;
- (BOOL)hasCustomSize;
- (BOOL)hasMultipleItems;
- (BOOL)hidePlayControl;
- (void)indexSheet:(id)arg1 didClickOnItemAtIndex:(long long)arg2;
- (void)indexSheet:(id)arg1 didHighlightItemAtIndex:(long long)arg2;
- (void)indexSheet:(id)arg1 keyDown:(id)arg2;
- (id)indexSheet:(id)arg1 titleForPreviewItem:(id)arg2;
- (id)indexSheetController;
- (void)indexSheetDidActivate:(id)arg1;
- (void)indexSheetDidClickOnBackground:(id)arg1;
- (void)indexSheetDidDeactivate:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })indexSheetFrame;
- (BOOL)indexSheetHasDarkBackground;
- (id)indexSheetHostingView;
- (unsigned long long)indexSheetMaxColumns;
- (unsigned long long)indexSheetMaxRows;
- (BOOL)indexSheetShowsControls;
- (int)indexSheetStatus;
- (void)indexSheetWillActivate:(id)arg1;
- (void)indexSheetWillDeactivate:(id)arg1;
- (id)initWithWindow:(id)arg1;
- (int)inlineSlideshowStatus;
- (BOOL)isCurrentItemIniPhoto;
- (BOOL)isFeatureEnabled:(int)arg1;
- (BOOL)isOpening;
- (id)itemsForSharingServicePickerTouchBarItem:(id)arg1;
- (id)loadingTitle;
- (void)magnifyWithEvent:(id)arg1;
- (void)makeSureOfOneReloadData;
- (id)mandatoryServer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })miniWindowFrameForItemFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 canZoomFromCenter:(BOOL)arg2;
- (BOOL)muted;
- (id)navigationController;
- (BOOL)needsVolumeControl;
- (id)nextSlideshowItem;
- (id)noItemsTitle;
- (id)objectInPreviewItemsAtIndex:(long long)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)open:(id)arg1;
- (id)openButtonMenuProvider;
- (id)openButtonTightTitle;
- (id)openButtonTitle;
- (void)openFromTouchBar:(id)arg1;
- (id)openingApplicationIcon;
- (id)openingApplicationInfo;
- (id)operationIDForPerfAnalysis;
- (id)panel;
- (void)pathWatcher:(id)arg1 fileAtURLWasDeleted:(id)arg2;
- (void)pathWatcher:(id)arg1 fileAtURLWasModified:(id)arg2 onlyAttributes:(BOOL)arg3;
- (void)pathWatcher:(id)arg1 fileAtURLWasMoved:(id)arg2;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
- (void)playPause:(id)arg1;
- (BOOL)playing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })previewContentFrameIgnoringIndexSheet:(BOOL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })previewDocumentFrame;
- (int)previewFeatures;
- (id)previewView;
- (id)previewView:(id)arg1 customViewForPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 didLoadPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 didShowDisplayable:(id)arg2;
- (void)previewView:(id)arg1 didShowPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 didUseDocumentForPreviewItem:(id)arg2;
- (id)previewView:(id)arg1 documentForPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 doubleClickedOnPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 gotDisplayBundle:(id)arg2 forPreviewItem:(id)arg3;
- (void)previewView:(id)arg1 opaqueFrameDidUpdate:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)previewView:(id)arg1 openExternalURL:(id)arg2;
- (void)previewView:(id)arg1 restoreDocument:(id)arg2;
- (BOOL)previewView:(id)arg1 shouldDisableProgressiveLoadingOfPreviewItem:(id)arg2;
- (BOOL)previewView:(id)arg1 shouldOpenURL:(id)arg2;
- (BOOL)previewView:(id)arg1 shouldRestoreDocument:(id)arg2;
- (BOOL)previewView:(id)arg1 shouldShowDisplayable:(id)arg2;
- (void)previewView:(id)arg1 timedOutLoadingPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 willLoadPreviewItem:(id)arg2;
- (void)previewView:(id)arg1 willShowDisplayable:(id)arg2;
- (void)previewView:(id)arg1 willShowPreviewItem:(id)arg2;
- (void)previewViewCustomTitleUpdated:(id)arg1;
- (void)previewViewSizingUpdated:(id)arg1;
- (BOOL)qlNOValue;
- (BOOL)qlYESValue;
- (void)refreshCurrentPreviewItem;
- (void)reloadData;
- (void)reloadDataNowIfNecessary;
- (void)reloadDataPreservingDisplayState:(BOOL)arg1;
- (void)restoreDisplayBundleToSharedPreviewView:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (double)seekTolerance;
- (void)setAutomaticallyManageVisibility:(BOOL)arg1;
- (void)setCurrentPreviewItemIndex:(long long)arg1;
- (void)setCurrentPreviewItemIndex:(long long)arg1 withTransition:(int)arg2 blocking:(BOOL)arg3;
- (void)setCurrentTime:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayState:(id)arg1;
- (void)setFakePlaying:(BOOL)arg1;
- (void)setFeature:(int)arg1 isEnabled:(BOOL)arg2;
- (void)setForcedContentTypeUTI:(id)arg1;
- (void)setHasCustomSize:(BOOL)arg1;
- (void)setHasMultipleItems:(BOOL)arg1;
- (void)setLoadingTitle:(id)arg1;
- (void)setMandatoryServer:(id)arg1;
- (void)setMuted:(BOOL)arg1;
- (void)setNavigationController:(id)arg1;
- (void)setNoItemsTitle:(id)arg1;
- (void)setOpeningApplicationInfo:(id)arg1;
- (void)setPlaying:(BOOL)arg1;
- (void)setPreviewFeatures:(int)arg1;
- (void)setSeekTolerance:(double)arg1;
- (void)setSharedPreviewView:(id)arg1;
- (void)setShowRemainingTime:(BOOL)arg1;
- (void)setTouchBarController:(id)arg1;
- (void)setVolume:(float)arg1;
- (void)setupControlsController:(id)arg1;
- (void)setupForFullscreen:(BOOL)arg1;
- (void)share:(id)arg1;
- (void)shareFromButton:(id)arg1;
- (void)sharedPreviewPanelWillOpen:(id)arg1;
- (id)sharedPreviewView;
- (void)sharingService:(id)arg1 didFailToShareItems:(id)arg2 error:(id)arg3;
- (void)sharingService:(id)arg1 didShareItems:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sharingService:(id)arg1 sourceFrameOnScreenForShareItem:(id)arg2;
- (id)sharingService:(id)arg1 sourceWindowForShareItems:(id)arg2 sharingContentScope:(long long*)arg3;
- (id)sharingService:(id)arg1 transitionImageForShareItem:(id)arg2 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (void)sharingService:(id)arg1 willShareItems:(id)arg2;
- (id)sharingServicePicker:(id)arg1 delegateForSharingService:(id)arg2;
- (BOOL)shouldManageVisibilityForPreviewView:(id)arg1;
- (BOOL)shouldStartPlayingPreviewView:(id)arg1;
- (BOOL)shouldUseCrossfadingForPreviewItem:(id)arg1;
- (void)showItemWithDelta:(long long)arg1 transition:(int)arg2;
- (void)showNextItem:(id)arg1;
- (BOOL)showPlayControl;
- (void)showPreviousItem:(id)arg1;
- (BOOL)showRemainingTime;
- (id)slideshow;
- (void)slideshow:(id)arg1;
- (void)slideshowGoToNextItem:(id)arg1;
- (void)start:(id)arg1;
- (void)startInlineSlideshow;
- (void)stop:(id)arg1;
- (void)stopInlineSlideshowAndStopPlaying:(BOOL)arg1;
- (void)swipeWithEvent:(id)arg1;
- (void)switchToIndexSheet:(id)arg1;
- (void)teardownControlsController:(id)arg1;
- (id)touchBar;
- (id)touchBarController;
- (void)trackSwipeWithEvent:(id)arg1;
- (void)updateAndApplySizeConstraints:(id)arg1;
- (void)updateControls;
- (float)volume;
- (BOOL)wantsForwardedScrollEventsForAxis:(long long)arg1;
- (BOOL)wantsScrollEventsForSwipeTrackingOnAxis:(long long)arg1;
- (void)willClose;
- (void)willOpen;
- (void)willStartClosingTransition;
- (struct CGSize { double x1; double x2; })windowSizeFromContentSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (BOOL)worksWhenModal;
- (void)zoom:(id)arg1;

@end
