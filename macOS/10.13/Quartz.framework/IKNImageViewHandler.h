/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
 */

@interface IKNImageViewHandler : NSObject {
    NSMutableArray * _annotations;
    NSMutableArray * _autoDetectedItems;
    BOOL  _autoResize;
    BOOL  _autoResizeMax100;
    BOOL  _delegateRespondsToRotationAngleChange;
    BOOL  _delegateRespondsToSelectionChange;
    BOOL  _forceSelectionInsideView;
    IKNImageView * _imageView;
    IKNKnobsLayer * _knobsLayer;
    long long  _mode;
    BOOL  _mouseDownInLayer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _mouseDownLoc;
    long long  _resolution;
    double  _rotationAngle;
    NSMutableArray * _selections;
    BOOL  _selectionsAreHidden;
    BOOL  _selectionsCanRotate;
    BOOL  _showAllSelectionsWithOrientation;
    BOOL  _singleSelection;
    struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } * _templateRects;
    long long  _templateRectsCount;
    CAShapeLayer * _trackingLayer;
    double  _zoomFactor;
}

@property (atomic, readwrite, retain) NSMutableArray *annotations;
@property (atomic, readwrite, retain) NSMutableArray *autoDetectedItems;
@property (atomic, readwrite) BOOL autoResize;
@property (atomic, readwrite) BOOL autoResizeMax100;
@property (atomic, readwrite) BOOL forceSelectionInsideView;
@property (atomic, readwrite) IKNImageView *imageView;
@property (atomic, readonly) IKNKnobsLayer *knobsLayer;
@property (atomic, readwrite) struct CGPoint { double x1; double x2; } mouseDownLoc;
@property (nonatomic, readwrite) long long resolution;
@property (atomic, readwrite) double rotationAngle;
@property (atomic, readwrite, retain) NSMutableArray *selections;
@property (atomic, readwrite) BOOL selectionsAreHidden;
@property (atomic, readwrite) BOOL selectionsCanBeModified;
@property (atomic, readwrite) BOOL selectionsCanRotate;
@property (atomic, readwrite) BOOL showAllSelectionsWithOrientation;
@property (nonatomic, readwrite) BOOL singleSelection;
@property (nonatomic, readwrite) double zoomFactor;

- (void)addAutoDetectedItem:(id)arg1;
- (void)addScanArea:(id)arg1 withOverlay:(BOOL)arg2;
- (void)addSelection:(id)arg1;
- (void)addSelectionFromAutodetectedItem:(id)arg1;
- (void)adjustAnnotationScaling;
- (void)adjustSelectionScaling;
- (void)adjustToViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)annotations;
- (id)autoDetectedItems;
- (BOOL)autoResize;
- (BOOL)autoResizeMax100;
- (id)autodetectedItemForSelection:(id)arg1;
- (void)dealloc;
- (void)deleteAllSelectionsInternal;
- (void)deleteIntersectingSelections:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)deleteSelectedItems:(id)arg1;
- (void)deleteSelection:(id)arg1;
- (void)deselectAll;
- (struct CGPoint { double x1; double x2; })displayPointToImagePoint:(struct CGPoint { double x1; double x2; })arg1 convertToInches:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })displayRectToImageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 convertToInches:(BOOL)arg2;
- (struct CGSize { double x1; double x2; })displaySizeToImageSize:(struct CGSize { double x1; double x2; })arg1 convertToInches:(BOOL)arg2;
- (void)doubleClick:(id)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (void)drawOrientationUI:(short)arg1;
- (void)drawTemplate:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (void)dumpSelections;
- (void)flagsChanged:(id)arg1;
- (BOOL)forceSelectionInsideView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)getTemplateRects:(long long*)arg1;
- (void)gotoNextSelection:(BOOL)arg1;
- (void)hideAllSelections;
- (void)hiliteSelection:(id)arg1;
- (struct CGPoint { double x1; double x2; })imagePointToDisplayPoint:(struct CGPoint { double x1; double x2; })arg1 convertFromInches:(BOOL)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageRectToDisplayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 convertFromInches:(BOOL)arg2;
- (struct CGSize { double x1; double x2; })imageSizeToDisplaySize:(struct CGSize { double x1; double x2; })arg1 convertFromInches:(BOOL)arg2;
- (id)imageView;
- (id)initWithImageView:(id)arg1;
- (void)installKnobsLayer:(id)arg1;
- (BOOL)keyDown:(id)arg1;
- (id)knobsLayer;
- (id)layerArray;
- (void)mouseDown:(id)arg1;
- (struct CGPoint { double x1; double x2; })mouseDownLoc;
- (void)mouseDragged:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)postRotationAngleIsChanging:(double)arg1;
- (void)postSelectionRectIsChanging:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)removeAllAutoDetectedItems;
- (void)removeTemplateRects;
- (void)resetSelectionWithOrientation;
- (long long)resolution;
- (void)rotateSelectionsLeft;
- (void)rotateSelectionsRight;
- (double)rotationAngle;
- (id)scanAreaFromSelection:(id)arg1;
- (id)selectionForAutodetectedItem:(id)arg1;
- (id)selectionFromScanArea:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (id)selections;
- (BOOL)selectionsAreHidden;
- (BOOL)selectionsCanBeModified;
- (BOOL)selectionsCanRotate;
- (void)setAnnotations:(id)arg1;
- (void)setAutoDetectedItems:(id)arg1;
- (void)setAutoResize:(BOOL)arg1;
- (void)setAutoResizeMax100:(BOOL)arg1;
- (void)setForceSelectionInsideView:(BOOL)arg1;
- (void)setImageView:(id)arg1;
- (void)setMouseDownLoc:(struct CGPoint { double x1; double x2; })arg1;
- (void)setResolution:(long long)arg1;
- (void)setRotationAngle:(double)arg1;
- (void)setSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSelections:(id)arg1;
- (void)setSelectionsAreHidden:(BOOL)arg1;
- (void)setSelectionsCanBeModified:(BOOL)arg1;
- (void)setSelectionsCanRotate:(BOOL)arg1;
- (void)setShowAllSelectionsWithOrientation:(BOOL)arg1;
- (void)setSingleSelection:(BOOL)arg1;
- (void)setTemplateRects:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 count:(long long)arg2;
- (void)setZoomFactor:(double)arg1;
- (void)showAllSelections;
- (BOOL)showAllSelectionsWithOrientation;
- (void)showSelectionWithOrientation:(long long)arg1;
- (BOOL)singleSelection;
- (void)unhiliteSelections;
- (double)zoomFactor;

@end
