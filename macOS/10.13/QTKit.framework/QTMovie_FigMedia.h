/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QTKit.framework/Versions/A/QTKit
 */

@interface QTMovie_FigMedia : QTMovieMediaHelper {
    BOOL  _attachedToMainThread;
    id  _chapterObserver;
    BOOL  _containsProtectedMedia;
    BOOL  _containsStreamingSource;
    struct OpaqueFigPlayer { } * _figPlayer;
    NSThread * _initializingThread;
    BOOL  _isActive;
    BOOL  _isMuted;
    long long  _loadState;
    int  _loadStateErrorCode;
    BOOL  _looping;
    BOOL  _loopingBackAndForth;
    NSString * _mostRecentlySetApertureMode;
    unsigned long long  _mostRecentlySetChapterIndex;
    BOOL  _playWhenReady;
    float  _playWhenReadyRate;
    struct OpaqueFigPlaybackItem { } * _playbackItem;
    struct { 
        struct { 
            long long timeValue; 
            long long timeScale; 
            long long flags; 
        } time; 
        struct { 
            long long timeValue; 
            long long timeScale; 
            long long flags; 
        } duration; 
    }  _playbackRange;
    BOOL  _playbackRangeActive;
    BOOL  _postsClosedCaptionChangeNotifications;
    BOOL  _postsNonForcedSubtitleChangeNotifications;
    struct OpaqueFigSemaphore { } * _readyForPlaybackSemaphore;
    QTMovieFigVisualContextRenderHelper * _renderHelper;
    QTMovie * _sessionClonedMovie;
    NSMapTable * _trackHelpers;
    NSURL * _url;
    struct OpaqueFigVisualContext { } * _visualContext;
    float  _volumeAtMuting;
    QTWeakReference * _weakReference;
    BOOL  _willMigrateToMainThread;
}

+ (BOOL)canInitWithDataReference:(id)arg1 fileTypes:(int)arg2 error:(id*)arg3;
+ (BOOL)canInitWithFile:(id)arg1 fileTypes:(int)arg2 error:(id*)arg3;
+ (BOOL)canInitWithURL:(id)arg1 fileTypes:(int)arg2 error:(id*)arg3;
+ (void)clearDownloadCache;
+ (void)clearDownloadCacheForSite:(id)arg1;
+ (void)initialize;
+ (id)movieFileTypes:(int)arg1;
+ (id)movieMIMETypesWithOptions:(int)arg1;
+ (id)sitesInDownloadCache;
+ (id)validationAttributesForDataReference:(id)arg1 fileTypes:(int)arg2 withAttributes:(id)arg3 error:(id*)arg4;
+ (id)validationAttributesForURL:(id)arg1 fileTypes:(int)arg2 withAttributes:(id)arg3 error:(id*)arg4;

- (id)URL;
- (BOOL)_attachedToMainThread;
- (void)_checkForChapterChanges;
- (void)_clearCachedImageData;
- (void)_createRenderHelperIfNecessary;
- (id)_enabledTracksOfMediaType:(id)arg1;
- (id)_enabledTracksWithCharacteristic:(id)arg1;
- (void)_handleLoopEndpoint;
- (void)_handleMovieDidPlayToTheEnd;
- (BOOL)_hasEnabledTrackOfType:(unsigned int)arg1;
- (BOOL)_hasTrackOfType:(unsigned int)arg1;
- (id)_initializingThread;
- (void)_initializingThreadWillExit:(id)arg1;
- (BOOL)_isAtEnd;
- (int)_loadStateErrorCode;
- (id)_metaDataStringOfType:(id)arg1;
- (BOOL)_playWhenReady;
- (float)_playWhenReadyRate;
- (BOOL)_playbackItemLoaded;
- (void)_postClosedCaptionDidChangeNotification:(id)arg1;
- (void)_postLoadStateChangedNotificationAndAutoplay:(id)arg1;
- (void)_postSubtitleDidChangeNotification:(id)arg1;
- (void)_registerForPropertyChanges;
- (id)_renderHelper;
- (void)_setLoadState:(long long)arg1;
- (void)_setLoadStateErrorCode:(int)arg1;
- (void)_setPlayWhenReady:(BOOL)arg1;
- (void)_setPlayWhenReadyRate:(float)arg1;
- (void)_setPlayWhenReadyToYES;
- (void)_setURL:(id)arg1;
- (void)_setVisualContext:(struct OpaqueFigVisualContext { }*)arg1;
- (void)_signalReadyForPlaybackSemaphore;
- (struct OpaqueCMTimebase { }*)_timebase;
- (id)_trackHelpers;
- (void)_unregisterForPropertyChanges;
- (struct OpaqueFigVisualContext { }*)_visualContext;
- (void)addImageConsumerNoNotify:(id)arg1;
- (id)album;
- (id)albumArtworkAttributes;
- (id)albumArtworkMovie;
- (id)annotations;
- (id)annotationsExtended;
- (id)annotationsWithCommonKeys;
- (id)apertureMode;
- (id)artist;
- (BOOL)attachToCurrentThread;
- (struct AudioChannelLayout { unsigned int x1; unsigned int x2; unsigned int x3; struct AudioChannelDescription { unsigned int x_4_1_1; unsigned int x_4_1_2; float x_4_1_3[3]; } x4[1]; }*)audioChannelLayout;
- (id)author;
- (void)autoplay;
- (void)autoplay:(float)arg1;
- (id)availableMetadataFormats;
- (id)availableRanges;
- (BOOL)canCopy;
- (BOOL)canCut;
- (BOOL)canPaste;
- (BOOL)canUndo;
- (long long)chapterCount;
- (long long)chapterIndexForTime:(struct { long long x1; long long x2; long long x3; })arg1;
- (int)chapterMode;
- (id)chapterTrack;
- (id)chapters;
- (id)chaptersDeep;
- (id)commonMetadata;
- (id)controllerType;
- (void)copyStateFromMediaHelper:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1 forParent:(id)arg2;
- (id)copyright;
- (id)creationTime;
- (unsigned int)currentChapterIndex;
- (id)currentChapterName;
- (struct CGSize { double x1; double x2; })currentSize;
- (struct { long long x1; long long x2; long long x3; })currentTime;
- (int)dataRate;
- (id)dataReference;
- (unsigned long long)dataSize;
- (void)dealloc;
- (BOOL)detachFromCurrentThread;
- (id)diagnosticString;
- (id)displayName;
- (unsigned long long)droppedVideoFrameCount;
- (struct { long long x1; long long x2; long long x3; })duration;
- (double)dynamicFrameRate;
- (BOOL)editable;
- (id)enabledTracks;
- (struct OpaqueFigPlaybackItem { }*)figPlaybackItem;
- (struct OpaqueFigPlayer { }*)figPlayer;
- (id)fileName;
- (void)finalize;
- (id)format;
- (void*)frameImageAtTime:(struct { long long x1; long long x2; long long x3; })arg1 withAttributes:(id)arg2 error:(id*)arg3;
- (id)fullName;
- (id)genre;
- (void)getDefaultDataLocatorAttributeKey:(id*)arg1 andValue:(id*)arg2;
- (void)gotoBeginning;
- (void)gotoEnd;
- (void)gotoPosterTime;
- (BOOL)hasAudio;
- (BOOL)hasChapters;
- (BOOL)hasClosedCaptions;
- (BOOL)hasDuration;
- (BOOL)hasFrameRate;
- (BOOL)hasQuartzComposer;
- (BOOL)hasSubtitles;
- (BOOL)hasVideo;
- (id)initWithAttributes:(id)arg1 error:(id*)arg2 forParent:(id)arg3;
- (id)initialDataReference;
- (void)invalidate;
- (BOOL)isActive;
- (BOOL)isDRMAuthorized;
- (BOOL)isDRMProtected;
- (BOOL)isFlashMovie;
- (BOOL)isInteractive;
- (BOOL)isLinear;
- (BOOL)isMuted;
- (BOOL)isPlaying;
- (BOOL)isSteppable;
- (BOOL)isStreaming;
- (BOOL)isVRMovie;
- (struct { long long x1; long long x2; long long x3; })keyframeStartTime:(struct { long long x1; long long x2; long long x3; })arg1;
- (BOOL)limitReadAhead;
- (long long)loadState;
- (id)loadStateError;
- (id)loadedRanges;
- (BOOL)loops;
- (BOOL)loopsBackAndForth;
- (struct { long long x1; long long x2; long long x3; })maxTimeLoaded;
- (id)metaDataDescription;
- (id)metadataForFormat:(id)arg1;
- (id)modificationTime;
- (unsigned int)movieType;
- (struct CGSize { double x1; double x2; })naturalSize;
- (struct MatrixRecord { int x1[3][3]; })originalMovieMatrix;
- (void)play;
- (struct { struct { long long x_1_1_1; long long x_1_1_2; long long x_1_1_3; } x1; struct { long long x_2_1_1; long long x_2_1_2; long long x_2_1_3; } x2; })playbackRange;
- (BOOL)postsNonForcedSubtitleDidChangeNotifications;
- (float)preferredRate;
- (float)rate;
- (void)setActive:(BOOL)arg1;
- (void)setApertureMode:(id)arg1;
- (void)setAudioChannelLayout:(struct AudioChannelLayout { unsigned int x1; unsigned int x2; unsigned int x3; struct AudioChannelDescription { unsigned int x_4_1_1; unsigned int x_4_1_2; float x_4_1_3[3]; } x4[1]; }*)arg1 error:(id*)arg2;
- (void)setAudioDevice:(id)arg1 error:(id*)arg2;
- (void)setChapterTrack:(id)arg1;
- (void)setCurrentChapterIndex:(unsigned int)arg1;
- (void)setCurrentTime:(struct { long long x1; long long x2; long long x3; })arg1;
- (void)setCurrentTime:(struct { long long x1; long long x2; long long x3; })arg1 inRange:(struct { struct { long long x_1_1_1; long long x_1_1_2; long long x_1_1_3; } x1; struct { long long x_2_1_1; long long x_2_1_2; long long x_2_1_3; } x2; })arg2;
- (void)setFigVolume:(float)arg1;
- (void)setLimitReadAhead:(BOOL)arg1;
- (void)setLoops:(BOOL)arg1;
- (void)setLoopsBackAndForth:(BOOL)arg1;
- (BOOL)setMetadata:(id)arg1 forFormat:(id)arg2;
- (void)setMuted:(BOOL)arg1;
- (void)setPlaybackRange:(struct { struct { long long x_1_1_1; long long x_1_1_2; long long x_1_1_3; } x1; struct { long long x_2_1_1; long long x_2_1_2; long long x_2_1_3; } x2; })arg1;
- (void)setPostsClosedCaptionDidChangeNotifications:(BOOL)arg1;
- (void)setPostsNonForcedSubtitleDidChangeNotifications:(BOOL)arg1;
- (void)setRate:(float)arg1;
- (void)setUseHardwareVideoDecoderIfAvailable:(BOOL)arg1;
- (void)setVolume:(float)arg1;
- (id)sourceString;
- (struct { long long x1; long long x2; long long x3; })startTimeOfChapter:(long long)arg1;
- (float)staticFrameRate;
- (void)step:(int)arg1;
- (void)stepBackward;
- (void)stepForward;
- (void)stop;
- (long long)timeScale;
- (id)trackAtIndex:(int)arg1;
- (id)trackByID:(long long)arg1;
- (id)trackByIndexAndType:(long long)arg1 type:(unsigned int)arg2 flags:(long long)arg3;
- (int)trackCount;
- (id)trackEnumerator;
- (id)tracks;
- (id)tracksOfMediaType:(id)arg1;
- (id)tracksWithCharacteristic:(id)arg1;
- (BOOL)useHardwareVideoDecoderIfAvailable;
- (BOOL)usesFigMedia;
- (BOOL)usesHardwareVideoDecoder;
- (BOOL)usesQuickTime;
- (BOOL)usesVisualContext;
- (BOOL)validateMetadata:(id)arg1 forFormat:(id)arg2 error:(id*)arg3;
- (float)volume;
- (BOOL)wouldUseVisualContext;

@end
