/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing
 */

@interface SFSession : NSObject <NSSecureCoding, SFXPCInterface> {
    BOOL  _activateCalled;
    BOOL  _activateCompleted;
    BOOL  _activateInProgress;
    long long  _bluetoothState;
    id  _bluetoothStateChangedHandler;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    struct CryptoAEADPrivate { } * _encryptionReadAEAD;
    unsigned char  _encryptionReadNonce;
    struct CryptoAEADPrivate { } * _encryptionWriteAEAD;
    unsigned char  _encryptionWriteNonce;
    id  _errorHandler;
    id  _eventMessageHandler;
    NSString * _fixedPIN;
    NSMutableData * _fragmentData;
    unsigned short  _fragmentLastIndex;
    unsigned int  _heartbeatID;
    unsigned long long  _heartbeatLastTicks;
    NSObject<OS_dispatch_source> * _heartbeatTimer;
    BOOL  _heartbeatV2;
    BOOL  _heartbeatWaiting;
    NSUUID * _identifier;
    id  _interruptionHandler;
    BOOL  _invalidateCalled;
    BOOL  _invalidateDone;
    id  _invalidationHandler;
    NSString * _label;
    CUMessageSessionServer * _messageSessionServer;
    CUMessageSession * _messageSessionTemplate;
    NSString * _myAppleID;
    CUAppleIDClient * _myAppleIDInfoClient;
    NSDictionary * _pairSetupACL;
    id  _pairSetupCompletion;
    BOOL  _pairSetupEnded;
    unsigned int  _pairSetupFlags;
    struct PairingSessionPrivate { } * _pairSetupSession;
    unsigned int  _pairSetupXID;
    NSMutableData * _pairTLSBuffer;
    BOOL  _pairTLSClient;
    id  _pairTLSCompletion;
    BOOL  _pairTLSConfigured;
    struct OpaqueSecIdentityRef { } * _pairTLSIdentity;
    NSObject<OS_dispatch_queue> * _pairTLSQueue;
    struct SSLContext { } * _pairTLSSession;
    NSDate * _pairTLSStart;
    BOOL  _pairTLSSuccess;
    NSDictionary * _pairVerifyACL;
    id  _pairVerifyCompletion;
    BOOL  _pairVerifyEnded;
    unsigned int  _pairVerifyFlags;
    struct PairingSessionPrivate { } * _pairVerifySession;
    NSUUID * _peer;
    NSString * _peerAppleID;
    NSString * _peerContactIdentifier;
    SFDevice * _peerDevice;
    id  _promptForPINHandler;
    id  _receivedFrameHandler;
    id  _receivedObjectHandler;
    id  _receivedRequestHandler;
    struct NSMutableDictionary { Class x1; } * _requestHandlers;
    struct NSMutableDictionary { Class x1; } * _requestMap;
    id  _requestMessageHandler;
    struct NSMutableDictionary { Class x1; } * _requestQueue;
    id  _responseMessageInternalHandler;
    id  _sendFrameHandler;
    NSString * _serviceIdentifier;
    unsigned char  _serviceType;
    NSUUID * _serviceUUID;
    unsigned int  _sessionFlags;
    unsigned int  _sessionID;
    unsigned int  _sharingSourceVersion;
    NSXPCListenerEndpoint * _testListenerEndpoint;
    double  _timeout;
    BOOL  _timeoutFired;
    id  _timeoutHandler;
    NSObject<OS_dispatch_source> * _timeoutTimer;
    BOOL  _touchRemoteEnabled;
    TRSession * _trSession;
    NSObject<OS_os_transaction> * _transaction;
    struct LogCategory { int x1; int x2; char *x3; unsigned int x4; char *x5; char *x6; int x7; struct LogCategory {} *x8; struct LogOutput {} *x9; struct LogOutput {} *x10; unsigned long long x11; unsigned long long x12; unsigned int x13; unsigned int x14; char *x15; struct LogCategoryPrivate {} *x16; } * _ucatCore;
    struct LogCategory { int x1; int x2; char *x3; unsigned int x4; char *x5; char *x6; int x7; struct LogCategory {} *x8; struct LogOutput {} *x9; struct LogOutput {} *x10; unsigned long long x11; unsigned long long x12; unsigned int x13; unsigned int x14; char *x15; struct LogCategoryPrivate {} *x16; } * _ucatCrypto;
    NSXPCConnection * _xpcCnx;
}

@property (nonatomic, readwrite) long long bluetoothState;
@property (nonatomic, readwrite, copy) id bluetoothStateChangedHandler;
@property (nonatomic, readwrite, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, readwrite, copy) id errorHandler;
@property (nonatomic, readwrite, copy) id eventMessageHandler;
@property (nonatomic, readwrite, copy) NSString *fixedPIN;
@property (nonatomic, readwrite) unsigned long long heartbeatLastTicks;
@property (nonatomic, readwrite, copy) NSUUID *identifier;
@property (nonatomic, readwrite, copy) id interruptionHandler;
@property (nonatomic, readwrite, copy) id invalidationHandler;
@property (nonatomic, readwrite, retain) NSString *label;
@property (nonatomic, readonly) CUMessageSession *messageSessionTemplate;
@property (nonatomic, readwrite, copy) NSString *myAppleID;
@property (nonatomic, readwrite, retain) CUAppleIDClient *myAppleIDInfoClient;
@property (nonatomic, readwrite, copy) NSDictionary *pairSetupACL;
@property (nonatomic, readwrite, copy) NSDictionary *pairVerifyACL;
@property (nonatomic, readwrite, copy) NSUUID *peer;
@property (nonatomic, readwrite, copy) NSString *peerAppleID;
@property (nonatomic, readwrite, copy) NSString *peerContactIdentifier;
@property (nonatomic, readwrite, retain) SFDevice *peerDevice;
@property (nonatomic, readwrite, copy) id promptForPINHandler;
@property (nonatomic, readwrite, copy) id receivedFrameHandler;
@property (nonatomic, readwrite, copy) id receivedObjectHandler;
@property (nonatomic, readwrite, copy) id receivedRequestHandler;
@property (nonatomic, readonly, copy) NSMutableDictionary *requestHandlers;
@property (nonatomic, readwrite, copy) id requestMessageHandler;
@property (nonatomic, readwrite, copy) id responseMessageInternalHandler;
@property (nonatomic, readwrite, copy) id sendFrameHandler;
@property (nonatomic, readwrite, copy) NSString *serviceIdentifier;
@property (nonatomic, readwrite) unsigned char serviceType;
@property (nonatomic, readwrite, copy) NSUUID *serviceUUID;
@property (nonatomic, readwrite) unsigned int sessionFlags;
@property (nonatomic, readwrite) unsigned int sessionID;
@property (nonatomic, readwrite) unsigned int sharingSourceVersion;
@property (nonatomic, readwrite, retain) NSXPCListenerEndpoint *testListenerEndpoint;
@property (nonatomic, readwrite) double timeout;
@property (nonatomic, readwrite, copy) id timeoutHandler;
@property (nonatomic, readwrite) BOOL touchRemoteEnabled;
@property (nonatomic, readwrite, retain) TRSession *trSession;

+ (BOOL)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_activateWithCompletion:(id)arg1;
- (void)_activated;
- (void)_cleanup;
- (void)_deregisterRequestID:(id)arg1;
- (void)_ensureXPCStarted;
- (void)_hearbeatTimer;
- (void)_interrupted;
- (void)_invalidated;
- (void)_pairSetup:(id)arg1 start:(BOOL)arg2;
- (void)_pairSetupCompleted:(int)arg1;
- (void)_pairSetupTryPIN:(id)arg1;
- (void)_pairSetupWithFlags:(unsigned int)arg1 completion:(id)arg2;
- (void)_pairTLSCompleted:(int)arg1;
- (int)_pairTLSEnsureConfigured;
- (void)_pairTLSReceivedData:(id)arg1 type:(unsigned char)arg2;
- (int)_pairTLSStart;
- (void)_pairVerify:(id)arg1 start:(BOOL)arg2;
- (void)_pairVerifyCompleted:(int)arg1;
- (void)_pairVerifyWithFlags:(unsigned int)arg1 completion:(id)arg2;
- (void)_registerRequestID:(id)arg1 options:(id)arg2 handler:(id)arg3;
- (void)_sendEncryptedObject:(id)arg1;
- (void)_sendFrameType:(unsigned char)arg1 object:(id)arg2;
- (void)_sendRequestID:(id)arg1 options:(id)arg2 request:(id)arg3 responseHandler:(id)arg4;
- (void)_sendRequestWithFlags:(unsigned int)arg1 object:(id)arg2 responseHandler:(id)arg3;
- (void)_sendTLSEncryptedObject:(id)arg1;
- (void)_sessionReceivedEncryptedData:(id)arg1 type:(unsigned char)arg2;
- (BOOL)_sessionReceivedEvent:(id)arg1 flags:(unsigned int)arg2;
- (void)_sessionReceivedObject:(id)arg1 flags:(unsigned int)arg2;
- (BOOL)_sessionReceivedRegisteredRequestID:(id)arg1 flags:(unsigned int)arg2 xidKey:(id)arg3 xidValue:(id)arg4;
- (BOOL)_sessionReceivedRequest:(id)arg1 flags:(unsigned int)arg2 responseHandler:(id)arg3;
- (void)_sessionReceivedRequestID:(id)arg1 object:(id)arg2 flags:(unsigned int)arg3;
- (void)_sessionReceivedResponseID:(id)arg1 object:(id)arg2 flags:(unsigned int)arg3;
- (void)_sessionReceivedStartAck:(id)arg1;
- (void)_sessionReceivedUnencryptedData:(id)arg1 type:(unsigned char)arg2;
- (void)_setupMessageSession;
- (void)_setupTouchRemote;
- (void)_startTimeoutIfNeeded;
- (void)_tearDownMessageSession;
- (void)_tearDownTouchRemote;
- (void)_timeoutTimerFired;
- (id)_tlsCertificateChainFromTrust:(struct __SecTrust { }*)arg1;
- (void)_tlsReceivedObjectWithLength:(unsigned long long)arg1;
- (void)_tlsReceivedValidationRecordData:(id)arg1;
- (void)activateWithCompletion:(id)arg1;
- (long long)bluetoothState;
- (id)bluetoothStateChangedHandler;
- (void)dealloc;
- (void)deregisterRequestID:(id)arg1;
- (id)description;
- (id)dispatchQueue;
- (void)encodeWithCoder:(id)arg1;
- (id)errorHandler;
- (id)eventMessageHandler;
- (id)fixedPIN;
- (unsigned long long)heartbeatLastTicks;
- (id)identifier;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)interruptionHandler;
- (void)invalidate;
- (id)invalidationHandler;
- (id)label;
- (id)messageSessionTemplate;
- (id)myAppleID;
- (id)myAppleIDInfoClient;
- (id)pairSetupACL;
- (void)pairSetupTryPIN:(id)arg1;
- (void)pairSetupWithFlags:(unsigned int)arg1 completion:(id)arg2;
- (void)pairTLSClient:(BOOL)arg1 completion:(id)arg2;
- (void)pairTLSReceivedData:(id)arg1 type:(unsigned char)arg2;
- (void)pairTLSWithIdentity:(struct OpaqueSecIdentityRef { }*)arg1 asClient:(BOOL)arg2 completion:(id)arg3;
- (id)pairVerifyACL;
- (void)pairVerifyWithFlags:(unsigned int)arg1 completion:(id)arg2;
- (BOOL)pairingContainsACL:(id)arg1;
- (id)pairingDeriveKeyForIdentifier:(id)arg1 keyLength:(unsigned long long)arg2;
- (id)peer;
- (id)peerAppleID;
- (id)peerContactIdentifier;
- (id)peerDevice;
- (id)promptForPINHandler;
- (id)receivedFrameHandler;
- (id)receivedObjectHandler;
- (id)receivedRequestHandler;
- (void)registerRequestID:(id)arg1 options:(id)arg2 handler:(id)arg3;
- (struct NSMutableDictionary { Class x1; }*)requestHandlers;
- (id)requestMessageHandler;
- (id)responseMessageInternalHandler;
- (void)sendEvent:(id)arg1;
- (id)sendFrameHandler;
- (void)sendFrameType:(unsigned char)arg1 data:(id)arg2;
- (void)sendFrameType:(unsigned char)arg1 object:(id)arg2;
- (void)sendRequest:(id)arg1;
- (void)sendRequestID:(id)arg1 options:(id)arg2 request:(id)arg3 responseHandler:(id)arg4;
- (void)sendRequestWithFlags:(unsigned int)arg1 object:(id)arg2 responseHandler:(id)arg3;
- (void)sendResponse:(id)arg1;
- (void)sendTLSEncryptedObject:(id)arg1;
- (void)sendWithFlags:(unsigned int)arg1 object:(id)arg2;
- (id)serviceIdentifier;
- (unsigned char)serviceType;
- (id)serviceUUID;
- (void)sessionBluetoothStateChanged:(long long)arg1;
- (void)sessionError:(id)arg1;
- (unsigned int)sessionFlags;
- (unsigned int)sessionID;
- (void)sessionReceivedEvent:(id)arg1;
- (void)sessionReceivedFragmentData:(id)arg1 last:(BOOL)arg2;
- (void)sessionReceivedFrameType:(unsigned char)arg1 data:(id)arg2;
- (void)sessionReceivedRequest:(id)arg1;
- (void)sessionReceivedResponse:(id)arg1;
- (void)setBluetoothState:(long long)arg1;
- (void)setBluetoothStateChangedHandler:(id)arg1;
- (void)setDispatchQueue:(id)arg1;
- (int)setEncryptionReadKey:(const char *)arg1 readKeyLen:(unsigned long long)arg2 writeKey:(const char *)arg3 writeKeyLen:(unsigned long long)arg4;
- (void)setErrorHandler:(id)arg1;
- (void)setEventMessageHandler:(id)arg1;
- (void)setFixedPIN:(id)arg1;
- (void)setHeartbeatLastTicks:(unsigned long long)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setInterruptionHandler:(id)arg1;
- (void)setInvalidationHandler:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setMyAppleID:(id)arg1;
- (void)setMyAppleIDInfoClient:(id)arg1;
- (void)setPairSetupACL:(id)arg1;
- (void)setPairVerifyACL:(id)arg1;
- (void)setPeer:(id)arg1;
- (void)setPeerAppleID:(id)arg1;
- (void)setPeerContactIdentifier:(id)arg1;
- (void)setPeerDevice:(id)arg1;
- (void)setPromptForPINHandler:(id)arg1;
- (void)setReceivedFrameHandler:(id)arg1;
- (void)setReceivedObjectHandler:(id)arg1;
- (void)setReceivedRequestHandler:(id)arg1;
- (void)setRequestMessageHandler:(id)arg1;
- (void)setResponseMessageInternalHandler:(id)arg1;
- (void)setSendFrameHandler:(id)arg1;
- (void)setServiceIdentifier:(id)arg1;
- (void)setServiceType:(unsigned char)arg1;
- (void)setServiceUUID:(id)arg1;
- (void)setSessionFlags:(unsigned int)arg1;
- (void)setSessionID:(unsigned int)arg1;
- (void)setSharingSourceVersion:(unsigned int)arg1;
- (void)setTestListenerEndpoint:(id)arg1;
- (void)setTimeout:(double)arg1;
- (void)setTimeoutHandler:(id)arg1;
- (void)setTouchRemoteEnabled:(BOOL)arg1;
- (void)setTrSession:(id)arg1;
- (unsigned int)sharingSourceVersion;
- (id)testListenerEndpoint;
- (double)timeout;
- (id)timeoutHandler;
- (BOOL)touchRemoteEnabled;
- (id)trSession;

@end
