/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Accounts.framework/Versions/A/Accounts
 */

@interface ACAccountCredential : NSObject <ACProtobufCoding, NSCoding, NSCopying, NSSecureCoding> {
    NSMutableDictionary * _credentialItems;
    NSString * _credentialType;
    BOOL  _dirty;
    NSMutableSet * _dirtyProperties;
    BOOL  _empty;
    ACAccount * _owningAccount;
    BOOL  _requiresTouchID;
}

@property (nonatomic, readwrite, copy) NSString *credentialType;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (getter=isDirty, nonatomic, readwrite) BOOL dirty;
@property (nonatomic, readonly) NSSet *dirtyProperties;
@property (getter=isEmpty, nonatomic, readwrite) BOOL empty;
@property (nonatomic, readwrite, retain) NSDate *expiryDate;
@property (nonatomic, readwrite, copy) NSString *findMyiPhoneToken;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite, copy) NSString *hsaToken;
@property (nonatomic, readwrite, copy) NSString *mapsToken;
@property (atomic, readwrite, copy) NSString *oauthRefreshToken;
@property (nonatomic, readwrite, copy) NSString *oauthToken;
@property (nonatomic, readwrite, copy) NSString *oauthTokenNoSync;
@property (atomic, readwrite, copy) NSString *oauthTokenSecret;
@property (atomic, readwrite, copy) NSString *password;
@property (atomic, readwrite) BOOL requiresTouchID;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite, copy) NSString *token;
@property (nonatomic, readwrite, copy) NSDate *tokenExpiryDate;

+ (id)additionalServiceSegmentForAccountTypeIdentifier:(id)arg1;
+ (id)allSupportedKeys;
+ (id)credentialPolicyForAccountTypeIdentifier:(id)arg1 key:(id)arg2 clientID:(id)arg3;
+ (id)credentialWithOAuthToken:(id)arg1 tokenSecret:(id)arg2;
+ (id)credentialWithPassword:(id)arg1;
+ (id)nonPersistentKeysForAccountTypeIdentifier:(id)arg1 credentialType:(id)arg2;
+ (id)supportedKeysForAccountTypeIdentifier:(id)arg1 credentialType:(id)arg2;
+ (BOOL)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_clearDirtyProperties;
- (id)_encodeProtobuf;
- (id)_encodeProtobufData;
- (id)_initWithProtobuf:(id)arg1;
- (id)_initWithProtobufData:(id)arg1;
- (void)_markPropertyDirty:(id)arg1;
- (void)_setOwningAccount:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)credentialItemForKey:(id)arg1;
- (id)credentialItems;
- (id)credentialType;
- (id)dirtyProperties;
- (void)encodeWithCoder:(id)arg1;
- (id)expiryDate;
- (id)findMyiPhoneToken;
- (unsigned long long)hash;
- (id)hsaToken;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithOAuth2Token:(id)arg1 refreshToken:(id)arg2 expiryDate:(id)arg3;
- (id)initWithOAuthToken:(id)arg1 tokenSecret:(id)arg2;
- (id)initWithPassword:(id)arg1;
- (BOOL)isDirty;
- (BOOL)isEmpty;
- (BOOL)isEqual:(id)arg1;
- (id)keysForCredentialItems;
- (id)mapsToken;
- (id)oauthRefreshToken;
- (id)oauthToken;
- (id)oauthTokenNoSync;
- (id)oauthTokenSecret;
- (id)password;
- (BOOL)requiresTouchID;
- (void)setCredentialItem:(id)arg1 forKey:(id)arg2;
- (void)setCredentialType:(id)arg1;
- (void)setDirty:(BOOL)arg1;
- (void)setEmpty:(BOOL)arg1;
- (void)setExpiryDate:(id)arg1;
- (void)setFindMyiPhoneToken:(id)arg1;
- (void)setHsaToken:(id)arg1;
- (void)setMapsToken:(id)arg1;
- (void)setOauthRefreshToken:(id)arg1;
- (void)setOauthToken:(id)arg1;
- (void)setOauthTokenNoSync:(id)arg1;
- (void)setOauthTokenSecret:(id)arg1;
- (void)setPassword:(id)arg1;
- (void)setRequiresTouchID:(BOOL)arg1;
- (void)setToken:(id)arg1;
- (void)setTokenExpiryDate:(id)arg1;
- (id)token;
- (id)tokenExpiryDate;

@end
