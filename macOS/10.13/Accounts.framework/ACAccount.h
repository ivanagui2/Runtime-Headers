/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Accounts.framework/Versions/A/Accounts
 */

@interface ACAccount : NSObject <ACProtobufCoding, CNAccountDescription, NSCoding, NSCopying, NSSecureCoding> {
    BOOL  _accountAccessAvailable;
    NSString * _accountDescription;
    id  _accountPropertiesTransformer;
    ACAccountType * _accountType;
    BOOL  _active;
    BOOL  _authenticated;
    NSString * _authenticationType;
    NSArray * _childAccounts;
    NSString * _clientToken;
    BOOL  _creatingFromManagedObject;
    ACAccountCredential * _credential;
    NSString * _credentialType;
    id  _credentialsDidChangeObserver;
    NSMutableDictionary * _dataclassProperties;
    NSDate * _date;
    NSMutableSet * _dirtyAccountProperties;
    NSMutableSet * _dirtyDataclassProperties;
    NSMutableSet * _dirtyProperties;
    NSMutableSet * _enabledDataclasses;
    BOOL  _haveCheckedForChildAccounts;
    BOOL  _haveCheckedForClientToken;
    BOOL  _haveCheckedForParentAccount;
    NSString * _identifier;
    NSDate * _lastCredentialRenewalRejectionDate;
    NSURL * _objectID;
    NSString * _owningBundleID;
    ACAccount * _parentAccount;
    NSString * _parentAccountIdentifier;
    NSMutableDictionary * _properties;
    NSMutableSet * _provisionedDataclasses;
    ACAccountStore * _store;
    BOOL  _supportsAuthentication;
    NSString * _username;
    BOOL  _visible;
}

@property (atomic, readwrite, copy) NSString *accountDescription;
@property (atomic, readonly) NSDictionary *accountProperties;
@property (atomic, readwrite, copy) id accountPropertiesTransformer;
@property (atomic, readonly) ACAccountStore *accountStore;
@property (atomic, readwrite, retain) ACAccountType *accountType;
@property (getter=isActive, atomic, readwrite) BOOL active;
@property (getter=isAuthenticated, atomic, readwrite) BOOL authenticated;
@property (atomic, readonly) NSString *authenticationType;
@property (atomic, readonly, copy) NSURL *baseURL;
@property (atomic, readonly) NSArray *childAccounts;
@property (atomic, readonly) NSString *clientToken;
@property (setter=setCNExternalURL:, atomic, readwrite, copy) NSURL *cnExternalURL;
@property (atomic, readonly) BOOL cnHasParentAccount;
@property (setter=setCNHostname:, atomic, readwrite, retain) NSString *cnHostname;
@property (setter=setCNIdentityEmailAddress:, atomic, readwrite, copy) NSString *cnIdentityEmailAddress;
@property (atomic, readonly) BOOL cnIsCardDAVAccount;
@property (atomic, readonly) BOOL cnIsDirty;
@property (setter=setCNIsEnabled:, atomic, readwrite) BOOL cnIsEnabled;
@property (atomic, readonly) BOOL cnIsEnabledForContacts;
@property (atomic, readonly) BOOL cnIsEnabledForContactsSearch;
@property (atomic, readonly) BOOL cnIsExchangeAccount;
@property (atomic, readonly) BOOL cnIsGenericCardDAVAccount;
@property (atomic, readonly) BOOL cnIsGoogleAccount;
@property (atomic, readonly) BOOL cnIsLDAPAccount;
@property (atomic, readonly) BOOL cnIsiCloudAccount;
@property (setter=setCNLocalDataMigrationHasTakenPlace:, atomic, readwrite) BOOL cnLocalDataMigrationHasTakenPlace;
@property (atomic, readonly) BOOL cnNeedsDiscovery;
@property (setter=setCNPort:, atomic, readwrite, copy) NSNumber *cnPort;
@property (setter=setCNRootFolderID:, atomic, readwrite, copy) NSString *cnRootFolderID;
@property (setter=setCNServerSyncHasTakenPlace:, atomic, readwrite) BOOL cnServerSyncHasTakenPlace;
@property (setter=setCNServerURL:, atomic, readwrite, copy) NSURL *cnServerURL;
@property (setter=setCNUseSSL:, atomic, readwrite) BOOL cnUseSSL;
@property (atomic, readonly) ABCDContainer *containerRepresentation;
@property (atomic, readwrite, retain) NSDate *creationDate;
@property (atomic, readwrite, retain) ACAccountCredential *credential;
@property (atomic, readonly) NSString *credentialType;
@property (atomic, readonly) NSDictionary *dataclassProperties;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (getter=isDirty, atomic, readonly) BOOL dirty;
@property (atomic, readonly) NSSet *dirtyAccountProperties;
@property (atomic, readonly) NSSet *dirtyDataclassProperties;
@property (atomic, readonly) NSSet *dirtyProperties;
@property (atomic, readonly) ACAccount *displayAccount;
@property (atomic, readwrite, retain) NSMutableSet *enabledDataclasses;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly, copy) NSString *identifier;
@property (atomic, readonly) NSString *identifier;
@property (atomic, readonly) BOOL isEnabled;
@property (atomic, readonly) BOOL isPersistent;
@property (atomic, readwrite, retain) NSDate *lastCredentialRenewalRejectionDate;
@property (atomic, readonly) NSURL *objectID;
@property (atomic, readwrite, retain) ACAccount *parentAccount;
@property (atomic, readonly) NSString *parentAccountIdentifier;
@property (atomic, readonly) NSURL *persistentStoreURL;
@property (atomic, readwrite, retain) NSMutableSet *provisionedDataclasses;
@property (nonatomic, readonly) NSString *shortDebugName;
@property (atomic, readonly) Class superclass;
@property (atomic, readwrite) BOOL supportsAuthentication;
@property (atomic, readonly) BOOL supportsPush;
@property (atomic, readonly) NSString *userFullName;
@property (atomic, readwrite, copy) NSString *username;
@property (getter=isVisible, atomic, readwrite) BOOL visible;

// Image: /System/Library/Frameworks/Accounts.framework/Versions/A/Accounts

+ (id)_createNewAccountUID;
+ (BOOL)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_clearCachedChildAccounts;
- (void)_clearCachedCredentials;
- (void)_clearDirtyProperties;
- (id)_encodeProtobuf;
- (id)_encodeProtobufData;
- (id)_initWithManagedAccount:(id)arg1 accountStore:(id)arg2 withDirtyStateFromAccount:(id)arg3;
- (id)_initWithProtobuf:(id)arg1;
- (id)_initWithProtobufData:(id)arg1;
- (void)_installCredentialsChangedObserver;
- (void)_loadAllCachedProperties;
- (void)_loadCachedPropertiesWithoutCredentials;
- (void)_markAccountPropertyDirty:(id)arg1;
- (void)_markCredentialDirty;
- (void)_markDataclassPropertyDirty:(id)arg1;
- (void)_markPropertyDirty:(id)arg1;
- (void)_setAccountStore:(id)arg1;
- (void)_setObjectID:(id)arg1;
- (BOOL)_useParentForCredentials;
- (id)accountByCleaningThirdPartyTransformations;
- (id)accountDescription;
- (id)accountProperties;
- (id)accountPropertiesTransformer;
- (id)accountPropertyForKey:(id)arg1;
- (id)accountStore;
- (id)accountType;
- (BOOL)addClientToken:(id)arg1;
- (BOOL)authenticated;
- (id)authenticationType;
- (id)childAccounts;
- (id)childAccountsWithAccountTypeIdentifier:(id)arg1;
- (id)clientToken;
- (struct OpaqueSecIdentityRef { }*)copySecIdentity;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)creationDate;
- (id)credential;
- (id)credentialType;
- (id)credentialWithError:(id*)arg1;
- (void)credentialsChanged:(id)arg1;
- (id)dataclassProperties;
- (void)dealloc;
- (id)defaultAutodiscoverDomainForChildType:(id)arg1;
- (id)description;
- (id)diffAccount:(id)arg1;
- (id)dirtyAccountProperties;
- (id)dirtyDataclassProperties;
- (id)dirtyProperties;
- (id)displayAccount;
- (id)enabledAndSyncableDataclasses;
- (id)enabledDataclasses;
- (void)encodeWithCoder:(id)arg1;
- (id)fullDescription;
- (id)identifier;
- (id)init;
- (id)initWithAccountType:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithManagedAccount:(id)arg1;
- (id)initWithManagedAccount:(id)arg1 accountStore:(id)arg2;
- (BOOL)isActive;
- (BOOL)isAuthenticated;
- (BOOL)isDirty;
- (BOOL)isEnabledForDataclass:(id)arg1;
- (BOOL)isEnabledToSyncDataclass:(id)arg1;
- (BOOL)isPropertyDirty:(id)arg1;
- (BOOL)isProvisionedForDataclass:(id)arg1;
- (BOOL)isVisible;
- (id)lastCredentialRenewalRejectionDate;
- (void)markAllPropertiesDirty;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objectID;
- (id)owningBundleID;
- (id)parentAccount;
- (id)parentAccountIdentifier;
- (id)portableCopy;
- (id)propertiesForDataclass:(id)arg1;
- (id)propertyForKey:(id)arg1;
- (id)provisionedDataclasses;
- (id)qualifiedUsername;
- (void)refresh;
- (void)reload;
- (id)secCertificates;
- (void)setAccountDescription:(id)arg1;
- (void)setAccountProperties:(id)arg1;
- (void)setAccountPropertiesTransformer:(id)arg1;
- (void)setAccountProperty:(id)arg1 forKey:(id)arg2;
- (void)setAccountType:(id)arg1;
- (void)setActive:(BOOL)arg1;
- (void)setAuthenticated:(BOOL)arg1;
- (void)setAuthenticationType:(id)arg1;
- (void)setCreatingFromManagedObject:(BOOL)arg1;
- (void)setCreationDate:(id)arg1;
- (void)setCredential:(id)arg1;
- (void)setCredentialType:(id)arg1;
- (void)setDataclassProperties:(id)arg1;
- (void)setEnabled:(BOOL)arg1 forDataclass:(id)arg2;
- (void)setEnabledDataclasses:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setLastCredentialRenewalRejectionDate:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setOwningBundleID:(id)arg1;
- (void)setParentAccount:(id)arg1;
- (void)setProperties:(id)arg1 forDataclass:(id)arg2;
- (void)setProperty:(id)arg1 forKey:(id)arg2;
- (void)setProvisionedDataclasses:(id)arg1;
- (void)setSecCertificates:(id)arg1;
- (void)setSecIdentity:(struct OpaqueSecIdentityRef { }*)arg1;
- (void)setSupportsAuthentication:(BOOL)arg1;
- (void)setUsername:(id)arg1;
- (void)setVisible:(BOOL)arg1;
- (id)shortDebugName;
- (BOOL)supportsAuthentication;
- (BOOL)supportsPush;
- (void)takeValuesFromModifiedAccount:(id)arg1;
- (id)userFullName;
- (id)username;

// Image: /System/Library/Frameworks/Contacts.framework/Versions/A/Contacts

// ACAccount (CNAdditions)

+ (id)_cardDAVDataclassProperties;
+ (id)cardDAVChildForParentAccount:(id)arg1;
+ (id)defaultServerURLForChildAccountsOfAccount:(id)arg1;

- (void)_removeAccountPropertyForKey:(id)arg1;
- (id)_schemeStringForUseSSL:(BOOL)arg1;
- (void)_setValue:(id)arg1 forAccountPropertyKey:(id)arg2;
- (id)_updateURL:(id)arg1 withHost:(id)arg2 port:(id)arg3 useSSL:(id)arg4;
- (BOOL)_useSSLForSchemeString:(id)arg1;
- (id)_valueForAccountPropertyKey:(id)arg1;
- (id)cnExternalURL;
- (BOOL)cnHasParentAccount;
- (id)cnHostname;
- (id)cnIdentityEmailAddress;
- (BOOL)cnIsCardDAVAccount;
- (BOOL)cnIsDirty;
- (BOOL)cnIsEnabled;
- (BOOL)cnIsEnabledForContacts;
- (BOOL)cnIsEnabledForContactsSearch;
- (BOOL)cnIsExchangeAccount;
- (BOOL)cnIsGenericCardDAVAccount;
- (BOOL)cnIsGoogleAccount;
- (BOOL)cnIsLDAPAccount;
- (BOOL)cnIsiCloudAccount;
- (BOOL)cnLocalDataMigrationHasTakenPlace;
- (BOOL)cnNeedsDiscovery;
- (id)cnPort;
- (id)cnRootFolderID;
- (BOOL)cnServerSyncHasTakenPlace;
- (id)cnServerURL;
- (BOOL)cnUseSSL;
- (void)setCNExternalURL:(id)arg1;
- (void)setCNHostname:(id)arg1;
- (void)setCNIdentityEmailAddress:(id)arg1;
- (void)setCNIsEnabled:(BOOL)arg1;
- (void)setCNLocalDataMigrationHasTakenPlace:(BOOL)arg1;
- (void)setCNPort:(id)arg1;
- (void)setCNRootFolderID:(id)arg1;
- (void)setCNServerSyncHasTakenPlace:(BOOL)arg1;
- (void)setCNServerURL:(id)arg1;
- (void)setCNUseSSL:(BOOL)arg1;

// Image: /System/Library/PrivateFrameworks/ContactsPersistence.framework/Versions/A/ContactsPersistence

// ACAccount (CNAccountDescription)

- (long long)_containerType;
- (id)_interestedAccountTypeIdentifiers;
- (id)baseURL;
- (id)containerRepresentation;
- (BOOL)isEnabled;
- (BOOL)isPersistent;
- (id)persistentStoreURL;

@end
