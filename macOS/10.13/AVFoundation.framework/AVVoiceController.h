/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/Versions/A/Frameworks/AVFAudio.framework/Versions/A/AVFAudio
 */

@interface AVVoiceController : NSObject {
    void * _impl;
}

@property (atomic, readwrite) float alertVolume;
@property (getter=isBargeInDetectEnabled, atomic, readwrite) BOOL bargeInDetectEnabled;
@property (setter=setDuckOthersOption:, atomic, readwrite) BOOL duckOthersOption;
@property (atomic, readwrite, retain) <Endpointer> *endpointerDelegate;
@property (atomic, readonly) unsigned long long lastRecordStartTime;
@property (getter=isMeteringEnabled, atomic, readwrite) BOOL meteringEnabled;
@property (atomic, readonly) NSDictionary *metrics;
@property (atomic, readonly) AVAudioFormat *pcmRecordBufferFormat;
@property (atomic, readwrite) <AVVoiceControllerPlaybackDelegate> *playbackDelegate;
@property (atomic, readonly, copy) NSString *playbackRoute;
@property (atomic, readonly) NSDictionary *playbackSettings;
@property (atomic, readwrite) float playbackVolume;
@property (getter=isPlaying, atomic, readonly) BOOL playing;
@property (atomic, readwrite) <AVVoiceControllerRecordDelegate> *recordDelegate;
@property (atomic, readwrite) double recordEndWaitTime;
@property (atomic, readwrite) int recordEndpointMode;
@property (atomic, readwrite) double recordInterspeechWaitTime;
@property (atomic, readonly, copy) NSString *recordRoute;
@property (atomic, readonly) NSDictionary *recordSettings;
@property (atomic, readwrite) double recordStartWaitTime;
@property (getter=isRecording, atomic, readonly) BOOL recording;
@property (getter=isStopOnBargeInEnabled, atomic, readwrite) BOOL stopOnBargeInEnabled;
@property (getter=isStopOnEndpointEnabled, atomic, readwrite) BOOL stopOnEndpointEnabled;
@property (getter=isSynchronousCallbackEnabled, atomic, readwrite) BOOL synchronousCallbackEnabled;
@property (atomic, readwrite) <AVVoiceControllerVoiceTriggerDelegate> *voiceTriggerDelegate;
@property (atomic, readonly) NSDictionary *voiceTriggerInfo;
@property (atomic, readonly) unsigned long long voiceTriggerPastDataFramesAvailable;
@property (atomic, readonly, retain) NSXPCConnection *voiceTriggerServerConnection;

- (BOOL)IsDeviceAvailableInLocalRoute:(id)arg1 error:(id*)arg2;
- (float)alertVolume;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)dealloc;
- (int)doStartRecordingAtTime:(unsigned long long)arg1 behavior:(id)arg2;
- (id)endpointerDelegate;
- (void)finalize;
- (double)getPlaybackBufferDuration;
- (double)getRecordBufferDuration;
- (id)initWithContext:(id)arg1 error:(id*)arg2;
- (id)initWithRecordDevice:(id)arg1 error:(id*)arg2;
- (BOOL)isMeteringEnabled;
- (BOOL)isPlaying;
- (BOOL)isRecording;
- (BOOL)isStopOnEndpointEnabled;
- (id)metrics;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (BOOL)playAlertSoundForType:(int)arg1;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (id)playbackDelegate;
- (id)playbackSettings;
- (float)playbackVolume;
- (BOOL)preparePlaybackFromURL:(id)arg1 error:(id*)arg2;
- (BOOL)preparePlaybackWithSettings:(id)arg1 error:(id*)arg2;
- (BOOL)prepareRecordWithSettings:(id)arg1 error:(id*)arg2;
- (id)recordDelegate;
- (double)recordEndWaitTime;
- (int)recordEndpointMode;
- (double)recordInterspeechWaitTime;
- (id)recordSettings;
- (double)recordStartWaitTime;
- (void)resetEndpointer;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (void)setAlertVolume:(float)arg1;
- (BOOL)setCurrentContext:(id)arg1 error:(id*)arg2;
- (void)setEndpointerDelegate:(id)arg1;
- (void)setMeteringEnabled:(BOOL)arg1;
- (BOOL)setPlaybackBufferDuration:(double)arg1;
- (void)setPlaybackDelegate:(id)arg1;
- (void)setPlaybackVolume:(float)arg1;
- (BOOL)setRecordBufferDuration:(double)arg1;
- (void)setRecordDelegate:(id)arg1;
- (void)setRecordEndWaitTime:(double)arg1;
- (void)setRecordEndpointMode:(int)arg1;
- (void)setRecordInterspeechWaitTime:(double)arg1;
- (void)setRecordStartWaitTime:(double)arg1;
- (void)setStopOnEndpointEnabled:(BOOL)arg1;
- (void)setupAlertBehavior:(id)arg1;
- (BOOL)startPlaying;
- (BOOL)startRecording;
- (BOOL)startRecording:(id*)arg1;
- (void)stopPlaying;
- (void)stopRecording;
- (void)updateMeters;

// AVVoiceController (AVVoiceControllerInternal)

- (void)avAudioPCMRecordBufferReceived:(id)arg1 atTime:(unsigned long long)arg2;
- (void)beganPlaying;
- (void)beganRecording;
- (void)decodeError;
- (void)encodeError;
- (void)endpointDetected;
- (void)finishedPlaying;
- (void)finishedRecording;
- (void)handleDeviceChange:(unsigned int)arg1;
- (struct ControllerImpl { int (**x1)(); id x2; id x3; id x4; unsigned char x5; unsigned short x6; /* Warning: Unrecognized filer type: 't' using 'void*' */ void*x7; const void*x8; void*x9; void*x10; bool x11; void*x12; short x13; int x14; BOOL x15; long doublex16; void*x17; short x18; BOOL x19; const int x20; void*x21; void*x22; int x23; out in void*x24; double x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; unsigned int x32; unsigned int x33; }*)impl;
- (void)interspeechPointDetected;
- (void)lpcmRecordBufferReceived:(struct AudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; }*)arg1 atTime:(unsigned long long)arg2;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; struct AudioStreamBasicDescription { double x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; unsigned int x_8_1_7; unsigned int x_8_1_8; unsigned int x_8_1_9; } x8; }*)arg1;
- (void)recordBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; struct AudioStreamBasicDescription { double x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; unsigned int x_8_1_7; unsigned int x_8_1_8; unsigned int x_8_1_9; } x8; }*)arg1 atTime:(unsigned long long)arg2;
- (int)setRecordDevice:(unsigned int)arg1;
- (void)startpointDetected;

// AVVoiceController (AVVoiceController_Priv)

- (BOOL)duckOthersOption;
- (void)enableVoiceTriggerListening:(BOOL)arg1;
- (BOOL)isBargeInDetectEnabled;
- (BOOL)isStopOnBargeInEnabled;
- (BOOL)isSynchronousCallbackEnabled;
- (unsigned long long)lastRecordStartTime;
- (id)pcmRecordBufferFormat;
- (BOOL)playAlertSoundForType:(int)arg1 overrideMode:(long long)arg2;
- (id)playbackRoute;
- (id)recordRoute;
- (void)sendRemoteConnectionMessage:(id)arg1;
- (void)setBargeInDetectEnabled:(BOOL)arg1;
- (void)setDuckOthersOption:(BOOL)arg1;
- (void)setStopOnBargeInEnabled:(BOOL)arg1;
- (void)setSynchronousCallbackEnabled:(BOOL)arg1;
- (void)setVoiceTriggerDelegate:(id)arg1;
- (void)updateVoiceTriggerConfiguration:(id)arg1;
- (id)voiceTriggerDelegate;
- (id)voiceTriggerInfo;
- (unsigned long long)voiceTriggerPastDataFramesAvailable;
- (id)voiceTriggerServerConnection;

// AVVoiceController (VoiceTriggerNotificationInterface)

- (void)voiceTriggerNotification:(id)arg1;

@end
