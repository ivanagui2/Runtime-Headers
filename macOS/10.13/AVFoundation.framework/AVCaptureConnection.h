/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/Versions/A/AVFoundation
 */

@interface AVCaptureConnection : NSObject {
    AVCaptureConnectionInternal * _internal;
}

@property (getter=isActive, nonatomic, readonly) BOOL active;
@property (nonatomic, readonly) NSArray *audioChannels;
@property (nonatomic, readwrite) BOOL automaticallyAdjustsVideoMirroring;
@property (getter=isEnabled, nonatomic, readwrite) BOOL enabled;
@property (nonatomic, readonly) NSArray *inputPorts;
@property (nonatomic, readonly) AVCaptureOutput *output;
@property (getter=isVideoFieldModeSupported, nonatomic, readonly) BOOL supportsVideoFieldMode;
@property (getter=isVideoMaxFrameDurationSupported, nonatomic, readonly) BOOL supportsVideoMaxFrameDuration;
@property (getter=isVideoMinFrameDurationSupported, nonatomic, readonly) BOOL supportsVideoMinFrameDuration;
@property (getter=isVideoMirroringSupported, nonatomic, readonly) BOOL supportsVideoMirroring;
@property (getter=isVideoOrientationSupported, nonatomic, readonly) BOOL supportsVideoOrientation;
@property (nonatomic, readwrite) long long videoFieldMode;
@property (nonatomic, readwrite) struct { long long x1; int x2; unsigned int x3; long long x4; } videoMaxFrameDuration;
@property (nonatomic, readwrite) struct { long long x1; int x2; unsigned int x3; long long x4; } videoMinFrameDuration;
@property (getter=isVideoMirrored, nonatomic, readwrite) BOOL videoMirrored;
@property (nonatomic, readwrite) long long videoOrientation;
@property (nonatomic, readonly) AVCaptureVideoPreviewLayer *videoPreviewLayer;

+ (id)connectionWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
+ (id)connectionWithInputPorts:(id)arg1 output:(id)arg2;
+ (void)initialize;

- (void)_applySplitterChannelMapFromAudioChannelsEnabled;
- (void)_applyVolumeFromAudioChannel:(id)arg1;
- (id)_audioLevelsForPropertyID:(unsigned int)arg1;
- (void)_clearAudioPropertyListeners;
- (void)_mixerNodeFormatDescriptionDidChange;
- (void)_mixerNodeFormatDescriptionDidChangeFromPropertyListener;
- (void)_rebuildEnabledAudioChannelsArray;
- (void)_setVideoMirrored:(BOOL)arg1;
- (void)_splitterNodeFormatDescriptionDidChange;
- (void)_splitterNodeFormatDescriptionDidChangeFromPropertyListener;
- (void)_updateAudioChannelsArrayCount;
- (void)attachToSplitterNode:(int)arg1 audioMixerNode:(int)arg2;
- (id)audioChannels;
- (BOOL)audioChannelsAreAllEnabled;
- (BOOL)automaticallyAdjustsVideoMirroring;
- (void*)copyClientSequenceID;
- (struct opaqueCMFormatDescription { }*)copyExpandedSourceSummaryAudioFormatDescription;
- (struct opaqueCMFormatDescription { }*)copyPostSplitSummaryAudioFormatDescription;
- (struct opaqueCMFormatDescription { }*)copySourceSummaryAudioFormatDescription;
- (struct opaqueCMFormatDescription { }*)copySourceSummaryAudioFormatDescriptionWithOptionalExpansion:(BOOL)arg1;
- (void)dealloc;
- (id)description;
- (void)detachFromAudioSplitterAndMixerNodes;
- (unsigned int)element;
- (struct { int x1; int x2; void *x3; }*)extendedNodeInfo;
- (void)finalize;
- (id)firstActiveInputPort;
- (id)firstInputPort;
- (float)getAvgAudioLevelForChannel:(id)arg1;
- (float)getPeakAudioLevelForChannel:(id)arg1;
- (struct OpaqueCMIOGraph { }*)graph;
- (void*)incrementClientSequenceIDAndRetain;
- (id)init;
- (void)initCommonStorage;
- (id)initWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
- (id)initWithInputPorts:(id)arg1 output:(id)arg2;
- (id)inputPorts;
- (BOOL)isActive;
- (BOOL)isEnabled;
- (BOOL)isLive;
- (BOOL)isVideoFieldModeSupported;
- (BOOL)isVideoMaxFrameDurationSupported;
- (BOOL)isVideoMinFrameDurationSupported;
- (BOOL)isVideoMirrored;
- (BOOL)isVideoMirroringSupported;
- (BOOL)isVideoOrientationSupported;
- (double)maxVideoScaleAndCropFactor;
- (id)mediaType;
- (void*)mostRecentlySeenClientSequenceID;
- (int)node;
- (id)output;
- (unsigned int)scope;
- (void)setActive:(BOOL)arg1;
- (void)setAutomaticallyAdjustsVideoMirroring:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1 forChannel:(id)arg2;
- (void)setGraph:(struct OpaqueCMIOGraph { }*)arg1 node:(int)arg2 element:(unsigned int)arg3 scope:(unsigned int)arg4;
- (void)setMostRecentlySeenClientSequenceID:(void*)arg1;
- (void)setVideoFieldMode:(long long)arg1;
- (void)setVideoMaxFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoMirrored:(BOOL)arg1;
- (void)setVideoOrientation:(long long)arg1;
- (void)setVideoScaleAndCropFactor:(double)arg1;
- (void)setVolume:(float)arg1 forChannel:(id)arg2;
- (void)setWriterElement:(unsigned int)arg1;
- (int*)splitterAudioChannelMapWithSize:(unsigned long long*)arg1;
- (void)updateAudioAvgLevelsArray;
- (void)updateAudioPeakLevelsArray;
- (long long)videoFieldMode;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoMaxFrameDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoMinFrameDuration;
- (long long)videoOrientation;
- (id)videoPreviewLayer;
- (double)videoScaleAndCropFactor;
- (unsigned int)writerElement;

@end
