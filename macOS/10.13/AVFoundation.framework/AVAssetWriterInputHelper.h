/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/Versions/A/AVFoundation
 */

@interface AVAssetWriterInputHelper : NSObject {
    AVAssetWriterInputConfigurationState * _configurationState;
    AVWeakReference * _weakReferenceToAssetWriterInput;
}

@property (nonatomic, readwrite) short alternateGroupID;
@property (nonatomic, readonly) BOOL canPerformMultiplePasses;
@property (nonatomic, readonly) AVAssetWriterInputConfigurationState *configurationState;
@property (nonatomic, readonly) AVAssetWriterInputPassDescription *currentPassDescription;
@property (nonatomic, readwrite) BOOL expectsMediaDataInRealTime;
@property (nonatomic, readwrite, copy) NSString *extendedLanguageTag;
@property (nonatomic, readwrite, copy) NSString *languageCode;
@property (nonatomic, readwrite) long long layer;
@property (nonatomic, readwrite) BOOL marksOutputTrackAsEnabled;
@property (nonatomic, readwrite, copy) NSString *mediaDataLocation;
@property (nonatomic, readwrite) int mediaTimeScale;
@property (nonatomic, readonly) NSString *mediaType;
@property (nonatomic, readwrite, copy) NSArray *metadata;
@property (nonatomic, readwrite) struct CGSize { double x1; double x2; } naturalSize;
@property (nonatomic, readonly) AVOutputSettings *outputSettings;
@property (nonatomic, readwrite) BOOL performsMultiPassEncodingIfSupported;
@property (nonatomic, readonly) struct __CVPixelBufferPool { }*pixelBufferPool;
@property (nonatomic, readwrite) long long preferredMediaChunkAlignment;
@property (nonatomic, readwrite) struct { long long x1; int x2; unsigned int x3; long long x4; } preferredMediaChunkDuration;
@property (nonatomic, readwrite) long long preferredMediaChunkSize;
@property (nonatomic, readwrite) float preferredVolume;
@property (nonatomic, readwrite) short provisionalAlternateGroupID;
@property (getter=isReadyForMoreMediaData, nonatomic, readonly) BOOL readyForMoreMediaData;
@property (nonatomic, readwrite, copy) NSURL *sampleReferenceBaseURL;
@property (nonatomic, readonly) BOOL shouldRespondToInitialPassDescription;
@property (nonatomic, readonly) struct opaqueCMFormatDescription { }*sourceFormatHint;
@property (nonatomic, readwrite, copy) NSDictionary *sourcePixelBufferAttributes;
@property (nonatomic, readonly) long long status;
@property (nonatomic, readonly) int trackID;
@property (nonatomic, readonly) NSDictionary *trackReferences;
@property (nonatomic, readwrite) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;
@property (atomic, readwrite, retain) AVWeakReference *weakReferenceToAssetWriterInput;

- (void)addTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (short)alternateGroupID;
- (long long)appendCaption:(id)arg1 error:(id*)arg2;
- (long long)appendCaptionGroup:(id)arg1 error:(id*)arg2;
- (BOOL)appendPixelBuffer:(struct __CVBuffer { }*)arg1 withPresentationTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (long long)appendSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 error:(id*)arg2;
- (id)associatedInputsWithTrackAssociationType:(id)arg1;
- (id)availableTrackAssociationTypes;
- (BOOL)canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (BOOL)canPerformMultiplePasses;
- (BOOL)canStartRespondingToEachPassDescriptionReturningReason:(id*)arg1;
- (id)configurationState;
- (id)currentPassDescription;
- (void)dealloc;
- (id)description;
- (void)didStartInitialSession;
- (BOOL)expectsMediaDataInRealTime;
- (id)extendedLanguageTag;
- (id)initWithConfigurationState:(id)arg1;
- (BOOL)isReadyForMoreMediaData;
- (id)languageCode;
- (long long)layer;
- (void)markAsFinished;
- (void)markCurrentPassAsFinished;
- (BOOL)marksOutputTrackAsEnabled;
- (id)mediaDataLocation;
- (int)mediaTimeScale;
- (id)mediaType;
- (id)metadata;
- (struct CGSize { double x1; double x2; })naturalSize;
- (id)outputSettings;
- (BOOL)performsMultiPassEncodingIfSupported;
- (struct __CVPixelBufferPool { }*)pixelBufferPool;
- (long long)preferredMediaChunkAlignment;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })preferredMediaChunkDuration;
- (long long)preferredMediaChunkSize;
- (float)preferredVolume;
- (void)prepareToEndSession;
- (BOOL)prepareToFinishWritingReturningError:(id*)arg1;
- (short)provisionalAlternateGroupID;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(id)arg2;
- (id)sampleReferenceBaseURL;
- (void)setAlternateGroupID:(short)arg1;
- (void)setExpectsMediaDataInRealTime:(BOOL)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (void)setLayer:(long long)arg1;
- (void)setMarksOutputTrackAsEnabled:(BOOL)arg1;
- (void)setMediaDataLocation:(id)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setMetadata:(id)arg1;
- (void)setNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPerformsMultiPassEncodingIfSupported:(BOOL)arg1;
- (void)setPreferredMediaChunkAlignment:(long long)arg1;
- (void)setPreferredMediaChunkDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPreferredMediaChunkSize:(long long)arg1;
- (void)setPreferredVolume:(float)arg1;
- (void)setProvisionalAlternateGroupID:(short)arg1;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setSourcePixelBufferAttributes:(id)arg1;
- (void)setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setWeakReferenceToAssetWriterInput:(id)arg1;
- (BOOL)shouldRespondToInitialPassDescription;
- (struct opaqueCMFormatDescription { }*)sourceFormatHint;
- (id)sourcePixelBufferAttributes;
- (long long)status;
- (int)trackID;
- (id)trackReferences;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;
- (void)transitionAssetWriterAndAllInputsToFailedStatusWithError:(id)arg1;
- (id)transitionToAndReturnTerminalHelperWithTerminalStatus:(long long)arg1;
- (id)weakReferenceToAssetWriterInput;

@end
