/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy
 */

@interface WebViewPrivate : NSObject {
    id  UIDelegate;
    id  UIDelegateForwarder;
    BOOL  _canCreateTouchBars;
    struct RetainPtr<NSTouchBar> { 
        void *m_ptr; 
    }  _currentTouchBar;
    BOOL  _didPerformFirstNavigation;
    <WebGeolocationProvider> * _geolocationProvider;
    struct RefPtr<WebCore::HistoryItem> { 
        struct HistoryItem {} *m_ptr; 
    }  _globalHistoryItem;
    BOOL  _isCustomizingTouchBar;
    BOOL  _isDeferringTextTouchBarUpdates;
    BOOL  _isUpdatingTextTouchBar;
    int  _keyboardUIMode;
    BOOL  _keyboardUIModeAccessed;
    struct RetainPtr<NSImage> { 
        void *m_ptr; 
    }  _mainFrameIcon;
    BOOL  _needsDeferredTextTouchBarUpdate;
    <WebNotificationProvider> * _notificationProvider;
    struct RetainPtr<NSCandidateListTouchBarItem> { 
        void *m_ptr; 
    }  _passwordTextCandidateListTouchBarItem;
    struct RetainPtr<NSTouchBar> { 
        void *m_ptr; 
    }  _passwordTextTouchBar;
    struct RetainPtr<NSCandidateListTouchBarItem> { 
        void *m_ptr; 
    }  _plainTextCandidateListTouchBarItem;
    struct RetainPtr<NSTouchBar> { 
        void *m_ptr; 
    }  _plainTextTouchBar;
    struct RetainPtr<NSCandidateListTouchBarItem> { 
        void *m_ptr; 
    }  _richTextCandidateListTouchBarItem;
    struct RetainPtr<NSTouchBar> { 
        void *m_ptr; 
    }  _richTextTouchBar;
    struct unique_ptr<WebSelectionServiceController, std::__1::default_delete<WebSelectionServiceController> > { 
        struct __compressed_pair<WebSelectionServiceController *, std::__1::default_delete<WebSelectionServiceController> > { 
            struct WebSelectionServiceController {} *__first_; 
        } __ptr_; 
    }  _selectionServiceController;
    BOOL  _startedListeningToCustomizationEvents;
    struct RetainPtr<WebTextTouchBarItemController> { 
        void *m_ptr; 
    }  _textTouchBarItemController;
    BOOL  allowsUndo;
    NSString * applicationNameForUserAgent;
    NSColor * backgroundColor;
    BOOL  becomingFirstResponder;
    BOOL  becomingFirstResponderFromOutside;
    BOOL  closed;
    WebNodeHighlight * currentNodeHighlight;
    float  customDeviceScaleFactor;
    BOOL  dashboardBehaviorAllowWheelScrolling;
    BOOL  dashboardBehaviorAlwaysAcceptsFirstMouse;
    BOOL  dashboardBehaviorAlwaysSendActiveNullEventsToPlugIns;
    BOOL  dashboardBehaviorAlwaysSendMouseEventsToAllWindows;
    id  downloadDelegate;
    BOOL  drawsBackground;
    id  editingDelegate;
    id  editingDelegateForwarder;
    <WebFormDelegate> * formDelegate;
    struct RefPtr<WebCore::ValidationBubble> { 
        struct ValidationBubble {} *m_ptr; 
    }  formValidationBubble;
    id  frameLoadDelegate;
    id  frameLoadDelegateForwarder;
    struct WebFrameLoadDelegateImplementationCache { 
        int (*didCreateJavaScriptContextForFrameFunc)(); 
        int (*didClearWindowObjectForFrameFunc)(); 
        int (*didClearWindowObjectForFrameInScriptWorldFunc)(); 
        int (*didClearInspectorWindowObjectForFrameFunc)(); 
        int (*windowScriptObjectAvailableFunc)(); 
        int (*didHandleOnloadEventsForFrameFunc)(); 
        int (*didReceiveServerRedirectForProvisionalLoadForFrameFunc)(); 
        int (*didCancelClientRedirectForFrameFunc)(); 
        int (*willPerformClientRedirectToURLDelayFireDateForFrameFunc)(); 
        int (*didChangeLocationWithinPageForFrameFunc)(); 
        int (*didPushStateWithinPageForFrameFunc)(); 
        int (*didReplaceStateWithinPageForFrameFunc)(); 
        int (*didPopStateWithinPageForFrameFunc)(); 
        int (*willCloseFrameFunc)(); 
        int (*didStartProvisionalLoadForFrameFunc)(); 
        int (*didReceiveTitleForFrameFunc)(); 
        int (*didCommitLoadForFrameFunc)(); 
        int (*didFailProvisionalLoadWithErrorForFrameFunc)(); 
        int (*didFailLoadWithErrorForFrameFunc)(); 
        int (*didFinishLoadForFrameFunc)(); 
        int (*didFirstLayoutInFrameFunc)(); 
        int (*didFirstVisuallyNonEmptyLayoutInFrameFunc)(); 
        int (*didLayoutFunc)(); 
        int (*didReceiveIconForFrameFunc)(); 
        int (*didFinishDocumentLoadForFrameFunc)(); 
        int (*didDisplayInsecureContentFunc)(); 
        int (*didRunInsecureContentFunc)(); 
        int (*didDetectXSSFunc)(); 
        int (*didRemoveFrameFromHierarchyFunc)(); 
    }  frameLoadDelegateImplementations;
    WebVideoFullscreenController * fullscreenController;
    struct RefPtr<WebViewGroup> { 
        struct WebViewGroup {} *m_ptr; 
    }  group;
    BOOL  hasInitializedLookupObserver;
    BOOL  hasSpellCheckerDocumentTag;
    id  historyDelegate;
    struct WebHistoryDelegateImplementationCache { 
        int (*navigatedFunc)(); 
        int (*clientRedirectFunc)(); 
        int (*serverRedirectFunc)(); 
        int (*deprecatedSetTitleFunc)(); 
        int (*setTitleFunc)(); 
        int (*populateVisitedLinksFunc)(); 
    }  historyDelegateImplementations;
    NSWindow * hostWindow;
    struct HashMap<unsigned long, WTF::RetainPtr<id>, WTF::IntHash<unsigned long>, WTF::HashTraits<unsigned long>, WTF::HashTraits<WTF::RetainPtr<id> > > { 
        struct HashTable<unsigned long, WTF::KeyValuePair<unsigned long, WTF::RetainPtr<id> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long, WTF::RetainPtr<id> > >, WTF::IntHash<unsigned long>, WTF::HashMap<unsigned long, WTF::RetainPtr<id>, WTF::IntHash<unsigned long>, WTF::HashTraits<unsigned long>, WTF::HashTraits<WTF::RetainPtr<id> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long> > { 
            struct KeyValuePair<unsigned long, WTF::RetainPtr<id> > {} *m_table; 
            unsigned int m_tableSize; 
            unsigned int m_tableSizeMask; 
            unsigned int m_keyCount; 
            unsigned int m_deletedCount; 
        } m_impl; 
    }  identifierMap;
    WebImmediateActionController * immediateActionController;
    NSPasteboard * insertionPasteboard;
    WebInspector * inspector;
    BOOL  interactiveFormValidationEnabled;
    struct CGSize { 
        double width; 
        double height; 
    }  lastLayoutSize;
    struct RefPtr<LayerFlushController> { 
        struct LayerFlushController {} *m_ptr; 
    }  layerFlushController;
    struct unique_ptr<WebCore::AlternativeTextUIController, std::__1::default_delete<WebCore::AlternativeTextUIController> > { 
        struct __compressed_pair<WebCore::AlternativeTextUIController *, std::__1::default_delete<WebCore::AlternativeTextUIController> > { 
            struct AlternativeTextUIController {} *__first_; 
        } __ptr_; 
    }  m_alternativeTextUIController;
    <WebDeviceOrientationProvider> * m_deviceOrientationProvider;
    struct unique_ptr<WebMediaPlaybackTargetPicker, std::__1::default_delete<WebMediaPlaybackTargetPicker> > { 
        struct __compressed_pair<WebMediaPlaybackTargetPicker *, std::__1::default_delete<WebMediaPlaybackTargetPicker> > { 
            struct WebMediaPlaybackTargetPicker {} *__first_; 
        } __ptr_; 
    }  m_playbackTargetPicker;
    <WebUserMediaClient> * m_userMediaClient;
    BOOL  mainFrameDocumentReady;
    struct RetainPtr<AVTouchBarScrubber> { 
        void *m_ptr; 
    }  mediaPlaybackControlsView;
    NSString * mediaStyle;
    struct RetainPtr<AVTouchBarPlaybackControlsProvider> { 
        void *m_ptr; 
    }  mediaTouchBarProvider;
    BOOL  needsOneShotDrawingSynchronization;
    WebFullScreenController * newFullscreenController;
    struct Page { } * page;
    struct RefPtr<WebCore::WebPlaybackSessionInterfaceMac> { 
        struct WebPlaybackSessionInterfaceMac {} *m_ptr; 
    }  playbackSessionInterface;
    struct RefPtr<WebCore::WebPlaybackSessionModelMediaElement> { 
        struct WebPlaybackSessionModelMediaElement {} *m_ptr; 
    }  playbackSessionModel;
    WebPluginDatabase * pluginDatabase;
    id  policyDelegate;
    id  policyDelegateForwarder;
    BOOL  postsAcceleratedCompositingNotifications;
    WebPreferences * preferences;
    struct RetainPtr<NSEvent> { 
        void *m_ptr; 
    }  pressureEvent;
    int  programmaticFocusCount;
    struct WebResourceDelegateImplementationCache { 
        int (*didReceiveAuthenticationChallengeFunc)(); 
        int (*canAuthenticateAgainstProtectionSpaceFunc)(); 
        int (*identifierForRequestFunc)(); 
        int (*willSendRequestFunc)(); 
        int (*didReceiveResponseFunc)(); 
        int (*didReceiveContentLengthFunc)(); 
        int (*didFinishLoadingFromDataSourceFunc)(); 
        int (*didFailLoadingWithErrorFromDataSourceFunc)(); 
        int (*didLoadResourceFromMemoryCacheFunc)(); 
        int (*willCacheResponseFunc)(); 
        int (*plugInFailedWithErrorFunc)(); 
        int (*shouldUseCredentialStorageFunc)(); 
        int (*shouldPaintBrokenImageForURLFunc)(); 
    }  resourceLoadDelegateImplementations;
    id  resourceProgressDelegate;
    id  scriptDebugDelegate;
    struct WebScriptDebugDelegateImplementationCache { 
        BOOL didParseSourceExpectsBaseLineNumber; 
        BOOL exceptionWasRaisedExpectsHasHandlerFlag; 
        int (*didParseSourceFunc)(); 
        int (*failedToParseSourceFunc)(); 
        int (*exceptionWasRaisedFunc)(); 
    }  scriptDebugDelegateImplementations;
    BOOL  shouldCloseWithWindow;
    BOOL  shouldMaintainInactiveSelection;
    BOOL  shouldUpdateWhileOffscreen;
    struct RetainPtr<NSData> { 
        void *m_ptr; 
    }  sourceApplicationAuditData;
    long long  spellCheckerDocumentTag;
    BOOL  tabKeyCyclesThroughElementsChanged;
    struct unique_ptr<WebCore::TextIndicatorWindow, std::__1::default_delete<WebCore::TextIndicatorWindow> > { 
        struct __compressed_pair<WebCore::TextIndicatorWindow *, std::__1::default_delete<WebCore::TextIndicatorWindow> > { 
            struct TextIndicatorWindow {} *__first_; 
        } __ptr_; 
    }  textIndicatorWindow;
    BOOL  useSiteSpecificSpoofing;
    struct String { 
        struct RefPtr<WTF::StringImpl> { 
            struct StringImpl {} *m_ptr; 
        } m_impl; 
    }  userAgent;
    BOOL  userAgentOverridden;
    BOOL  usesPageCache;
    int  validationMessageTimerMagnification;
    struct RetainPtr<WebWindowVisibilityObserver> { 
        void *m_ptr; 
    }  windowVisibilityObserver;
    float  zoomMultiplier;
    BOOL  zoomsTextOnly;
}

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;

@end
