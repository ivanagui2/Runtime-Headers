/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy
 */

@interface WebDataSource : NSObject {
    void * _private;
}

@property (nonatomic, readonly, copy) NSData *data;
@property (nonatomic, readonly) NSURLRequest *initialRequest;
@property (getter=isLoading, nonatomic, readonly) BOOL loading;
@property (nonatomic, readonly) WebResource *mainResource;
@property (nonatomic, readonly, copy) NSString *pageTitle;
@property (nonatomic, readonly) <WebDocumentRepresentation> *representation;
@property (nonatomic, readonly) NSMutableURLRequest *request;
@property (nonatomic, readonly) NSURLResponse *response;
@property (nonatomic, readonly, copy) NSArray *subresources;
@property (nonatomic, readonly, copy) NSString *textEncodingName;
@property (nonatomic, readonly) NSURL *unreachableURL;
@property (nonatomic, readonly) WebArchive *webArchive;
@property (nonatomic, readonly) WebFrame *webFrame;

- (void)addSubresource:(id)arg1;
- (id)data;
- (void)dealloc;
- (id)initWithRequest:(id)arg1;
- (id)initialRequest;
- (BOOL)isLoading;
- (id)mainResource;
- (id)pageTitle;
- (id)representation;
- (id)request;
- (id)response;
- (id)subresourceForURL:(id)arg1;
- (id)subresources;
- (id)textEncodingName;
- (id)unreachableURL;
- (id)webArchive;
- (id)webFrame;

// WebDataSource (WebFileInternal)

+ (Class)_representationClassForMIMEType:(id)arg1 allowingPlugins:(BOOL)arg2;

- (void)_setRepresentation:(id)arg1;

// WebDataSource (WebInternal)

+ (id)_repTypesAllowImageTypeOmission:(BOOL)arg1;

- (id)_URL;
- (id)_documentFragmentWithArchive:(id)arg1;
- (id)_documentFragmentWithImageResource:(id)arg1;
- (struct DocumentLoader { int (**x1)(); unsigned int x2; bool x3; struct Frame {} *x4; struct Ref<WebCore::CachedResourceLoader> { struct CachedResourceLoader {} *x_5_1_1; } x5; struct CachedResourceHandle<WebCore::CachedRawResource> { struct CachedResource {} *x_6_1_1; } x6; struct HashMap<unsigned long, WTF::RefPtr<WebCore::ResourceLoader>, WTF::IntHash<unsigned long>, WTF::HashTraits<unsigned long>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader> > > { struct HashTable<unsigned long, WTF::KeyValuePair<unsigned long, WTF::RefPtr<WebCore::ResourceLoader> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long, WTF::RefPtr<WebCore::ResourceLoader> > >, WTF::IntHash<unsigned long>, WTF::HashMap<unsigned long, WTF::RefPtr<WebCore::ResourceLoader>, WTF::IntHash<unsigned long>, WTF::HashTraits<unsigned long>, WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long> > { struct KeyValuePair<unsigned long, WTF::RefPtr<WebCore::ResourceLoader> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_7_1_1; } x7; }*)_documentLoader;
- (void)_finishedLoading;
- (id)_imageElementWithImageResource:(id)arg1;
- (id)_initWithDocumentLoader:(struct Ref<WebDocumentLoaderMac> { struct WebDocumentLoaderMac {} *x1; }*)arg1;
- (BOOL)_isDocumentHTML;
- (void)_makeRepresentation;
- (void)_receivedData:(id)arg1;
- (void)_replaceSelectionWithArchive:(id)arg1 selectReplacement:(BOOL)arg2;
- (void)_revertToProvisionalState;
- (void)_setMainDocumentError:(id)arg1;
- (id)_webView;

// WebDataSource (WebPrivate)

+ (void)initialize;

- (void)_addSubframeArchives:(id)arg1;
- (id)_fileWrapperForURL:(id)arg1;
- (id)_mainDocumentError;
- (id)_responseMIMEType;
- (void)_setAllowToBeMemoryMapped;
- (void)_setDeferMainResourceDataLoad:(BOOL)arg1;
- (id)dataSourceDelegate;
- (void)setDataSourceDelegate:(id)arg1;

@end
