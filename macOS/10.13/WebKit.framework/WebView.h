/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy
 */

@interface WebView : NSView <DebugHierarchyObject, NSCandidateListTouchBarItemDelegate, NSTouchBarDelegate, NSTouchBarProvider, NSUserInterfaceValidations> {
    WebViewPrivate * _private;
}

@property (nonatomic, readwrite) <WebUIDelegate> *UIDelegate;
@property (setter=_setUnobscuredSafeAreaInsets:, nonatomic, readwrite) struct WebEdgeInsets { double x1; double x2; double x3; double x4; } _unobscuredSafeAreaInsets;
@property (nonatomic, readwrite, copy) NSString *applicationNameForUserAgent;
@property (nonatomic, readonly) WebBackForwardList *backForwardList;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) BOOL canGoForward;
@property (nonatomic, readonly) BOOL canMakeTextLarger;
@property (nonatomic, readonly) BOOL canMakeTextSmaller;
@property (nonatomic, readonly) BOOL canMakeTextStandardSize;
@property (getter=isContinuousSpellCheckingEnabled, nonatomic, readwrite) BOOL continuousSpellCheckingEnabled;
@property (nonatomic, readwrite, copy) NSString *customTextEncodingName;
@property (nonatomic, readwrite, copy) NSString *customUserAgent;
@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (nonatomic, readwrite) <WebDownloadDelegate> *downloadDelegate;
@property (nonatomic, readwrite) BOOL drawsBackground;
@property (getter=isEditable, nonatomic, readwrite) BOOL editable;
@property (nonatomic, readwrite) <WebEditingDelegate> *editingDelegate;
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, readwrite) <WebFrameLoadDelegate> *frameLoadDelegate;
@property (nonatomic, readwrite, copy) NSString *groupName;
@property (atomic, readonly) unsigned long long hash;
@property (nonatomic, readwrite, retain) NSWindow *hostWindow;
@property (getter=isLoading, nonatomic, readonly) BOOL loading;
@property (nonatomic, readonly) WebFrame *mainFrame;
@property (nonatomic, readonly) DOMDocument *mainFrameDocument;
@property (nonatomic, readonly) NSImage *mainFrameIcon;
@property (nonatomic, readonly, copy) NSString *mainFrameTitle;
@property (nonatomic, readwrite, copy) NSString *mainFrameURL;
@property (nonatomic, readonly) BOOL maintainsInactiveSelection;
@property (nonatomic, readwrite, copy) NSString *mediaStyle;
@property (nonatomic, readonly, copy) NSArray *pasteboardTypesForSelection;
@property (nonatomic, readwrite) <WebPolicyDelegate> *policyDelegate;
@property (nonatomic, readwrite, retain) WebPreferences *preferences;
@property (nonatomic, readwrite, copy) NSString *preferencesIdentifier;
@property (nonatomic, readwrite) <WebResourceLoadDelegate> *resourceLoadDelegate;
@property (nonatomic, readonly) DOMRange *selectedDOMRange;
@property (nonatomic, readonly) WebFrame *selectedFrame;
@property (nonatomic, readonly) unsigned long long selectionAffinity;
@property (nonatomic, readwrite) BOOL shouldCloseWithWindow;
@property (nonatomic, readwrite) BOOL shouldUpdateWhileOffscreen;
@property (nonatomic, readwrite) BOOL smartInsertDeleteEnabled;
@property (getter=_sourceApplicationAuditData, setter=_setSourceApplicationAuditData:, nonatomic, readwrite, copy) NSData *sourceApplicationAuditData;
@property (nonatomic, readonly) long long spellCheckerDocumentTag;
@property (atomic, readonly) Class superclass;
@property (nonatomic, readonly) BOOL supportsTextEncoding;
@property (nonatomic, readwrite) float textSizeMultiplier;
@property (atomic, readonly) NSTouchBar *touchBar;
@property (nonatomic, readwrite, retain) DOMCSSStyleDeclaration *typingStyle;
@property (nonatomic, readonly) NSUndoManager *undoManager;
@property (nonatomic, readonly) WebScriptObject *windowScriptObject;

// Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy

+ (id)MIMETypesShownAsHTML;
+ (id)URLFromPasteboard:(id)arg1;
+ (id)URLTitleFromPasteboard:(id)arg1;
+ (void)_applicationWillTerminate;
+ (BOOL)_canShowMIMEType:(id)arg1 allowingPlugins:(BOOL)arg2;
+ (void)_didChangeAutomaticDashSubstitutionEnabled:(id)arg1;
+ (void)_didChangeAutomaticQuoteSubstitutionEnabled:(id)arg1;
+ (void)_didChangeAutomaticSpellingCorrectionEnabled:(id)arg1;
+ (void)_didChangeAutomaticTextReplacementEnabled:(id)arg1;
+ (BOOL)_shouldAutomaticDashSubstitutionBeEnabled;
+ (BOOL)_shouldAutomaticQuoteSubstitutionBeEnabled;
+ (BOOL)_shouldAutomaticSpellingCorrectionBeEnabled;
+ (BOOL)_shouldAutomaticTextReplacementBeEnabled;
+ (BOOL)canShowMIMEType:(id)arg1;
+ (BOOL)canShowMIMETypeAsHTML:(id)arg1;
+ (void)initialize;
+ (void)registerURLSchemeAsLocal:(id)arg1;
+ (void)registerViewClass:(Class)arg1 representationClass:(Class)arg2 forMIMEType:(id)arg3;
+ (void)setMIMETypesShownAsHTML:(id)arg1;

- (id)UIDelegate;
- (void)_autoscrollForDraggingInfo:(id)arg1 timeDelta:(double)arg2;
- (BOOL)_canResetZoom:(BOOL)arg1;
- (BOOL)_canShowMIMEType:(id)arg1;
- (BOOL)_canZoomIn:(BOOL)arg1;
- (BOOL)_canZoomOut:(BOOL)arg1;
- (id)_elementAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_hitTest:(struct CGPoint { double x1; double x2; }*)arg1 dragTypes:(id)arg2;
- (id)_initWithArguments:(id)arg1;
- (BOOL)_isMIMETypeRegisteredAsPlugin:(id)arg1;
- (id)_mainFrameOverrideEncoding;
- (id)_pluginForExtension:(id)arg1;
- (id)_pluginForMIMEType:(id)arg1;
- (float)_realZoomMultiplier;
- (BOOL)_realZoomMultiplierIsTextOnly;
- (void)_resetZoom:(id)arg1 isTextOnly:(BOOL)arg2;
- (void)_setMainFrameIcon:(id)arg1;
- (void)_setZoomMultiplier:(float)arg1 isTextOnly:(BOOL)arg2;
- (BOOL)_shouldAutoscrollForDraggingInfo:(id)arg1;
- (struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; })_userAgentString;
- (id)_webcore_effectiveFirstResponder;
- (void)_windowChangedKeyState;
- (void)_windowDidChangeBackingProperties:(id)arg1;
- (void)_windowDidChangeScreen:(id)arg1;
- (void)_windowVisibilityChanged:(id)arg1;
- (void)_windowWillClose:(id)arg1;
- (void)_windowWillOrderOffScreen:(id)arg1;
- (void)_windowWillOrderOnScreen:(id)arg1;
- (void)_zoomIn:(id)arg1 isTextOnly:(BOOL)arg2;
- (float)_zoomMultiplier:(BOOL)arg1;
- (void)_zoomOut:(id)arg1 isTextOnly:(BOOL)arg2;
- (BOOL)acceptsFirstResponder;
- (int)actionMaskForDraggingInfo:(id)arg1;
- (void)addPluginInstanceView:(id)arg1;
- (void)addWindowObserversForWindow:(id)arg1;
- (int)applicationFlags:(id)arg1;
- (id)applicationNameForUserAgent;
- (id)backForwardList;
- (BOOL)becomeFirstResponder;
- (void)candidateListTouchBarItem:(id)arg1 changedCandidateListVisibility:(BOOL)arg2;
- (void)candidateListTouchBarItem:(id)arg1 endSelectingCandidateAtIndex:(long long)arg2;
- (void)close;
- (id)currentNodeHighlight;
- (id)customTextEncodingName;
- (id)customUserAgent;
- (void)dealloc;
- (void)doWindowDidChangeScreen;
- (id)documentViewAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)downloadDelegate;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (BOOL)drawsBackground;
- (id)elementAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)encodeWithCoder:(id)arg1;
- (double)estimatedProgress;
- (id)frameLoadDelegate;
- (BOOL)goBack;
- (BOOL)goForward;
- (BOOL)goToBackForwardItem:(id)arg1;
- (id)groupName;
- (id)hostWindow;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 frameName:(id)arg2 groupName:(id)arg3;
- (BOOL)isLoading;
- (id)mainFrame;
- (id)mainFrameDocument;
- (id)mainFrameIcon;
- (id)mainFrameTitle;
- (id)mainFrameURL;
- (id)makeTouchBar;
- (id)mediaStyle;
- (void)moveDragCaretToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)pasteboardTypesForElement:(id)arg1;
- (id)pasteboardTypesForSelection;
- (BOOL)performDragOperation:(id)arg1;
- (id)policyDelegate;
- (id)preferences;
- (id)preferencesIdentifier;
- (BOOL)prepareForDragOperation:(id)arg1;
- (id)previousValidKeyView;
- (void)removeDragCaret;
- (void)removePluginInstanceView:(id)arg1;
- (void)removePluginInstanceViewsFor:(id)arg1;
- (void)removeWindowObservers;
- (id)resourceLoadDelegate;
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4;
- (id)selectedFrame;
- (void)setApplicationNameForUserAgent:(id)arg1;
- (void)setCurrentNodeHighlight:(id)arg1;
- (void)setCustomTextEncodingName:(id)arg1;
- (void)setCustomUserAgent:(id)arg1;
- (void)setDownloadDelegate:(id)arg1;
- (void)setDrawsBackground:(BOOL)arg1;
- (void)setFrameLoadDelegate:(id)arg1;
- (void)setGroupName:(id)arg1;
- (void)setHostWindow:(id)arg1;
- (void)setMainFrameURL:(id)arg1;
- (void)setMaintainsBackForwardList:(BOOL)arg1;
- (void)setMediaStyle:(id)arg1;
- (void)setNextKeyView:(id)arg1;
- (void)setPolicyDelegate:(id)arg1;
- (void)setPreferences:(id)arg1;
- (void)setPreferencesIdentifier:(id)arg1;
- (void)setResourceLoadDelegate:(id)arg1;
- (void)setShouldCloseWithWindow:(BOOL)arg1;
- (void)setShouldUpdateWhileOffscreen:(BOOL)arg1;
- (void)setTextSizeMultiplier:(float)arg1;
- (void)setUIDelegate:(id)arg1;
- (BOOL)shouldCloseWithWindow;
- (BOOL)shouldUpdateWhileOffscreen;
- (id)stringByEvaluatingJavaScriptFromString:(id)arg1;
- (BOOL)supportsTextEncoding;
- (float)textSizeMultiplier;
- (id)touchBar:(id)arg1 makeItemForIdentifier:(id)arg2;
- (id)userAgentForURL:(id)arg1;
- (void)viewDidHide;
- (void)viewDidMoveToWindow;
- (void)viewDidUnhide;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)windowKeyStateChanged:(id)arg1;
- (id)windowScriptObject;
- (void)writeElement:(id)arg1 withPasteboardTypes:(id)arg2 toPasteboard:(id)arg3;
- (void)writeSelectionWithPasteboardTypes:(id)arg1 toPasteboard:(id)arg2;

// WebView (AllWebViews)

+ (void)_makeAllWebViewsPerformSelector:(SEL)arg1;

- (void)_addToAllWebViewsSet;
- (void)_removeFromAllWebViewsSet;

// WebView (WebDebugBinding)

- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2;

// WebView (WebFileInternal)

+ (unsigned long long)_cacheModel;
+ (void)_cacheModelChangedNotification:(id)arg1;
+ (BOOL)_didSetCacheModel;
+ (unsigned long long)_maxCacheModelInAnyInstance;
+ (void)_preferencesRemovedNotification:(id)arg1;
+ (void)_preflightSpellChecker;
+ (void)_preflightSpellCheckerNow:(id)arg1;
+ (void)_setCacheModel:(unsigned long long)arg1;

- (BOOL)_continuousCheckingAllowed;
- (float)_deviceScaleFactor;
- (id)_focusedFrame;
- (id)_frameViewAtWindowPoint:(struct CGPoint { double x1; double x2; })arg1;
- (BOOL)_isLoading;
- (void)_openFrameInNewWindowFromMenu:(id)arg1;
- (id)_responderForResponderOperations;
- (void)_searchWithGoogleFromMenu:(id)arg1;
- (void)_searchWithSpotlightFromMenu:(id)arg1;

// WebView (WebIBActions)

- (BOOL)_responderValidateUserInterfaceItem:(id)arg1;
- (BOOL)canGoBack;
- (BOOL)canGoForward;
- (BOOL)canMakeTextLarger;
- (BOOL)canMakeTextSmaller;
- (BOOL)canMakeTextStandardSize;
- (void)goBack:(id)arg1;
- (void)goForward:(id)arg1;
- (void)makeTextLarger:(id)arg1;
- (void)makeTextSmaller:(id)arg1;
- (void)makeTextStandardSize:(id)arg1;
- (void)reload:(id)arg1;
- (void)reloadFromOrigin:(id)arg1;
- (void)stopLoading:(id)arg1;
- (void)takeStringURLFrom:(id)arg1;
- (void)toggleContinuousSpellChecking:(id)arg1;
- (void)toggleSmartInsertDelete:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)validateUserInterfaceItemWithoutDelegate:(id)arg1;

// WebView (WebPendingPublic)

- (id)DOMRangeOfString:(id)arg1 relativeTo:(id)arg2 options:(unsigned long long)arg3;
- (void)addVisitedLinks:(id)arg1;
- (id)aeDescByEvaluatingJavaScriptFromString:(id)arg1;
- (BOOL)allowsUndo;
- (BOOL)canMarkAllTextMatches;
- (BOOL)canResetPageZoom;
- (BOOL)canZoomPageIn;
- (BOOL)canZoomPageOut;
- (unsigned long long)countMatchesForText:(id)arg1 inDOMRange:(id)arg2 options:(unsigned long long)arg3 highlight:(BOOL)arg4 limit:(unsigned long long)arg5 markMatches:(BOOL)arg6;
- (unsigned long long)countMatchesForText:(id)arg1 options:(unsigned long long)arg2 highlight:(BOOL)arg3 limit:(unsigned long long)arg4 markMatches:(BOOL)arg5;
- (BOOL)findString:(id)arg1 options:(unsigned long long)arg2;
- (id)historyDelegate;
- (float)mediaVolume;
- (float)pageSizeMultiplier;
- (id)rectsForTextMatches;
- (void)resetPageZoom:(id)arg1;
- (void)scheduleInRunLoop:(id)arg1 forMode:(id)arg2;
- (id)scriptDebugDelegate;
- (void)scrollDOMRangeToVisible:(id)arg1;
- (void)setAllowsUndo:(BOOL)arg1;
- (void)setHistoryDelegate:(id)arg1;
- (void)setMainFrameDocumentReady:(BOOL)arg1;
- (void)setMediaVolume:(float)arg1;
- (void)setPageSizeMultiplier:(float)arg1;
- (void)setScriptDebugDelegate:(id)arg1;
- (void)setTabKeyCyclesThroughElements:(BOOL)arg1;
- (BOOL)shouldClose;
- (BOOL)tabKeyCyclesThroughElements;
- (void)unmarkAllTextMatches;
- (void)unscheduleFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)zoomPageIn:(id)arg1;
- (void)zoomPageOut:(id)arg1;

// WebView (WebPrivate)

+ (BOOL)_HTTPPipeliningEnabled;
+ (id)_MIMETypeForFile:(id)arg1;
+ (void)_addOriginAccessWhitelistEntryWithSourceOrigin:(id)arg1 destinationProtocol:(id)arg2 destinationHost:(id)arg3 allowDestinationSubdomains:(BOOL)arg4;
+ (void)_addUserScriptToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectionTime:(int)arg7;
+ (void)_addUserScriptToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectionTime:(int)arg7 injectedFrames:(int)arg8;
+ (void)_addUserStyleSheetToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6;
+ (void)_addUserStyleSheetToGroup:(id)arg1 world:(id)arg2 source:(id)arg3 url:(id)arg4 whitelist:(id)arg5 blacklist:(id)arg6 injectedFrames:(int)arg7;
+ (BOOL)_canHandleRequest:(id)arg1;
+ (BOOL)_canHandleRequest:(id)arg1 forMainFrame:(BOOL)arg2;
+ (id)_decodeData:(id)arg1;
+ (void)_disableAutoStartRemoteInspector;
+ (void)_disableRemoteInspector;
+ (void)_enableRemoteInspector;
+ (id)_generatedMIMETypeForURLScheme:(id)arg1;
+ (BOOL)_hasRemoteInspectorSession;
+ (BOOL)_isIconLoadingEnabled;
+ (BOOL)_isRemoteInspectorEnabled;
+ (void)_registerPluginMIMEType:(id)arg1;
+ (void)_registerURLSchemeAsAllowingDatabaseAccessInPrivateBrowsing:(id)arg1;
+ (void)_registerURLSchemeAsAllowingLocalStorageAccessInPrivateBrowsing:(id)arg1;
+ (void)_registerURLSchemeAsSecure:(id)arg1;
+ (void)_registerViewClass:(Class)arg1 representationClass:(Class)arg2 forURLScheme:(id)arg3;
+ (void)_removeAllUserContentFromGroup:(id)arg1;
+ (void)_removeOriginAccessWhitelistEntryWithSourceOrigin:(id)arg1 destinationProtocol:(id)arg2 destinationHost:(id)arg3 allowDestinationSubdomains:(BOOL)arg4;
+ (void)_removeUserScriptFromGroup:(id)arg1 world:(id)arg2 url:(id)arg3;
+ (void)_removeUserScriptsFromGroup:(id)arg1 world:(id)arg2;
+ (void)_removeUserStyleSheetFromGroup:(id)arg1 world:(id)arg2 url:(id)arg3;
+ (void)_removeUserStyleSheetsFromGroup:(id)arg1 world:(id)arg2;
+ (void)_reportException:(struct OpaqueJSValue { }*)arg1 inContext:(struct OpaqueJSContext { }*)arg2;
+ (BOOL)_representationExistsForURLScheme:(id)arg1;
+ (void)_resetOriginAccessWhitelists;
+ (void)_setAlwaysUsesComplexTextCodePath:(BOOL)arg1;
+ (void)_setDomainRelaxationForbidden:(BOOL)arg1 forURLScheme:(id)arg2;
+ (void)_setHTTPPipeliningEnabled:(BOOL)arg1;
+ (void)_setIconLoadingEnabled:(BOOL)arg1;
+ (void)_setLoadResourcesSerially:(BOOL)arg1;
+ (void)_setShouldUseFontSmoothing:(BOOL)arg1;
+ (void)_setUsesTestModeFocusRingColor:(BOOL)arg1;
+ (BOOL)_shouldUseFontSmoothing;
+ (id)_standardUserAgentWithApplicationName:(id)arg1;
+ (id)_supportedFileExtensions;
+ (id)_supportedMIMETypes;
+ (void)_unregisterPluginMIMEType:(id)arg1;
+ (void)_unregisterViewClassAndRepresentationClassForMIMEType:(id)arg1;
+ (BOOL)_usesTestModeFocusRingColor;
+ (BOOL)_viewClass:(Class*)arg1 andRepresentationClass:(Class*)arg2 forMIMEType:(id)arg3 allowingPlugins:(BOOL)arg4;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (BOOL)canCloseAllWebViews;
+ (BOOL)canShowFile:(id)arg1;
+ (void)closeAllWebViews;
+ (id)suggestedFileExtensionForMIMEType:(id)arg1;

- (id)_UIDelegateForwarder;
- (void)_addControlRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 clip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fromView:(id)arg3 toDashboardRegions:(id)arg4;
- (void)_addScrollerDashboardRegions:(id)arg1;
- (void)_addScrollerDashboardRegions:(id)arg1 from:(id)arg2;
- (void)_addScrollerDashboardRegionsForFrameView:(struct FrameView { int (**x1)(); unsigned int x2; struct ScrollView {} *x3; struct RetainPtr<NSView> { void *x_4_1_1; } x4; struct WeakPtrFactory<WebCore::Widget> { struct Ref<WTF::WeakReference<WebCore::Widget> > { struct WeakReference<WebCore::Widget> {} *x_1_2_1; } x_5_1_1; } x5; bool x6; bool x7; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_8_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_8_1_2; } x8; int (**x9)(); struct unique_ptr<WebCore::ScrollAnimator, std::__1::default_delete<WebCore::ScrollAnimator> > { struct __compressed_pair<WebCore::ScrollAnimator *, std::__1::default_delete<WebCore::ScrollAnimator> > { struct ScrollAnimator {} *x_1_2_1; } x_10_1_1; } x10; struct WeakPtrFactory<WebCore::ScrollableArea> { struct Ref<WTF::WeakReference<WebCore::ScrollableArea> > { struct WeakReference<WebCore::ScrollableArea> {} *x_1_2_1; } x_11_1_1; } x11; struct unique_ptr<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit>, std::__1::default_delete<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit> > > { struct __compressed_pair<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit> *, std::__1::default_delete<WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit> > > { struct ScrollSnapOffsetsInfo<WebCore::LayoutUnit> {} *x_1_2_1; } x_12_1_1; } x12; }*)arg1 dashboardRegions:(id)arg2;
- (void)_attachScriptDebuggerToAllFrames;
- (double)_backingScaleFactor;
- (void)_cacheFrameLoadDelegateImplementations;
- (void)_cacheHistoryDelegateImplementations;
- (void)_cacheResourceLoadDelegateImplementations;
- (void)_cacheScriptDebugDelegateImplementations;
- (id)_cachedResponseForURL:(id)arg1;
- (void)_checkDidPerformFirstNavigation;
- (void)_clearMainFrameName;
- (void)_clearUndoRedoOperations;
- (void)_close;
- (void)_closePluginDatabases;
- (void)_closeWindow;
- (void)_closeWithFastTeardown;
- (void)_commonInitializationWithFrameName:(id)arg1 groupName:(id)arg2;
- (id)_contentsOfUserInterfaceItem:(id)arg1;
- (BOOL)_cookieEnabled;
- (BOOL)_dashboardBehavior:(int)arg1;
- (id)_dashboardRegions;
- (id)_declaredKeys;
- (void)_detachScriptDebuggerFromAllFrames;
- (void)_didChangeBackForwardKeys;
- (void)_didChangeValueForKey:(id)arg1;
- (void)_didCommitLoadForFrame:(id)arg1;
- (void)_didFailLoadWithError:(id)arg1 forFrame:(id)arg2;
- (void)_didFailProvisionalLoadWithError:(id)arg1 forFrame:(id)arg2;
- (void)_didFinishLoadForFrame:(id)arg1;
- (void)_didScrollDocumentInFrameView:(id)arg1;
- (void)_didStartProvisionalLoadForFrame:(id)arg1;
- (void)_dispatchPendingLoadRequests;
- (id)_downloadURL:(id)arg1;
- (id)_editingDelegateForwarder;
- (void)_executeCoreCommandByName:(id)arg1 value:(id)arg2;
- (struct CGSize { double x1; double x2; })_fixedLayoutSize;
- (id)_formDelegate;
- (double)_gapBetweenPages;
- (id)_globalHistoryItem;
- (BOOL)_inFastImageScalingMode;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 frameName:(id)arg2 groupName:(id)arg3;
- (void)_injectOutlookQuirksScript;
- (id)_insertionPasteboard;
- (BOOL)_isClosed;
- (BOOL)_isPerformingProgrammaticFocus;
- (BOOL)_isProcessingUserGesture;
- (BOOL)_isSoftwareRenderable;
- (BOOL)_isUsingAcceleratedCompositing;
- (BOOL)_isViewVisible;
- (unsigned long long)_layoutMilestones;
- (void)_listenForLayoutMilestones:(unsigned long long)arg1;
- (void)_loadBackForwardListFromOtherView:(id)arg1;
- (id)_menuForElement:(id)arg1 defaultItems:(id)arg2;
- (void)_mouseDidMoveOverElement:(id)arg1 modifierFlags:(unsigned long long)arg2;
- (BOOL)_needsAdobeFrameReloadingQuirk;
- (BOOL)_needsFrameLoadDelegateRetainQuirk;
- (BOOL)_needsIsLoadingInAPISenseQuirk;
- (BOOL)_needsKeyboardEventDisambiguationQuirks;
- (BOOL)_needsLinkElementTextCSSQuirk;
- (BOOL)_needsPreHTML5ParserQuirks;
- (id)_openNewWindowWithRequest:(id)arg1;
- (unsigned long long)_pageCount;
- (double)_pageLength;
- (BOOL)_paginationBehavesLikeColumns;
- (BOOL)_paginationLineGridEnabled;
- (int)_paginationMode;
- (id)_policyDelegateForwarder;
- (void)_popPerformingProgrammaticFocus;
- (BOOL)_postsAcceleratedCompositingNotifications;
- (void)_preferencesChanged:(id)arg1;
- (void)_preferencesChangedNotification:(id)arg1;
- (void)_pushPerformingProgrammaticFocus;
- (void)_registerDraggedTypes;
- (void)_scaleWebView:(float)arg1 atOrigin:(struct CGPoint { double x1; double x2; })arg2;
- (void)_setAdditionalWebPlugInPaths:(id)arg1;
- (void)_setBaseCTM:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 forContext:(struct CGContext { }*)arg2;
- (void)_setCookieEnabled:(BOOL)arg1;
- (void)_setCustomBackingScaleFactor:(double)arg1;
- (void)_setDashboardBehavior:(int)arg1 to:(BOOL)arg2;
- (void)_setFixedLayoutSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setFontFallbackPrefersPictographs:(BOOL)arg1;
- (void)_setFormDelegate:(id)arg1;
- (void)_setGapBetweenPages:(double)arg1;
- (void)_setGlobalHistoryItem:(struct HistoryItem { unsigned int x1; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_2_1_1; } x2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_3_1_1; } x3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_4_1_1; } x4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_5_1_1; } x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct IntPoint { int x_8_1_1; int x_8_1_2; } x8; float x9; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_10_1_1; unsigned int x_10_1_2; unsigned int x_10_1_3; } x10; int x11; struct Vector<WTF::Ref<WebCore::HistoryItem>, 0, WTF::CrashOnOverflow, 16> { struct Ref<WebCore::HistoryItem> {} *x_12_1_1; unsigned int x_12_1_2; unsigned int x_12_1_3; } x12; bool x13; bool x14; bool x15; bool x16; long long x17; }*)arg1;
- (void)_setInitiatedDrag:(BOOL)arg1;
- (void)_setIsVisible:(BOOL)arg1;
- (void)_setPageLength:(double)arg1;
- (void)_setPaginationBehavesLikeColumns:(BOOL)arg1;
- (void)_setPaginationLineGridEnabled:(BOOL)arg1;
- (void)_setPaginationMode:(int)arg1;
- (void)_setPostsAcceleratedCompositingNotifications:(BOOL)arg1;
- (void)_setSourceApplicationAuditData:(id)arg1;
- (void)_setUnobscuredSafeAreaInsets:(struct WebEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setUseFastImageScalingMode:(BOOL)arg1;
- (void)_setUseFixedLayout:(BOOL)arg1;
- (void)_setVisibilityState:(int)arg1 isInitialState:(BOOL)arg2;
- (id)_sourceApplicationAuditData;
- (struct WebEdgeInsets { double x1; double x2; double x3; double x4; })_unobscuredSafeAreaInsets;
- (void)_updateActiveState;
- (void)_updateVisibilityState;
- (BOOL)_useFixedLayout;
- (BOOL)_viewClass:(Class*)arg1 andRepresentationClass:(Class*)arg2 forMIMEType:(id)arg3;
- (float)_viewScaleFactor;
- (void)_viewWillDrawInternal;
- (int)_visibilityState;
- (void)_willChangeBackForwardKeys;
- (void)_willChangeValueForKey:(id)arg1;
- (void)_writeImageForElement:(id)arg1 withPasteboardTypes:(id)arg2 toPasteboard:(id)arg3;
- (void)_writeLinkElement:(id)arg1 withPasteboardTypes:(id)arg2 toPasteboard:(id)arg3;
- (BOOL)allowsNewCSSAnimationsWhileSuspended;
- (BOOL)allowsRemoteInspection;
- (BOOL)alwaysShowHorizontalScroller;
- (BOOL)alwaysShowVerticalScroller;
- (BOOL)areMemoryCacheDelegateCallsEnabled;
- (id)backgroundColor;
- (unsigned long long)countMatchesForText:(id)arg1 caseSensitive:(BOOL)arg2 highlight:(BOOL)arg3 limit:(unsigned long long)arg4 markMatches:(BOOL)arg5;
- (BOOL)cssAnimationsSuspended;
- (BOOL)defersCallbacks;
- (void)forceRequestCandidatesForTesting;
- (id)inspector;
- (BOOL)interactiveFormValidationEnabled;
- (BOOL)isSelectTrailingWhitespaceEnabled;
- (BOOL)isTrackingRepaints;
- (unsigned long long)markAllMatchesForText:(id)arg1 caseSensitive:(BOOL)arg2 highlight:(BOOL)arg3 limit:(unsigned long long)arg4;
- (struct Page { struct HashMap<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > >, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > >, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, std::__1::unique_ptr<WebCore::Supplement<WebCore::Page>, std::__1::default_delete<WebCore::Supplement<WebCore::Page> > > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_1_1_1; } x1; }*)page;
- (void)resetTrackedRepaints;
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4 startInSelection:(BOOL)arg5;
- (void)setAllowsNewCSSAnimationsWhileSuspended:(BOOL)arg1;
- (void)setAllowsRemoteInspection:(BOOL)arg1;
- (void)setAlwaysShowHorizontalScroller:(BOOL)arg1;
- (void)setAlwaysShowVerticalScroller:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setCSSAnimationsSuspended:(BOOL)arg1;
- (void)setDefersCallbacks:(BOOL)arg1;
- (void)setInteractiveFormValidationEnabled:(BOOL)arg1;
- (void)setMemoryCacheDelegateCallsEnabled:(BOOL)arg1;
- (void)setProhibitsMainFrameScrolling:(BOOL)arg1;
- (void)setSelectTrailingWhitespaceEnabled:(BOOL)arg1;
- (void)setShowingInspectorIndication:(BOOL)arg1;
- (void)setTracksRepaints:(BOOL)arg1;
- (void)setUsesPageCache:(BOOL)arg1;
- (void)setValidationMessageTimerMagnification:(int)arg1;
- (BOOL)shouldRequestCandidates;
- (void)showCandidates:(id)arg1 forString:(id)arg2 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 forSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 view:(id)arg5 completionHandler:(id)arg6;
- (id)textIteratorForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)trackedRepaintRects;
- (BOOL)usesPageCache;
- (int)validationMessageTimerMagnification;

// WebView (WebViewCSS)

- (id)computedStyleForElement:(id)arg1 pseudoElement:(id)arg2;

// WebView (WebViewDeviceOrientation)

- (id)_deviceOrientationProvider;
- (void)_setDeviceOrientationProvider:(id)arg1;

// WebView (WebViewEditing)

- (void)_setMaintainsInactiveSelection:(BOOL)arg1;
- (BOOL)_shouldChangeSelectedDOMRange:(id)arg1 toDOMRange:(id)arg2 affinity:(unsigned long long)arg3 stillSelecting:(BOOL)arg4;
- (id)editableDOMRangeForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)editingDelegate;
- (BOOL)isContinuousSpellCheckingEnabled;
- (BOOL)isEditable;
- (BOOL)maintainsInactiveSelection;
- (void)registerForEditingDelegateNotification:(id)arg1 selector:(SEL)arg2;
- (id)selectedDOMRange;
- (unsigned long long)selectionAffinity;
- (void)setContinuousSpellCheckingEnabled:(BOOL)arg1;
- (void)setEditable:(BOOL)arg1;
- (void)setEditingDelegate:(id)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinity:(unsigned long long)arg2;
- (void)setSmartInsertDeleteEnabled:(BOOL)arg1;
- (void)setTypingStyle:(id)arg1;
- (BOOL)smartInsertDeleteEnabled;
- (long long)spellCheckerDocumentTag;
- (id)styleDeclarationWithText:(id)arg1;
- (id)typingStyle;
- (id)undoManager;

// WebView (WebViewEditingActions)

- (void)_performResponderOperation:(SEL)arg1 with:(id)arg2;
- (void)alignCenter:(id)arg1;
- (void)alignJustified:(id)arg1;
- (void)alignLeft:(id)arg1;
- (void)alignRight:(id)arg1;
- (void)capitalizeWord:(id)arg1;
- (void)centerSelectionInVisibleArea:(id)arg1;
- (void)changeAttributes:(id)arg1;
- (void)changeBaseWritingDirection:(id)arg1;
- (void)changeBaseWritingDirectionToLTR:(id)arg1;
- (void)changeBaseWritingDirectionToRTL:(id)arg1;
- (void)changeColor:(id)arg1;
- (void)changeDocumentBackgroundColor:(id)arg1;
- (void)changeFont:(id)arg1;
- (void)changeSpelling:(id)arg1;
- (void)checkSpelling:(id)arg1;
- (void)complete:(id)arg1;
- (void)copy:(id)arg1;
- (void)copyFont:(id)arg1;
- (void)cut:(id)arg1;
- (void)delete:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (void)deleteBackwardByDecomposingPreviousCharacter:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)deleteToBeginningOfLine:(id)arg1;
- (void)deleteToBeginningOfParagraph:(id)arg1;
- (void)deleteToEndOfLine:(id)arg1;
- (void)deleteToEndOfParagraph:(id)arg1;
- (void)deleteToMark:(id)arg1;
- (void)deleteWordBackward:(id)arg1;
- (void)deleteWordForward:(id)arg1;
- (void)ignoreSpelling:(id)arg1;
- (void)indent:(id)arg1;
- (void)insertBacktab:(id)arg1;
- (void)insertLineBreak:(id)arg1;
- (void)insertNewline:(id)arg1;
- (void)insertNewlineIgnoringFieldEditor:(id)arg1;
- (void)insertParagraphSeparator:(id)arg1;
- (void)insertTab:(id)arg1;
- (void)insertTabIgnoringFieldEditor:(id)arg1;
- (void)insertText:(id)arg1;
- (void)lowercaseWord:(id)arg1;
- (void)makeBaseWritingDirectionLeftToRight:(id)arg1;
- (void)makeBaseWritingDirectionRightToLeft:(id)arg1;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionNatural:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (void)moveBackward:(id)arg1;
- (void)moveBackwardAndModifySelection:(id)arg1;
- (void)moveDown:(id)arg1;
- (void)moveDownAndModifySelection:(id)arg1;
- (void)moveForward:(id)arg1;
- (void)moveForwardAndModifySelection:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveLeftAndModifySelection:(id)arg1;
- (void)moveParagraphBackwardAndModifySelection:(id)arg1;
- (void)moveParagraphForwardAndModifySelection:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveRightAndModifySelection:(id)arg1;
- (void)moveToBeginningOfDocument:(id)arg1;
- (void)moveToBeginningOfDocumentAndModifySelection:(id)arg1;
- (void)moveToBeginningOfLine:(id)arg1;
- (void)moveToBeginningOfLineAndModifySelection:(id)arg1;
- (void)moveToBeginningOfParagraph:(id)arg1;
- (void)moveToBeginningOfParagraphAndModifySelection:(id)arg1;
- (void)moveToBeginningOfSentence:(id)arg1;
- (void)moveToBeginningOfSentenceAndModifySelection:(id)arg1;
- (void)moveToEndOfDocument:(id)arg1;
- (void)moveToEndOfDocumentAndModifySelection:(id)arg1;
- (void)moveToEndOfLine:(id)arg1;
- (void)moveToEndOfLineAndModifySelection:(id)arg1;
- (void)moveToEndOfParagraph:(id)arg1;
- (void)moveToEndOfParagraphAndModifySelection:(id)arg1;
- (void)moveToEndOfSentence:(id)arg1;
- (void)moveToEndOfSentenceAndModifySelection:(id)arg1;
- (void)moveToLeftEndOfLine:(id)arg1;
- (void)moveToLeftEndOfLineAndModifySelection:(id)arg1;
- (void)moveToRightEndOfLine:(id)arg1;
- (void)moveToRightEndOfLineAndModifySelection:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveUpAndModifySelection:(id)arg1;
- (void)moveWordBackward:(id)arg1;
- (void)moveWordBackwardAndModifySelection:(id)arg1;
- (void)moveWordForward:(id)arg1;
- (void)moveWordForwardAndModifySelection:(id)arg1;
- (void)moveWordLeft:(id)arg1;
- (void)moveWordLeftAndModifySelection:(id)arg1;
- (void)moveWordRight:(id)arg1;
- (void)moveWordRightAndModifySelection:(id)arg1;
- (void)orderFrontSubstitutionsPanel:(id)arg1;
- (void)outdent:(id)arg1;
- (void)overWrite:(id)arg1;
- (void)pageDown:(id)arg1;
- (void)pageDownAndModifySelection:(id)arg1;
- (void)pageUp:(id)arg1;
- (void)pageUpAndModifySelection:(id)arg1;
- (void)paste:(id)arg1;
- (void)pasteAsPlainText:(id)arg1;
- (void)pasteAsRichText:(id)arg1;
- (void)pasteFont:(id)arg1;
- (void)performFindPanelAction:(id)arg1;
- (void)scrollLineDown:(id)arg1;
- (void)scrollLineUp:(id)arg1;
- (void)scrollPageDown:(id)arg1;
- (void)scrollPageUp:(id)arg1;
- (void)scrollToBeginningOfDocument:(id)arg1;
- (void)scrollToEndOfDocument:(id)arg1;
- (void)selectAll:(id)arg1;
- (void)selectLine:(id)arg1;
- (void)selectParagraph:(id)arg1;
- (void)selectSentence:(id)arg1;
- (void)selectToMark:(id)arg1;
- (void)selectWord:(id)arg1;
- (void)setMark:(id)arg1;
- (void)showGuessPanel:(id)arg1;
- (void)startSpeaking:(id)arg1;
- (void)stopSpeaking:(id)arg1;
- (void)subscript:(id)arg1;
- (void)superscript:(id)arg1;
- (void)swapWithMark:(id)arg1;
- (void)takeFindStringFromSelection:(id)arg1;
- (void)toggleBaseWritingDirection:(id)arg1;
- (void)transpose:(id)arg1;
- (id)typingAttributes;
- (void)underline:(id)arg1;
- (void)unscript:(id)arg1;
- (void)uppercaseWord:(id)arg1;
- (void)yank:(id)arg1;
- (void)yankAndSelect:(id)arg1;

// WebView (WebViewEditingInMail)

- (void)_insertNewlineInQuotedContent;
- (void)_replaceSelectionWithNode:(id)arg1 matchStyle:(BOOL)arg2;
- (BOOL)_selectionIsAll;
- (BOOL)_selectionIsCaret;
- (void)_simplifyMarkup:(id)arg1 endNode:(id)arg2;

// WebView (WebViewFontSelection)

+ (void)_setFontWhitelist:(id)arg1;

// WebView (WebViewFullScreen)

- (id)fullScreenPlaceholderView;

// WebView (WebViewGeolocation)

- (void)_geolocationDidChangePosition:(id)arg1;
- (void)_geolocationDidFailWithMessage:(id)arg1;
- (id)_geolocationProvider;
- (void)_setGeolocationProvider:(id)arg1;

// WebView (WebViewGrammarChecking)

- (BOOL)isGrammarCheckingEnabled;
- (void)setGrammarCheckingEnabled:(BOOL)arg1;
- (void)toggleGrammarChecking:(id)arg1;

// WebView (WebViewInternal)

+ (BOOL)shouldIncludeInWebKitStatistics;

- (void)_addObject:(id)arg1 forIdentifier:(unsigned long long)arg2;
- (void)_addPlaybackTargetPickerClient:(unsigned long long)arg1;
- (id)_animationControllerForDictionaryLookupPopupInfo:(const struct DictionaryPopupInfo { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_2_1_4; float x_2_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_2_1_6; struct RefPtr<WebCore::Image> { struct Image {} *x_7_2_1; } x_2_1_7; struct RefPtr<WebCore::Image> { struct Image {} *x_8_2_1; } x_2_1_8; struct Color { union { unsigned long long x_1_3_1; struct ExtendedColor {} *x_1_3_2; } x_9_2_1; } x_2_1_9; unsigned char x_2_1_10; unsigned short x_2_1_11; } x2; }*)arg1;
- (BOOL)_becomingFirstResponderFromOutside;
- (void)_clearCredentials;
- (void)_clearPlaybackControlsManager;
- (void)_clearTextIndicatorWithAnimation:(unsigned char)arg1;
- (struct CGPoint { double x1; double x2; })_convertPointFromRootView:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRectFromRootView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct WebMediaPlaybackTargetPicker { int (**x1)(); struct Page {} *x2; }*)_devicePicker;
- (struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x1; unsigned int x2; unsigned int x3; })_dictationAlternatives:(unsigned long long)arg1;
- (void)_dictionaryLookupPopoverWillClose:(id)arg1;
- (void)_dismissTextTouchBarPopoverItemWithIdentifier:(id)arg1;
- (void)_enterFullScreenForElement:(struct Element { int (**x1)(); struct Weak<WebCore::JSDOMObject> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl> { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData> { struct ElementData {} *x_13_1_1; } x13; }*)arg1;
- (void)_enterVideoFullscreenForVideoElement:(struct HTMLVideoElement { int (**x1)(); struct Weak<WebCore::JSDOMObject> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl> { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData> { struct ElementData {} *x_13_1_1; } x13; int (**x14)(); struct ScriptExecutionContext {} *x15; unsigned int x16; int (**x17)(); int (**x18)(); int (**x19)(); int (**x20)(); int (**x21)(); int (**x22)(); int (**x23)(); int (**x24)(); int (**x25)(); int (**x26)(); int (**x27)(); struct WeakPtrFactory<WebCore::HTMLMediaElement> { struct Ref<WTF::WeakReference<WebCore::HTMLMediaElement> > { struct WeakReference<WebCore::HTMLMediaElement> {} *x_1_2_1; } x_28_1_1; } x28; struct Timer { int (**x_29_1_1)(); struct MonotonicTime { double x_2_2_1; } x_29_1_2; struct MonotonicTime { double x_3_2_1; } x_29_1_3; struct Seconds { double x_4_2_1; } x_29_1_4; int x_29_1_5; unsigned int x_29_1_6; struct Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow, 16> {} *x_29_1_7; struct Function<void ()>={unique_ptr<WTF::Function<void ()>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >={__compressed_pair<WTF::Function<void ()>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >=^{CallableWrapperBase {} x_29_1_8; } x29; }*)arg1 mode:(unsigned int)arg2;
- (void)_exitFullScreenForElement:(struct Element { int (**x1)(); struct Weak<WebCore::JSDOMObject> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl> { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData> { struct ElementData {} *x_13_1_1; } x13; }*)arg1;
- (void)_exitVideoFullscreen;
- (BOOL)_flushCompositingChanges;
- (void)_getWebCoreDictationAlternatives:(struct Vector<WebCore::DictationAlternative, 0, WTF::CrashOnOverflow, 16> { struct DictationAlternative {} *x1; unsigned int x2; unsigned int x3; }*)arg1 fromTextAlternatives:(const struct Vector<WebCore::TextAlternativeWithRange, 0, WTF::CrashOnOverflow, 16> { struct TextAlternativeWithRange {} *x1; unsigned int x2; unsigned int x3; }*)arg2;
- (BOOL)_hasActiveVideoForControlsInterface;
- (id)_immediateActionController;
- (BOOL)_isRichlyEditable;
- (int)_keyboardUIMode;
- (struct Frame { int (**x1)(); struct atomic<unsigned int> { unsigned int x_2_1_1; } x2; struct HashSet<WebCore::FrameDestructionObserver *, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct HashTable<WebCore::FrameDestructionObserver *, WebCore::FrameDestructionObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct FrameDestructionObserver {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_3_1_1; } x3; struct MainFrame {} *x4; struct Page {} *x5; struct RefPtr<WebCore::Settings> { struct Settings {} *x_6_1_1; } x6; struct FrameTree { struct Frame {} *x_7_1_1; struct Frame {} *x_7_1_2; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_3_2_1; } x_7_1_3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_4_2_1; } x_7_1_4; struct RefPtr<WebCore::Frame> { struct Frame {} *x_5_2_1; } x_7_1_5; struct Frame {} *x_7_1_6; struct RefPtr<WebCore::Frame> { struct Frame {} *x_7_2_1; } x_7_1_7; struct Frame {} *x_7_1_8; unsigned int x_7_1_9; } x7; }*)_mainCoreFrame;
- (BOOL)_needsOneShotDrawingSynchronization;
- (id)_objectForIdentifier:(unsigned long long)arg1;
- (id)_passwordTextTouchBarDefaultItemIdentifiers;
- (id)_plainTextTouchBarDefaultItemIdentifiers;
- (void)_playbackTargetPickerClientStateDidChange:(unsigned long long)arg1 state:(unsigned int)arg2;
- (void)_prepareForDictionaryLookup;
- (id)_pressureEvent;
- (void)_removeDictationAlternatives:(unsigned long long)arg1;
- (void)_removeObjectForIdentifier:(unsigned long long)arg1;
- (void)_removePlaybackTargetPickerClient:(unsigned long long)arg1;
- (void)_retrieveKeyboardUIModeFromPreferences:(id)arg1;
- (id)_richTextTouchBarDefaultItemIdentifiers;
- (void)_scheduleCompositingLayerFlush;
- (id)_selectedOrMainFrame;
- (struct WebSelectionServiceController { int (**x1)(); id x2; /* Warning: Unrecognized filer type: 'R' using 'void*' */ void*x3; void*x4; void*x5; void*x6; int x7; in void*x8; void*x9; const void*x10; void*x11; void*x12; unsigned int x13/* : ? */; unsigned short x14; void*x15; void*x16; const int x17; in void*x18; unsigned short x19; void*x20; const void x21; int x22; BOOL x23; void*x24; void*x25; int x26; BOOL x27; void*x28; void*x29; const unsigned char x30; out in void*x31; const out long x32; long x33; void*x34; const void*x35; void*x36; void *x37; }*)_selectionServiceController;
- (void)_setInsertionPasteboard:(id)arg1;
- (void)_setMockMediaPlaybackTargetPickerEnabled:(bool)arg1;
- (void)_setMockMediaPlaybackTargetPickerName:(id)arg1 state:(unsigned int)arg2;
- (void)_setNeedsOneShotDrawingSynchronization:(BOOL)arg1;
- (void)_setPressureEvent:(id)arg1;
- (void)_setTextIndicator:(struct TextIndicator { unsigned int x1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_2_1_4; float x_2_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_2_1_6; struct RefPtr<WebCore::Image> { struct Image {} *x_7_2_1; } x_2_1_7; struct RefPtr<WebCore::Image> { struct Image {} *x_8_2_1; } x_2_1_8; struct Color { union { unsigned long long x_1_3_1; struct ExtendedColor {} *x_1_3_2; } x_9_2_1; } x_2_1_9; unsigned char x_2_1_10; unsigned short x_2_1_11; } x2; }*)arg1;
- (void)_setTextIndicator:(struct TextIndicator { unsigned int x1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_2_1_4; float x_2_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_2_1_6; struct RefPtr<WebCore::Image> { struct Image {} *x_7_2_1; } x_2_1_7; struct RefPtr<WebCore::Image> { struct Image {} *x_8_2_1; } x_2_1_8; struct Color { union { unsigned long long x_1_3_1; struct ExtendedColor {} *x_1_3_2; } x_9_2_1; } x_2_1_9; unsigned char x_2_1_10; unsigned short x_2_1_11; } x2; }*)arg1 withLifetime:(unsigned char)arg2;
- (void)_setTextIndicatorAnimationProgress:(float)arg1;
- (void)_setUpPlaybackControlsManagerForMediaElement:(struct HTMLMediaElement { int (**x1)(); struct Weak<WebCore::JSDOMObject> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl> { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData> { struct ElementData {} *x_13_1_1; } x13; int (**x14)(); struct ScriptExecutionContext {} *x15; unsigned int x16; int (**x17)(); int (**x18)(); int (**x19)(); int (**x20)(); int (**x21)(); int (**x22)(); int (**x23)(); int (**x24)(); int (**x25)(); int (**x26)(); int (**x27)(); struct WeakPtrFactory<WebCore::HTMLMediaElement> { struct Ref<WTF::WeakReference<WebCore::HTMLMediaElement> > { struct WeakReference<WebCore::HTMLMediaElement> {} *x_1_2_1; } x_28_1_1; } x28; struct Timer { int (**x_29_1_1)(); struct MonotonicTime { double x_2_2_1; } x_29_1_2; struct MonotonicTime { double x_3_2_1; } x_29_1_3; struct Seconds { double x_4_2_1; } x_29_1_4; int x_29_1_5; unsigned int x_29_1_6; struct Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow, 16> {} *x_29_1_7; struct Function<void ()>={unique_ptr<WTF::Function<void ()>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >={__compressed_pair<WTF::Function<void ()>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >=^{CallableWrapperBase {} x_29_1_8; } x29; }*)arg1;
- (void)_showDictationAlternativeUI:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 forDictationContext:(unsigned long long)arg2;
- (void)_showDictionaryLookupPopup:(const struct DictionaryPopupInfo { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_2_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_2_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_2_1_3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_2_1_4; float x_2_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_2_1_6; struct RefPtr<WebCore::Image> { struct Image {} *x_7_2_1; } x_2_1_7; struct RefPtr<WebCore::Image> { struct Image {} *x_8_2_1; } x_2_1_8; struct Color { union { unsigned long long x_1_3_1; struct ExtendedColor {} *x_1_3_2; } x_9_2_1; } x_2_1_9; unsigned char x_2_1_10; unsigned short x_2_1_11; } x2; }*)arg1;
- (void)_showPlaybackTargetPicker:(unsigned long long)arg1 location:(const struct IntPoint { int x1; int x2; }*)arg2 hasVideo:(BOOL)arg3;
- (BOOL)_supportsFullScreenForElement:(const struct Element { int (**x1)(); struct Weak<WebCore::JSDOMObject> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl> { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData> { struct ElementData {} *x_13_1_1; } x13; }*)arg1 withKeyboard:(BOOL)arg2;
- (id)_textTouchBarCustomizationAllowedIdentifiers;
- (id)candidateList;
- (void)didChangeAutomaticTextCompletion:(id)arg1;
- (void)handleAcceptedAlternativeText:(id)arg1;
- (void)hideFormValidationMessage;
- (void)prepareForMouseDown;
- (void)prepareForMouseUp;
- (void)setUpTextTouchBar:(id)arg1;
- (void)showFormValidationMessage:(id)arg1 withAnchorRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)textTouchBar;
- (void)touchBarDidExitCustomization:(id)arg1;
- (void)touchBarWillEnterCustomization:(id)arg1;
- (void)updateMediaTouchBar;
- (void)updateTextTouchBar;
- (void)updateTouchBar;

// WebView (WebViewNotification)

- (void)_notificationDidClick:(unsigned long long)arg1;
- (void)_notificationDidShow:(unsigned long long)arg1;
- (unsigned long long)_notificationIDForTesting:(struct OpaqueJSValue { }*)arg1;
- (id)_notificationProvider;
- (void)_notificationsDidClose:(id)arg1;
- (void)_setNotificationProvider:(id)arg1;

// WebView (WebViewPrintingPrivate)

- (void)_adjustPrintingMarginsForHeaderAndFooter;
- (void)_drawFooterInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawHeaderAndFooter;
- (void)_drawHeaderInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (float)_footerHeight;
- (float)_headerHeight;

// WebView (WebViewTextChecking)

- (BOOL)isAutomaticDashSubstitutionEnabled;
- (BOOL)isAutomaticLinkDetectionEnabled;
- (BOOL)isAutomaticQuoteSubstitutionEnabled;
- (BOOL)isAutomaticSpellingCorrectionEnabled;
- (BOOL)isAutomaticTextReplacementEnabled;
- (void)setAutomaticDashSubstitutionEnabled:(BOOL)arg1;
- (void)setAutomaticLinkDetectionEnabled:(BOOL)arg1;
- (void)setAutomaticQuoteSubstitutionEnabled:(BOOL)arg1;
- (void)setAutomaticSpellingCorrectionEnabled:(BOOL)arg1;
- (void)setAutomaticTextReplacementEnabled:(BOOL)arg1;
- (void)toggleAutomaticDashSubstitution:(id)arg1;
- (void)toggleAutomaticLinkDetection:(id)arg1;
- (void)toggleAutomaticQuoteSubstitution:(id)arg1;
- (void)toggleAutomaticSpellingCorrection:(id)arg1;
- (void)toggleAutomaticTextReplacement:(id)arg1;

// WebView (WebViewUndoableEditing)

- (void)applyStyle:(id)arg1;
- (void)deleteSelection;
- (void)replaceSelectionWithArchive:(id)arg1;
- (void)replaceSelectionWithMarkupString:(id)arg1;
- (void)replaceSelectionWithNode:(id)arg1;
- (void)replaceSelectionWithText:(id)arg1;

// WebView (WebViewUserMedia)

- (void)_setUserMediaClient:(id)arg1;
- (id)_userMediaClient;

// Image: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Debugger/libViewDebuggerSupport.dylib

// WebView (DebugHierarchyAdditions)

- (id)debugHierarchyPropertyDescriptions;

@end
