/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebKitLegacy.framework/Versions/A/WebKitLegacy
 */

@interface WebPDFView : NSView <PDFViewDelegate, WebDocumentElement, WebDocumentIncrementalSearching, WebDocumentPDF, WebDocumentSearching, WebDocumentSelection, WebDocumentView, WebMultipleTextMatches, _WebDocumentViewState, _WebDocumentZooming> {
    PDFView * PDFSubview;
    PDFView * PDFSubviewProxy;
    BOOL  _ignoreScaleAndDisplayModeAndPageNotifications;
    BOOL  _willUpdatePreferencesSoon;
    WebDataSource * dataSource;
    BOOL  firstResponderIsPDFDocumentView;
    struct CGPoint { 
        double x; 
        double y; 
    }  lastScrollPosition;
    NSString * path;
    NSView * previewView;
    NSArray * textMatches;
    BOOL  written;
}

@property (atomic, readonly, copy) NSString *debugDescription;
@property (atomic, readonly, copy) NSString *description;
@property (atomic, readonly) unsigned long long hash;
@property (atomic, readonly) Class superclass;

+ (id)PDFKitBundle;
+ (id)supportedMIMETypes;

- (id)PDFDocument;
- (void)PDFViewOpenPDFInNativeApplication:(id)arg1;
- (void)PDFViewPerformPrint:(id)arg1;
- (void)PDFViewSavePDFToDownloadFolder:(id)arg1;
- (void)PDFViewWillClickOnLink:(id)arg1 withURL:(id)arg2;
- (BOOL)_canResetZoom;
- (BOOL)_canZoomIn;
- (BOOL)_canZoomOut;
- (void)_recursive:(BOOL)arg1 displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(id)arg3 topView:(BOOL)arg4;
- (void)_recursive:(BOOL)arg1 displayRectIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inGraphicsContext:(id)arg3 CGContext:(struct CGContext { }*)arg4 topView:(BOOL)arg5 shouldChangeFontReferenceColor:(BOOL)arg6;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)arg1 visRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_recursiveDisplayRectIfNeededIgnoringOpacity:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isVisibleRect:(BOOL)arg2 rectIsVisibleRectForView:(id)arg3 topView:(BOOL)arg4;
- (void)_resetZoom:(id)arg1;
- (void)_zoomIn:(id)arg1;
- (void)_zoomOut:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (id)attributedString;
- (BOOL)becomeFirstResponder;
- (BOOL)canPrintHeadersAndFooters;
- (void)centerSelectionInVisibleArea:(id)arg1;
- (void)copy:(id)arg1;
- (unsigned long long)countMatchesForText:(id)arg1 inDOMRange:(id)arg2 options:(unsigned long long)arg3 limit:(unsigned long long)arg4 markMatches:(BOOL)arg5;
- (void)dataSourceUpdated:(id)arg1;
- (void)dealloc;
- (void)deselectAll;
- (id)elementAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)elementAtPoint:(struct CGPoint { double x1; double x2; })arg1 allowShadowContent:(BOOL)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)jumpToSelection:(id)arg1;
- (void)layout;
- (BOOL)markedTextMatchesAreHighlighted;
- (id)menuForEvent:(id)arg1;
- (id)pasteboardTypesForSelection;
- (id)printOperationWithPrintInfo:(id)arg1;
- (id)rectsForTextMatches;
- (void)scrollLineDown:(id)arg1;
- (void)scrollLineUp:(id)arg1;
- (void)scrollPageDown:(id)arg1;
- (void)scrollPageUp:(id)arg1;
- (struct CGPoint { double x1; double x2; })scrollPoint;
- (void)scrollToBeginningOfDocument:(id)arg1;
- (void)scrollToEndOfDocument:(id)arg1;
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4;
- (BOOL)searchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4 startInSelection:(BOOL)arg5;
- (void)selectAll;
- (id)selectedAttributedString;
- (id)selectedString;
- (id)selectionImageForcingBlackText:(BOOL)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionImageRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (id)selectionTextRects;
- (id)selectionView;
- (void)setDataSource:(id)arg1;
- (void)setMarkedTextMatchesAreHighlighted:(BOOL)arg1;
- (void)setNeedsLayout:(BOOL)arg1;
- (void)setNextKeyView:(id)arg1;
- (void)setPDFDocument:(id)arg1;
- (void)setScrollPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setViewState:(id)arg1;
- (id)string;
- (BOOL)supportsTextEncoding;
- (void)takeFindStringFromSelection:(id)arg1;
- (void)unmarkAllTextMatches;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)validateUserInterfaceItemWithoutDelegate:(id)arg1;
- (void)viewDidMoveToHostWindow;
- (void)viewDidMoveToWindow;
- (id)viewState;
- (void)viewWillMoveToHostWindow:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)writeSelectionWithPasteboardTypes:(id)arg1 toPasteboard:(id)arg2;

// WebPDFView (FileInternal)

+ (Class)_PDFPreviewViewClass;
+ (Class)_PDFSelectionClass;
+ (Class)_PDFViewClass;

- (void)_PDFDocumentViewMightHaveScrolled:(id)arg1;
- (id)_PDFSubview;
- (void)_applyPDFDefaults;
- (BOOL)_canLookUpInDictionary;
- (id)_clipViewForPDFDocumentView;
- (id)_fakeKeyEventWithFunctionKey:(unsigned short)arg1;
- (void)_lookUpInDictionaryFromMenu:(id)arg1;
- (id)_menuItemsFromPDFKitForEvent:(id)arg1;
- (id)_nextMatchFor:(id)arg1 direction:(BOOL)arg2 caseSensitive:(BOOL)arg3 wrap:(BOOL)arg4 fromSelection:(id)arg5 startInSelection:(BOOL)arg6;
- (void)_openWithFinder:(id)arg1;
- (id)_path;
- (BOOL)_pointIsInSelection:(struct CGPoint { double x1; double x2; })arg1;
- (void)_scaleOrDisplayModeOrPageChanged:(id)arg1;
- (id)_scaledAttributedString:(id)arg1;
- (void)_setTextMatches:(id)arg1;
- (id)_temporaryPDFDirectoryPath;
- (void)_trackFirstResponder;
- (void)_updatePreferences:(id)arg1;
- (void)_updatePreferencesSoon;
- (id)_visiblePDFPages;

@end
